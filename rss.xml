<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel><description>技术小黑屋 (converted from Atom 1.0)
					</description>

  <title>技术小黑屋</title>
  <!-- source: http://droidyue.com/atom.xml -->
  <link>http://droidyue.com/</link>
  <pubDate>Tue, 01 Sep 2015 14:56:21 GMT</pubDate>
  
  
  

  
  <item><description>&lt;p&gt;小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;一大串SQL语句，居然一下就成功了&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww3.sinaimg.cn/large/6a195423gw1evl10lqd89g20b406ae1x.gif"&gt;&lt;/p&gt;

&lt;h2&gt;演示过程中，我的bug没有被发现&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww2.sinaimg.cn/large/6a195423gw1evl11fgzejg208904otyt.gif"&gt;&lt;/p&gt;

&lt;h2&gt;一个新手说要加一个功能&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl12z53cjg208x056u0x.gif"&gt;&lt;/p&gt;

&lt;h2&gt;一切进展顺利的演示，突然系统崩溃了&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl14bd1r0g20b4069npd.gif"&gt;&lt;/p&gt;

&lt;h2&gt;网站大改版，使用IE测了一下&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl154a1ieg208p06ox6p.gif"&gt;&lt;/p&gt;

&lt;h2&gt;周五下午被别人求助&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww3.sinaimg.cn/large/6a195423gw1evl15r159kg208c0454h0.gif"&gt;&lt;/p&gt;

&lt;h2&gt;上线前两天，客户突然要更改需求&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww1.sinaimg.cn/large/6a195423gw1evl16929ytg20b40657wh.gif"&gt;&lt;/p&gt;

&lt;h2&gt;按照一篇文章操作，却发现一箩筐错误&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl16z15uyg20dw06fdtf.gif"&gt;&lt;/p&gt;

&lt;h2&gt;被要求去修改正则表达式&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww1.sinaimg.cn/large/6a195423gw1evl17fnuodg20d90707wh.gif"&gt;&lt;/p&gt;

&lt;h2&gt;原文信息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://howtodoinjava.com/2013/03/22/life-of-a-programmer-in-pictures-part-2/"&gt;http://howtodoinjava.com/2013/03/22/life-of-a-programmer-in-pictures-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;本文会消耗大量的七牛CDN流量，建议进行&lt;a href="http://droidyue.com/donate/"&gt;捐赠支持&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h2&gt;程序员的逗比瞬间全系列&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series"&gt;程序员的逗比瞬间（第一季）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series"&gt;程序员的逗比瞬间（第二季）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>程序员的逗比瞬间（第二季）</title>
    <link>http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/</link>
    <pubDate>Sat, 29 Aug 2015 10:03:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/08/29/funny-programmer-season-two</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;h2&gt;版权说明&lt;/h2&gt;

&lt;p&gt;本文为 InfoQ 中文站特供稿件，首发地址为：&lt;a href="http://www.infoq.com/cn/articles/Java-PERMGEN-Removed"&gt;Java永久代去哪儿了&lt;/a&gt;。如需转载，请与 InfoQ 中文站联系。&lt;/p&gt;

&lt;h2&gt;摘要&lt;/h2&gt;

&lt;p&gt;在JDK8之前，类的元数据和常量都存放在一个与堆内存相邻的数据区，即永久代。但是在这种情况下有一个问题，如果类的元数据大小超过了应用的可分配内存，那么就会出现内存溢出问题。在JDK8之后，永久代被移除，原本存储在永久代的数据将存放在一个叫做元空间的本地内存区域。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;在Java虚拟机（以下简称JVM）中，类包含其对应的元数据，比如类的层级信息，方法数据和方法信息（如字节码，栈和变量大小），运行时常量池，已确定的符号引用和虚方法表。&lt;/p&gt;

&lt;p&gt;在过去（当自定义类加载器使用不普遍的时候），类几乎是“静态的”并且很少被卸载和回收，因此类也可以被看成“永久的”。另外由于类作为JVM实现的一部分，它们不由程序来创建，因为它们也被认为是“非堆”的内存。&lt;/p&gt;

&lt;p&gt;在JDK8之前的HotSpot虚拟机中，类的这些“永久的”数据存放在一个叫做永久代的区域。永久代一段连续的内存空间，我们在JVM启动之前可以通过设置-XX:MaxPermSize的值来控制永久代的大小，32位机器默认的永久代的大小为64M，64位的机器则为85M。永久代的垃圾回收和老年代的垃圾回收是绑定的，一旦其中一个区域被占满，这两个区都要进行垃圾回收。但是有一个明显的问题，由于我们可以通过‑XX:MaxPermSize 设置永久代的大小，一旦类的元数据超过了设定的大小，程序就会耗尽内存，并出现内存溢出错误(OOM)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：在JDK7之前的HotSpot虚拟机中，纳入字符串常量池的字符串被存储在永久代中，因此导致了一系列的性能问题和内存溢出错误。想要了解这些永久代移除这些字符串的信息，请访问&lt;a href="http://bugs.java.com/view_bug.do?bug_id=6962931"&gt;这里&lt;/a&gt;查看。&lt;/p&gt;

&lt;h2&gt;辞永久代，迎元空间&lt;/h2&gt;

&lt;p&gt;随着Java8的到来，我们再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域就是我们要提到的元空间。&lt;/p&gt;

&lt;p&gt;这项改动是很有必要的，因为对永久代进行调优是很困难的。永久代中的元数据可能会随着每一次Full GC发生而进行移动。并且为永久代设置空间大小也是很难确定的，因为这其中有很多影响因素，比如类的总数，常量池的大小和方法数量等。&lt;/p&gt;

&lt;p&gt;同时，HotSpot虚拟机的每种类型的垃圾回收器都需要特殊处理永久代中的元数据。将元数据从永久代剥离出来，不仅实现了对元空间的无缝管理，还可以简化Full GC以及对以后的并发隔离类元数据等方面进行优化。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/removal_of_permen_gen.jpg"&gt;&lt;/p&gt;

&lt;h2&gt;移除永久代的影响&lt;/h2&gt;

&lt;p&gt;由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。因此，我们就不会遇到永久代存在时的内存溢出错误，也不会出现泄漏的数据移到交换区这样的事情。最终用户可以为元空间设置一个可用空间最大值，如果不进行设置，JVM会自动根据类的元数据大小动态增加元空间的容量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：永久代的移除并不代表自定义的类加载器泄露问题就解决了。因此，你还必须监控你的内存消耗情况，因为一旦发生泄漏，会占用你的大量本地内存，并且还可能导致交换区交换更加糟糕。&lt;/p&gt;

&lt;h2&gt;元空间内存管理&lt;/h2&gt;

&lt;p&gt;元空间的内存管理由元空间虚拟机来完成。先前，对于类的元数据我们需要不同的垃圾回收器进行处理，现在只需要执行元空间虚拟机的C++代码即可完成。在元空间中，类和其元数据的生命周期和其对应的类加载器是相同的。话句话说，只要类加载器存活，其加载的类的元数据也是存活的，因而不会被回收掉。&lt;/p&gt;

&lt;p&gt;我们从行文到现在提到的元空间稍微有点不严谨。准确的来说，每一个类加载器的存储区域都称作一个元空间，所有的元空间合在一起就是我们一直说的元空间。当一个类加载器被垃圾回收器标记为不再存活，其对应的元空间会被回收。在元空间的回收过程中没有重定位和压缩等操作。但是元空间内的元数据会进行扫描来确定Java引用。&lt;/p&gt;

&lt;p&gt;元空间虚拟机负责元空间的分配，其采用的形式为组块分配。组块的大小因类加载器的类型而异。在元空间虚拟机中存在一个全局的空闲组块列表。当一个类加载器需要组块时，它就会从这个全局的组块列表中获取并维持一个自己的组块列表。当一个类加载器不再存活，那么其持有的组块将会被释放，并返回给全局组块列表。类加载器持有的组块又会被分成多个块，每一个块存储一个单元的元信息。组块中的块是线性分配（指针碰撞分配形式）。组块分配自内存映射区域。这些全局的虚拟内存映射区域以链表形式连接，一旦某个虚拟内存映射区域清空，这部分内存就会返回给操作系统。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/mmap_virtual_space.jpg"&gt;&lt;/p&gt;

&lt;p&gt;上图展示的是虚拟内存映射区域如何进行元组块的分配。类加载器1和3表明使用了反射或者为匿名类加载器，他们使用了特定大小组块。 而类加载器2和4根据其内部条目的数量使用小型或者中型的组块。&lt;/p&gt;

&lt;h2&gt;元空间调优与工具&lt;/h2&gt;

&lt;p&gt;正如上面提到的，元空间虚拟机控制元空间的增长。但是有些时候我们想限制其增长，比如通过显式在命令行中设置-XX:MaxMetaspaceSize。默认情况下，-XX:MaxMetaspaceSize的值没有限制，因此元空间甚至可以延伸到交换区，但是这时候当我们进行本地内存分配时将会失败。&lt;/p&gt;

&lt;p&gt;对于一个64位的服务器端JVM来说，其默认的–XX:MetaspaceSize值为21MB。这就是初始的高水位线。一旦触及到这个水位线，Full GC将会被触发并卸载没有用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，这个高水位线则上升。如果释放空间过多，则高水位线下降。如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志我们可以观察到Full GC多次调用。为了避免频繁的GC，建议将–XX:MetaspaceSize设置为一个相对较高的值。&lt;/p&gt;

&lt;p&gt;经过多次GC之后，元空间虚拟机自动调节高水位线，以此来推迟下一次垃圾回收到来。&lt;/p&gt;

&lt;p&gt;有这样两个选项 ‑XX:MinMetaspaceFreeRatio和‑XX:MaxMetaspaceFreeRatio，他们类似于GC的FreeRatio选项，用来设置元空间空闲比例的最大值和最小值。我们可以通过命令行对这两个选项设置对应的值。&lt;/p&gt;

&lt;p&gt;下面是一些改进的工具，用来获取更多关于元空间的信息。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jmap -clstats PID 打印类加载器数据。（-clstats是-permstat的替代方案，在JDK8之前，-permstat用来打印类加载器的数据）。下面的例子输出就是DaCapo’s Avrora benchmark程序的类加载器数据&lt;/li&gt;
&lt;/ul&gt;


&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='line'&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;jmap -clstats &amp;lt;PID&amp;gt;
&lt;/span&gt;&lt;span class='line'&gt;Attaching to process ID 6476, please wait...
&lt;/span&gt;&lt;span class='line'&gt;Debugger attached successfully.
&lt;/span&gt;&lt;span class='line'&gt;Server compiler detected.
&lt;/span&gt;&lt;span class='line'&gt;JVM version is 25.5-b02
&lt;/span&gt;&lt;span class='line'&gt;finding class loader instances ..done.
&lt;/span&gt;&lt;span class='line'&gt;computing per loader stat ..done.
&lt;/span&gt;&lt;span class='line'&gt;please wait.. computing liveness.liveness analysis may be inaccurate ...
&lt;/span&gt;&lt;span class='line'&gt;class_loader classes      bytes parent_loader     alive? &lt;span class="nb"&gt;type&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&amp;lt;bootstrap&amp;gt;     655  1222734     null   live   &amp;lt;internal&amp;gt;
&lt;/span&gt;&lt;span class='line'&gt;0x000000074004a6c0    0   0   0x000000074004a708  dead    java/util/ResourceBundle&lt;span class="nv"&gt;$RBClassLoader&lt;/span&gt;@0x00000007c0053e20
&lt;/span&gt;&lt;span class='line'&gt;0x000000074004a760    0   0     null      dead    sun/misc/Launcher&lt;span class="nv"&gt;$ExtClassLoader&lt;/span&gt;@0x00000007c002d248
&lt;/span&gt;&lt;span class='line'&gt;0x00000007401189c8    1   1471 0x00000007400752f8 dead    sun/reflect/DelegatingClassLoader@0x00000007c0009870
&lt;/span&gt;&lt;span class='line'&gt;0x000000074004a708    116   316053    0x000000074004a760   dead   sun/misc/Launcher&lt;span class="nv"&gt;$AppClassLoader&lt;/span&gt;@0x00000007c0038190
&lt;/span&gt;&lt;span class='line'&gt;0x00000007400752f8    538  773854 0x000000074004a708   dead   org/dacapo/harness/DacapoClassLoader@0x00000007c00638b0
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nv"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 6      1310   2314112          N/A    &lt;span class="nv"&gt;alive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;dead&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5    N/A
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jstat -gc LVMID&lt;/strong&gt; 用来打印元空间的信息，具体内容如下&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/jstat.jpg"&gt;
  * &lt;strong&gt;jcmd PID GC.class_stats&lt;/strong&gt; 一个新的诊断命令，用来连接到运行的JVM并输出详尽的类元数据的柱状图。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：在JDK 6 build 13下，需要加上&lt;strong&gt;‑XX:+UnlockDiagnosticVMOptions&lt;/strong&gt; 才能正确使用jcmd这个命令。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='line'&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;jcmd &amp;lt;PID&amp;gt; &lt;span class="nb"&gt;help &lt;/span&gt;GC.class_stats
&lt;/span&gt;&lt;span class='line'&gt;9522:
&lt;/span&gt;&lt;span class='line'&gt;GC.class_stats
&lt;/span&gt;&lt;span class='line'&gt;Provide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions.
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;Impact: High: Depends on Java heap size and content.
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;Syntax : GC.class_stats &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;columns&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;Arguments:
&lt;/span&gt;&lt;span class='line'&gt;  columns : &lt;span class="o"&gt;[&lt;/span&gt;optional&lt;span class="o"&gt;]&lt;/span&gt; Comma-separated list of all the columns to show. If not specified, the following columns are shown: InstBytes,KlassBytes,CpAll,annotations,MethodCount,Bytecodes,MethodAll,ROAll,RWAll,Total &lt;span class="o"&gt;(&lt;/span&gt;STRING, no default value&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;Options: &lt;span class="o"&gt;(&lt;/span&gt;options must be specified using the &amp;lt;key&amp;gt; or &amp;lt;key&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;value&amp;gt; syntax&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  -all : &lt;span class="o"&gt;[&lt;/span&gt;optional&lt;span class="o"&gt;]&lt;/span&gt; Show all columns &lt;span class="o"&gt;(&lt;/span&gt;BOOLEAN, &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  -csv : &lt;span class="o"&gt;[&lt;/span&gt;optional&lt;span class="o"&gt;]&lt;/span&gt; Print in CSV &lt;span class="o"&gt;(&lt;/span&gt;comma-separated values&lt;span class="o"&gt;)&lt;/span&gt; format &lt;span class="k"&gt;for &lt;/span&gt;spreadsheets &lt;span class="o"&gt;(&lt;/span&gt;BOOLEAN, &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  -help : &lt;span class="o"&gt;[&lt;/span&gt;optional&lt;span class="o"&gt;]&lt;/span&gt; Show meaning of all the columns &lt;span class="o"&gt;(&lt;/span&gt;BOOLEAN, &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果想了解字段的更多信息，请访问&lt;a href="https://bugs.openjdk.java.net/secure/attachment/11600/ver_010_help.txt"&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用jcmd的示例输出&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;span class='line-number'&gt;18&lt;/span&gt;
&lt;span class='line-number'&gt;19&lt;/span&gt;
&lt;span class='line-number'&gt;20&lt;/span&gt;
&lt;span class='line-number'&gt;21&lt;/span&gt;
&lt;span class='line-number'&gt;22&lt;/span&gt;
&lt;span class='line-number'&gt;23&lt;/span&gt;
&lt;span class='line-number'&gt;24&lt;/span&gt;
&lt;span class='line-number'&gt;25&lt;/span&gt;
&lt;span class='line-number'&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='line'&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;jcmd &amp;lt;PID&amp;gt; GC.class_stats
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;7140:
&lt;/span&gt;&lt;span class='line'&gt;Index Super InstBytes KlassBytes annotations   CpAll MethodCount Bytecodes MethodAll   ROAll   RWAll   Total ClassName
&lt;/span&gt;&lt;span class='line'&gt;  1   -1  426416      480         0       0           0       0       0   24  576     600 &lt;span class="o"&gt;[&lt;/span&gt;C
&lt;/span&gt;&lt;span class='line'&gt;  2   -1  290136      480         0       0           0       0       0   40  576     616 &lt;span class="o"&gt;[&lt;/span&gt;Lavrora.arch.legacy.LegacyInstr;
&lt;/span&gt;&lt;span class='line'&gt;  3   -1  269840      480         0       0           0       0       0   24  576     600 &lt;span class="o"&gt;[&lt;/span&gt;B
&lt;/span&gt;&lt;span class='line'&gt;  4   43  137856      648         0   19248       129     4886    25288   16368   30568   46936 java.lang.Class
&lt;/span&gt;&lt;span class='line'&gt;  5   43  136968      624         0   8760        94      4570    33616   12072   32000   44072 java.lang.String
&lt;/span&gt;&lt;span class='line'&gt;  6   43  75872       560         0   1296        7       149     1400    880 2680    3560 java.util.HashMap&lt;span class="nv"&gt;$Node&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  7   836     57408       608         0   720         3       69      1480    528 2488    3016 avrora.sim.util.MulticastFSMProbe
&lt;/span&gt;&lt;span class='line'&gt;  8   43  55488       504         0   680         1       31      440     280 1536    1816 avrora.sim.FiniteStateMachine&lt;span class="nv"&gt;$State&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  9   -1  53712       480         0       0           0       0       0   24  576     600 &lt;span class="o"&gt;[&lt;/span&gt;Ljava.lang.Object;
&lt;/span&gt;&lt;span class='line'&gt;   10 -1  49424       480         0       0           0       0       0   24  576     600 &lt;span class="o"&gt;[&lt;/span&gt;I
&lt;/span&gt;&lt;span class='line'&gt;   11 -1  49248       480         0       0           0       0       0   24  576     600 &lt;span class="o"&gt;[&lt;/span&gt;Lavrora.sim.platform.ExternalFlash&lt;span class="nv"&gt;$Page&lt;/span&gt;;
&lt;/span&gt;&lt;span class='line'&gt;   12 -1  24400       480         0       0           0       0       0   32  576     608 &lt;span class="o"&gt;[&lt;/span&gt;Ljava.util.HashMap&lt;span class="nv"&gt;$Node&lt;/span&gt;;
&lt;/span&gt;&lt;span class='line'&gt;   13   394   21408       520         0   600         3       33      1216    432 2080    2512 avrora.sim.AtmelInterpreter&lt;span class="nv"&gt;$IORegBehavior&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;   14   727   19800       672         0   968         4       71      1240    664 2472    3136 avrora.arch.legacy.LegacyInstr&lt;span class="nv"&gt;$MOVW&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;…&amp;lt;snipped&amp;gt;
&lt;/span&gt;&lt;span class='line'&gt;…&amp;lt;snipped&amp;gt;
&lt;/span&gt;&lt;span class='line'&gt;1299  1300        0       608         0   256         1       5       152     104 1024    1128 sun.util.resources.LocaleNamesBundle
&lt;/span&gt;&lt;span class='line'&gt; 1300  1098       0       608         0   1744        10      290     1808    1176    3208    4384 sun.util.resources.OpenListResourceBundle
&lt;/span&gt;&lt;span class='line'&gt; 1301  1098       0       616         0   2184        12      395     2200    1480    3800    5280 sun.util.resources.ParallelListResourceBundle
&lt;/span&gt;&lt;span class='line'&gt;              2244312     794288      2024 2260976    12801   561882   3135144 1906688 4684704 6591392 Total
&lt;/span&gt;&lt;span class='line'&gt;              34.0%   12.1%       0.0%   34.3%        -   8.5%    47.6%   28.9%   71.1%  100.0%
&lt;/span&gt;&lt;span class='line'&gt;Index Super InstBytes KlassBytes annotations   CpAll MethodCount Bytecodes MethodAll   ROAll   RWAll   Total ClassName
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;存在的问题&lt;/h2&gt;

&lt;p&gt;前面已经提到，元空间虚拟机采用了组块分配的形式，同时区块的大小由类加载器类型决定。类信息并不是固定大小，因此有可能分配的空闲区块和类需要的区块大小不同，这种情况下可能导致碎片存在。元空间虚拟机目前并不支持压缩操作，所以碎片化是目前最大的问题。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/fragment_issue.jpg"&gt;&lt;/p&gt;

&lt;h2&gt;关于作者&lt;/h2&gt;

&lt;p&gt;Monica Beckwith是一位在硬件行业有着10多年经验的性能研究工程师。她目前在Servergy公司任性能架构师一职。该公司为一家提供高效服务器的创业公司。此外，Monica曾在Sun，Oracle和AMD等公司致力于服务器端JVM优化。Monica还是JavaOne 2013会议的演讲嘉宾。想要关注的可以在twitter上查找@mon_beck。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看英文原文：&lt;/strong&gt;&lt;a href="http://www.infoq.com/articles/Java-PERMGEN-Removed"&gt;Where Has the Java PermGen Gone?&lt;/a&gt;&lt;/p&gt;
</description>
    <title>Java永久代去哪儿了</title>
    <link>http://droidyue.com/blog/2015/08/22/where-has-the-java-permgen-gone/</link>
    <pubDate>Sat, 22 Aug 2015 09:01:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/08/22/where-has-the-java-permgen-gone</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;Android系统中的Activity可以说一件很赞的设计，它在内存管理上良好的设计，使得多任务管理在Android系统中运行游刃有余。但是Activity绝非启动展示在屏幕而已，其启动方式也大有学问，本文讲具体介绍Activity的启动模式的诸多细节，纠正一些开发中可能错误的观点，帮助大家深入理解Activity。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;行文之前&lt;/h2&gt;

&lt;p&gt;在正式行文之前，先介绍一些文章提到的概念&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文章后续会提到Task，这里的Task指的是与用户交互的Activity实例的集合。&lt;/li&gt;
&lt;li&gt;Task中的Activity实例以栈的形式存放，这个栈就是Activity的回退栈。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;本文图片较多，在看图时，请注意观察Activity顶部的title，来区分具体Activity。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;为何有启动模式&lt;/h2&gt;

&lt;p&gt;应用中的每一个Activity都是进行不同的事物处理。以邮件客户端为例，InboxActivity目的就是为了展示收件箱，这个Activity不建议创建成多个实例。而ComposeMailActivity则是用来撰写邮件，可以实例化多个此Activity对象。合理地设计Activity对象是否使用已有的实例还是多次创建，会使得交互设计更加良好，也能避免很多问题。至于想要达到前面的目标，就需要使用今天的Activity启动模式。&lt;/p&gt;

&lt;h2&gt;如何使用&lt;/h2&gt;

&lt;p&gt;使用很简单，只需要在manifest中对应的Activity元素加入&lt;strong&gt;android:launchMode&lt;/strong&gt;属性即可。如下述代码&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='xml'&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.SingleTaskActivity&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;singleTask launchMode&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:launchMode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;singleTask&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;接下来就是介绍launchMode的四个值的时刻了。&lt;/p&gt;

&lt;h2&gt;standard&lt;/h2&gt;

&lt;p&gt;这是launchMode的默认值，Activity不包含android:launchMode或者显示设置为standard的Activity就会使用这种模式。&lt;/p&gt;

&lt;p&gt;一旦设置成这个值，&lt;strong&gt;每当有一次Intent请求，就会创建一个新的Activity实例&lt;/strong&gt;。举个例子，如果有10个撰写邮件的Intent，那么就会创建10个ComposeMailActivity的实例来处理这些Intent。结果很明显，这种模式会创建某个Activity的多个实例。&lt;/p&gt;

&lt;h3&gt;Android 5.0之前的表现&lt;/h3&gt;

&lt;p&gt;这种Activity新生成的实例会放入发送Intent的Task的栈的顶部。下图为启动同一程序内的Activity。
&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/pre_lollipop_standard_activity_in_same_app.jpg" title="pre_lollipop_standard_activity_in_same_app" &gt;&lt;/p&gt;

&lt;p&gt;下面的图片展示跨程序之间调用，新生成的Activity实例会放入发送Intent的Task的栈的顶部，尽管它们属于不同的程序。
&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/pre_lollipop_standard_activity_across_app.jpg" title="pre_lollipop_standard_activity_across_app" &gt;&lt;/p&gt;

&lt;p&gt;但是当我们打开任务管理器，则会有一点奇怪，应为显示的任务是Gallery，展示的界面确实另一个程序的Activity（因为其位于Task的栈顶）。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/pre_lollipop_task_manager_across_app.jpg"&gt;&lt;/p&gt;

&lt;p&gt;这时候如果我们从Gallery应用切换到拨号应用，再返回到Gallery，看到的还是这个非Gallery的Activity，如果我们想要对Gallery进行操作，必须按Back键返回到Gallery界面才可以。确实有点不太合理。&lt;/p&gt;

&lt;h3&gt;Android 5.0及之后表现&lt;/h3&gt;

&lt;p&gt;对于同一应用内部Activity启动和5.0之前表现一样，变化的就是不同应用之间Activity启动变得合理了。&lt;/p&gt;

&lt;p&gt;跨应用之间启动Activity，会创建一个新的Task，新生成的Activity就会放入刚创建的Task中。如下图&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/lollipop_across_app_new_task.jpg"&gt;&lt;/p&gt;

&lt;p&gt;同时任务管理器查看任务也显得更加合理了。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/lollipop_task_manager_standard.jpg"&gt;&lt;/p&gt;

&lt;p&gt;假设之前存在我们的测试程序，然后从Gallery又分享文件到我们的测试程序，则对应的任务管理器展示效果如下。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/lollipop_standard_across_app_alread_exists.jpg"&gt;&lt;/p&gt;

&lt;p&gt;使用场景：standard这种启动模式适合于撰写邮件Activity或者社交网络消息发布Activity。如果你想为每一个intent创建一个Activity处理，那么就是用standard这种模式。&lt;/p&gt;

&lt;h2&gt;singleTop&lt;/h2&gt;

&lt;p&gt;singleTop其实和standard几乎一样，使用singleTop的Activity也可以创建很多个实例。唯一不同的就是，&lt;strong&gt;如果调用的目标Activity已经位于调用者的Task的栈顶，则不创建新实例，而是使用当前的这个Activity实例，并调用这个实例的onNewIntent方法&lt;/strong&gt;。
&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletop.jpg"&gt;
在singleTop这种模式下，我们需要处理应用这个模式的Activity的onCreate和onNewIntent两个方法，确保逻辑正常。&lt;/p&gt;

&lt;h3&gt;使用场景&lt;/h3&gt;

&lt;p&gt;关于singleTop一个典型的使用场景就是搜索功能。假设有一个搜索框，每次搜索查询都会将我们引导至SearchActivity查看结果，为了更好的交互体验，我们在结果页顶部也放置这样的搜索框。&lt;/p&gt;

&lt;p&gt;假设一下，SearchActivity启动模式为standard，那么每一个搜索都会创建一个新的SearchActivity实例，10次查询就是10个Activity。当我们想要退回到非SearchActivity，我们需要按返回键10次，这显然太不合理了。&lt;/p&gt;

&lt;p&gt;但是如果我们使用singleTop的话，如果SearchActivity在栈顶，当有了新的查询时，不再重新创建SearchAc实例，而是使用当前的SearchActivity来更新结果。当我们需要返回到非SearchActivity只需要按一次返回键即可。使用了singleTop显然比之前要合理。&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;只有在调用者和目标Activity在同一Task中，并且目标Activity位于栈顶，才使用现有目标Activity实例，否则创建新的目标Activity实例。&lt;/li&gt;
&lt;li&gt;如果是外部程序启动singleTop的Activity，在Android 5.0之前新创建的Activity会位于调用者的Task中，5.0及以后会放入新的Task中。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;singleTask&lt;/h2&gt;

&lt;p&gt;singleTask这个模式和前面提到的standard和singleTop截然不同。&lt;strong&gt;使用singleTask启动模式的Activity在系统中只会存在一个实例&lt;/strong&gt;。如果这个实例已经存在，intent就会通过onNewIntent传递到这个Activity。否则新的Activity实例被创建。&lt;/p&gt;

&lt;h3&gt;同一程序内&lt;/h3&gt;

&lt;p&gt;如果系统中不存在singleTask Activity的实例，那么就需要创建这个Activity的实例，并且将这个实例放入和调用者相同的Task中并位于栈顶。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_inapp_create_new_instance.jpg"&gt;&lt;/p&gt;

&lt;p&gt;如果singleTask Activity实例已然存在，那么在Activity回退栈中，所有位于该Activity上面的Activity实例都将被销毁掉（销毁过程会调用Activity生命周期回调），这样使得singleTask Activity实例位于栈顶。与此同时，Intent会通过onNewIntent传递到这个SingleTask Activity实例。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_sameapp_instance_exists.jpg"&gt;&lt;/p&gt;

&lt;p&gt;然而在Google关于singleTask的&lt;a href="http://developer.android.com/guide/components/tasks-and-back-stack.html"&gt;文档&lt;/a&gt;有这样一段描述&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The system creates a new task and instantiates the activity at the root of the new task.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;意思为 系统会创建一个新的Task，并创建Activity实例放入这个新的Task的底部。&lt;/p&gt;

&lt;p&gt;然而实际并非如此，在我的例子中，singleTask Activity并创建并放入了调用者所在的Task，而不是放入新的Task，使用&lt;code&gt;adb shell dumpsys activity&lt;/code&gt;便可以进行验证。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;TaskRecord&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;428&lt;/span&gt;&lt;span class="n"&gt;efe30&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MAIN&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LAUNCHER&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;flg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x10000000&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;StandardActivity&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;Hist&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ActivityRecord&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="n"&gt;a88d0&lt;/span&gt; &lt;span class="n"&gt;u0&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;SingleTaskActivity&lt;/span&gt; &lt;span class="n"&gt;t239&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;SingleTaskActivity&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;ProcessRecord&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42243130&lt;/span&gt; &lt;span class="mi"&gt;18965&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u0a123&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;Hist&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ActivityRecord&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;425&lt;/span&gt;&lt;span class="n"&gt;fec98&lt;/span&gt; &lt;span class="n"&gt;u0&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;StandardActivity&lt;/span&gt; &lt;span class="n"&gt;t239&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MAIN&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LAUNCHER&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;flg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x10000000&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;StandardActivity&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;ProcessRecord&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42243130&lt;/span&gt; &lt;span class="mi"&gt;18965&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thecheesefactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchmode&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u0a123&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;然而想要实现文档的描述也并非不可能，我们需要在设置launchMode为singleTask的同时，再加上taskAffinity属性即可。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='xml'&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.SingleTaskActivity&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;singleTask launchMode&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:launchMode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;singleTask&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:taskAffinity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;完成上面的修改，我们看一下效果，Task的变化如下图&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singleTaskTaskAffinity.jpg"&gt;
同时，系统中的任务管理器效果也会相应变化&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_task_affinity_task_manger.jpg"&gt;&lt;/p&gt;

&lt;h3&gt;跨应用之间&lt;/h3&gt;

&lt;p&gt;在跨应用Intent传递时，如果系统中不存在singleTask Activity的实例，那么讲创建一个新的Task，然后创建SingleTask Activity的实例，将其放入新的Task中。Task变化如下。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_across_app_no_instance.jpg"&gt;
系统的任务管理器也会如下变化&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_acrossapp_no_instance_taskmanager.jpg"&gt;&lt;/p&gt;

&lt;p&gt;如果singleTask Activity所在的应用进程存在，但是singleTask Activity实例不存在，那么从别的应用启动这个Activity，新的Activity实例会被创建，并放入到所属进程所在的Task中，并位于栈顶位置。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_acrossapp_application_exists_activity_nonexists.jpg"&gt;&lt;/p&gt;

&lt;p&gt;更复杂的一种情况，如果singleTask Activity实例存在，从其他程序被启动，那么这个Activity所在的Task会被移到顶部，并且在这个Task中，位于singleTask Activity实例之上的所有Activity将会被正常销毁掉。如果我们按返回键，那么我们首先会回退到这个Task中的其他Activity，直到当前Task的Activity回退栈为空时，才会返回到调用者的Task。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_acrossapp_instance_exists_and_back.jpg"&gt;&lt;/p&gt;

&lt;p&gt;在上图中，当Task2中的相册启动分享调用Task1中的singleTask Activity，而该Activity实例存在，并位于Task1中回退栈中的第三个位置（从上到下顺序），那么位于该Activity上面的两个Activity实例将会被销毁掉，使得该Activity实例位于栈顶。此时Task1中的回退栈只剩两个Activity，如果点击返回，那么会退到的不是相册应用，而是singleTask Activity栈位置下面的Activity，再次点击返回方可返回相册应用。&lt;/p&gt;

&lt;h3&gt;使用场景&lt;/h3&gt;

&lt;p&gt;该模式的使用场景多类似于邮件客户端的收件箱或者社交应用的时间线Activity。上述两种场景需要对应的Activity只保持一个实例即可，但是也要谨慎使用这种模式，因为它可以在用户未感知的情况下销毁掉其他Activity。&lt;/p&gt;

&lt;h2&gt;singleInstance&lt;/h2&gt;

&lt;p&gt;这个模式和singleTask差不多，因为他们在系统中都只有一份实例。唯一不同的就是存放singleInstance Activity实例的Task只能存放一个该模式的Activity实例。如果从singleInstance Activity实例启动另一个Activity，那么这个Activity实例会放入其他的Task中。同理，如果singleInstance Activity被别的Activity启动，它也会放入不同于调用者的Task中。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singleInstance_new_instance.jpg"&gt;
虽然是两个task，但是在系统的任务管理器中，却始终显示一个，即位于顶部的Task中。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singleInstances_taskmanager.jpg"&gt;&lt;/p&gt;

&lt;p&gt;另外当我们从任务管理器进入这个应用，是无法通过返回键会退到Task1的。&lt;/p&gt;

&lt;p&gt;好在有办法解决这个问题，就是之前提到的&lt;code&gt;taskAffinity=""&lt;/code&gt;，为launchMode为singleInstance的Activity加入这个属性即可。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='xml'&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.SingleInstanceActivity&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;singleInstance launchMode&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:launchMode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;singleInstance&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:taskAffinity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;再次运行修改的代码，查看任务管理器，这样的结果就合理了。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/singleinstance_task_affinity.jpg"&gt;&lt;/p&gt;

&lt;h3&gt;使用情况&lt;/h3&gt;

&lt;p&gt;这种模式的使用情况比较罕见，在Launcher中可能使用。或者你确定你需要使Activity只有一个实例。建议谨慎使用。&lt;/p&gt;

&lt;h2&gt;Intent Flags&lt;/h2&gt;

&lt;p&gt;除了在manifest文件中设置launchMode之外，还可以在Intnet中设置flag达到同样的效果。如下述代码就可以让StandardActivity已singleTop模式启动。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StandardActivity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StandardActivity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addFlags&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_ACTIVITY_SINGLE_TOP&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;关于Intent Flags这里暂不做重点介绍，具体可以参考&lt;a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_BROUGHT_TO_FRONT"&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;原文信息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en"&gt;Understand Android Activity&amp;rsquo;s launchMode: standard, singleTop, singleTask and singleInstance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;One More Thing&lt;/h2&gt;

&lt;p&gt;为了更深刻理解，建议多读几次。如果文章有问题，请在下方评论指出。&lt;/p&gt;
</description>
    <title>深入讲解Android中Activity launchMode</title>
    <link>http://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/</link>
    <pubDate>Sun, 16 Aug 2015 13:22:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。&lt;/p&gt;

&lt;p&gt;这是程序员的逗比瞬间系列的第一季，文章参考自&lt;a href="http://howtodoinjava.com/2013/03/19/life-of-a-programmer-in-pictures/"&gt;Life of a programmer in pictures&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;第一次在网页中应用CSS，WTF！&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1fnxfvpg208w06ykjf.gif"&gt;&lt;/p&gt;

&lt;h2&gt;兴致勃勃向别人展示修复了一个bug，结果。。。&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl1gbas5mg208w050u0x.gif"&gt;&lt;/p&gt;

&lt;h2&gt;上传了一段没有测试却正常运行的代码，&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww3.sinaimg.cn/large/6a195423gw1evl1gqqpieg20b404a4qn.gif"&gt;&lt;/p&gt;

&lt;h2&gt;被老板告知我写的功能被毙掉了，呜呜&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww3.sinaimg.cn/large/6a195423gw1evl1ha10hng208w06o4qp.gif"&gt;&lt;/p&gt;

&lt;h2&gt;周五好好的代码周一居然不工作了&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1hu3kmog208w04w1ft.gif"&gt;&lt;/p&gt;

&lt;h2&gt;没有保存就关闭了IDE&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl1iab6q1g205k059dwa.gif"&gt;&lt;/p&gt;

&lt;h2&gt;花了几个小时写的脚本一运行，居然。。。&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1jjw17cg20b4069qr0.gif"&gt;&lt;/p&gt;

&lt;h2&gt;没有请教Google就解决了问题，(此处没有度娘神马事)&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww1.sinaimg.cn/large/6a195423gw1evl1ka6gi6g208w06nhdw.gif"&gt;&lt;/p&gt;

&lt;h2&gt;写了一个脚本，居然把整个数据库给删了(这难道是某超代言的说删就删的某程)&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww1.sinaimg.cn/large/6a195423gw1evl1ksirk0g208o04w1kx.gif"&gt;&lt;/p&gt;

&lt;h2&gt;把一段代码刚刚传到线上(各种战战兢兢，阿弥陀佛)&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1l9uzoag20dc071hdt.gif"&gt;&lt;/p&gt;

&lt;h2&gt;领导四处招人修复一个严重bug（我躲我躲，我躲躲）&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww4.sinaimg.cn/large/6a195423gw1evl1lp2gjvg209q0421ku.gif"&gt;&lt;/p&gt;

&lt;h2&gt;我的正则表达式写对了&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1m3gnjkg207i03mu0x.gif"&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;本文会消耗大量的七牛CDN流量，建议进行&lt;a href="http://droidyue.com/donate/"&gt;捐赠支持&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h2&gt;程序员的逗比瞬间全系列&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series"&gt;程序员的逗比瞬间（第一季）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series"&gt;程序员的逗比瞬间（第二季）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>程序员的逗比瞬间（第一季）</title>
    <link>http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/</link>
    <pubDate>Sat, 08 Aug 2015 11:23:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/08/08/funny-programmer-season-one</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;在日常的Android开发中，我们必然遇到过OutOfMemoryError这样的崩溃，产生的原因无外乎两点，一是内存过小不够用，二是程序设计有误，导致不能释放内存，其中后者情况较多。在解决这个问题时，我们亦或多或少听到android:largeHeap，然而这个概念又是什么呢，它该如何使用，存在哪些问题呢。本文讲比较全面介绍Android中的largeHeap帮助各位全面深入了解这个概念。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;磨刀不误砍柴工&lt;/h2&gt;

&lt;p&gt;为了便于理解，先简单介绍一些和文章相关的基础概念。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通常，一个Android程序在运行时会启动一个Dalvik虚拟机（暂不讨论ART模式）&lt;/li&gt;
&lt;li&gt;虚拟机的运行时内存一般由堆和栈两大部分构成。&lt;/li&gt;
&lt;li&gt;栈是存储方法调用的一片内存数据区。&lt;/li&gt;
&lt;li&gt;堆内存占据了虚拟机的大部分内存空间，程序执行时产生的对象就分配在堆内存上。&lt;/li&gt;
&lt;li&gt;如果是堆内存没有可用的空间存储生成的对象，JVM会抛出java.lang.OutOfMemoryError。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;如若具体了解堆和栈，请参考文章&lt;a href="http://droidyue.com/blog/2014/12/07/differences-between-stack-and-heap-in-java/"&gt;Java中的堆和栈的区别&lt;/a&gt;和&lt;a href="http://droidyue.com/blog/2014/12/21/java-runtime-data-areas/"&gt;JVM运行时的数据区&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;largeHeap介绍&lt;/h2&gt;

&lt;p&gt;一个应用如果使用了largeHeap，会请求系统为Dalvik虚拟机分配更大的内存空间。使用起来也很方便，只需在manifest文件application节点加入&lt;strong&gt;android:largeHeap=&amp;ldquo;true&amp;rdquo;&lt;/strong&gt;即可。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='xml'&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt; &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/icon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="na"&gt;android:allowBackup=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/app_name&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="na"&gt;android:debuggable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@android:style/Theme.Black&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="na"&gt;android:largeHeap=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;largeHeap有多大&lt;/h2&gt;

&lt;p&gt;在Android中，有如下两个方法可以帮助我们查看当前内存大小&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ActivityManager.getMemoryClass()获得内用正常情况下内存的大小&lt;/li&gt;
&lt;li&gt;ActivityManager.getLargeMemoryClass()可以获得开启largeHeap最大的内存大小&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;然而largeHeap这个最大值是如何决定的呢？想要了解这个问题，我们就需要看一下Android系统中的一个文件。&lt;/p&gt;

&lt;p&gt;这个文件路径是&lt;code&gt;/system/build.prop&lt;/code&gt;，由于文件比较大，这里我们只截取关于dalvik内存的配置信息，如下。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heapstartsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heapgrowthlimit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heapsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heaptargetutilization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heapminfree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heapmaxfree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;上面有诸多配置，但从字面意思也不难理解，为了正确理解，有必要逐一解释一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dalvik.vm.heapstartsize=8m&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相当于虚拟机的 -Xms配置，该项用来设置堆内存的初始大小。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dalvik.vm.heapgrowthlimit=192m&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相当于虚拟机的 -XX:HeapGrowthLimit配置，该项用来设置一个标准的应用的最大堆内存大小。一个标准的应用就是没有使用android:largeHeap的应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dalvik.vm.heapsize=512m&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相当于虚拟机的 -Xmx配置，该项设置了使用android:largeHeap的应用的最大堆内存大小。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dalvik.vm.heaptargetutilization=0.75&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相当于虚拟机的 -XX:HeapTargetUtilization,该项用来设置当前理想的堆内存利用率。其取值位于0与1之间。当GC进行完垃圾回收之后，Dalvik的堆内存会进行相应的调整，通常结果是当前存活的对象的大小与堆内存大小做除法，得到的值为这个选项的设置，即这里的0.75。注意，这只是一个参考值，&lt;a href="http://grepcode.com/file/repo1.maven.org/maven2/org.robovm/robovm-rt/1.0.0/dalvik/system/VMRuntime.java#VMRuntime.setTargetHeapUtilization%28float%29"&gt;Dalvik虚拟机也可以忽略此设置&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dalvik.vm.heapminfree=2m&lt;/strong&gt;与&lt;strong&gt;dalvik.vm.heapmaxfree=8m&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;dalvik.vm.heapminfree对应的是-XX:HeapMinFree配置，用来设置单次堆内存调整的最小值。&lt;strong&gt;dalvik.vm.heapmaxfree&lt;/strong&gt;对应的是-XX:HeapMaxFree配置，用来设置单次堆内存调整的最大值。通常情况下，还需要结合上面的 -XX:HeapTargetUtilization的值，才能确定内存调整时，需要调整的大小。&lt;/p&gt;

&lt;h2&gt;largeHeap需要权限么&lt;/h2&gt;

&lt;p&gt;为何有此疑问呢？ 原因是这样的。 首先一个设备的内存是固定的，当我们使用了largeHeap之后就可以使我们的程序内存增加，但这部分增加的内存有可能是源自被系统杀掉的后台程序。所以，使用largeHeap理论上是有可能杀掉其他的程序的。&lt;/p&gt;

&lt;p&gt;然而，结果就是不需要权限，Google在一开始就是这样，只需要简单在Application元素上加入android:largeHeap=&amp;ldquo;true&amp;#8221;就能正常使用。&lt;/p&gt;

&lt;h2&gt;largeHeap对GC的影响&lt;/h2&gt;

&lt;p&gt;拥有了更多的内存，是不是就意味着要花更多的时间遍历对象垃圾回收呢？其实不然。&lt;/p&gt;

&lt;p&gt;首先largeHeap自Android 4.0开始支持，而并发的垃圾回收方式从Android 2.3开始引入。&lt;/p&gt;

&lt;p&gt;在引入并发垃圾回收之前，系统采用了Stop-the-World回收方式，进行一次垃圾回收通常消耗几百毫秒，这是很影响交互和响应的。&lt;/p&gt;

&lt;p&gt;引入并发垃圾回收之后,在GC开始和结束的阶段会有短暂的暂停时间，通常在10毫秒以内。&lt;/p&gt;

&lt;p&gt;因此在支持largeHeap的系统上都采用了并发垃圾回收，GC的Pause Time不会很长，对交互响应影响甚微。&lt;/p&gt;

&lt;h2&gt;慎用largeHeap&lt;/h2&gt;

&lt;p&gt;对于largeHeap的使用，我们该持有的谨慎的态度，largeHeap可以使用，但是要谨慎。&lt;/p&gt;

&lt;p&gt;对于本身对内存要求过大的图片或者视频应用，我们可以使用largeHeap。&lt;/p&gt;

&lt;p&gt;除上面的情况，如果仅仅是为了解决OutOfMemoryError这样的问题，而尝试使用largeHeap分配更大内存的这种指标不治本的方法不可取。对待这样的OOM问题，建议阅读以下几篇文章，了解Android中内存泄露和垃圾回收，从代码上去查找问题，从根本上解决问题。&lt;/p&gt;

&lt;h2&gt;推荐文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/"&gt;Android中Handler引起的内存泄露&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/"&gt;避免Android中Context引起的内存泄露&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/"&gt;Google IO：Android内存管理主题演讲记录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    showBookCopyright();
&lt;/script&gt;



</description>
    <title>探究android:largeHeap</title>
    <link>http://droidyue.com/blog/2015/08/01/dive-into-android-large-heap/</link>
    <pubDate>Sat, 01 Aug 2015 09:10:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/08/01/dive-into-android-large-heap</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;在编写代码时，为了实现一些功能，我们需要使用高版本的API，比如SharedPreference的Editor中的apply方法为API 9开始引入，在API 9 以上的机器使用没有问题，但是在API 8上，如果运行时执行了这段代码，就会崩溃，问题相当严重。尤其是该问题出现在正式版中，后果不堪设想。本文将介绍如何使用lint发现并解决这些问题。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;lint是什么&lt;/h2&gt;

&lt;p&gt;lint是Android提供的一个静态代码分析的工具，使用这个工具可以帮助我们找出Android项目中潜在的bug，安全，性能，可用性，辅助性和国际化等问题，同时还可以查找出错误拼写，提示开发者更正。&lt;/p&gt;

&lt;h3&gt;lint的工作流程&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/lint_workflow.png"&gt;&lt;/p&gt;

&lt;p&gt;上图为lint的工作流程图，下面为一些元素的简短说明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;程序源文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;程序源文件就是Android工程的组成部分，包括Java和xml文件，图标以及混淆配置文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lint.xml文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lint配置文件，用来排除某些检查或者自定义检测问题的严重程度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lint工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个静态代码扫描工具，对Android工程进行扫描分析，可以从终端执行命令，也可以从Android Studio等IDE中使用。lint工具可以帮助我们找到Android应用性能和代码质量问题。在正式发布应用之前，强烈建议使用lint检查并修复发现的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lint检查结果&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lint的检查结果可以从终端，Android Studio等IDE工具，或者生成结果文件查看。每一个问题都会标明在文件中的位置行数，以及关于该问题的说明等信息。&lt;/p&gt;

&lt;h2&gt;查找问题&lt;/h2&gt;

&lt;p&gt;知道了lint如何工作，就只需执行lint查找问题，有了明确的问题，才能有的放矢地解决。&lt;/p&gt;

&lt;h3&gt;Android Sutdio&lt;/h3&gt;

&lt;p&gt;选择菜单Analyze&amp;mdash;&gt;Configure Current File Analysis&amp;mdash;&gt;Configure Inspections 清空所有的检查项，然后如下图勾选&lt;strong&gt;Calling new methods on older versions&lt;/strong&gt; 和 &lt;strong&gt;Using inlined constants on older versions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/android_studio_lint_custom.png"&gt;&lt;/p&gt;

&lt;p&gt;然后执行Analyze&amp;mdash;&gt; Inspect Code，然后查看底部的Inspection即可&lt;/p&gt;

&lt;h3&gt;command line&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='line'&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;project_root_dir
&lt;/span&gt;&lt;span class='line'&gt;lint --check NewApi,InlinedApi --html /tmp/api_check.html ./
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;无需多时，结果就会以html形式写入/tmp/api_check.html文件&lt;/p&gt;

&lt;h3&gt;Gradle Command Line&lt;/h3&gt;

&lt;p&gt;配置build.gradle&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="c1"&gt;//some other config&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;lintOptions&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;abortOnError&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;xmlReport&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;NewApi&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;InlinedApi&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;然后执行下面的命令&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='line'&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;project_root_dir
&lt;/span&gt;&lt;span class='line'&gt;./gradlew lint
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;结果会输出到工程目录build/outputs/lint-results.html。&lt;/p&gt;

&lt;h2&gt;如何解决&lt;/h2&gt;

&lt;p&gt;结合上面的输出结果，我们接下来要做的就是如何解决，如下为一些解决思路。&lt;/p&gt;

&lt;h3&gt;必然执行高版本API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果是NewApi警告，考虑其他方法代替。比如String.isEmpty自API 9才引入，但是使用TextUtils.isEmpty替换。&lt;/li&gt;
&lt;li&gt;如果是InlinedApi警告，可以自定义与常量同值的另一个常量。&lt;/li&gt;
&lt;li&gt;使用反射，对于不太重要的方法，我们可以使用反射来解决问题。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;或然执行高版本API&lt;/h3&gt;

&lt;p&gt;如果该段代码进行了API Level限制，确保高版本API不会在低版本设置执行，只需对这个警告设置为忽略即可。&lt;/p&gt;

&lt;h2&gt;实战解决&lt;/h2&gt;

&lt;p&gt;以下代码所属工程最低支持2.2系统，即API 8。&lt;/p&gt;

&lt;h3&gt;NewApi有警报代码&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testNewApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;PreferenceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getApplicationContext&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;putBoolean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first_use&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;上面代码中的apply方法为Android API 9引入，使用lint检查会提示警告。&lt;/p&gt;

&lt;h3&gt;方案一&lt;/h3&gt;

&lt;p&gt;按照API Level不同，选择不同的方法,对于API 9以下使用commit，API 9及其以上使用apply&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testNewApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Editor&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PreferenceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putBoolean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first_launch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SDK_INT&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION_CODES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GINGERBREAD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;方案二&lt;/h3&gt;

&lt;p&gt;对于确定不会在低版本运行的情况，我们可以增加@TargetApi加上对应的API引入的版本即可。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="nd"&gt;@TargetApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION_CODES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GINGERBREAD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testNewApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Editor&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PreferenceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putBoolean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first_launch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;方案三&lt;/h3&gt;

&lt;p&gt;同样确保新API不会在低版本运行，也可以忽略警报。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="nd"&gt;@SuppressLint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NewApi&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testNewApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Editor&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PreferenceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putBoolean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first_launch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;但是这种方案不推荐&lt;/strong&gt;，是直接对方法的警告忽略，如果继续在方法中增加代码，则不利于发现问题，比如&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="nd"&gt;@SuppressLint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NewApi&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testNewApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Editor&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PreferenceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putBoolean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first_launch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//新增加代码，不容易发现问题&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;含有InlinedApi警告的代码&lt;/h3&gt;

&lt;p&gt;下面代码过于简单，只是为了打印一个API 19引入的int常量值。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testInlinedApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MainActivity&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;inlinedValue=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACCESSIBILITY_LIVE_REGION_ASSERTIVE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;对于这个问题的方案很简答，就是自己定义一个常量，其值与高版本的API常量相同，然后使用这个自定义常量即可。如下代码&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;lineos:false&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testInlinedApi&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;VIEW_ACCESSIBILITY_LIVE_REGION_ASSERTIVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MainActivity&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;inlinedValue=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;VIEW_ACCESSIBILITY_LIVE_REGION_ASSERTIVE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;小问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果没有lint命令，需要将Android中的sdk/tools/目录加入PATH即可。&lt;/li&gt;
&lt;/ul&gt;


&lt;script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    showBookCopyright();
&lt;/script&gt;



</description>
    <title>使用Android lint发现并解决高版本API问题</title>
    <link>http://droidyue.com/blog/2015/07/25/use-android-lint-to-find-higher-api-usage/</link>
    <pubDate>Sat, 25 Jul 2015 08:51:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/07/25/use-android-lint-to-find-higher-api-usage</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;有过Android开发经历的人都不会对ANR陌生，它和崩溃一样是程序设计的问题。本文将以较为深入的视角来介绍什么是ANR，出现场景，如何避免以及如何定位分析ANR,希望可以帮助大家在编写程序时有所帮助。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;什么是ANR&lt;/h2&gt;

&lt;p&gt;ANR全称&lt;code&gt;Application Not Responding&lt;/code&gt;，意思就是程序未响应。如果一个应用无法响应用户的输入，系统就会弹出一个ANR对话框，如下图所示,用户可以自行选择继续等待亦或者是停止当前程序。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/android_anr.png"&gt;&lt;/p&gt;

&lt;h2&gt;出现场景&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;主线程被IO操作（从4.0之后网络IO不允许在主线程中）阻塞。&lt;/li&gt;
&lt;li&gt;主线程中存在耗时的计算&lt;/li&gt;
&lt;li&gt;主线程中错误的操作，比如Thread.wait或者Thread.sleep等&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Android系统会监控程序的响应状况，一旦出现下面两种情况，则弹出ANR对话框&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;应用在&lt;strong&gt;5秒&lt;/strong&gt;内未响应用户的输入事件（如按键或者触摸）&lt;/li&gt;
&lt;li&gt;BroadcastReceiver未在&lt;strong&gt;10秒&lt;/strong&gt;内完成相关的处理&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;如何避免&lt;/h2&gt;

&lt;p&gt;基本的思路就是将IO操作在工作线程来处理，减少其他耗时操作和错误操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;a href="http://droidyue.com/blog/2014/11/08/bad-smell-of-asynctask-in-android/"&gt;AsyncTask&lt;/a&gt;处理耗时IO操作。&lt;/li&gt;
&lt;li&gt;使用Thread或者HandlerThread时，调用Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)设置优先级，否则仍然会降低程序响应，因为默认Thread的优先级和主线程相同。&lt;/li&gt;
&lt;li&gt;使用&lt;a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/"&gt;Handler&lt;/a&gt;处理工作线程结果，而不是使用Thread.wait()或者Thread.sleep()来阻塞主线程。&lt;/li&gt;
&lt;li&gt;Activity的onCreate和onResume回调中尽量避免耗时的代码&lt;/li&gt;
&lt;li&gt;BroadcastReceiver中onReceive代码也要尽量减少耗时，建议使用IntentService处理。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;画龙点睛&lt;/h2&gt;

&lt;p&gt;通常100到200毫秒就会让人察觉程序反应慢，为了更加提升响应，可以使用下面的几种方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果程序正在后台处理用户的输入，建议使用让用户得知进度，比如使用ProgressBar控件。&lt;/li&gt;
&lt;li&gt;程序启动时可以选择加上欢迎界面，避免让用户察觉卡顿。&lt;/li&gt;
&lt;li&gt;使用Systrace和TraceView找出影响响应的问题。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;如何定位&lt;/h2&gt;

&lt;p&gt;如果开发机器上出现问题，我们可以通过查看&lt;code&gt;/data/anr/traces.txt&lt;/code&gt;即可，最新的ANR信息在最开始部分。我们从stacktrace中即可找到出问题的具体行数。本例中问题出现在MainActivity.java 27行，因为这里调用了Thread.sleep方法。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;span class='line-number'&gt;18&lt;/span&gt;
&lt;span class='line-number'&gt;19&lt;/span&gt;
&lt;span class='line-number'&gt;20&lt;/span&gt;
&lt;span class='line-number'&gt;21&lt;/span&gt;
&lt;span class='line-number'&gt;22&lt;/span&gt;
&lt;span class='line-number'&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nd"&gt;@htc_m8tl&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;traces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;-----&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="mi"&gt;30307&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="o"&gt;-----&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt; &lt;span class="nl"&gt;line:&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nl"&gt;JNI:&lt;/span&gt; &lt;span class="n"&gt;CheckJNI&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;workarounds&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;272&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;DALVIK&lt;/span&gt; &lt;span class="nl"&gt;THREADS:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;mutexes:&lt;/span&gt; &lt;span class="n"&gt;tll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tsl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tscl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;ghl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;prio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;TIMED_WAIT&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;sCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;dsCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x416eaf18&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x416d8650&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sysTid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30307&lt;/span&gt; &lt;span class="n"&gt;nice&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;sched&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;cgrp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1074565528&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;schedstat&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;utm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;stm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VMThread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Native&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1044&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1026&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MainActivity&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MainActivity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runOnUiThread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4794&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MainActivity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MainActivity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Instrumentation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callActivityOnResume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instrumentation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1282&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;performResume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5405&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;如果是线上版本引起的，Google Play后台有相关的数据可以帮助查看分析并解决问题。&lt;/p&gt;

&lt;h2&gt;细致分析&lt;/h2&gt;

&lt;p&gt;  &lt;strong&gt;提问&lt;/strong&gt;: BroadcastReceiver过了60秒居然没有ANR？ 现场代码如下&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NetworkReceiver&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;LOGTAG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NetworkReceiver&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGTAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;onReceive intent=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;            &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGTAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;onReceive end&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;
  &lt;strong&gt;回答&lt;/strong&gt;：实际上已经发生了ANR，只是没有进行对话框弹出而已。这种ANR就是background ANR，即后台程序的ANR，我们可以通过过滤日志验证&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;span class='line-number'&gt;18&lt;/span&gt;
&lt;span class='line-number'&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;logcat&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NetworkReceiver|ActivityManager|WindowManager&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NetworkReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;4109&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;onReceive&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CONNECTIVITY_CHANGE&lt;/span&gt; &lt;span class="n"&gt;flg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x8000010&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;NetworkReceiver&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exchange&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="mi"&gt;1054&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NetworkReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;4109&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;onReceive&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;BroadcastQueue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Receiver&lt;/span&gt; &lt;span class="n"&gt;during&lt;/span&gt; &lt;span class="nl"&gt;timeout:&lt;/span&gt; &lt;span class="n"&gt;ResolveInfo&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5342&lt;/span&gt;&lt;span class="n"&gt;dde4&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NetworkReceiver&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x108000&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;ANR&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nl"&gt;Reason:&lt;/span&gt; &lt;span class="n"&gt;Broadcast&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CONNECTIVITY_CHANGE&lt;/span&gt; &lt;span class="n"&gt;flg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x8000010&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="na"&gt;NetworkReceiver&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nl"&gt;Load:&lt;/span&gt; &lt;span class="mf"&gt;0.37&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.14&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;26047&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="nl"&gt;ago:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;   &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;adbd:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nl"&gt;faults:&lt;/span&gt; &lt;span class="mi"&gt;1501&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;   &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;system_server:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4109&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nl"&gt;faults:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nl"&gt;TOTAL:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;softirq&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;589&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="nl"&gt;later:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;   &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;adbd:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nl"&gt;faults:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;     &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;adbd:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nl"&gt;TOTAL:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Killing&lt;/span&gt; &lt;span class="n"&gt;ProcessRecord&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5326&lt;/span&gt;&lt;span class="n"&gt;d418&lt;/span&gt; &lt;span class="mi"&gt;4109&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u0a10063&lt;/span&gt;&lt;span class="o"&gt;}:&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="n"&gt;ANR&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ActivityManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;androidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bitmapdemo&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="mi"&gt;4109&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;died&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;除了日志，我们还可以根据前面提到的查看traces.txt文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提问&lt;/strong&gt;:可以更容易了解background ANR么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;回答&lt;/strong&gt;:当然可以，在Android开发者选项&amp;mdash;&gt;高级&amp;mdash;&gt;显示所有”应用程序无响应“勾选即可对后台ANR也进行弹窗显示，方便查看了解程序运行情况。&lt;/p&gt;

&lt;h2&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://developer.android.com/intl/zh-cn/training/articles/perf-anr.html"&gt;Keeping Your App Responsive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    showBookCopyright();
&lt;/script&gt;



</description>
    <title>说说Android中的ANR</title>
    <link>http://droidyue.com/blog/2015/07/18/anr-in-android/</link>
    <pubDate>Sat, 18 Jul 2015 09:53:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/07/18/anr-in-android</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;前些日子，想要查看一个Release版本的HTTP请求，由于已经是发布版本，日志已然关闭，遂开始从HTTP代理的思路着手。&lt;/p&gt;

&lt;p&gt;本文是偏于操作的总结，行文目的是快速解决诸如上面的问题，不是为了深入了解squidman。如需深入俩接，请参考文章尾部的进阶推荐内容。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;Fiddler铩羽而归&lt;/h3&gt;

&lt;p&gt;首先尝试了鼎鼎有名的Fiddler，Fiddler是一款基于.NET的应用，天然运行在Windows系统上。但是想要安装到Mac上则需要安装.NET运行时，可是一旦启动Fiddler代理就无缘无故崩溃，最后不得不铩羽而归，另谋他路。&lt;/p&gt;

&lt;h3&gt;SquidMan&lt;/h3&gt;

&lt;p&gt;SquidMan是一款Mac上的图形化的squid代理服务器的安装管理工具。使用squid服务器软件可以帮助我们实现如下功能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缓存下载内容，减少网络带宽，加速网页浏览。&lt;/li&gt;
&lt;li&gt;作为代理服务器，供其他设备使用。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这里我们用到的是其代理功能。&lt;/p&gt;

&lt;p&gt;巧妇难为无米之炊，首先要做的就是安装squidman，从&lt;a href="http://squidman.net/squidman/"&gt;这里&lt;/a&gt;下载对应的版本并安装，然后进行启动即可。&lt;/p&gt;

&lt;h3&gt;客户端配置&lt;/h3&gt;

&lt;p&gt;以下操作的WIFI热点应该为Mac设备与客户端设备同时连接的热点，以确保在同一局域网中。
代理服务器的IP地址使用&lt;code&gt;ifconfig&lt;/code&gt;查看，端口默认为8087。
以Android设备为例&lt;/p&gt;

&lt;p&gt;设置&amp;mdash;&gt;WLAN&amp;mdash;&gt;长按目标WIFI热点&amp;mdash;&gt;修改网络&amp;mdash;&gt;勾选显示高级选项&amp;mdash;&gt;修改代理为手动，填出代理服务器的地址和端口，保存即可。&lt;/p&gt;

&lt;h3&gt;查看日志&lt;/h3&gt;

&lt;h4&gt;终端查看&lt;/h4&gt;

&lt;p&gt;个人喜欢使用终端查看，使用tail命令查看访问日志一目了然。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Logs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;squid&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;squid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h4&gt;客户端查看&lt;/h4&gt;

&lt;p&gt;使用SquidMan客户端查看也是一种选择，选择Window&amp;mdash;&gt;Tools即可看到如下的界面&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/squidman_tools.png"&gt;&lt;/p&gt;

&lt;p&gt;Access Log不会自动追加最新的请求日志，需要再次点击Access Log按钮才可以。&lt;/p&gt;

&lt;h3&gt;问题解决&lt;/h3&gt;

&lt;h4&gt;无法访问网络 403&lt;/h4&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="mf"&gt;1434336922.275&lt;/span&gt;   &lt;span class="mi"&gt;1140&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.100&lt;/span&gt; &lt;span class="n"&gt;TCP_DENIED&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="mi"&gt;4286&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//m.baidu.com/? - HIER_NONE/- text/html&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="mf"&gt;1434336922.594&lt;/span&gt;     &lt;span class="mi"&gt;71&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.100&lt;/span&gt; &lt;span class="n"&gt;TCP_DENIED&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="mi"&gt;3979&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//www.squid-cache.org/Artwork/SN.png - HIER_NONE/- text/html&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;日志全部显示为TCP_DENIED/403，表明Squidman拒绝了来自客户端的请求&lt;/p&gt;

&lt;p&gt;解决方法，在配置文件中找到如下代码&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/squidman_403.png" title="" &gt;&lt;/p&gt;

&lt;p&gt;替换为&lt;code&gt;http_access allow all&lt;/code&gt;，即允许所有的HTTP访问，停止Squiman，然后重新启动，如果失败，再次点击重新启动即可。&lt;/p&gt;

&lt;h4&gt;无法查看GET参数&lt;/h4&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="mf"&gt;1434340562.396&lt;/span&gt;    &lt;span class="mi"&gt;339&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.100&lt;/span&gt; &lt;span class="n"&gt;TCP_MISS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;82471&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//m.baidu.com/s? - HIER_DIRECT/115.239.210.14 text/html&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;默认情况下，从日志中是无法看到GET查询参数的，因为在写入日志前，程序已经过滤掉了这些数据。通过在配置中加入&lt;code&gt;strip_query_terms off&lt;/code&gt;保存，重新启动，再次查看日志，就可以看到查询参数了。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="mf"&gt;1434340777.200&lt;/span&gt;    &lt;span class="mi"&gt;287&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.100&lt;/span&gt; &lt;span class="n"&gt;TCP_MISS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;82272&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//m.baidu.com/s?from=1097d&amp;amp;word=%E6%8A%80%E6%9C%AF%E5%B0%8F%E9%BB%91%E5%B1%8B - HIER_DIRECT/115.239.210.14 text/html&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;进阶推荐&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.squid-cache.org/ConfigExamples"&gt;Squid Config Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.squid-cache.org/Doc/config/"&gt;Squid configuration References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B008AEI8A2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B008AEI8A2&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;鸟哥的Linux私房菜:服务器架设篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>在Mac上为其他设备开启代理</title>
    <link>http://droidyue.com/blog/2015/07/11/start-proxy-server-on-mac/</link>
    <pubDate>Sat, 11 Jul 2015 09:36:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/07/11/start-proxy-server-on-mac</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;&lt;strong&gt;本文为&lt;a href="http://droidredirect.sinaapp.com/100offer_redirect.php"&gt;100offer&lt;/a&gt;合作文章，由100offer为本网站提供专业的职场相关的文章，感兴趣的或者有跳槽的童鞋们不防读一读&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;想象一下，当你在一个网站上递交你的简历后，你会像珐琅彩瓷一样被各个公司竞相拍卖，确定到合适的「买主」之后，专车把你送到面试的地点；入职当天，你会收到精心准备的小礼物，通过试用期后，你还会收到 3000 元的奖金奖励！&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;程序员粘永把简历挂在网站后不久，就接到一个 HR的电话，「太快了」，不到一周，他就得到了心仪已久的公司 Strikingly 的面试机会，顺利入职。&lt;/p&gt;

&lt;p&gt;啧啧，听上去像是广告一样。&lt;/p&gt;

&lt;p&gt;但这是个真实的故事，这个网站叫100offer。在星巴克初次见面，100offer 创始人贾智凡向我介绍：我们在做这样一件事——帮中高端程序员高效地选一份更好的工作。&lt;/p&gt;

&lt;p&gt;「4万名程序员，2600家互联网公司，参加拍卖的程序员90%至少拿到一个offer，平均每人可收到12个靠谱面试机会。」这是100offer 上线8个月交出的成绩，不久前他们拿到了2000万人民币A轮融资。&lt;/p&gt;

&lt;h3&gt;牛人用「拍卖方式」来选工作，有什么合理性？&lt;/h3&gt;

&lt;p&gt;相比于迷茫又急于找到工作的应届生，进入职场多年的中高端人才的选择则非常慎重——有着明确的薪资提升与发展空间的需求，所以猎头和朋友推荐是过去的常用途径。然而凭借猎头和人脉圈，提供的选择机会终究是有限的，中高端人才找工作很容易，但「选」到满意的工作实属不易。&lt;/p&gt;

&lt;p&gt;「拍卖」，则提供了独特的价值：一次申请，匿名挑选2600家公司，总有很多猎头和人脉圈无法触及的「惊喜」机会；与此同时相比于「广告密集、色彩缤纷」的招聘网站，拍卖网站帮高端人才做了一次信用保证，求职者完全变身稀缺品，企业需要刻不容缓争抢。&lt;/p&gt;

&lt;p&gt;「求职人群中，应届生很容易得到来自前辈与亲友的建议与指点，而且各方面要求相对较低，中高端程序员则往往无法在普通招聘网站中满足待遇升值的需求，这同样也是100offer的机遇。」贾智凡强调，「人才拍卖不是招聘网站，我们只服务于缺选择不缺工作的高端人才，帮他们高效地选一份更好的工作」。&lt;/p&gt;

&lt;h3&gt;求职者和招聘方需求相互矛盾，拍卖产品偏向谁？&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://7xk6z0.com1.z0.glb.clouddn.com/100offer_office.jpg"&gt;&lt;/p&gt;

&lt;p&gt;「招聘方和求职方的需求是矛盾的，候选人希望企业信息足够透明，再向企业透露信息，企业方则希望尽快获得简历，可以直接打电话。我们非常重视求职方的体验。」&lt;/p&gt;

&lt;p&gt;在星巴克，这个看上去不善言辞的创业者一边喝着茶一边回答我的疑问。在产品功能的轻重缓急上，他已经考虑了很多。通常情况下，他要低头思考几秒钟，才给出答案。&lt;/p&gt;

&lt;p&gt;「每一个通过100offer入职的候选人，会收到3000元奖金；同时100offer向企业收取一定费用」，从100offer的选择上可以看出对求职者的极度偏向。&lt;/p&gt;

&lt;h3&gt;拍卖产品是如何一步步打动高端用户的？&lt;/h3&gt;

&lt;p&gt;其实，100offer的定位非常严苛：一线互联网公司、2年以上工作经验、年薪20万起。这部分用户理性、缜密、渴望自由并佩服真正有本事的成功者，同时过去大多使用猎头和朋友推荐，100offer需要攻克的是互联网领域最难被说服的用户。&lt;/p&gt;

&lt;p&gt;2014年7月100offer上线，「起初时挺焦虑的，毕竟从零开始，也没人相信我们，但后来觉得反正也没啥可失去的，慢慢内心就柔软淡定了。」贾智凡说。100offer前1000个用户来源于程序员社区V2EX，「其实大家只是出于猎奇的心态，并来试试验证下真实性。那时用户少，我们1个半月拍卖一次，每次50~100个优质候选人。」&lt;/p&gt;

&lt;p&gt;但再怎么样，这些高端用户被猎头、朋友、HR围绕，其实并不缺一个机会，「他们缺少的是好的选择，100offer所解决的，就是帮他们高效地选更好的工作」，贾智凡介绍，上线不到一年时间，100offer每周开始一次新的拍卖，100~200人，这也证实了100offer的价值。「对于这批用户，真正打动他们的是真实的效果。」&lt;/p&gt;

&lt;p&gt;在竞争激烈的招聘领域，这家网站的独特思路让我看起来和所有其他的网站都不太一样。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7xk6z0.com1.z0.glb.clouddn.com/100offer_timeline.jpg"&gt;&lt;/p&gt;
</description>
    <title>为什么高端人才会使用拍卖选工作</title>
    <link>http://droidyue.com/blog/2015/07/06/wei-shi-yao-gao-duan-ren-cai-hui-shi-yong-pai-mai-xuan-gong-zuo/</link>
    <pubDate>Mon, 06 Jul 2015 12:58:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/07/06/wei-shi-yao-gao-duan-ren-cai-hui-shi-yong-pai-mai-xuan-gong-zuo</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;作为一名程序员，日常的工作除了上班撸代码就是加班撸代码了。撸码其实不难，无非询问Google，StackOverflow，解决方法和demo一箩筐，可是撸的一手好代码着实不易。无独有偶，码农一抓一大把，优秀的程序员却不易寻觅。优秀的程序员既不可能出自各种天花乱坠的培训机构，更不可能来自挖掘机摇篮山东布鲁斯特，大多数优秀的程序员有一个共同点，那就是自学。&lt;/p&gt;

&lt;p&gt;为什么是自学呢？首先大学的教育不可能让你成为专家级别的程序员，其次为了能从团队脱颖而出必然付出更多的努力来学习。自学其实是一种很强有力的能力，一旦掌握，许多技术和问题都可以轻松搞定。&lt;/p&gt;

&lt;p&gt;中学物理常客牛顿曾说，”如果我比别人看得更远，那是因为我站在巨人的肩上“。他山之石，可以攻玉。阅读大师巨匠的作品无疑是最有效的自学方式之一。业界知名的Bob大叔是代码整洁和面向对象编程的坚定支持推进者，其在这方面的著作可以称得上权威。Martin Fowler同样名声在外，他的关于重构的著作&lt;a href="http://droidredirect.sinaapp.com/book_refactor.php"&gt;《重构&amp;mdash;-改善既有代码的设计》&lt;/a&gt;应该是人手一本。阅读诸如上面两位大家的著作，对技术提到大有裨益。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;本文讲列举六本业界牛人的著作，也是编程书籍中经典的经典，这几本书并非简单的教程书籍，而是教给你方法和思想来解决现实遇到的问题，提高编码的技艺和境界。&lt;/p&gt;

&lt;h3&gt;重构&amp;mdash;-改善既有代码的设计&lt;/h3&gt;

&lt;p&gt;&lt;img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/refactor.jpeg" width="218" title="refactor" &gt;
何为重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。本书虽然使用Java语言书写示例代码，但是其概念与思想同样适合于其他语言。书中，作者以一些平淡无奇，甚至带有坏味道的代码开始，一步一步地修改转变成更加灵活，可重用的代码。通过书中的示例，你会清楚地明白什么才是整洁的代码。重构其实依然成为经验丰富的程序员的必备技能，当你想要改善重构代码时，读一读这本书就会让你有章可循，豁然开朗。&lt;br/&gt;
查看详细：&lt;a href="http://droidredirect.sinaapp.com/book_refactor.php"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;br/&gt;


&lt;br/&gt;


&lt;h3&gt;代码整洁之道&lt;/h3&gt;

&lt;p&gt;&lt;img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/clean_code.jpeg"&gt;
这是我最喜欢的一本书，不止一次我将它推荐给我的同事，读者还有学生。我认为它可以称得上软件开发与编码方便最好的一本书。Bob大叔我想无需做介绍，他写过一个关于敏捷开发的系列书籍，我的书架上就有他的 &lt;a href="http://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0031M9GHC&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;《代码整洁之道》&lt;/a&gt;,&lt;a href="http://www.amazon.cn/gp/product/B0098NRHHY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0098NRHHY&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;《程序员的职业素养》&lt;/a&gt;，
&lt;a href="http://www.amazon.cn/gp/product/B00116MMA8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00116MMA8&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;《敏捷软件开发(原则模式与实践)》&lt;/a&gt;，&lt;a href="http://www.amazon.cn/gp/product/B00116MMA8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00116MMA8&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;《敏捷软件开发(原则模式与实践)》&lt;/a&gt;，&lt;a href="http://www.amazon.cn/gp/product/0131428489/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=0131428489&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;《UML for Java For Programmers》&lt;/a&gt;， 《Extreme Programming in Practice》等这些书籍。虽然他的这些书有点老旧，但是这些书仍然很有价值，纵使数十年之后，这些书依旧受用，尤其是在面向对象编程方面。
 本书不仅仅是告诉你要做什么，还教会你什么不能做。书中有关于代码味道的一个章节，全面列举了大多数程序员遇到的各种错误，其后的章节则详细描述如何纠正这些错误。比如如何将过长的switch声明转换成遵循开放闭合原则的模型，如何利用集成和多态。再次啰嗦一下，这本书确实值得每个程序员拥有。和上本书一样，书中的例子使用Java语言，但依然适合使用其他面向对象编程语言的开发者阅读。想要撸的一手好码，这本书必不可少。&lt;br/&gt;
查看详细:&lt;a href="http://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0031M9GHC&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;代码大全&lt;/h3&gt;

&lt;p&gt;&lt;img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/code_complete.jpeg"&gt;&lt;/p&gt;

&lt;p&gt;想必这本书大家都曾阅读过，这就是鼎鼎大名的《代码大全》，从某个角度看，它其实就是C++版的《代码整洁之道》。本书的目标就是帮开发者使用做高质的代码写出更好的软件。同样书中也涉及了编程中常见问题和最佳实践。这本书也可以称得上是必读书籍，尤其是对于C和C++程序员。《代码大全(第2版)》中所论述的技术不仅填补了初级与高级编程实践之间的空白，而且也为程序员们提供了一个有关软件开发技术的信息来源。《代码大全(第2版)》对经验丰富的程序员、技术带头人、自学的程序员及没有太多编程经验的学生都是大有裨益的。可以说，只要你具有一定的编程基础，想成为一名优秀的程序员，阅读《代码大全(第2版)》都不会让你失望。&lt;br/&gt;
查看详细:&lt;a href="http://www.amazon.cn/gp/product/B0061XKRXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0061XKRXA&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;单元测试的艺术&lt;/h3&gt;

&lt;p&gt;&lt;img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/the_art_of_unit_test.jpeg"&gt;
如果非要做一件改善项目，提高开发者水平的事情，我想那就是让开发者掌握单元测试的能力。对于专业的开发者来说，单元测试是一项必备的技能，多数的程序员却不具备TDD（测试驱动开发）的能力。我虽然在不太遵循TDD这种模式，但是也会为自己写的或维护的代码编写单元测试。对于工程来说，开源项目基本都严格遵守执行单元测试，而很多商业的工程则在单元测试方面有所缺失。一个拥有单元测试的项目会变得更加容易维护和更改。本书会介绍成功的项目与失败项目的差别，可维护的代码库与不可维护的代码库之间的区别。本书示例为.NET代码，但这并不会影响你了解单元测试。如果你是一名技术负责人或者项目负责人，这本书可以帮你更好地把控项目代码质量。如果你看Java更舒服的话，也可以看一看这本书&lt;a href="http://www.amazon.cn/gp/product/B007NDAPHK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B007NDAPHK&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;《JUnit实战(第2版)》&lt;/a&gt;。&lt;br/&gt;
查看详细:&lt;a href="http://www.amazon.cn/gp/product/B00MBQMFLI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00MBQMFLI&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;精益软件开发管理之道&lt;/h3&gt;

&lt;p&gt;&lt;img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/Leading_Lean_Software_Developer.jpeg"&gt;
《精益软件开发管理之道》是一本软件开发方法学的书。作者从24个不同的视角，在更大的空间、时间、行业、文化背景下，考察了敏捷和精益方法。《精益软件开发管理之道》详细阐述了敏捷和精益开发方法取得成功的深层原因。《精益软件开发管理之道》包括以下内容：系统思考，以适当足够的方式关注客户；技术杰出，介绍了杰出软件开发的基础-低耦合的架构、测试驱动的开发过程等；可靠交付，讨论了工作流和日程计划，以及反馈的重要作用；无情改进，讨论了所有精益组织的基本特点：持续不断、永不满足的改进；卓越的人，卓越的结果来自于卓越的人；一致的领导，讨论在领导团队中达成一致。&lt;br/&gt;
查看详细：&lt;a href="http://www.amazon.cn/gp/product/B0056E8SUO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0056E8SUO&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;br/&gt;


&lt;br/&gt;


&lt;h3&gt;设计模式 可复用面向对象软件的基础&lt;/h3&gt;

&lt;p&gt;&lt;img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/design_patterns.jpeg"&gt;
这本书要么你读过，要么就是听说过，这就是经典的GOF（Gang of Four 中文译为四人帮）设计模式一书。该书作者为四人，分别是Eric Gamma, Richard Helm, Ralph Johnson, 和John Vissides。四位顶尖的面向对象领域专家精心选取了最具价值的设计实践，加以分类整理和命名，并用简洁而易于重用的形式表达出来。本书已经成为面向对象技术人员的圣经和词典，书中定义的23个模式逐渐成为开发界技术交流所必备的基础知识和语汇。使用这些设计模式，我们可以设计出灵活，优雅和可重用的可扩展的设计。&lt;br/&gt;
查看详细：&lt;a href="http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B001130JN8&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;br/&gt;


&lt;br/&gt;


&lt;br/&gt;


&lt;br/&gt;


&lt;h3&gt;颈椎病康复指南&lt;/h3&gt;

&lt;p&gt;最新更新，原文不包含本书，应读者评论要求，特意加入此书。&lt;/p&gt;

&lt;p&gt;写代码不仅是头脑的工作，更是体力的付出。长年累月，身体必然出现问题。脂肪肝，脊椎病等等。希望这本书可以给你脊椎病恢复提供指导。&lt;br/&gt;
查看详细：&lt;a href="http://www.amazon.cn/gp/product/B0085UMKXC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0085UMKXC&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;亚马逊&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;原文参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javarevisited.blogspot.com/2014/09/top-6-books-to-learn-programming-coding.html"&gt;6 Books to Learn and Master Programming and Coding &amp;ndash; Must Read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文为墙外地址&lt;/li&gt;
&lt;li&gt;本文对原文有删减和修改&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>程序员必读的六本书</title>
    <link>http://droidyue.com/blog/2015/07/04/six-books-every-programer-must-read/</link>
    <pubDate>Sat, 04 Jul 2015 10:37:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/07/04/six-books-every-programer-must-read</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;观察者模式是软件设计模式中的一种，使用也比较普遍，尤其是在GUI编程中。关于设计模式的文章，网络上写的都比较多，而且很多文章写的也不错，虽然说有一种重复早轮子的嫌疑，但此轮子非彼轮子，侧重点不同，思路也不同，讲述方式也不近相同。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;定义&lt;/h2&gt;

&lt;p&gt;关于定义，最准确的莫过于&lt;a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0011FBU34&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;Head First设计模式&lt;/a&gt;中写到的。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监听一个主题对象。这样一来，当被观察者状态发生改变时，需要通知相应的观察者，使这些观察者对象能够自动更新。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;关键要素&lt;/h2&gt;

&lt;h3&gt;主题&lt;/h3&gt;

&lt;p&gt;主题是观察者观察的对象，一个主题必须具备下面三个特征。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持有监听的观察者的引用&lt;/li&gt;
&lt;li&gt;支持增加和删除观察者&lt;/li&gt;
&lt;li&gt;主题状态改变，通知观察者&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;观察者&lt;/h3&gt;

&lt;p&gt;当主题发生变化，收到通知进行具体的处理是观察者必须具备的特征。&lt;/p&gt;

&lt;h2&gt;为什么要用这种模式&lt;/h2&gt;

&lt;p&gt;这里举一个例子来说明，牛奶送奶站就是主题，订奶客户为监听者，客户从送奶站订阅牛奶后，会每天收到牛奶。如果客户不想订阅了，可以取消，以后就不会收到牛奶。&lt;/p&gt;

&lt;h3&gt;松耦合&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;观察者增加或删除无需修改主题的代码，只需调用主题对应的增加或者删除的方法即可。&lt;/li&gt;
&lt;li&gt;主题只负责通知观察者，但无需了解观察者如何处理通知。举个例子，送奶站只负责送递牛奶，不关心客户是喝掉还是洗脸。&lt;/li&gt;
&lt;li&gt;观察者只需等待主题通知，无需观察主题相关的细节。还是那个例子，客户只需关心送奶站送到牛奶，不关心牛奶由哪个快递人员，使用何种交通工具送达。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;通知不错过&lt;/h3&gt;

&lt;p&gt;由于被动接受，正常情况下不会错过主题的改变通知。而主动获取的话，由于时机选取问题，可能导致错过某些状态。&lt;/p&gt;

&lt;h2&gt;Java实现&lt;/h2&gt;

&lt;p&gt;Java中有观察者模式使用的API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java.util.Observable 这是一个类，而非接口，主题需要继承这个类。&lt;/li&gt;
&lt;li&gt;java.util.Observer   这是一个接口，监听者需要实现这个接口。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;示例代码&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;span class='line-number'&gt;18&lt;/span&gt;
&lt;span class='line-number'&gt;19&lt;/span&gt;
&lt;span class='line-number'&gt;20&lt;/span&gt;
&lt;span class='line-number'&gt;21&lt;/span&gt;
&lt;span class='line-number'&gt;22&lt;/span&gt;
&lt;span class='line-number'&gt;23&lt;/span&gt;
&lt;span class='line-number'&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Observable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Observer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainRoot&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Consumer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;MilkProvider&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MilkProvider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addObserver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;milkProduced&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MilkProvider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;milkProduced&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;setChanged&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//状态改变，必须调用&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;notifyObservers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Consumer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Observable&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Consumer update...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;;arg1=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;上述代码完成了&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将consumer加入主题provider的观察者行列&lt;/li&gt;
&lt;li&gt;provider设置状态变化，通知持有的观察者&lt;/li&gt;
&lt;li&gt;观察者consumer收到通知，打印日志处理&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;setChanged为何物&lt;/h3&gt;

&lt;p&gt;其实上述代码中存在这样一处代码&lt;code&gt;setChanged();&lt;/code&gt;，如果在通知之前没有调用这个方法，观察者是收不到通知的，这是为什么呢&lt;/p&gt;

&lt;p&gt;这里我们看一下setChanged的源码&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setChanged&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;很简单，然后找一下谁使用changed这个值&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasChanged&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;notifyObservers的代码&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;notifyObservers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arrays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasChanged&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;clearChanged&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;observers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;arrays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;observers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arrays&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arrays&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arrays&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;但是为什么要加入这样一个开关呢？可能原因大致有三点&lt;/p&gt;

&lt;p&gt;  1.筛选有效通知，只有有效通知可以调用setChanged。比如，我的微信朋友圈一条状态，好友A点赞，后续该状态的点赞和评论并不是每条都通知A，只有A的好友触发的操作才会通知A。&lt;/p&gt;

&lt;p&gt;  2.便于撤销通知操作，在主题中，我们可以设置很多次setChanged，但是在最后由于某种原因需要取消通知，我们可以使用clearChanged轻松解决问题。&lt;/p&gt;

&lt;p&gt;  3.主动权控制，由于setChanged为protected,而notifyObservers方法为public，这就导致存在外部随意调用notifyObservers的可能，但是外部无法调用setChanged，因此真正的控制权应该在主题这里。&lt;/p&gt;

&lt;h3&gt;主动获取&lt;/h3&gt;

&lt;p&gt;观察者模式即所谓的推送方式，然而推送并非完美无缺。比如主题变化会推送大量的数据，而其中的一些观察者只需要某项数据，此时观察者就需要在具体实现中花费时间筛选数据。&lt;/p&gt;

&lt;p&gt;这确实是个问题，想要解决也不难，需要主题为某些数据提供getter方法，观察者只需调用getter取数据处理即可。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;span class='line-number'&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MilkProvider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;milkProduced&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;setChanged&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//状态改变，必须调用&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;notifyObservers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;getPrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;2.5f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Consumer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Observable&lt;/span&gt; &lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;MilkProvider&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MilkProvider&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;milk price =&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPrice&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;不足与隐患&lt;/h2&gt;

&lt;p&gt;主要的问题表现在内存管理上，主要由以下两点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主题持有观察者的引用，如果未正常处理从主题中删除观察者，会导致观察者无法被回收。&lt;/li&gt;
&lt;li&gt;如果观察者具体实现代码有问题，会导致主题和观察者对象形成循环引用，在某些采用引用计数的垃圾回收器可能导致无法回收。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;书山有路&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B00INI842W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00INI842W&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;设计模式之禅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0011FBU34&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;Head First设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B001130JN8&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;设计模式 可复用面向对象软件的基础 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>这就是观察者模式</title>
    <link>http://droidyue.com/blog/2015/06/27/desgign-pattern-observer/</link>
    <pubDate>Sat, 27 Jun 2015 02:40:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/06/27/desgign-pattern-observer</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;h3&gt;版权说明&lt;/h3&gt;

&lt;p&gt;本文为 InfoQ 中文站特供稿件，首发地址为：&lt;a href="http://www.infoq.com/cn/news/2015/06/google-play-services-75"&gt;文章链接&lt;/a&gt;。如需转载，请与 InfoQ 中文站联系。&lt;/p&gt;

&lt;h3&gt;摘要&lt;/h3&gt;

&lt;p&gt;最近的Google I/O开发者大会上，Google宣布推出7.5版的Google Play服务，该版本在特性方面增加了诸如智能密码锁和实例ID等功能。在API方面，增加了Google云推送和Google Cast相关的API，同时在Android Wear设备上支持访问Google地图API。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;正文&lt;/h3&gt;

&lt;p&gt;最近的Google I/O开发者大会上，Google&lt;a href="http://android-developers.blogspot.com.es/2015/05/a-closer-look-at-google-play-services-75.html"&gt;宣布&lt;/a&gt;推出7.5版的Google Play服务，该版本在特性方面增加了诸如智能密码锁和实例ID等功能。在API方面，增加了Google云推送和Google Cast相关的API，同时在Android Wear设备上支持访问Google地图API。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;智能密码锁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/identity/smartlock-passwords/android/"&gt;智能密码锁&lt;/a&gt;为了简化登陆流程，增加了名为&lt;a href="https://developer.android.com/reference/com/google/android/gms/auth/api/credentials/CredentialsApi.html"&gt;CredentialsApi&lt;/a&gt;的API和UI，并允许我们对已保存的证书进行检索和保存以备后用。密码管理器是从Chrome浏览器的密码管理器演变而来。了解更多关于该功能细节，请查阅InfoQ&lt;a href="http://www.infoq.com/news/2015/06/google-smart-lock-passwords"&gt;具体介绍文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例ID，身份与授权&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/instance-id/reference"&gt;实例ID&lt;/a&gt;是一项云服务，该服务用来提供一个唯一的ID来唯一性鉴定应用实例。使用的场景比如确定哪一个应用实例正在发送请求等问题。实例ID还可以用来生成安全令牌，使用安全令牌可以授权第三方应用访问你的应用的服务器端控制的资源，同时安全令牌也可以用来验证一个应用的真实性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google云推送&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面提到的实例ID与&lt;a href="https://developer.android.com/google/gcm/index.html"&gt;Google云推送&lt;/a&gt;紧密相关，Google云推送作为一个服务，既可以接收来自服务器端的信息也可以从客户端向服务器端传送数据。此外，Google云推送还新加入了一个API允许应用设置一个或多个话题进而帮助消息能够精准推送。不仅如此，该服务还增加了一个新的类&lt;a href="https://developer.android.com/reference/com/google/android/gms/gcm/GcmNetworkManager.html"&gt;GcmNetworkManager&lt;/a&gt;，使用这个类，当服务器端有新信息时，应用与服务器端进行数据同步更加容易。GcmNetworkManager支持对常见行为的处理，比如等待网络连接，设备充电，网络重试和回退等，另外它还支持对后台网络操作的调度进行优化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Cast&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;众所周知，Google Cast是一套将设备内容呈现到电视或者音响的解决方案，新增的&lt;a href="https://developers.google.com/cast/docs/remote"&gt;远程显示API&lt;/a&gt;使得管理镜像显示更加容易，另外通过增加媒体队列使得&lt;a href="https://developer.android.com/reference/com/google/android/gms/cast/RemoteMediaPlayer.html"&gt;RemoteMediaPlayer&lt;/a&gt;可以无缝支持媒体重放。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google地图和Google Fit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;正如一开始提到的，在Android Wear设备上可以使用Google&lt;a href="http://developer.android.com/reference/com/google/android/gms/maps/package-summary.html"&gt;地图API&lt;/a&gt;了。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/fit/"&gt;Google Fit&lt;/a&gt;，用来构建健康应用解决方案，现在可以使用新增加的&lt;a href="https://developer.android.com/reference/com/google/android/gms/fitness/RecordingApi.html"&gt;RecordingApi&lt;/a&gt;收集行走距离和燃烧的卡路里数据。&lt;/p&gt;

&lt;p&gt;Google Play服务是一个有着系统级别权限的并且可升级的服务和API。正如InfoQ&lt;a href="http://www.infoq.com/news/2013/09/play-services-beat-fragmentation"&gt;指出的&lt;/a&gt;那样，”在这种情况下，Google可以在宣布之后数天内铺开这些新特性“，如果没有这项服务，则需要底层系统的更新。因为Play服务完全由Google控制，OEM厂商无法修改，所以该服务在缓解软件碎片化问题上起了很关键的作用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看英文原文：&lt;/strong&gt;&lt;a href="http://www.infoq.com/news/2015/06/google-play-services-75"&gt;Google Play Services 7.5 Adds New Capabilities, APIs, and More&lt;/a&gt;&lt;/p&gt;
</description>
    <title>Google Play Services 7.5新增API及多项特性</title>
    <link>http://droidyue.com/blog/2015/06/23/google-play-services-7-dot-5-adds-new-capabilities/</link>
    <pubDate>Tue, 23 Jun 2015 13:00:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/06/23/google-play-services-7-dot-5-adds-new-capabilities</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;在面向对象编程中，我们经常处理处理的问题就是解耦，程序的耦合性越低表明这个程序的可读性以及可维护性越高。控制反转(Inversion of Control或IoC)就是常用的面向对象编程的设计原则，使用这个原则我们可以降低耦合性。其中依赖注入是控制反转最常用的实现。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;什么是依赖&lt;/h2&gt;

&lt;p&gt;依赖是程序中常见的现象，比如类Car中用到了GasEnergy类的实例energy，通常的做法就是在Car类中显式地创建GasEnergy类的实例，并赋值给energy。如下面的代码&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Energy&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GasEnergy&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GasEnergy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;存在问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;类Car承担了多余的责任，负责energy对象的创建，这必然存在了严重的耦合性。举一个现实中的例子，一辆汽车使用哪种能源不是由汽车来决定，而是由汽车制造商（CarMaker）来决定，这是汽车制造商的责任。&lt;/li&gt;
&lt;li&gt;可扩展性，假设我们想修改能源为电动力，那么我们必然要修改Car这个类，明显不符合开放闭合原则。&lt;/li&gt;
&lt;li&gt;不利于单元测试。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;依赖注入&lt;/h2&gt;

&lt;p&gt;依赖注入是这样的一种行为，在类Car中不主动创建GasEnergy的对象，而是通过外部传入GasEnergy对象形式来设置依赖。
常用的依赖注入有如下三种方式&lt;/p&gt;

&lt;h3&gt;构造器注入&lt;/h3&gt;

&lt;p&gt;将需要的依赖作为构造方法的参数传递完成依赖注入。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;mEnergy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;mEnergy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;Setter方法注入&lt;/h3&gt;

&lt;p&gt;增加setter方法，参数为需要注入的依赖亦可完成依赖注入。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;mEnergy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setEnergy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;mEnergy&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;接口注入&lt;/h3&gt;

&lt;p&gt;接口注入，闻其名不言而喻，就是为依赖注入创建一套接口，依赖作为参数传入，通过调用统一的接口完成对具体实现的依赖注入。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;EnergyConsumerInterface&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setEnergy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;EnergyConsumerInterface&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;mEnergy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setEnergy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Energy&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;mEnergy&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;energy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;接口注入和setter方法注入类似，不同的是接口注入使用了统一的方法来完成注入，而setter方法注入的方法名称相对比较随意。&lt;/p&gt;

&lt;h2&gt;框架取舍&lt;/h2&gt;

&lt;p&gt;依赖注入有很多框架，最有名的就是Guice，当然Spring也支持依赖注入。Guice采用的是运行时读取注解，通过反射的形式生成依赖并进行注入。这种形式不太适合Android移动设备，毕竟这些操作都在运行时处理，对性能要求较高。&lt;/p&gt;

&lt;p&gt;Dagger则是Android开发适合的依赖注入库，其同样采用类注解的形式，不同的是它是在编译时生成辅助类，等到在运行时使用生成的辅助类完成依赖注入。&lt;/p&gt;

&lt;h3&gt;用还是不用&lt;/h3&gt;

&lt;p&gt;其实注入框架用还是不用，是一个问题，如若使用框架，则要求团队每一个人都要遵守说明来编写代码解决依赖注入。而这些框架其实也并非很容易就能上手，学习系数相对复杂，难以掌握，这也是需要考虑的问题。&lt;/p&gt;

&lt;p&gt;个人观点为不推荐也不反对使用这些框架，但是觉得有些时候我们寄希望于一个框架，不如平时注意这些问题，人为避免何尝不是对自己的一种基本要求呢？&lt;/p&gt;

&lt;h2&gt;依赖查找&lt;/h2&gt;

&lt;p&gt;依赖查找和依赖注入一样属于控制反转原则的具体实现，不同于依赖注入的被动接受，依赖查找这是主动请求，在需要的时候通过调用框架提供的方法来获取对象，获取时需要提供相关的配置文件路径、key等信息来确定获取对象的状态。&lt;/p&gt;

&lt;h2&gt;书籍推荐&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B004G8P90S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B004G8P90S&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;研磨设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B00INI842W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00INI842W&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;设计模式之禅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B0011FBU34&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;Head First设计模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>说说依赖注入</title>
    <link>http://droidyue.com/blog/2015/06/13/talk-show-about-dependency-injection/</link>
    <pubDate>Sat, 13 Jun 2015 14:59:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/06/13/talk-show-about-dependency-injection</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;垃圾回收是一门编程语言中必不可少的一部分，不论是手动释放内存的C和C++，还是自动回收垃圾的Java和C#等语言。对于Java这样的语言，一般的开发者不强求关心对象回收和内存释放，但是理解垃圾回收对开发工作还是大有裨益的。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;在编程语言中，普遍存在着循环引用这样的问题，垃圾回收器是如何处理循环引用呢，常用的垃圾回收有引用计数和引用对象遍历两种实现，它们各自又是如何处理循环引用呢？本文讲以JVM中的GC为例逐一回答这些问题。&lt;/p&gt;

&lt;h2&gt;何为循环引用&lt;/h2&gt;

&lt;p&gt;如果有两个或者以上的对象，它们彼此引用，就会造成循环引用。如下面的例子&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;代码中，a对象引用了b对象，b对象也引用了a对象，这种情况下a对象和b对象就形成了循环引用。&lt;/p&gt;

&lt;h2&gt;引用计数GC处理&lt;/h2&gt;

&lt;h3&gt;什么是引用计数&lt;/h3&gt;

&lt;p&gt;引用计数是一种垃圾回收的形式，每一个对象都会有一个计数来记录有多少指向它的引用。其引用计数会变换如下面的场景&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当对象增加一个引用，比如赋值给变量，属性或者传入一个方法，引用计数执行加1运算。&lt;/li&gt;
&lt;li&gt;当对象减少一个引用，比如变量离开作用域，属性被赋值为另一个对象引用，属性所在的对象被回收或者之前传入参数的方法返回，引用计数执行减1操作。&lt;/li&gt;
&lt;li&gt;当引用计数变为0，代表该对象不被引用，可以标记成垃圾进行回收。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;如何处理&lt;/h3&gt;

&lt;p&gt;实际上单纯的基于引用计数实现的计数器无法处理循环引用带来的问题。&lt;/p&gt;

&lt;p&gt;CPython的垃圾回收就是采用引用计数,采用引用计数的主垃圾回收器会清理垃圾，对于那些因为循环引用无法清理的对象，CPython会不时启动一个辅助的基于引用遍历的垃圾回收器来清理它们。&lt;/p&gt;

&lt;h2&gt;引用遍历GC处理&lt;/h2&gt;

&lt;h3&gt;什么是引用对象遍历&lt;/h3&gt;

&lt;p&gt;垃圾回收器从被称为GC Roots的点开始遍历遍历对象，凡是可以达到的点都会标记为存活，堆中不可到达的对象都会标记成垃圾，然后被清理掉。
GC Roots有哪些&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类，由系统类加载器加载的类。这些类从不会被卸载，它们可以通过静态属性的方式持有对象的引用。注意，一般情况下由自定义的类加载器加载的类不能成为GC Roots&lt;/li&gt;
&lt;li&gt;线程，存活的线程&lt;/li&gt;
&lt;li&gt;Java方法&lt;a href="http://droidyue.com/blog/2014/12/07/differences-between-stack-and-heap-in-java/"&gt;栈&lt;/a&gt;中的局部变量或者参数&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2014/12/21/java-runtime-data-areas/"&gt;JNI方法栈&lt;/a&gt;中的局部变量或者参数&lt;/li&gt;
&lt;li&gt;JNI全局引用&lt;/li&gt;
&lt;li&gt;用做同步监控的对象&lt;/li&gt;
&lt;li&gt;被JVM持有的对象，这些对象由于特殊的目的不被GC回收。这些对象可能是系统的类加载器，一些重要的异常处理类，一些为处理异常预留的对象，以及一些正在执行类加载的自定义的类加载器。但是具体有哪些前面提到的对象依赖于具体的JVM实现。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;如何处理&lt;/h3&gt;

&lt;p&gt;基于引用对象遍历的垃圾回收器可以处理循环引用，只要是涉及到的对象不能从GC Roots&lt;a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/"&gt;强引用&lt;/a&gt;可到达，垃圾回收器都会进行清理来释放内存。&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;基于引用计数的垃圾回收器无法处理循环引用导致的内存泄露问题，但是其在主流的JVM中很少，几乎所有的JVM都是采用引用对象遍历的方法，垃圾回收器都会处理循环引用潜在的问题。&lt;/p&gt;

&lt;h2&gt;一本书&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B00D2ID4PK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00D2ID4PK&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>垃圾回收器如何处理循环引用</title>
    <link>http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references/</link>
    <pubDate>Fri, 05 Jun 2015 15:24:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;Android中大多数应用都会发送和接受HTTP请求，在Android API中主要由两个HTTP请求的相关类，一个是HttpURLConnection，另一个是Apache HTTP Client。这两个类实现的HTTP请求都支持HTTPS协议，基于流的上传和下载，可配置超时时间，IPv6和连接池。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Apache HTTP Client&lt;/h2&gt;

&lt;p&gt;DefaultHttpClient和同类的AndroidHttpClient都是可扩展的类。它们有大量且灵活的API，适用于网页浏览器开发。同时它们比较稳定并且bug较少。但是繁多的API的现实下，对其改善与保持兼容性不可得兼，明显Android团队的精力已然不在Apache HTTP Client。&lt;/p&gt;

&lt;h2&gt;HttpURLConnection&lt;/h2&gt;

&lt;p&gt;HttpURLConnection是一个通用，轻量的实现，可以满足大多数的程序进行HTTP请求。这个类虽然一开始比较简陋，但是其主要的几个API使得我们更容易进行稳定改善。&lt;/p&gt;

&lt;h3&gt;连接池污染&lt;/h3&gt;

&lt;p&gt;在冻酸奶（Android 2.2）之前，HttpURLConnection有着一些烦人的bug。最烦人的就是调用一个可读的InputStream的close方法会污染连接池。我们需要禁用连接池绕开这个问题，如下代码可以禁用连接池。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;disableConnectionReuseIfNecessary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="c1"&gt;// HTTP connection reuse which was buggy pre-froyo&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SDK&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION_CODES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FROYO&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http.keepAlive&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;压缩数据与大小&lt;/h3&gt;

&lt;p&gt;从2.3开始，我们默认对返回的响应进行了压缩，HttpURLConnection会自动为发出去的请求加上&lt;code&gt;Accept-Encoding: gzip&lt;/code&gt;这个头信息。如果gzip压缩的响应有问题，可以通过下面代码禁用gzip。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;urlConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setRequestProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accept-Encoding&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;identity&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;由于HTTP中的Content-Length头信息返回的是压缩后的大小，所以我们不能使用getContentLength()来计算未压缩数据的大小。正确的做法应该是读取HTTP响应中的字节，直到InputStream.read()方法返回为-1.&lt;/p&gt;

&lt;h3&gt;HTTPs改进&lt;/h3&gt;

&lt;p&gt;从Gingerbread开始，增加了对HTTPs链接的优化。在进行HTTPs请求之前，HttpsURLConnection会尝试使用服务器名字指示(Server Name Indication)，这种技术可以让多个HTTPs主机共享一个IP地址。在HTTPs请求中，HttpsURLConnection也支持压缩和会话标签（Session Tickets）。一旦连接失败，HttpsURLConnection会不使用上面的三个特性进行重试。这样即可以保证在连接时高效率地连接到最新的服务器，也可以在不破坏兼容性的同时连接到旧服务器。&lt;/p&gt;

&lt;h3&gt;响应缓存&lt;/h3&gt;

&lt;p&gt;从4.0开始，HttpURLConnection引入了响应缓存机制。一旦缓存创建，后续的HTTP请求会按照下面情况处理&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;完全缓存的响应会直接从本地存储中读取，响应很快，不需要网络连接。&lt;/li&gt;
&lt;li&gt;有条件的缓存必须由服务端进行freshness验证，比如client发出一个请求，如&amp;#8221;Give me /foo.png if it changed since yesterday&amp;#8221;，然后服务器端要么返回最新的内容，要么返回304未修改的状态。如果内容不变，则不下载。&lt;/li&gt;
&lt;li&gt;没有缓存的响应需要服务器处理，然后这些请求被缓存下来。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;对于低于4.0的版本，我们可以使用反射开启响应的缓存机制&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;enableHttpResponseCache&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;httpCacheSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 10 MiB&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;httpCacheDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getCacheDir&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.net.http.HttpResponseCache&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;install&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;httpCacheDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;httpCacheSize&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;httpResponseCacheNotAvailable&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;当然，这里还需要服务器端设置HTTP缓存相关的头信息。&lt;/p&gt;

&lt;h2&gt;哪家强&lt;/h2&gt;

&lt;p&gt;在2.3之前的版本，Apache的HTTP请求响应实现比较稳定，bug也少，所以在那些版本上它的最好。&lt;/p&gt;

&lt;p&gt;但是在2.3之后，毫无疑问，HttpURLConnection是最好的。它API精简实用，默认支持压缩，响应缓存等。最重要的这是Android团队重点投入的，而Apache的版本已经被抛弃了。所以还是使用HttpURLConnection吧。&lt;/p&gt;

&lt;h2&gt;原文信息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html"&gt;Android’s HTTP Clients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>Android中HTTP相关的API</title>
    <link>http://droidyue.com/blog/2015/05/30/android-http-clients/</link>
    <pubDate>Sat, 30 May 2015 15:09:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/05/30/android-http-clients</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;Gmail是一款很优秀的邮件工具，我一直使用Gmail来托管公司的邮箱，利用最棒的过滤器进行过滤垃圾邮件。前段时间公司邮箱密码更换，使用了新的密码后导致了只能收邮件不能发邮件，每次发邮件都会提示这样的错误。&lt;/p&gt;

&lt;!--more--&gt;


&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Delivery&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;recipient&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="nl"&gt;permanently:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;     &lt;span class="n"&gt;someone&lt;/span&gt;&lt;span class="nd"&gt;@example.net&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Technical&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt; &lt;span class="nl"&gt;failure:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="n"&gt;tried&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;rejected&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;net&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;returned&lt;/span&gt; &lt;span class="nl"&gt;was:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="mi"&gt;535&lt;/span&gt; &lt;span class="mf"&gt;5.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nl"&gt;Error:&lt;/span&gt; &lt;span class="n"&gt;authentication&lt;/span&gt; &lt;span class="nl"&gt;failed:&lt;/span&gt; &lt;span class="n"&gt;authentication&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;后来Google查找&lt;code&gt;gmail SMTP AUTH failed with the remote server&lt;/code&gt;便找到了这篇文章，于是简单整理一下了解决方法。&lt;/p&gt;

&lt;h2&gt;如何修复&lt;/h2&gt;

&lt;p&gt;  1.进入Gmail中的设置&lt;br/&gt;
  2.选择&lt;strong&gt;Accounts and Import&lt;/strong&gt;&lt;br/&gt;
  3.找到&lt;strong&gt;Send Mail As&lt;/strong&gt;区域，找到刚刚出现错误的邮箱那一项，点击&lt;strong&gt;edit info&lt;/strong&gt;&lt;br/&gt;
  4.上一步会出现一个弹窗，点击&lt;strong&gt;Next Step&lt;/strong&gt;&lt;br/&gt;
  5.更新你最新的密码，按实际情况选择TLS，SSL或者不安全连接。然后点击&lt;strong&gt;Save Changes&lt;/strong&gt;&lt;br/&gt;
  6.尝试发邮件吧，一切都正常了。&lt;/p&gt;

&lt;h2&gt;感谢参考文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.webholism.com/blog/sara/gmail-suddenly-stopped-sending-my-business-emails/"&gt;Gmail Suddenly Stopped Sending My Business Emails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>Gmail托管邮箱发邮件认证失败</title>
    <link>http://droidyue.com/blog/2015/05/22/gmail-535-5-dot-7-8-error-authentication-failed/</link>
    <pubDate>Fri, 22 May 2015 13:47:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/05/22/gmail-535-5-dot-7-8-error-authentication-failed</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;前段时间打包遇到了一个问题，jar包不能加入到apk包中。从Eclipse中完全可以，一旦放到服务器端进行打包就出现了问题。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;使用&lt;code&gt;ant debug -d&lt;/code&gt;得到的信息如下&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;span class='line-number'&gt;18&lt;/span&gt;
&lt;span class='line-number'&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt; &lt;span class="nl"&gt;processing:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;file&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cafebabe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0033.0000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parsing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt; &lt;span class="nl"&gt;processing:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;file&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cafebabe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0033.0000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parsing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt; &lt;span class="nl"&gt;processing:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;file&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cafebabe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0033.0000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parsing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AdsLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AdsLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt; &lt;span class="nl"&gt;processing:&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;file&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cafebabe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0033.0000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;parsing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;UrlConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;       &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adsdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;UrlConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;相比到这里，原因不言则明，原来是jar包的编译版本比工程编译的版本不一致，真实的情况是前后比后者编译版本高。
经过分析，jar包的编译环境是Java 7， 而工程打包的编译环境是Java 6.&lt;/p&gt;

&lt;h2&gt;如何解决&lt;/h2&gt;

&lt;p&gt;解决这个问题也简单，不出如下做法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更换成Java 6编译出来的jar包&lt;/li&gt;
&lt;li&gt;使用java 7 打包工程。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;如何得知jar包编译版本&lt;/h2&gt;

&lt;h3&gt;解压jar包&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;fx&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;解压后查看当前目录，会多出一个文件夹，这里是名字为android的文件夹。&lt;/p&gt;

&lt;h3&gt;查看文件信息&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ConnectivityManagerCompat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ConnectivityManagerCompat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;Java&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mf"&gt;49.0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Java&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;查找版本&lt;/h3&gt;

&lt;p&gt;上面我们得到了&lt;code&gt;version 49.0 (Java 1.5)&lt;/code&gt;，有些情况下我们得到的只有&lt;code&gt;version 49.0&lt;/code&gt;需要查找下面的列表&lt;/p&gt;

&lt;h4&gt;版本映射&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;45.3 = Java 1.1&lt;/li&gt;
&lt;li&gt;46 = Java 1.2&lt;/li&gt;
&lt;li&gt;47 = Java 1.3&lt;/li&gt;
&lt;li&gt;48 = Java 1.4&lt;/li&gt;
&lt;li&gt;49 = Java 5&lt;/li&gt;
&lt;li&gt;50 = Java 6&lt;/li&gt;
&lt;li&gt;51 = Java 7&lt;/li&gt;
&lt;li&gt;52 = Java 8&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3313532/what-version-of-javac-built-my-jar"&gt;What version of javac built my jar?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>JAR包未加入APK程序</title>
    <link>http://droidyue.com/blog/2015/05/15/jar-not-in-apk/</link>
    <pubDate>Fri, 15 May 2015 12:45:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/05/15/jar-not-in-apk</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;Play商店是Android的官方商店，虽然在大陆无法访问，但是这里依旧是重要的版本发布市场，尤其是对于那些国际化的产品。对于拓宽海外市场，付费推广就是一部分不可忽视的措施。而Android付费推广必然就是Play商店推广。本文主要从技术方面讲解，如何统计推广数据，以及在开发过程中遇到的一些疑问和困惑。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;生成推广链接&lt;/h2&gt;

&lt;p&gt;想要进行推广，必须有推广链接。Google提供了生成推广链接的地址&lt;a href="https://developers.google.com/analytics/devguides/collection/android/v2/campaigns#google-play-url-builder"&gt;Google Play URL Builder&lt;/a&gt;,遗憾的是这个地址被墙了，不过可以使用&lt;a href="http://www.digitangle.co.uk/toolsandresources/google-play-url-builder/#sthash.HLdt4vXJ.dpbs"&gt;这个地址&lt;/a&gt;，可能稍微慢一点。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/play_url_builder.png"&gt;&lt;/p&gt;

&lt;h3&gt;简单描述&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Package Name 必填  应用的包名，如com.example.application&lt;/li&gt;
&lt;li&gt;Campaign Source 必填 推广的来源，比如google, citysearch, newsletter4&lt;/li&gt;
&lt;li&gt;Campaign Medium 选填  推广的媒介，比如cpc, banner, email&lt;/li&gt;
&lt;li&gt;Campaign Term   选填 推广的关键字 比如 running+shoes&lt;/li&gt;
&lt;li&gt;Campaign Content 选填 推广内容描述&lt;/li&gt;
&lt;li&gt;Campaign Name  选填 可以填写 产品名，推广代号或者是推广口号&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;生成的推广地址就是&lt;a href="https://play.google.com/store/apps/details?id=com.mx.browser&amp;amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dadlink%26utm_term%3Dandroid%252Bbrowser%26utm_content%3DBest%2520and%2520Fast%2520Browser%26utm_campaign%3Dandroidyue_123"&gt;https://play.google.com/store/apps/details?id=com.mx.browser&amp;amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dadlink%26utm_term%3Dandroid%252Bbrowser%26utm_content%3DBest%2520and%2520Fast%2520Browser%26utm_campaign%3Dandroidyue_123&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;推广如何工作的&lt;/h2&gt;

&lt;p&gt;有了上面的推广链接，我们有必要了解一下Play商店的推广是如何工作的。&lt;/p&gt;

&lt;p&gt;  1.用户从网页或者应用中点击Play商店推广链接跳转到Play商店应用的页面下载。&lt;br/&gt;
  2.应用下载完成并安装后，Google Play商店会发送一个&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;的Intent广播，该Intent中包含了推广链接中的参数。&lt;br/&gt;
  3.应用收到&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播之后，从Intent中读取参数，上报推广数据。&lt;/p&gt;

&lt;h2&gt;统计推广数据&lt;/h2&gt;

&lt;h3&gt;1.manifest声明receiver，接收&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='xml'&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;receiver&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.PlayCampaignReceiver&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:exported=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;              &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.android.vending.INSTALL_REFERRER&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;          &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nt"&gt;&amp;lt;/receiver&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;2.实现PlayCampaignReceiver，处理&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播&lt;/h3&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;span class='line-number'&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;droidyue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;playstorereferrertester&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.BroadcastReceiver&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Context&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Intent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.util.Log&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlayCampaignReceiver&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;LOGTAG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PlayCampaignReceiver&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGTAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;onReceive intent=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="c1"&gt;//处理referrer参数&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;referrer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStringExtra&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;referrer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="c1"&gt;//some other code&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;多个Receiver&lt;/h2&gt;

&lt;p&gt;有些时候我们可能有这样的需求，我们需要多个Receiver监听&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播，其实是可以的。&lt;/p&gt;

&lt;h3&gt;代码调用&lt;/h3&gt;

&lt;p&gt;这一种是比较推荐的实现方式，比较简单，就是在一个Receiver的onReceive中，实例化另一个Receiver并调用其onReceive方法。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlayCampaignReceiver&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;BroadcastReceiver&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;LOGTAG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PlayCampaignReceiver&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGTAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;onReceive intent=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="c1"&gt;//调用另一个Receiver实例的onReceive方法&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AnotherPlayCampaignReceiver&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;onReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;manifest声明&lt;/h3&gt;

&lt;p&gt;通过manifest的增加另一个监听&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播的Receiver的形式理论上也可以，但是之前的Google文档中说这种方式有问题，不建议使用。之前Google统计关于市场推广的描述为&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note: Only one BroadcastReceiver class can be specified per application. Should you need to incorporate two or more BroadcastReceivers from different SDKs, you will need to create your own BroadcastReceiver class that will receive all broadcasts and call the appropriate BroadcastReceivers for each type of Broadcast.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;何时收到推广数据&lt;/h2&gt;

&lt;p&gt;关于何时收到推广数据的问题争论颇多，基本上又两个答案：安装完成之后和打一次打开程序时。这两个答案可以说是都对或者都错。&lt;/p&gt;

&lt;p&gt;在3.1之前，&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播 确实是在程序安装之后发送的。 &lt;br/&gt;
在3.1之后，&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播 就变成了在程序第一次启动的时候进行的。&lt;/p&gt;

&lt;p&gt;那么这又是作何原因呢，其真实的原因就是在3.1 API 12之后，Android系统引入了停止状态，也就是说一个刚下载的程序，在用户手动点击图标启动之前，是收不到正常的广播的。只有当处于非停止状态的应用才能收到&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播。所以广播的发送就选择在程序第一次启动时。  更多关于&lt;a href="http://droidyue.com/blog/2014/07/14/look-inside-android-package-stop-state-since-honeycomb-mr1/"&gt;Android中的停止状态&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为了进一步验证这个发送广播实际，我在Play Store上传了一个测试程序，可以使用这个地址&lt;a href="https://play.google.com/store/apps/details?id=com.droidyue.playstorereferrertester&amp;amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dblog%26utm_term%3Dtest%252Bapp%26utm_content%3Dtest%252Bapp%26utm_campaign%3Dandroidyue_123456"&gt;https://play.google.com/store/apps/details?id=com.droidyue.playstorereferrertester&amp;amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dblog%26utm_term%3Dtest%252Bapp%26utm_content%3Dtest%252Bapp%26utm_campaign%3Dandroidyue_123456&lt;/a&gt;从Play Store下载测试一下，过滤日志&lt;code&gt;adb logcat | grep PlayCampaignReceiver&lt;/code&gt;测试。&lt;/p&gt;

&lt;p&gt;注意：这里的第一次安装可以是从Play Store 应用中点打开按钮，也可以是从Launcher中点击应用图标。前面两种情况都是可以接收到广播的。&lt;/p&gt;

&lt;h2&gt;别的包也会收到么&lt;/h2&gt;

&lt;p&gt;这也是一个被争论的问题，当然我也是通过上面的包验证了，答案就是不会的。&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;只会发给那个推广安装的程序。&lt;/p&gt;

&lt;h2&gt;例外情况&lt;/h2&gt;

&lt;p&gt;从网页到客户端的安装是无法发送&lt;strong&gt;INSTALL_REFERRER&lt;/strong&gt;广播的。&lt;/p&gt;

&lt;h2&gt;奇怪问题&lt;/h2&gt;

&lt;h3&gt;协议为哪个&lt;/h3&gt;

&lt;p&gt;其实有人会奇怪，究竟推广链接是market还是https协议，答案是都可以，但是推荐使用https协议的链接，首先的既定事实是Google Play URL Builder默认生成的就是https协议链接，另外https是一个被广泛采用的协议，设想如果一个market协议链接在PC浏览器上被点击是怎样的一种体验呢？答案不言自明。&lt;/p&gt;

&lt;h2&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/analytics/devguides/collection/android/v2/campaigns#overview"&gt;Campaign Measurement &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>Google Play商店推广那些事</title>
    <link>http://droidyue.com/blog/2015/05/11/google-play-tuiguang/</link>
    <pubDate>Mon, 11 May 2015 13:43:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/05/11/google-play-tuiguang</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;前段时间看到QQ提示更新，于是手贱了一次升级到了QQ for Mac V4.0.1,最不爽的一件事在屏幕的右上角多出来了一个横幅，内容就是别人发给你的消息的内容。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;如下图&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/qq_notification.png" title="QQ Notification" &gt;&lt;/p&gt;

&lt;p&gt;这是多么脑残的产品想出来的啊，多么地泄露隐私啊。于是果断查看QQ设置，没有办法取消横幅展示。于是另寻办法。&lt;/p&gt;

&lt;p&gt;实际上在Mac系统中有对通知的设置，打开&lt;strong&gt;系统偏好设置&lt;/strong&gt; &amp;mdash; &lt;strong&gt;通知&lt;/strong&gt; 找到QQ，然后将&lt;strong&gt;QQ提示样式&lt;/strong&gt;设置成无即可。如下图&lt;/p&gt;

&lt;p&gt;&lt;img src="http://7jpolu.com1.z0.glb.clouddn.com/qq_notification_turn_off.png" title="Turn off QQ Notification" &gt;&lt;/p&gt;

&lt;p&gt;同理，Mac版微信也可以进行这样的设置。&lt;/p&gt;

&lt;h3&gt;推荐一本书&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B00P0GDLGO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00P0GDLGO&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;苹果Mac OSX高手真经&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>关闭Mac屏幕右上角QQ通知</title>
    <link>http://droidyue.com/blog/2015/04/26/guanbi-mac-qq-tishi/</link>
    <pubDate>Sun, 26 Apr 2015 04:02:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/04/26/guanbi-mac-qq-tishi</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
  <item><description>&lt;p&gt;Context是我们在编写Android程序经常使用到的对象，意思为上下文对象。 常用的有Activity的Context还是有Application的Context。Activity用来展示活动界面，包含了很多的视图，而视图又含有图片，文字等资源。在Android中内存泄露很容易出现，而持有很多对象内存占用的Activity更加容易出现内存泄露，开发者需要特别注意这个问题。&lt;/p&gt;

&lt;p&gt;本文讲介绍Android中Context，更具体的说是Activity内存泄露的情况，以及如何避免Activity内存泄露，加速应用性能。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Drawable引起的内存泄露&lt;/h2&gt;

&lt;p&gt;Drawable引起内存泄露这个问题是比较隐晦，难以察觉的。在阅读了Romain Guy的&lt;a href="http://android-developers.blogspot.com.tr/2009/01/avoiding-memory-leaks.html"&gt;Avoiding memory leaks&lt;/a&gt;，结合grepcode查看源码才明白了。&lt;/p&gt;

&lt;p&gt;在Android系统中，当我们进行了屏幕旋转，默认情况下，会销毁掉当前的Activity，并创建一个新的Activity并保持之前的状态。在这个过程中，Android系统会重新加载程序的UI视图和资源。假设我们有一个程序用到了一个很大的Bitmap图像，我们不想每次屏幕旋转时都重新加载这个Bitmap对象，最简单的办法就是将这个Bitmap对象使用static修饰。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;span class='line-number'&gt;14&lt;/span&gt;
&lt;span class='line-number'&gt;15&lt;/span&gt;
&lt;span class='line-number'&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Drawable&lt;/span&gt; &lt;span class="n"&gt;sBackground&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Leaks are bad&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sBackground&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;sBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDrawable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;large_bitmap&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBackgroundDrawable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sBackground&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;  &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;但是上面的方法在屏幕旋转时有可能引起内存泄露，无论是咋一看还是仔细看这段代码，都很难发现哪里引起了内存泄露。&lt;/p&gt;

&lt;p&gt;当一个Drawable绑定到了View上，实际上这个View对象就会成为这个Drawable的一个callback成员变量，上面的例子中静态的sBackground持有TextView对象lable的引用，而lable只有Activity的引用，而Activity会持有其他更多对象的引用。sBackground生命周期要长于Activity。当屏幕旋转时，Activity无法被销毁，这样就产生了内存泄露问题。&lt;/p&gt;

&lt;p&gt;2.3.7及以下版本Drawable的setCallback方法的实现&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setCallback&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Callback&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;mCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;好在从4.0.1开始，引入了&lt;a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/"&gt;弱引用&lt;/a&gt;处理这个问题，弱引用在GC回收时，不会阻止GC回收其指向的对象，避免了内存泄露问题。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setCallback&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Callback&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;mCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WeakReference&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Callback&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;单例引起的内存泄露&lt;/h2&gt;

&lt;p&gt;单例是我们比较简单常用的一种设计模式,然而如果单例使用不当也会导致内存泄露。
比如这样一个例子,我们使用饿汉式初始化单例，AppSettings我们需要持有一个Context作为成员变量，如果我们按照下面的实现其实是有问题。&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;span class='line-number'&gt;4&lt;/span&gt;
&lt;span class='line-number'&gt;5&lt;/span&gt;
&lt;span class='line-number'&gt;6&lt;/span&gt;
&lt;span class='line-number'&gt;7&lt;/span&gt;
&lt;span class='line-number'&gt;8&lt;/span&gt;
&lt;span class='line-number'&gt;9&lt;/span&gt;
&lt;span class='line-number'&gt;10&lt;/span&gt;
&lt;span class='line-number'&gt;11&lt;/span&gt;
&lt;span class='line-number'&gt;12&lt;/span&gt;
&lt;span class='line-number'&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppSettings&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;mAppContext&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;AppSettings&lt;/span&gt; &lt;span class="n"&gt;sInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="c1"&gt;//some other codes&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;AppSettings&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sInstance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;  
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;        &lt;span class="n"&gt;mAppContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;sInstance作为静态对象，其生命周期要长于普通的对象，其中也包含Activity，当我们进行屏幕旋转，默认情况下，系统会销毁当前Activity，然后当前的Activity被一个单例持有，导致垃圾回收器无法进行回收，进而产生了内存泄露。&lt;/p&gt;

&lt;p&gt;解决的方法就是不持有Activity的引用，而是持有Application的Context引用。代码如下修改&lt;/p&gt;

&lt;figure class='code'&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre class="line-numbers"&gt;&lt;span class='line-number'&gt;1&lt;/span&gt;
&lt;span class='line-number'&gt;2&lt;/span&gt;
&lt;span class='line-number'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='line'&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;    &lt;span class="n"&gt;mAppContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getApplicationContext&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; 
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;访问这里了解更多关于&lt;a href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/"&gt;单例模式的问题&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;条条方法返回Context&lt;/h2&gt;

&lt;p&gt;通常我们想要获取Context对象，主要有以下四种方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View.getContext,返回当前View对象的Context对象，通常是当前正在展示的Activity对象。&lt;/li&gt;
&lt;li&gt;Activity.getApplicationContext,获取当前Activity所在的(应用)进程的Context对象，通常我们使用Context对象时，要优先考虑这个全局的进程Context。&lt;/li&gt;
&lt;li&gt;ContextWrapper.getBaseContext():用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，这个方法在实际开发中使用并不多，也不建议使用。&lt;/li&gt;
&lt;li&gt;Activity.this 返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;其他内存泄露问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2014/11/08/bad-smell-of-asynctask-in-android/"&gt;Android中糟糕的AsyncTask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/"&gt;Android中Handler引起的内存泄露&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://droidyue.com/blog/2014/11/29/why-onsharedpreferencechangelistener-was-not-called/"&gt;Google为何这样设计OnSharedPreferenceChangeListener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;避免内存泄露须谨记&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;不要让生命周期长于Activity的对象持有到Activity的引用&lt;/li&gt;
&lt;li&gt;尽量使用Application的Context而不是Activity的Context&lt;/li&gt;
&lt;li&gt;尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用（具体可以查看&lt;a href="http://droidyue.com/blog/2014/10/02/the-private-modifier-in-java/"&gt;细话Java：&amp;#8221;失效&amp;#8221;的private修饰符&lt;/a&gt;了解）。如果使用静态内部类，将外部实例引用作为&lt;a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/"&gt;弱引用&lt;/a&gt;持有。&lt;/li&gt;
&lt;li&gt;垃圾回收不能解决内存泄露，了解&lt;a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/"&gt;Android中垃圾回收机制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://android-developers.blogspot.com.tr/2009/01/avoiding-memory-leaks.html"&gt;Avoiding memory leaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10641144/difference-between-getcontext-getapplicationcontext-getbasecontext-and"&gt;Difference between getContext() , getApplicationContext() , getBaseContext() and “this”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1026973/android-whats-the-difference-between-the-various-methods-to-get-a-context"&gt;Android &amp;ndash; what&amp;rsquo;s the difference between the various methods to get a Context?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;好书推荐&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B009VV6EG8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B009VV6EG8&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;Android应用性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B00IOB0K1Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B00IOB0K1Q&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;图灵程序设计丛书:Java性能优化权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.cn/gp/product/B009GT0H4U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3200&amp;amp;creativeASIN=B009GT0H4U&amp;amp;linkCode=as2&amp;amp;tag=droidyue-23"&gt;Java程序性能优化:让你的Java程序更快、更稳定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    <title>避免Android中Context引起的内存泄露</title>
    <link>http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/</link>
    <pubDate>Sun, 12 Apr 2015 13:28:00 GMT</pubDate>
    <guid isPermaLink="false">http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android</guid>
    
  <source url="http://droidyue.com/atom.xml">技术小黑屋</source></item>
  
<generator>Octopress (http://octopress.org/) + Atom 1.0 XSLT+PHP Transform v1.1 (http://atom.geekhood.net)</generator></channel>
</rss>
