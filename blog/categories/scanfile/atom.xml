<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scanFile | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/scanfile/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2014-08-15T23:43:27+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scan Media Files In Android]]></title>
    <link href="http://droidyue.com/blog/2014/01/19/scan-media-files-in-android/"/>
    <updated>2014-01-19T19:39:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/01/19/scan-media-files-in-android</id>
    <content type="html"><![CDATA[<p>I once tried to use MediaScanner to resolve problems; however it turned out to be a failure. Now I make it.This post is to write down why I failed and how I work it out now. I think it could be deeper that other posts.</p>

<!--more-->


<h2>Android Media Scanning Mechanism</h2>

<p>Android provides a great application for developers to add created media files to add them into the library. The application is called MediaProvider. Now let&rsquo;s have a glance of MediaProvider. <br/>
The receiver part of its  manifest
```xml</p>

<pre><code>    &lt;receiver android:name="MediaScannerReceiver"&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;
        &lt;/intent-filter&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MEDIA_MOUNTED" /&gt;
            &lt;data android:scheme="file" /&gt;
        &lt;/intent-filter&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MEDIA_UNMOUNTED" /&gt;
            &lt;data android:scheme="file" /&gt;
        &lt;/intent-filter&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MEDIA_SCANNER_SCAN_FILE" /&gt;
            &lt;data android:scheme="file" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;
</code></pre>

<p>```
The MediaScannerReceiver will receive the above intents with right action and data scheme.</p>

<h3>How the MediaScannerRecieve handles the intent</h3>

<ul>
<li>It will scan internal storage only after receiving the <strong>action android.intent.action.BOOT_COMPLETED</strong></li>
<li>All intent but the <strong>android.intent.action.BOOT_COMPLETED</strong> intent should carry the file scheme data</li>
<li>It will scan external storage when receiving the <strong>Intent.ACTION_MEDIA_MOUNTED</strong> intent.</li>
<li>It will scan the single file when receiving the <strong>Intent.ACTION_MEDIA_SCANNER_SCAN_FILE</strong> intent.

<h3>How the MediaScannerService works</h3>

<p>Actually receiver does not do scanning. It will start a service called MediaScannerService.
The service part of its manifest
<code>xml
    &lt;service android:name="MediaScannerService" android:exported="true"&gt;
         &lt;intent-filter&gt;
             &lt;action android:name="android.media.IMediaScannerService" /&gt;
         &lt;/intent-filter&gt;
     &lt;/service&gt;
</code></p></li>
</ul>


<p>scanFile Method
```java</p>

<pre><code>private Uri scanFile(String path, String mimeType) {
    String volumeName = MediaProvider.EXTERNAL_VOLUME;
    openDatabase(volumeName);
    MediaScanner scanner = createMediaScanner();
    return scanner.scanSingleFile(path, volumeName, mimeType);
}
</code></pre>

<p><code>
scan Method
</code>java</p>

<pre><code>private void scan(String[] directories, String volumeName) {
    // don't sleep while scanning
    mWakeLock.acquire();

    ContentValues values = new ContentValues();
    values.put(MediaStore.MEDIA_SCANNER_VOLUME, volumeName);
    Uri scanUri = getContentResolver().insert(MediaStore.getMediaScannerUri(), values);

    Uri uri = Uri.parse("file://" + directories[0]);
    sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_STARTED, uri));

    try {
        if (volumeName.equals(MediaProvider.EXTERNAL_VOLUME)) {
            openDatabase(volumeName);
        }

        MediaScanner scanner = createMediaScanner();
        scanner.scanDirectories(directories, volumeName);
    } catch (Exception e) {
        Log.e(TAG, "exception in MediaScanner.scan()", e);
    }

    getContentResolver().delete(scanUri, null, null);

    sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_FINISHED, uri));
    mWakeLock.release();
}
</code></pre>

<p><code>
Actually the scan code is not really in the MediaScannerService
</code>java
private MediaScanner createMediaScanner() {</p>

<pre><code>    MediaScanner scanner = new MediaScanner(this);
    Locale locale = getResources().getConfiguration().locale;
    if (locale != null) {
        String language = locale.getLanguage();
        String country = locale.getCountry();
        String localeString = null;
        if (language != null) {
            if (country != null) {
                scanner.setLocale(language + "_" + country);
            } else {
                scanner.setLocale(language);
            }
        }    
    }

    return scanner;
</code></pre>

<p>}
```
It&rsquo;s using the android.media.MediaScanner
<a href="https://android.googlesource.com/platform/frameworks/base/+/cd92588/media/java/android/media/MediaScanner.java">https://android.googlesource.com/platform/frameworks/base/+/cd92588/media/java/android/media/MediaScanner.java</a></p>

<h2>How To Scan A Created File</h2>

<p>Now I am going to introduce two ways to add a created file into the media library.</p>

<h3>The Simplest Method</h3>

<p>Just send a broadcast, as we have posted above. Just send a broadcast intent to MediaScannerReceiver.
```java</p>

<pre><code>String saveAs = "Your_Created_File_Path"
Uri contentUri = Uri.fromFile(new File(saveAs));
Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,contentUri);
getContext().sendBroadcast(mediaScanIntent);
</code></pre>

<p>```
The above method maybe has been seen thousands of times. Actually it should work. However I failed and failed in sending broadcast intent. In the following section. I will point out why the sending broadcast not works. Even though you get well on with sending broadcast,it&rsquo;s strongly recommended to read the Section Why Sending MEDIA_SCANNER_SCAN_FILE broadcast not works.</p>

<h3>Use MediaScannerConnection</h3>

<p>```java</p>

<pre><code>public void mediaScan(File file) {
    MediaScannerConnection.scanFile(getActivity(),
            new String[] { file.getAbsolutePath() }, null,
            new OnScanCompletedListener() {
                @Override
                public void onScanCompleted(String path, Uri uri) {
                    Log.v("MediaScanWork", "file " + path
                            + " was scanned seccessfully: " + uri);
                }
            });
}
</code></pre>

<p>```
the scanFile method is introduced since API 8</p>

<h3>Create an instance and call scanFile (String path, String mimeType)</h3>

<p>It&rsquo;s really easy, just read the post <a href="http://developer.android.com/reference/android/media/MediaScannerConnection.html">http://developer.android.com/reference/android/media/MediaScannerConnection.html</a></p>

<h3>How To Scan Mutiple Files</h3>

<ul>
<li>Sending Mutiple Intent.ACTION_MEDIA_SCANNER_SCAN_FILE broadcast intents.</li>
<li>Use the second method by filled the second params with an array of paths.</li>
</ul>


<h2>Why Sending MEDIA_SCANNER_SCAN_FILE broadcast not works</h2>

<p>Actually someone may think sending ACTION_MEDIA_SCANNER_SCAN_FILE works on some devices but not on other devices. Actually it&rsquo;s. Is it a API limit?<br/>
No, It&rsquo;s has someting to do with your file path.
Take a look at this
```java</p>

<pre><code>public void onReceive(Context context, Intent intent) {
    String action = intent.getAction();
    Uri uri = intent.getData();
    if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
        // scan internal storage
        scan(context, MediaProvider.INTERNAL_VOLUME);
    } else {
        if (uri.getScheme().equals("file")) {
            // handle intents related to external storage
            String path = uri.getPath();
            String externalStoragePath = Environment.getExternalStorageDirectory().getPath();

            Log.d(TAG, "action: " + action + " path: " + path);
            if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
                // scan whenever any volume is mounted
                scan(context, MediaProvider.EXTERNAL_VOLUME);
            } else if (action.equals(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE) &amp;&amp;
                    path != null &amp;&amp; path.startsWith(externalStoragePath + "/")) {
                scanFile(context, path);
            }
        }
    }
}
</code></pre>

<p><code>
Every part is right except the intent data. I mean the file path. You may hardcode the filepath. This is my example
</code>java</p>

<pre><code>final String saveAs = "/sdcard/" + System.currentTimeMillis() + "_add.png";
Uri contentUri = Uri.fromFile(new File(saveAs));
Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,contentUri);
getContext().sendBroadcast(mediaScanIntent);
Uri uri = mediaScanIntent.getData();
String path = uri.getPath();
String externalStoragePath = Environment.getExternalStorageDirectory().getPath();
Log.i("LOGTAG", "Androidyue onReceive intent= " + mediaScanIntent 
                        + ";path=" + path + ";externalStoragePath=" +
                        externalStoragePath);
</code></pre>

<p><code>
And this is the output log
</code>bash
LOGTAG Androidyue onReceive intent= Intent { act=android.intent.action.MEDIA_SCANNER_SCAN_FILE dat=file:///sdcard/1390136305831_add.png };path=/sdcard/1390136305831_add.png;externalStoragePath=/mnt/sdcard
```
So in the sending broadcast, your action is right, your data schema  OK, your data path not null;but your path  /sdcard/1390136305831_add.png does not <strong>startswith</strong> the externalStoragePath /mnt/sdcard/
And so the scan file is actually <strong>not called</strong>.
In conclusion your hardcoding path results in the failure.</p>

<h2>Remove From Media Library</h2>

<p>If we deleted a file ,it means that we need to remove the file from the media library.</p>

<h3>Simply sending a broadcast?</h3>

<p>Can we simple sending a broadcast to the MediaScannerReceiver? I also wish it could. But actually it does not work.
Look at this code for the explanation.
```java</p>

<pre><code>// this function is used to scan a single file
public Uri scanSingleFile(String path, String volumeName, String mimeType) {
    try {
        initialize(volumeName);
        prescan(path, true);

        File file = new File(path);
        if (!file.exists()) {
            return null;
        }

        // lastModified is in milliseconds on Files.
        long lastModifiedSeconds = file.lastModified() / 1000;

        // always scan the file, so we can return the content://media Uri for existing files
        return mClient.doScanFile(path, mimeType, lastModifiedSeconds, file.length(),
                false, true, MediaScanner.isNoMediaPath(path));
    } catch (RemoteException e) {
        Log.e(TAG, "RemoteException in MediaScanner.scanFile()", e);
        return null;
    }
}
</code></pre>

<p><code>
As the above code points out, It does have a check before the real scanning.
Then how should I do?
</code>java</p>

<pre><code>public void testDeleteFile() {
    String existingFilePath = "/mnt/sdcard/1390116362913_add.png";
    File  existingFile = new File(existingFilePath);
    existingFile.delete();
    ContentResolver resolver = getActivity().getContentResolver();
    resolver.delete(Images.Media.EXTERNAL_CONTENT_URI, Images.Media.DATA + "=?", new String[]{existingFilePath});

}
</code></pre>

<p>```
The above code works. Just remove from Media Provider</p>

<h2>Special</h2>

<ul>
<li>You could check the external.db or internal.db file under /data/data/com.android.providers.media/ for more detailed information.</li>
</ul>


<h3>Others</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/B007SR7NOO/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B007SR7NOO&linkCode=as2&tag=droidyueblog-20&linkId=D4Q2LBQPI33YNLXD">Professional Android 4 Application Development</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=B007SR7NOO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.com/gp/product/B00K5B5Q80/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00K5B5Q80&linkCode=as2&tag=droidyueblog-20&linkId=DVJNOLZKAAGWCG5X">Android Hacker&rsquo;s Handbook</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=B00K5B5Q80" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
