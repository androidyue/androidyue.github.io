<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-02-29T15:18:19+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[效率工具：强大的批量删除文件的脚本]]></title>
    <link href="http://droidyue.com/blog/2014/11/29/a-super-tool-to-remove-files/"/>
    <updated>2014-11-29T17:29:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/11/29/a-super-tool-to-remove-files</id>
    <content type="html"><![CDATA[<p>最近打包服务器上的apk包又增多了，每次手动rm操作过于麻烦，于是花了几分钟写了一个可以对指定目录下根据最后修改时间和通配符匹配进行批量删除的脚本。将这个脚本加入crontab中之后，以后就再也不用担心多余的安装包占用磁盘空间了。</p>

<!--more-->


<h2>简短的代码</h2>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding: utf-8</h1>

<h1>Usage: ruby removeOldFiles.rb &ldquo;dest_file_pattern&rdquo; days_ago</h1>

<p>destFilePattern= ARGV[0]
daysAgo= ARGV[1]
edenTime = Time.now.to_i &ndash; daysAgo.to_i * 86400
Dir[destFilePattern].each{|child|</p>

<pre><code>system "rm -rfv #{child}"   if (File.mtime(child).to_i &lt; edenTime)
</code></pre>

<p>}
```</p>

<h2>如何使用</h2>

<p>使用起来很简单，使用规则如下<br/>
<code>bash
ruby removeOldFiles.rb "dest_file_pattern" days_ago
</code>
举个例子，比如我们想删除/tmp目录下的，所有最后修改时间为3天前的apk文件，我们只需要这样执行。
<code>bash
ruby removeOldFiles.rb "/tmp/*.apk" 3
</code></p>

<h2>为什么第一个参数使用双引号</h2>

<p>第一个参数为包含通配符的路径，在shell中存在一个工具就是glob会将包含通配符的路径匹配到具体的文件，比如这样的一段代码。
```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding: utf-8</h1>

<p>puts ARGV.length
ARGV.each do |a|</p>

<pre><code>puts "Argument: #{a}"
</code></pre>

<p>end
<code>
我们传入含有通配符的路径参数，得到的结果就是glob匹配后的文件名（前提是通配符可以匹配到文件）。
</code>bash
10:41 $ ruby test.rb <em>.txt
2
Argument: abc.txt
Argument: def.txt
<code>
为了避免进行glob操作,需要对包含通配符的路径参数使用双引号标记。
</code>bash
10:41 $ ruby test.rb &ldquo;</em>.txt&rdquo;
1
Argument: *.txt
```
所以在使用脚本时第一个参数一定要使用双引号。</p>

<h2>如何遍历文件包含子目录内的</h2>

<p>比如我们想遍历<code>/tmp/abc/def.txt</code> 我们可以使用<code>/tmp/**/.txt</code>即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby执行shell命令的六种方法]]></title>
    <link href="http://droidyue.com/blog/2014/11/18/six-ways-to-run-shell-in-ruby/"/>
    <updated>2014-11-18T21:17:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/11/18/six-ways-to-run-shell-in-ruby</id>
    <content type="html"><![CDATA[<p>在Ruby中，执行shell命令是一件不奇怪的事情，Ruby提供了大概6种方法供开发者进行实现。这些方法都很简单，本文将具体介绍一下如何在Ruby脚本中进行调用终端命令。</p>

<!--more-->


<h2>exec</h2>

<p>exec会将指定的命令替换掉当前进程中的操作,指定命令结束后，进程结束。
<code>ruby
exec 'echo "hello world"'
print 'abc'
</code>
执行上述的命令，结果如下，我们可以看到没有abc的输出，可以看出来，在执行<code>echo "hello world"</code>命令后进程就结束了。不会继续执行后面的<code>print 'abc'</code>。
<code>ruby
ruby testCommand.rb
hello world
</code>
使用exec一个头疼的事情就是没有办法知道shell命令执行成功还是失败。</p>

<h2>system</h2>

<p>system和exec相似，但是system执行的命令不会是在当前进程，而是在一个新创建的进程。system会返回布尔值来表明命令执行结果是成功还是失败。
```ruby
$ irb</p>

<blockquote><p>system &lsquo;echo &ldquo;hello $HOSTNAME&rdquo;&rsquo;
hello androidyue
 => true
puts $?
pid 11845 exit 0
 => nil
system &lsquo;false&rsquo;
 => false
puts $?
pid 11858 exit 1
 => nil</p>

<blockquote><p>```
system会将进程的退出的状态码赋值给$?，如果程序正常退出，$?的值为0，否则为非0。通过检测退出的状态码我们可以在ruby脚本中抛出异常或者进行重试操作。</p></blockquote></blockquote>

<p>注：在Unix-like系统中进程的退出状态码以0和非0表示，0代表成功，非0代表失败。</p>

<p>system可以告诉我们命令执行是成功还是失败，但是有些时候我们需要得到执行命令的输出，并在脚本中使用。显然system无法直接满足，需要我们使用反引号来实现。</p>

<h2>反引号(`)</h2>

<p>使用反引号是shell中常用的获取命令输出内容的方法，在ruby中也是可以，而且一点都需要做改变。使用反引号执行命令也会将命令在另一个进程中执行。
<code>ruby
1.9.3p448 :013 &gt; today = `date`
 =&gt; "Sat Nov 15 19:28:55 CST 2014\n"
1.9.3p448 :014 &gt; $?
 =&gt; #&lt;Process::Status: pid 11925 exit 0&gt;
1.9.3p448 :015 &gt; $?.to_i
 =&gt; 0
1.9.3p448 :016 &gt;
</code></p>

<p>上面的方法如此简单，我们可以直接对返回的字符串结果进行操作。</p>

<p>注意，$?已经不再是上述的那样单纯的退出状态码了，它实际上是一个Process::Status对象。我们从中不仅可以知道进程的退出状态码也可以知道进程的ID。使用<code>$?.to_i</code>会得到退出的状态码，使用<code>$?.to_s</code>会得到包含了进程id，退出状态码等信息的字符串。</p>

<p>使用反引号的一个结果就是我们只能得到标准的输出（stdout）而不能得到标准的错误信息(stderr),比如下面的例子，我们执行一个输出错误字符串的perl脚本。
```ruby
  $ irb</p>

<blockquote><blockquote><p>warning = <code>perl -e "warn 'dust in the wind'"</code>
  dust in the wind at -e line 1.
  => &ldquo;&rdquo;
puts warning</p></blockquote></blockquote>

<p>  => nil
```
可以看出，warning并没有得到出错的信息，这就表明反引号无法得到标准错误的信息。</p>

<h2>IO#popen</h2>

<p>IO#popen也是一种执行命令的方法,其命令也是在另外的进程中执行。使用popen你可以像操作IO对象一样处理标准输入和输出。
```ruby
$ irb</p>

<blockquote><blockquote><p>IO.popen(&ldquo;date&rdquo;) { |f| puts f.gets }
Mon Mar 12 18:58:56 PDT 2007
=> nil
```</p></blockquote></blockquote>

<h2>Open3#popen3</h2>

<p>在标准的Ruby库中还提供了一个Open3。使用这个类我们可以很容易的对标准输入，输出，错误进行处理。这里我们使用一个可以交互的工具dc。dc是一种逆波兰表达式（又叫做后缀表达式，每一运算符都置于其运算对象之后）的计算器，支持从标准输入读取数学表达式。在这个例子中，我们将两个数值和一个操作符进行压栈处理。然后使用p来输出结果。比如我们输入5和10，然后输入+，然后会得到15\n的输出。
```ruby
  $ irb</p>

<blockquote><blockquote><p>stdin, stdout, stderr = Open3.popen3(&lsquo;dc&rsquo;)
  => [#&lt;IO:0x6e5474>, #&lt;IO:0x6e5438>, #&lt;IO:0x6e53d4>]
stdin.puts(5)
  => nil
stdin.puts(10)
  => nil
stdin.puts(&ldquo;+&rdquo;)
  => nil
stdin.puts(&ldquo;p&rdquo;)
  => nil
stdout.gets
  => &ldquo;15\n&rdquo;
<code>
使用这个方法，我们不仅可以读取到命令的输出还可以对命令进行输入操作。这个方法对于进行交互操作很方便。通过popen3，我们还可以得到标准的错误信息。
</code>ruby
  # (irb continued&hellip;)
stdin.puts(&ldquo;asdfasdfasdfasdf&rdquo;)
  => nil
stderr.gets
  => &ldquo;dc: stack empty\n&rdquo;
<code>
但是，在ruby 1.8.5中popen3有一个缺陷，进程的退出状态没有写入到$?中。
</code>ruby
  $ irb
require &ldquo;open3&rdquo;
  => true
stdin, stdout, stderr = Open3.popen3(&lsquo;false&rsquo;)
  => [#&lt;IO:0x6f39c0>, #&lt;IO:0x6f3984>, #&lt;IO:0x6f3920>]
$?
  => #&lt;Process::Status: pid=26285,exited(0)>
$?.to_i
  => 0
```
为什么是0，false命令执行后的退出状态应该是非0才对，由于这个缺陷，我们需要了解一下Open4</p></blockquote></blockquote>

<h2>Open4#popen4</h2>

<p>Open4#popen4使用起来和Open3#popen3差不多，而且我们也可以得到程序的退出状态。popen4还可以返回一个子进程ID。你也可以通过Process::waitpid2 加上对应的进程ID获得进程退出状态。但是前提是要安装open4的gem。
```ruby
  $ irb</p>

<blockquote><blockquote><p>require &ldquo;open4&rdquo;
  => true
pid, stdin, stdout, stderr = Open4::popen4 &ldquo;false&rdquo;
  => [26327, #&lt;IO:0x6dff24>, #&lt;IO:0x6dfee8>, #&lt;IO:0x6dfe84>]
$?
  => nil
pid
  => 26327
ignored, status = Process::waitpid2 pid
  => [26327, #&lt;Process::Status: pid=26327,exited(1)>]
status.to_i
  => 256
```</p></blockquote></blockquote>

<h2>原文</h2>

<ul>
<li><a href="http://tech.natemurray.com/2007/03/ruby-shell-commands.html">http://tech.natemurray.com/2007/03/ruby-shell-commands.html</a></li>
<li>在原文基础上，进行了部分删减。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取shell脚本所在目录]]></title>
    <link href="http://droidyue.com/blog/2014/09/21/determine-shell-script-located-directory/"/>
    <updated>2014-09-21T17:48:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/21/determine-shell-script-located-directory</id>
    <content type="html"><![CDATA[<p>前几天写的<a href="http://droidredirect.sinaapp.com/qiniu_redirect.php" target="_blank">七牛</a>的参赛demo，用bash写了一个便捷安装的脚本，涉及到了路径相关的判断，从<a href="http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in" target="_blank">stackoverflow</a>，加上自己的实践整理一下。</p>

<!--more-->


<h3>简单版</h3>

<p>下面是一个最简单的实现，可以解决大多数问题，缺陷是对于软链接显示的是软链接所在的目录
```bash lineos:false</p>

<h1>!/bin/bash</h1>

<p>DIR=&ldquo;$( cd &rdquo;$( dirname &ldquo;$0&rdquo;  )&ldquo; &amp;&amp; pwd  )&rdquo;
```</p>

<h3>完善版</h3>

<p>这个版本解决了使用<code>ln -s target linkName</code>创造软链接无法正确取到真实脚本的问题。
```bash lineos:false</p>

<h1>!/bin/bash</h1>

<p>SOURCE=&ldquo;$0&rdquo;
while [ -h &ldquo;$SOURCE&rdquo;  ]; do # resolve $SOURCE until the file is no longer a symlink</p>

<pre><code>DIR="$( cd -P "$( dirname "$SOURCE"  )" &amp;&amp; pwd  )"
SOURCE="$(readlink "$SOURCE")"
[[ $SOURCE != /*  ]] &amp;&amp; SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
</code></pre>

<p>done
DIR=&ldquo;$( cd -P &rdquo;$( dirname &ldquo;$SOURCE&rdquo;  )&ldquo; &amp;&amp; pwd  )&rdquo;
```</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/0596009658/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=0596009658&linkCode=as2&tag=droidyue-23">Learning the Bash Shell</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=0596009658" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0096EXMS8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0096EXMS8&linkCode=as2&tag=droidyue-23">Linux命令行与shell脚本编程大全</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0096EXMS8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00N75YP74/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00N75YP74&linkCode=as2&tag=droidyue-23">穿布鞋的马云:决定阿里巴巴生死的27个节点</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00N75YP74" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在bash中检测进程是否正在运行]]></title>
    <link href="http://droidyue.com/blog/2014/06/29/check-running-process-in-bash/"/>
    <updated>2014-06-29T17:03:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/06/29/check-running-process-in-bash</id>
    <content type="html"><![CDATA[<p>这里简单介绍一个自己写的检测某个进程是否存在的bash小脚本。直接上代码。</p>

<!--more-->


<p>```bash</p>

<h1>!/bin/bash</h1>

<p>ps_out=<code>ps -ef | grep $1 | grep -v 'grep' | grep -v $0</code>
result=$(echo $ps_out | grep &ldquo;$1&rdquo;)
if [[ &ldquo;$result&rdquo; != &ldquo;&rdquo; ]];then</p>

<pre><code>echo "Running"
</code></pre>

<p>else</p>

<pre><code>echo "Not Running"
</code></pre>

<p>fi
```</p>

<h2>举例使用</h2>

<p>比如我们启动了一个这样的进程<code>python -m SimpleHTTPServer 8000</code>,我们想检测这个进程是否存在，可以这样。
<code>bash
17:38:07-androidyue~/osc_git/shell_works (master)$ ./checkRunningProcess.sh 'SimpleHTTPServer'
Running
</code></p>

<h2>些许说明</h2>

<ul>
<li>该脚本会自动去除<strong>包含目标信息的grep进程</strong>。以及<strong>当前这个正在执行的脚本</strong>。</li>
<li>使用保存文件后，确保具有可执行属性。</li>
</ul>


<h2>Read More</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/2903354/bash-script-to-check-running-process/24140715#24140715">http://stackoverflow.com/questions/2903354/bash-script-to-check-running-process/24140715#24140715</a></li>
</ul>


<h2>推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B009O49G7Q/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B009O49G7Q&linkCode=as2&tag=droidyue-23">Shell脚本编程诀窍:适用于Linux、Bash等</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B009O49G7Q" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BashBites:Loop Through In A Directory]]></title>
    <link href="http://droidyue.com/blog/2013/12/28/bashbites-loop-through-in-a-directory/"/>
    <updated>2013-12-28T10:12:00+08:00</updated>
    <id>http://droidyue.com/blog/2013/12/28/bashbites-loop-through-in-a-directory</id>
    <content type="html"><![CDATA[<p>The trick is really easy. Just to keep record.Here we take the /tmp folder as the desired one.
```bash</p>

<h1>!/bin/bash</h1>

<p>cd /tmp
for file in <code>ls</code>
do</p>

<pre><code>echo $file
</code></pre>

<p>done
```</p>

<h2>Others</h2>

<ul>
<li><a href="http://www.amazon.com/gp/product/0596009658/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0596009658&linkCode=as2&tag=droidyueblog-20&linkId=GR5OEAAOPTK3FZJL">Learning the bash Shell: Unix Shell Programming (In a Nutshell (O'Reilly))</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=0596009658" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
