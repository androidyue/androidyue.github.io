<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 作品 | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/zuo-pin/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-02-29T19:23:25+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个简易小工具，七牛Uploader for Octopress]]></title>
    <link href="http://droidyue.com/blog/2016/02/28/an-easy-tool-to-upload-file-to-qiniu-especially-for-octopress/"/>
    <updated>2016-02-28T17:15:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/02/28/an-easy-tool-to-upload-file-to-qiniu-especially-for-octopress</id>
    <content type="html"><![CDATA[<p>春节假期，带着电脑回家，蹭着邻居的网，除夕晚上用ruby写了一个简单的工具。安利一下，广而告之。</p>

<!--more-->


<h2>为什么写这个应用</h2>

<h3>为什么用七牛</h3>

<p>七牛是我比较看好的一个云存储，其国内国外有很多cdn，如果我把我的网站放到七牛上，打开速度应该会显著提升。</p>

<h3>为什么还自己写</h3>

<ul>
<li>七牛官方的qrsync不支持例外目录，会上传.git文件夹下的内容</li>
<li>七牛的qrsync更新策略不符合我的需求</li>
<li>自己有时间和能力</li>
</ul>


<h2>功能描述</h2>

<ul>
<li>暂时只支持对文件的上传和更新，不含删除和下载功能</li>
<li>尤其适合于Octopress网站</li>
</ul>


<h2>使用</h2>

<h3>创建授权信息文件</h3>

<p>从七牛后台 账号&mdash;>秘钥 中获取AccessKey和SecretKey分别填入下面
<code>
[auth]
access_key = ""
secret_key = ""
</code>
将上述内容保存成文件<code>.qiniu.ini</code> 放在同步脚本的祖先目录上即可，也可以放在家目录。</p>

<p>举个例子，比如你的同步脚本放在<code>~/tools/notes/sync_dir/</code>下，你的配置文件，可以放在<code>~/</code>,<code>~/tools/</code>以及<code>~/tools/notes/</code>。</p>

<p>注意，不要将上述文件放同步脚本目录，以免信息泄露。</p>

<h3>同步</h3>

<p>使用方法如下，很简单，需要传入同步文件夹路径和bucket名称</p>

<p><code>java
ruby push2Qiniu.rb dir_to_sync bucket
</code></p>

<h2>实现原理</h2>

<p>实现原理很简单，基本如下</p>

<ul>
<li>新文件 直接上传</li>
<li>已存在的文件，如果lastModified没有变化，不上传</li>
<li>已存在的文件，如果lastModified有变化，检测文件内容md5，如果和上一次不同，则上传，否则不上传。</li>
</ul>


<h2>和Octopress集成</h2>

<p>修改Octopress的Rakefile文件
```ruby
desc &ldquo;Default deploy task&rdquo;
task :deploy do
  # Check if preview posts exist, which should not be published
  if File.exists?(&ldquo;.preview-mode&rdquo;)</p>

<pre><code>puts "## Found posts in preview mode, regenerating files ..."
File.delete(".preview-mode")
Rake::Task[:generate].execute
</code></pre>

<p>  end</p>

<p>  Rake::Task[:copydot].invoke(source_dir, public_dir)
  atom2rssDir = &lsquo;~/osc_git/php_works/&rsquo;
  Rake::Task[&ldquo;#{deploy_default}&rdquo;].execute
  //在这里加入同步脚本执行
end
```</p>

<h2>源码</h2>

<ul>
<li><a href="https://github.com/androidyue/Qiniu_Uploader">Qiniu_Uploader</a></li>
</ul>


<h2>使用七牛</h2>

<p>下面的是七牛的一位员工的QQ二维码，想要使用七牛（每月免费10G流量）并得到更多优惠，请联系她，注明来自技术小黑屋。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/qiniu_tina.jpg" alt="http://7jpolu.com1.z0.glb.clouddn.com/qiniu_tina.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的首个Chrome扩展发布了]]></title>
    <link href="http://droidyue.com/blog/2016/01/31/my-first-chrome-extension/"/>
    <updated>2016-01-31T17:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/01/31/my-first-chrome-extension</id>
    <content type="html"><![CDATA[<p>忙活了有一段时间，零零散散的写了一个Chrome扩展。这里发发一篇文章安利一下。</p>

<!--more-->


<h2>怎样的一个扩展呢</h2>

<p>它是一个Gmail 过滤器辅助工具，使用这个扩展可以轻松的创建邮件过滤器。</p>

<h2>有图有真相</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1f0it0nbx2pj21400o9gxa.jpg" alt="gmail filter helper" /></p>

<h2>如何下载</h2>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/gmail-filter-helper/iodbdhjpfeokiciiicojjkpffcjnioda">Chrome Store</a></li>
<li><a href="http://7jpqsg.com1.z0.glb.clouddn.com/GmailFilterHelper.crx">大中华局域网用户下载地址</a></li>
</ul>


<h2>为什么写这个扩展</h2>

<p>还是那个原因，自己遇到了不爽与痛点。</p>

<p>我是一个重度的Gmail用户，工作的邮箱使用Gmail托管。而是用邮箱最大的烦恼就是处理垃圾邮件。好在Gmail支持创建过滤器来永久地过滤这些垃圾邮件。</p>

<p>创建一个Filter大致的流程是这样的</p>

<p>  1.复制过滤规则（通常为邮件地址）<br/>
  2.点击创建Filter按钮<br/>
  3.将过滤规则填入Filter条件框中<br/>
  4.点击创建规则</p>

<p>然而，这实际上是一个重复的步骤，偶尔一次还好，多次就不那么OK了。</p>

<p>好在，我是一个程序员（虽然不是一个前端攻城狮），但是还是花了周末的一个下午写出了这个应用的雏形。再加上后续的修修改改就成了这个样子。</p>

<h2>开源么</h2>

<p>当然开源，原因如下</p>

<ul>
<li>个人能力和精力毕竟有限</li>
<li>希望通过社区的力量推动这个扩展持续发展</li>
</ul>


<p>所以，如果你有想法的话，可以访问这个Github地址</p>

<p><a href="https://github.com/androidyue/Gmail-Helper-Filter">https://github.com/androidyue/Gmail-Helper-Filter</a></p>

<h2>贡献力量</h2>

<p>除了开源贡献代码外，如果你有想法，也可以共享力量，比如</p>

<ul>
<li>提需求</li>
<li>提bug</li>
<li>分享本文或扩展</li>
<li>捐赠（下面那个红色按钮）</li>
</ul>


<h2>感谢</h2>

<ul>
<li>再次感谢我的御用设计师 大麦 帮我制作logo。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的七牛参赛作品]]></title>
    <link href="http://droidyue.com/blog/2014/09/13/my-work-for-qiniu-demo/"/>
    <updated>2014-09-13T13:19:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/13/my-work-for-qiniu-demo</id>
    <content type="html"><![CDATA[<p>使用Ocopress写博客将近一年多了，大概几个月前同事给我推荐了<a href="http://droidredirect.sinaapp.com/qiniu_redirect.php" target="_blank">七牛</a>做网站的静态文件存储服务，于是果断尝试了一下，发现真实不错。速度不错，而且有免费套餐。很是支持。最近发现七牛有一个demo大赛，于是果断参加了。</p>

<!--more-->


<h2>痛点</h2>

<ul>
<li>域名Godaddy购买，无法备案，不能使用七牛的独立域名绑定</li>
<li>服务器为github pages， 有300M空间限制，所以只能把静态文件放到七牛</li>
<li>每次写带图片等资源的博客，都需要先上传到七牛，然后得到外链地址，贴回到博客，过于繁琐啦。</li>
</ul>


<h2>解决思路</h2>

<p>由于ocotpress程序是将markdown文档转换成纯静态的HTML网页，我们可以在这个转换过程之前或者期间将图片等资源自动上传到七牛服务器，然后替换这些资源的地址为已上传文件的外链。</p>

<h2>实现细节</h2>

<ul>
<li>通过rb-inotify检测文件变化，新文件会直接上传，已经上传过的文件则覆盖更新。避免在生成html网页时大量拥挤上传</li>
<li>进行rake generate时，对没有上传的文件进行上传</li>
<li>通过sqlite数据库，记录文件路径和最后修改时间进行验证。</li>
</ul>


<h2>好处</h2>

<ul>
<li>节省了博客在github中的空间占用，让github空间限制几乎不再存在。只剩纯文本了，能占用多少空间</li>
<li>提高了在国内的访问的速度</li>
<li>使用更多的七牛的服务，比如防盗链等功能。</li>
</ul>


<h2>安装</h2>

<p>如果尚未安装Octopress，请参考<a href="http://blog.segmentfault.com/yaashion_xiang/1190000000364677" target="_blank">本文</a>安装。</p>

<h3>超级简单的一步安装</h3>

<p><code>bash
cd YOUR_OCTOPRESS_ROOT_DIR
curl -o /tmp/install.sh https://gitcafe.com/androidyue/octopress_qiniu/raw/master/install.sh &amp;&amp; bash /tmp/install.sh
</code></p>

<h3>配置文件</h3>

<p>安装过程中，会使用vi打开一个配置文件，文件内容为，文件路径位于家目录下的.qiniu.ini。按照自己的实际情况填写配置即可。
```bash</p>

<h1>Qiniu Config File</h1>

<h1>Project</h1>

<p>[octopress]</p>

<h1>Your Bucket to Store Images In Octopress</h1>

<p>image_bucket = &ldquo;your_bucket&rdquo;</p>

<h1>Your Image Folder Path to store the files locally. Usually it&rsquo;s #{OCTORESS_DIRECTORY}/public/images/</h1>

<p>image_dir = &ldquo;image_dir_in_octopress&rdquo;</p>

<h1>Auth Info</h1>

<h1>Generate two following two keys in Qiniu Web Portal</h1>

<p>[auth]
access_key = &ldquo;your_access_key&rdquo;
secret_key = &ldquo;your_secret_key&rdquo;
```</p>

<h2>启动程序</h2>

<p>配置完成，轻松执行一个脚本就可以启动监控文件变化自动上传的程序了。当检测目录有文件变化时就会自动上传到七牛的文件服务器。
<code>bash
YOUR_OCTOPRESS_ROOT_DIR/startQiniu.sh
</code></p>

<h2>文件介绍</h2>

<p><code>bash
.
|-- install.sh  #快捷安装脚本
|-- octopress   #覆盖octopress程序的目录
|   `-- plugins
|       `-- image_tag.rb # 覆盖Octopress 程序自带的image_tag，实现图片上传到七牛
|-- qiniu       #工具程序的主目录
|   |-- qiniuCLI.rb    #命令行工具，这个工具是所有上传下载请求的对外处理程序，本工具中所有的请求都是直接调用这个工具。
|   |-- .qiniu_config_template.ini #配置文件模板，不要对这个文件直接配置，请使用家目录下的.qiniu.ini进行配置
|   |-- qiniuCore.rb   #最主要的处理脚本。支持从ini文件读取配置，数据库存储文件的上传信息，调用七牛的SDK来完成文件的上传和下载。
|   |-- .qiniu.db      #数据库文件，存储上传的记录
|   |-- qiniuFileNotifier.rb  #监控配置目录变化，自动上传或者覆盖文件。
|   `-- .setupQiniu.rb #安装需要的gem，复制配置文件到家目录
|-- README.md  #说明文件
`-- startQiniu.sh #检查安装情况并启动文件监控自动上传启动程序
</code></p>

<h2>源码地址</h2>

<ul>
<li><a href="https://gitcafe.com/androidyue/octopress_qiniu" target="_blank">我的七牛参赛作品</a></li>
</ul>


<h3>解答问题</h3>

<ul>
<li>提问：为什么配置文件放在家目录下</li>
<li><p>回答：配置文件中包含了七牛的accessKey和accessSecret，默认的ocotpress受git管理，为了避免将配置文件误加入git管理，传到服务器端造成前面的accessKey和acessSecret泄露，所以放到家目录下。</p></li>
<li><p>提问：既然文件都上传到了，是不是可以删除掉存储到public/images/的文件</p></li>
<li>回答：当然可以，因为生成的网页的图片地址为七牛的外链地址，目前程序没有做主动删除文件的操作。</li>
</ul>


<h3>投票地址</h3>

<p>我的作品名称<strong>octopress_qiniu</strong></p>

<p><a href="http://campaign.gitcafe.com/qiniu-demo?page=11">投票地址</a></p>

<p>最后希望大家多多支持，投我一票哈。</p>
]]></content>
  </entry>
  
</feed>
