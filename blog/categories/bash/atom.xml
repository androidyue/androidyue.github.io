<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-02-29T19:23:25+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[获取shell脚本所在目录]]></title>
    <link href="http://droidyue.com/blog/2014/09/21/determine-shell-script-located-directory/"/>
    <updated>2014-09-21T17:48:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/21/determine-shell-script-located-directory</id>
    <content type="html"><![CDATA[<p>前几天写的<a href="http://droidredirect.sinaapp.com/qiniu_redirect.php" target="_blank">七牛</a>的参赛demo，用bash写了一个便捷安装的脚本，涉及到了路径相关的判断，从<a href="http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in" target="_blank">stackoverflow</a>，加上自己的实践整理一下。</p>

<!--more-->


<h3>简单版</h3>

<p>下面是一个最简单的实现，可以解决大多数问题，缺陷是对于软链接显示的是软链接所在的目录
```bash lineos:false</p>

<h1>!/bin/bash</h1>

<p>DIR=&ldquo;$( cd &rdquo;$( dirname &ldquo;$0&rdquo;  )&ldquo; &amp;&amp; pwd  )&rdquo;
```</p>

<h3>完善版</h3>

<p>这个版本解决了使用<code>ln -s target linkName</code>创造软链接无法正确取到真实脚本的问题。
```bash lineos:false</p>

<h1>!/bin/bash</h1>

<p>SOURCE=&ldquo;$0&rdquo;
while [ -h &ldquo;$SOURCE&rdquo;  ]; do # resolve $SOURCE until the file is no longer a symlink</p>

<pre><code>DIR="$( cd -P "$( dirname "$SOURCE"  )" &amp;&amp; pwd  )"
SOURCE="$(readlink "$SOURCE")"
[[ $SOURCE != /*  ]] &amp;&amp; SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
</code></pre>

<p>done
DIR=&ldquo;$( cd -P &rdquo;$( dirname &ldquo;$SOURCE&rdquo;  )&ldquo; &amp;&amp; pwd  )&rdquo;
```</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/0596009658/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=0596009658&linkCode=as2&tag=droidyue-23">Learning the Bash Shell</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=0596009658" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0096EXMS8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0096EXMS8&linkCode=as2&tag=droidyue-23">Linux命令行与shell脚本编程大全</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0096EXMS8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00N75YP74/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00N75YP74&linkCode=as2&tag=droidyue-23">穿布鞋的马云:决定阿里巴巴生死的27个节点</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00N75YP74" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在bash中检测进程是否正在运行]]></title>
    <link href="http://droidyue.com/blog/2014/06/29/check-running-process-in-bash/"/>
    <updated>2014-06-29T17:03:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/06/29/check-running-process-in-bash</id>
    <content type="html"><![CDATA[<p>这里简单介绍一个自己写的检测某个进程是否存在的bash小脚本。直接上代码。</p>

<!--more-->


<p>```bash</p>

<h1>!/bin/bash</h1>

<p>ps_out=<code>ps -ef | grep $1 | grep -v 'grep' | grep -v $0</code>
result=$(echo $ps_out | grep &ldquo;$1&rdquo;)
if [[ &ldquo;$result&rdquo; != &ldquo;&rdquo; ]];then</p>

<pre><code>echo "Running"
</code></pre>

<p>else</p>

<pre><code>echo "Not Running"
</code></pre>

<p>fi
```</p>

<h2>举例使用</h2>

<p>比如我们启动了一个这样的进程<code>python -m SimpleHTTPServer 8000</code>,我们想检测这个进程是否存在，可以这样。
<code>bash
17:38:07-androidyue~/osc_git/shell_works (master)$ ./checkRunningProcess.sh 'SimpleHTTPServer'
Running
</code></p>

<h2>些许说明</h2>

<ul>
<li>该脚本会自动去除<strong>包含目标信息的grep进程</strong>。以及<strong>当前这个正在执行的脚本</strong>。</li>
<li>使用保存文件后，确保具有可执行属性。</li>
</ul>


<h2>Read More</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/2903354/bash-script-to-check-running-process/24140715#24140715">http://stackoverflow.com/questions/2903354/bash-script-to-check-running-process/24140715#24140715</a></li>
</ul>


<h2>推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B009O49G7Q/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B009O49G7Q&linkCode=as2&tag=droidyue-23">Shell脚本编程诀窍:适用于Linux、Bash等</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B009O49G7Q" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check If A Python Module Is Installed]]></title>
    <link href="http://droidyue.com/blog/2013/11/16/check-if-a-python-module-is-installed/"/>
    <updated>2013-11-16T20:14:00+08:00</updated>
    <id>http://droidyue.com/blog/2013/11/16/check-if-a-python-module-is-installed</id>
    <content type="html"><![CDATA[<p>I was once stucked in How to check Whether a Python module has been installed or not. After Googling, I found this trick.<br/>
Python allows user to pass command from out of a python file.See here<br/>
<code>bash
-c cmd : program passed in as string (terminates option list)
</code>
The result if we import an installed module
```bash
20:15:45-androidyue~/osc_git/LnxClient (master)$ python -c &ldquo;import os&rdquo;
20:31:24-androidyue~/osc_git/LnxClient (master)$ echo $?
0</p>

<h1>0 means the module has been installed</h1>

<p><code>
Now if we import an module which is not installed.
</code>bash
20:31:41-androidyue~/osc_git/LnxClient (master)$ python -c &ldquo;import aaa&rdquo;
Traceback (most recent call last):
File &ldquo;<string>&rdquo;, line 1, in <module>
ImportError: No module named aaa
20:31:46-androidyue~/osc_git/LnxClient (master)$ echo $?
1</p>

<h1>1 means that module is not installed.</h1>

<p>```</p>

<h3>Others</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/1449355730/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1449355730&linkCode=as2&tag=droidyueblog-20&linkId=7AFWCWKMVI6GVH3K">Learning Python, 5th Edition</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=1449355730" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
