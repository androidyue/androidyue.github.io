<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GooglePlay | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/googleplay/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2015-07-18T17:38:35+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Package Stopped State Since Android 3.1]]></title>
    <link href="http://droidyue.com/blog/2014/01/04/package-stop-state-since-android-3-dot-1/"/>
    <updated>2014-01-04T20:07:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/01/04/package-stop-state-since-android-3-dot-1</id>
    <content type="html"><![CDATA[<h2>First Bite</h2>

<p>Since Android 3.1, Android has introduced a LaunchControl mechanism. It&rsquo;s call Stopped State.</p>

<!--more-->


<p>Here is what Google describes</p>

<h4>What is Stopped State</h4>

<blockquote><p>Starting from Android 3.1, the system&rsquo;s package manager keeps track of applications that are in a stopped state and provides a means of controlling their launch from background processes and other applications.</p>

<p>Note that an application&rsquo;s stopped state is not the same as an Activity&rsquo;s stopped state. The system manages those two stopped states separately.</p></blockquote>

<h4>Why Android Adds this</h4>

<blockquote><p>Note that the system adds FLAG_EXCLUDE_STOPPED_PACKAGES to all broadcast intents. It does this to prevent broadcasts from background services from inadvertently or unnecessarily launching components of stoppped applications. A background service or application can override this behavior by adding the FLAG_INCLUDE_STOPPED_PACKAGES flag to broadcast intents that should be allowed to activate stopped applications.</p></blockquote>

<p>As the above references point out it will prevent broadcast intents delivering to stopped packages. Actually this control mechanism will ensure safety and save energy.</p>

<h2>State Switch from/to Stopped State</h2>

<p>What Google says</p>

<blockquote><p>Applications are in a stopped state when they are first installed but are not yet launched and when they are manually stopped by the user (in Manage Applications).</p></blockquote>

<h3>To Stopped Sate</h3>

<ul>
<li>Manually force-stop in Manage Application of Settings.</li>
<li>adb shell am force-stop package-name</li>
<li>Use Hidden Method ActivityManager.forceStopPackages(String packageName) with Right Permission &lt;uses-permission android:name=&ldquo;android.permission.FORCE_STOP_PACKAGES&rdquo;/> It&rsquo;s without test.</li>
</ul>


<h3>To Normal State (Not Stopped)</h3>

<ul>
<li>Manually Launch your application.</li>
<li>Use adb to Activate components(Activity or Receiver ) of the application</li>
</ul>


<h2>Send Broadcast Intent to Stopped Packages</h2>

<blockquote><p>The platform defines two new intent flags that let a sender specify whether the Intent should be allowed to activate components in stopped application.</p>

<p>FLAG_INCLUDE_STOPPED_PACKAGES — Include intent filters of stopped applications in the list of potential targets to resolve against.
FLAG_EXCLUDE_STOPPED_PACKAGES — Exclude intent filters of stopped applications from the list of potential targets.
When neither or both of these flags is defined in an intent, the default behavior is to include filters of stopped applications in the list of potential targets.</p></blockquote>

<ul>
<li>Add your Intent Flag FLAG_INCLUDE_STOPPED_PACKAGES in Java</li>
<li>Use ADB with Flag FLAG_INCLUDE_STOPPED_PACKAGES such as <strong>adb shell am broadcast -a com.android.vending.INSTALL_REFERRER -f 32</strong></li>
</ul>


<h2>Check Package Stopped</h2>

<ul>
<li>Manually Check InstalledAppDetails in Manage applications of Settings.</li>
<li>Step into Terminal of the Device and <strong>cat /data/system/packages-stopped.xml</strong></li>
</ul>


<h2>special Issues</h2>

<ul>
<li>Q:If My application has no activities and it just has a receiver, How can I activate and receive common broadcast intents?</li>
<li><p>A:Actually your above application is actually Not Stopped State when it&rsquo;s first installed. Becuase It has no launcher clickable chance. It can receive normal broadcast smoothly If you do not manually force-stop it.</p></li>
<li><p>Q:Will the system application be in stopped state when it&rsquo;s first installed?</p></li>
<li><p>A:The apps located in /system/app are what we called System Applications. It&rsquo;s Not in stopped state when it&rsquo;s installed.</p></li>
<li><p>Q:Will Google Play App still sends campaign broadcast to my application to keep track of install referrers?</p></li>
<li>A:Actually It does work smoothly. And I have tested on 4.0 OS device. I think the Play Store App adds FLAG_INCLUDE_STOPPED_PACKAGES to the broadcast intent.</li>
</ul>


<h2>Referrences Links</h2>

<ul>
<li><a href="http://developer.android.com/about/versions/android-3.1.html">http://developer.android.com/about/versions/android-3.1.html</a></li>
</ul>


<h3>Others</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/B009KCUTTQ/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B009KCUTTQ&linkCode=as2&tag=droidyueblog-20&linkId=GP6PHZQVF3UC2REP">Programming Android: Java Programming for the New Generation of Mobile Devices</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=B009KCUTTQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Android System Available Features]]></title>
    <link href="http://droidyue.com/blog/2013/12/03/get-android-system-available-features/"/>
    <updated>2013-12-03T17:20:00+08:00</updated>
    <id>http://droidyue.com/blog/2013/12/03/get-android-system-available-features</id>
    <content type="html"><![CDATA[<p>An easy way to get system available features.</p>

<p>```java
private void dumpSystemFeatures() {</p>

<pre><code>FeatureInfo[] features = this.getPackageManager().getSystemAvailableFeatures();
    for (FeatureInfo f : features) {
        Log.i(LOGTAG, "dumpSystemFeatures f" + f);
    }
</code></pre>

<p>}
<code>
Have a glance at the result  
</code>
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d74fd0 android.hardware.wifi fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75048 android.hardware.location.network fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d750d8 android.hardware.nfc fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75150 com.google.android.feature.GOOGLE_BUILD fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d751f0 android.hardware.location fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75270 android.hardware.sensor.gyroscope fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75300 android.hardware.screen.landscape fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75390 android.hardware.screen.portrait fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75420 android.hardware.wifi.direct fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d754a8 android.hardware.usb.accessory fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75530 android.hardware.bluetooth fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d755b0 android.hardware.touchscreen.multitouch.distinct fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75660 android.hardware.microphone fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d756e8 android.hardware.sensor.light fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75770 android.hardware.camera.autofocus fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75800 android.software.live_wallpaper fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75890 android.hardware.camera.flash fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75918 android.hardware.telephony fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75998 android.software.sip fl=0x0}
&hellip;&hellip;
```</p>

<h2>The Other way</h2>

<p>You can also use <code>adb shell</code> to get into the shell of your device and the use  <code>pm list features</code>  to get the available features of a device.
<code>
root@android:/ # pm list features
feature:reqGlEsVersion=0x20000
feature:android.hardware.bluetooth
feature:android.hardware.camera
feature:android.hardware.camera.autofocus
feature:android.hardware.camera.flash
feature:android.hardware.camera.front
feature:android.hardware.faketouch
feature:android.hardware.location
feature:android.hardware.location.gps
feature:android.hardware.location.network
feature:android.hardware.microphone
feature:android.hardware.nfc
feature:android.hardware.screen.landscape
feature:android.hardware.screen.portrait
feature:android.hardware.sensor.accelerometer
feature:android.hardware.sensor.compass
feature:android.hardware.sensor.gyroscope
feature:android.hardware.sensor.light
feature:android.hardware.sensor.proximity
feature:android.hardware.telephony
feature:android.hardware.telephony.gsm
feature:android.hardware.touchscreen
feature:android.hardware.touchscreen.multitouch
feature:android.hardware.touchscreen.multitouch.distinct
feature:android.hardware.touchscreen.multitouch.jazzhand
feature:android.hardware.usb.accessory
feature:android.hardware.usb.host
feature:android.hardware.wifi
feature:android.hardware.wifi.direct
feature:android.software.live_wallpaper
feature:android.software.sip
feature:android.software.sip.voip
feature:com.cisco.anyconnect.permissions.patch.htc
feature:com.htc.android.rosie.widget
feature:com.htc.lockscreen.fusion
feature:com.nxp.mifare
</code></p>

<p>For a detailed understanding of use-filter,please read this post <a href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html">http://developer.android.com/guide/topics/manifest/uses-feature-element.html</a></p>

<h3>Others</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/1118183487/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1118183487&linkCode=as2&tag=droidyueblog-20&linkId=K5JVVV33JQSV3IMA">Professional Android Sensor Programming</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=1118183487" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get An Application Required Features]]></title>
    <link href="http://droidyue.com/blog/2013/12/03/get-an-application-required-features/"/>
    <updated>2013-12-03T17:20:00+08:00</updated>
    <id>http://droidyue.com/blog/2013/12/03/get-an-application-required-features</id>
    <content type="html"><![CDATA[<p>How to get application&rsquo;s required features? Actually the <strong>aapt</strong> really does a great help.
```bash</p>

<h1>Usage:aapt dump badging apk_location | grep feature</h1>

<h1>Example</h1>

<p>aapt dump badging /tmp/language_check_maxthon_99985f_2793_4.1.3.1000_remote_develop.apk | grep Features</p>

<h1>Result</h1>

<p>uses-feature-not-required:&lsquo;android.hardware.location&rsquo;
uses-feature-not-required:&lsquo;android.hardware.location.network&rsquo;
uses-feature-not-required:&lsquo;android.hardware.location.gps&rsquo;
uses-feature-not-required:&lsquo;android.hardware.screen.portrait&rsquo;
uses-feature-not-required:&lsquo;android.hardware.telephony&rsquo;
uses-feature-not-required:&lsquo;android.hardware.wifi&rsquo;
uses-feature:&lsquo;android.hardware.touchscreen&rsquo;
uses-implied-feature:&lsquo;android.hardware.touchscreen&rsquo;,&lsquo;assumed you require a touch screen unless explicitly made optional&rsquo;
```
To understand the feature more detailed, please visit <a href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html">http://developer.android.com/guide/topics/manifest/uses-feature-element.html</a></p>

<h3>Others</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/1118183487/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1118183487&linkCode=as2&tag=droidyueblog-20&linkId=K5JVVV33JQSV3IMA">Professional Android Sensor Programming</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=droidyueblog-20&l=as2&o=1&a=1118183487" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
