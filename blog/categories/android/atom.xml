<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2015-07-24T22:26:57+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[说说Android中的ANR]]></title>
    <link href="http://droidyue.com/blog/2015/07/18/anr-in-android/"/>
    <updated>2015-07-18T17:53:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/07/18/anr-in-android</id>
    <content type="html"><![CDATA[<p>有过Android开发经历的人都不会对ANR陌生，它和崩溃一样是程序设计的问题。本文将以较为深入的视角来介绍什么是ANR，出现场景，如何避免以及如何定位分析ANR,希望可以帮助大家在编写程序时有所帮助。</p>

<!--more-->


<h2>什么是ANR</h2>

<p>ANR全称<code>Application Not Responding</code>，意思就是程序未响应。如果一个应用无法响应用户的输入，系统就会弹出一个ANR对话框，如下图所示,用户可以自行选择继续等待亦或者是停止当前程序。</p>

<p>{%img <a href="http://droidyueimg.qiniudn.com/android_anr.png">http://droidyueimg.qiniudn.com/android_anr.png</a> %}</p>

<h2>出现场景</h2>

<ul>
<li>主线程被IO操作（从4.0之后网络IO不允许在主线程中）阻塞。</li>
<li>主线程中存在耗时的计算</li>
<li>主线程中错误的操作，比如Thread.wait或者Thread.sleep等</li>
</ul>


<p>Android系统会监控程序的响应状况，一旦出现下面两种情况，则弹出ANR对话框</p>

<ul>
<li>应用在<strong>5秒</strong>内未响应用户的输入事件（如按键或者触摸）</li>
<li>BroadcastReceiver未在<strong>10秒</strong>内完成相关的处理</li>
</ul>


<h2>如何避免</h2>

<p>基本的思路就是将IO操作在工作线程来处理，减少其他耗时操作和错误操作</p>

<ul>
<li>使用<a href="http://droidyue.com/blog/2014/11/08/bad-smell-of-asynctask-in-android/">AsyncTask</a>处理耗时IO操作。</li>
<li>使用Thread或者HandlerThread时，调用Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)设置优先级，否则仍然会降低程序响应，因为默认Thread的优先级和主线程相同。</li>
<li>使用<a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/">Handler</a>处理工作线程结果，而不是使用Thread.wait()或者Thread.sleep()来阻塞主线程。</li>
<li>Activity的onCreate和onResume回调中尽量避免耗时的代码</li>
<li>BroadcastReceiver中onReceive代码也要尽量减少耗时，建议使用IntentService处理。</li>
</ul>


<h2>画龙点睛</h2>

<p>通常100到200毫秒就会让人察觉程序反应慢，为了更加提升响应，可以使用下面的几种方法</p>

<ul>
<li>如果程序正在后台处理用户的输入，建议使用让用户得知进度，比如使用ProgressBar控件。</li>
<li>程序启动时可以选择加上欢迎界面，避免让用户察觉卡顿。</li>
<li>使用Systrace和TraceView找出影响响应的问题。</li>
</ul>


<h2>如何定位</h2>

<p>如果开发机器上出现问题，我们可以通过查看<code>/data/anr/traces.txt</code>即可，最新的ANR信息在最开始部分。我们从stacktrace中即可找到出问题的具体行数。本例中问题出现在MainActivity.java 27行，因为这里调用了Thread.sleep方法。
```java
root@htc_m8tl:/ # cat /data/anr/traces.txt | more</p>

<p>&mdash;&mdash;&ndash; pid 30307 at 2015-05-30 14:51:14 &mdash;&mdash;&ndash;
Cmd line: com.example.androidyue.bitmapdemo</p>

<p>JNI: CheckJNI is off; workarounds are off; pins=0; globals=272</p>

<p>DALVIK THREADS:
(mutexes: tll=0 tsl=0 tscl=0 ghl=0)</p>

<p>&ldquo;main&rdquo; prio=5 tid=1 TIMED_WAIT
  | group=&ldquo;main&rdquo; sCount=1 dsCount=0 obj=0x416eaf18 self=0x416d8650
  | sysTid=30307 nice=0 sched=0/0 cgrp=apps handle=1074565528
  | state=S schedstat=( 0 0 0 ) utm=5 stm=4 core=3
  at java.lang.VMThread.sleep(Native Method)
  at java.lang.Thread.sleep(Thread.java:1044)
  at java.lang.Thread.sleep(Thread.java:1026)
  at com.example.androidyue.bitmapdemo.MainActivity$1.run(MainActivity.java:27)
  at android.app.Activity.runOnUiThread(Activity.java:4794)
  at com.example.androidyue.bitmapdemo.MainActivity.onResume(MainActivity.java:33)
  at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1282)
  at android.app.Activity.performResume(Activity.java:5405)
```</p>

<p>如果是线上版本引起的，Google Play后台有相关的数据可以帮助查看分析并解决问题。</p>

<h2>细致分析</h2>

<p>  <strong>提问</strong>: BroadcastReceiver过了60秒居然没有ANR？ 现场代码如下
```java
public class NetworkReceiver extends BroadcastReceiver{</p>

<pre><code>private static final String LOGTAG = "NetworkReceiver";

@Override
public void onReceive(Context context, Intent intent) {
    Log.i(LOGTAG, "onReceive intent=" + intent);
    try {
        Thread.sleep(60000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    Log.i(LOGTAG, "onReceive end");
}
</code></pre>

<p>}
```
  <strong>回答</strong>：实际上已经发生了ANR，只是没有进行对话框弹出而已。这种ANR就是background ANR，即后台程序的ANR，我们可以通过过滤日志验证</p>

<p><code>java
adb logcat | grep "NetworkReceiver|ActivityManager|WindowManager"
I/NetworkReceiver( 4109): onReceive intent=Intent { act=android.net.conn.CONNECTIVITY_CHANGE flg=0x8000010 cmp=com.example.androidyue.bitmapdemo/.NetworkReceiver (has extras) }
I/ActivityManager(  462): No longer want com.android.exchange (pid 1054): empty #17
I/NetworkReceiver( 4109): onReceive end
W/BroadcastQueue(  462): Receiver during timeout: ResolveInfo{5342dde4 com.example.androidyue.bitmapdemo.NetworkReceiver p=0 o=0 m=0x108000}
E/ActivityManager(  462): ANR in com.example.androidyue.bitmapdemo
E/ActivityManager(  462): Reason: Broadcast of Intent { act=android.net.conn.CONNECTIVITY_CHANGE flg=0x8000010 cmp=com.example.androidyue.bitmapdemo/.NetworkReceiver (has extras) }
E/ActivityManager(  462): Load: 0.37 / 0.2 / 0.14
E/ActivityManager(  462): CPU usage from 26047ms to 0ms ago:
E/ActivityManager(  462):   0.4% 58/adbd: 0% user + 0.4% kernel / faults: 1501 minor
E/ActivityManager(  462):   0.3% 462/system_server: 0.1% user + 0.1% kernel
E/ActivityManager(  462):   0% 4109/com.example.androidyue.bitmapdemo: 0% user + 0% kernel / faults: 6 minor
E/ActivityManager(  462): 1.5% TOTAL: 0.5% user + 0.9% kernel + 0% softirq
E/ActivityManager(  462): CPU usage from 87ms to 589ms later:
E/ActivityManager(  462):   1.8% 58/adbd: 0% user + 1.8% kernel / faults: 30 minor
E/ActivityManager(  462):     1.8% 58/adbd: 0% user + 1.8% kernel
E/ActivityManager(  462): 4% TOTAL: 0% user + 4% kernel
W/ActivityManager(  462): Killing ProcessRecord{5326d418 4109:com.example.androidyue.bitmapdemo/u0a10063}: background ANR
I/ActivityManager(  462): Process com.example.androidyue.bitmapdemo (pid 4109) has died.
</code>
除了日志，我们还可以根据前面提到的查看traces.txt文件。</p>

<p><strong>提问</strong>:可以更容易了解background ANR么？</p>

<p><strong>回答</strong>:当然可以，在Android开发者选项&mdash;>高级&mdash;>显示所有”应用程序无响应“勾选即可对后台ANR也进行弹窗显示，方便查看了解程序运行情况。</p>

<h2>参考文章</h2>

<ul>
<li><a href="http://developer.android.com/intl/zh-cn/training/articles/perf-anr.html">Keeping Your App Responsive</a></li>
</ul>


<p>{%include post/book_copyright.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play Services 7.5新增API及多项特性]]></title>
    <link href="http://droidyue.com/blog/2015/06/23/google-play-services-7-dot-5-adds-new-capabilities/"/>
    <updated>2015-06-23T21:00:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/23/google-play-services-7-dot-5-adds-new-capabilities</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2015/06/google-play-services-75">文章链接</a>。如需转载，请与 InfoQ 中文站联系。</p>

<h3>摘要</h3>

<p>最近的Google I/O开发者大会上，Google宣布推出7.5版的Google Play服务，该版本在特性方面增加了诸如智能密码锁和实例ID等功能。在API方面，增加了Google云推送和Google Cast相关的API，同时在Android Wear设备上支持访问Google地图API。</p>

<!--more-->


<h3>正文</h3>

<p>最近的Google I/O开发者大会上，Google<a href="http://android-developers.blogspot.com.es/2015/05/a-closer-look-at-google-play-services-75.html">宣布</a>推出7.5版的Google Play服务，该版本在特性方面增加了诸如智能密码锁和实例ID等功能。在API方面，增加了Google云推送和Google Cast相关的API，同时在Android Wear设备上支持访问Google地图API。</p>

<p><strong>智能密码锁</strong></p>

<p><a href="https://developers.google.com/identity/smartlock-passwords/android/">智能密码锁</a>为了简化登陆流程，增加了名为<a href="https://developer.android.com/reference/com/google/android/gms/auth/api/credentials/CredentialsApi.html">CredentialsApi</a>的API和UI，并允许我们对已保存的证书进行检索和保存以备后用。密码管理器是从Chrome浏览器的密码管理器演变而来。了解更多关于该功能细节，请查阅InfoQ<a href="http://www.infoq.com/news/2015/06/google-smart-lock-passwords">具体介绍文章</a>。</p>

<p><strong>实例ID，身份与授权</strong></p>

<p><a href="https://developers.google.com/instance-id/reference">实例ID</a>是一项云服务，该服务用来提供一个唯一的ID来唯一性鉴定应用实例。使用的场景比如确定哪一个应用实例正在发送请求等问题。实例ID还可以用来生成安全令牌，使用安全令牌可以授权第三方应用访问你的应用的服务器端控制的资源，同时安全令牌也可以用来验证一个应用的真实性。</p>

<p><strong>Google云推送</strong></p>

<p>上面提到的实例ID与<a href="https://developer.android.com/google/gcm/index.html">Google云推送</a>紧密相关，Google云推送作为一个服务，既可以接收来自服务器端的信息也可以从客户端向服务器端传送数据。此外，Google云推送还新加入了一个API允许应用设置一个或多个话题进而帮助消息能够精准推送。不仅如此，该服务还增加了一个新的类<a href="https://developer.android.com/reference/com/google/android/gms/gcm/GcmNetworkManager.html">GcmNetworkManager</a>，使用这个类，当服务器端有新信息时，应用与服务器端进行数据同步更加容易。GcmNetworkManager支持对常见行为的处理，比如等待网络连接，设备充电，网络重试和回退等，另外它还支持对后台网络操作的调度进行优化。</p>

<p><strong>Google Cast</strong></p>

<p>众所周知，Google Cast是一套将设备内容呈现到电视或者音响的解决方案，新增的<a href="https://developers.google.com/cast/docs/remote">远程显示API</a>使得管理镜像显示更加容易，另外通过增加媒体队列使得<a href="https://developer.android.com/reference/com/google/android/gms/cast/RemoteMediaPlayer.html">RemoteMediaPlayer</a>可以无缝支持媒体重放。</p>

<p><strong>Google地图和Google Fit</strong></p>

<p>正如一开始提到的，在Android Wear设备上可以使用Google<a href="http://developer.android.com/reference/com/google/android/gms/maps/package-summary.html">地图API</a>了。</p>

<p><a href="https://developers.google.com/fit/">Google Fit</a>，用来构建健康应用解决方案，现在可以使用新增加的<a href="https://developer.android.com/reference/com/google/android/gms/fitness/RecordingApi.html">RecordingApi</a>收集行走距离和燃烧的卡路里数据。</p>

<p>Google Play服务是一个有着系统级别权限的并且可升级的服务和API。正如InfoQ<a href="http://www.infoq.com/news/2013/09/play-services-beat-fragmentation">指出的</a>那样，”在这种情况下，Google可以在宣布之后数天内铺开这些新特性“，如果没有这项服务，则需要底层系统的更新。因为Play服务完全由Google控制，OEM厂商无法修改，所以该服务在缓解软件碎片化问题上起了很关键的作用。</p>

<p><strong>查看英文原文：</strong><a href="http://www.infoq.com/news/2015/06/google-play-services-75">Google Play Services 7.5 Adds New Capabilities, APIs, and More</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中HTTP相关的API]]></title>
    <link href="http://droidyue.com/blog/2015/05/30/android-http-clients/"/>
    <updated>2015-05-30T23:09:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/30/android-http-clients</id>
    <content type="html"><![CDATA[<p>Android中大多数应用都会发送和接受HTTP请求，在Android API中主要由两个HTTP请求的相关类，一个是HttpURLConnection，另一个是Apache HTTP Client。这两个类实现的HTTP请求都支持HTTPS协议，基于流的上传和下载，可配置超时时间，IPv6和连接池。</p>

<!--more-->


<h2>Apache HTTP Client</h2>

<p>DefaultHttpClient和同类的AndroidHttpClient都是可扩展的类。它们有大量且灵活的API，适用于网页浏览器开发。同时它们比较稳定并且bug较少。但是繁多的API的现实下，对其改善与保持兼容性不可得兼，明显Android团队的精力已然不在Apache HTTP Client。</p>

<h2>HttpURLConnection</h2>

<p>HttpURLConnection是一个通用，轻量的实现，可以满足大多数的程序进行HTTP请求。这个类虽然一开始比较简陋，但是其主要的几个API使得我们更容易进行稳定改善。</p>

<h3>连接池污染</h3>

<p>在冻酸奶（Android 2.2）之前，HttpURLConnection有着一些烦人的bug。最烦人的就是调用一个可读的InputStream的close方法会污染连接池。我们需要禁用连接池绕开这个问题，如下代码可以禁用连接池。
```java
private void disableConnectionReuseIfNecessary() {</p>

<pre><code>// HTTP connection reuse which was buggy pre-froyo
if (Integer.parseInt(Build.VERSION.SDK) &lt; Build.VERSION_CODES.FROYO) {
    System.setProperty("http.keepAlive", "false");
}
</code></pre>

<p>}
```</p>

<h3>压缩数据与大小</h3>

<p>从2.3开始，我们默认对返回的响应进行了压缩，HttpURLConnection会自动为发出去的请求加上<code>Accept-Encoding: gzip</code>这个头信息。如果gzip压缩的响应有问题，可以通过下面代码禁用gzip。
<code>java
urlConnection.setRequestProperty("Accept-Encoding", "identity");
</code></p>

<p>由于HTTP中的Content-Length头信息返回的是压缩后的大小，所以我们不能使用getContentLength()来计算未压缩数据的大小。正确的做法应该是读取HTTP响应中的字节，直到InputStream.read()方法返回为-1.</p>

<h3>HTTPs改进</h3>

<p>从Gingerbread开始，增加了对HTTPs链接的优化。在进行HTTPs请求之前，HttpsURLConnection会尝试使用服务器名字指示(Server Name Indication)，这种技术可以让多个HTTPs主机共享一个IP地址。在HTTPs请求中，HttpsURLConnection也支持压缩和会话标签（Session Tickets）。一旦连接失败，HttpsURLConnection会不使用上面的三个特性进行重试。这样即可以保证在连接时高效率地连接到最新的服务器，也可以在不破坏兼容性的同时连接到旧服务器。</p>

<h3>响应缓存</h3>

<p>从4.0开始，HttpURLConnection引入了响应缓存机制。一旦缓存创建，后续的HTTP请求会按照下面情况处理</p>

<ul>
<li>完全缓存的响应会直接从本地存储中读取，响应很快，不需要网络连接。</li>
<li>有条件的缓存必须由服务端进行freshness验证，比如client发出一个请求，如"Give me /foo.png if it changed since yesterday"，然后服务器端要么返回最新的内容，要么返回304未修改的状态。如果内容不变，则不下载。</li>
<li>没有缓存的响应需要服务器处理，然后这些请求被缓存下来。</li>
</ul>


<p>对于低于4.0的版本，我们可以使用反射开启响应的缓存机制
```java
private void enableHttpResponseCache() {</p>

<pre><code>try {
    long httpCacheSize = 10 * 1024 * 1024; // 10 MiB
    File httpCacheDir = new File(getCacheDir(), "http");
    Class.forName("android.net.http.HttpResponseCache")
        .getMethod("install", File.class, long.class)
        .invoke(null, httpCacheDir, httpCacheSize);
} catch (Exception httpResponseCacheNotAvailable) {
}
</code></pre>

<p>}
```
当然，这里还需要服务器端设置HTTP缓存相关的头信息。</p>

<h2>哪家强</h2>

<p>在2.3之前的版本，Apache的HTTP请求响应实现比较稳定，bug也少，所以在那些版本上它的最好。</p>

<p>但是在2.3之后，毫无疑问，HttpURLConnection是最好的。它API精简实用，默认支持压缩，响应缓存等。最重要的这是Android团队重点投入的，而Apache的版本已经被抛弃了。所以还是使用HttpURLConnection吧。</p>

<h2>原文信息</h2>

<ul>
<li><a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">Android’s HTTP Clients</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAR包未加入APK程序]]></title>
    <link href="http://droidyue.com/blog/2015/05/15/jar-not-in-apk/"/>
    <updated>2015-05-15T20:45:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/15/jar-not-in-apk</id>
    <content type="html"><![CDATA[<p>前段时间打包遇到了一个问题，jar包不能加入到apk包中。从Eclipse中完全可以，一旦放到服务器端进行打包就出现了问题。</p>

<!--more-->


<p>使用<code>ant debug -d</code>得到的信息如下
```java
[dx] trouble processing:</p>

<pre><code>   [dx] bad class file magic (cafebabe) or version (0033.0000)
   [dx] ...while parsing com/solo/adsdk/network/a.class
   [dx] ...while processing com/solo/adsdk/network/a.class
   [dx]
   [dx] trouble processing:
   [dx] bad class file magic (cafebabe) or version (0033.0000)
   [dx] ...while parsing com/solo/adsdk/network/b.class
   [dx] ...while processing com/solo/adsdk/network/b.class
   [dx]
   [dx] trouble processing:
   [dx] bad class file magic (cafebabe) or version (0033.0000)
   [dx] ...while parsing com/solo/adsdk/network/AdsLoader.class
   [dx] ...while processing com/solo/adsdk/network/AdsLoader.class
   [dx]
   [dx] trouble processing:
   [dx] bad class file magic (cafebabe) or version (0033.0000)
   [dx] ...while parsing com/solo/adsdk/network/UrlConfig.class
   [dx] ...while processing com/solo/adsdk/network/UrlConfig.class
</code></pre>

<p>```
相比到这里，原因不言则明，原来是jar包的编译版本比工程编译的版本不一致，真实的情况是前后比后者编译版本高。
经过分析，jar包的编译环境是Java 7， 而工程打包的编译环境是Java 6.</p>

<h2>如何解决</h2>

<p>解决这个问题也简单，不出如下做法</p>

<ul>
<li>更换成Java 6编译出来的jar包</li>
<li>使用java 7 打包工程。</li>
</ul>


<h2>如何得知jar包编译版本</h2>

<h3>解压jar包</h3>

<p><code>java
jar fx android-support-v4.jar
</code>
解压后查看当前目录，会多出一个文件夹，这里是名字为android的文件夹。</p>

<h3>查看文件信息</h3>

<p><code>java
11:52 $ file android/support/v4/net/ConnectivityManagerCompat.class
android/support/v4/net/ConnectivityManagerCompat.class: compiled Java class data, version 49.0 (Java 1.5)
</code></p>

<h3>查找版本</h3>

<p>上面我们得到了<code>version 49.0 (Java 1.5)</code>，有些情况下我们得到的只有<code>version 49.0</code>需要查找下面的列表</p>

<h4>版本映射</h4>

<ul>
<li>45.3 = Java 1.1</li>
<li>46 = Java 1.2</li>
<li>47 = Java 1.3</li>
<li>48 = Java 1.4</li>
<li>49 = Java 5</li>
<li>50 = Java 6</li>
<li>51 = Java 7</li>
<li>52 = Java 8</li>
</ul>


<h3>参考文章</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/3313532/what-version-of-javac-built-my-jar">What version of javac built my jar?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play商店推广那些事]]></title>
    <link href="http://droidyue.com/blog/2015/05/11/google-play-tuiguang/"/>
    <updated>2015-05-11T21:43:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/11/google-play-tuiguang</id>
    <content type="html"><![CDATA[<p>Play商店是Android的官方商店，虽然在大陆无法访问，但是这里依旧是重要的版本发布市场，尤其是对于那些国际化的产品。对于拓宽海外市场，付费推广就是一部分不可忽视的措施。而Android付费推广必然就是Play商店推广。本文主要从技术方面讲解，如何统计推广数据，以及在开发过程中遇到的一些疑问和困惑。</p>

<!--more-->


<h2>生成推广链接</h2>

<p>想要进行推广，必须有推广链接。Google提供了生成推广链接的地址<a href="https://developers.google.com/analytics/devguides/collection/android/v2/campaigns#google-play-url-builder">Google Play URL Builder</a>,遗憾的是这个地址被墙了，不过可以使用<a href="http://www.digitangle.co.uk/toolsandresources/google-play-url-builder/#sthash.HLdt4vXJ.dpbs">这个地址</a>，可能稍微慢一点。</p>

<p>{%img <a href="http://droidyueimg.qiniudn.com/play_url_builder.png">http://droidyueimg.qiniudn.com/play_url_builder.png</a> %}</p>

<h3>简单描述</h3>

<ul>
<li>Package Name 必填  应用的包名，如com.example.application</li>
<li>Campaign Source 必填 推广的来源，比如google, citysearch, newsletter4</li>
<li>Campaign Medium 选填  推广的媒介，比如cpc, banner, email</li>
<li>Campaign Term   选填 推广的关键字 比如 running+shoes</li>
<li>Campaign Content 选填 推广内容描述</li>
<li>Campaign Name  选填 可以填写 产品名，推广代号或者是推广口号</li>
</ul>


<p>生成的推广地址就是<a href="https://play.google.com/store/apps/details?id=com.mx.browser&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dadlink%26utm_term%3Dandroid%252Bbrowser%26utm_content%3DBest%2520and%2520Fast%2520Browser%26utm_campaign%3Dandroidyue_123">https://play.google.com/store/apps/details?id=com.mx.browser&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dadlink%26utm_term%3Dandroid%252Bbrowser%26utm_content%3DBest%2520and%2520Fast%2520Browser%26utm_campaign%3Dandroidyue_123</a></p>

<h2>推广如何工作的</h2>

<p>有了上面的推广链接，我们有必要了解一下Play商店的推广是如何工作的。</p>

<p>  1.用户从网页或者应用中点击Play商店推广链接跳转到Play商店应用的页面下载。<br/>
  2.应用下载完成并安装后，Google Play商店会发送一个<strong>INSTALL_REFERRER</strong>的Intent广播，该Intent中包含了推广链接中的参数。<br/>
  3.应用收到<strong>INSTALL_REFERRER</strong>广播之后，从Intent中读取参数，上报推广数据。</p>

<h2>统计推广数据</h2>

<h3>1.manifest声明receiver，接收<strong>INSTALL_REFERRER</strong>广播</h3>

<p>```xml
<receiver android:name=".PlayCampaignReceiver" android:exported="true"></p>

<pre><code>&lt;intent-filter&gt;
            &lt;action android:name="com.android.vending.INSTALL_REFERRER" /&gt;
        &lt;/intent-filter&gt;       
</code></pre>

<p></receiver>
```</p>

<h3>2.实现PlayCampaignReceiver，处理<strong>INSTALL_REFERRER</strong>广播</h3>

<p>```java
package com.droidyue.playstorereferrertester;</p>

<p>import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;</p>

<p>public class PlayCampaignReceiver extends BroadcastReceiver {</p>

<pre><code>private static final String LOGTAG = "PlayCampaignReceiver";
@Override
public void onReceive(Context context, Intent intent) {
    Log.i(LOGTAG, "onReceive intent=" + intent);
    //处理referrer参数
    String referrer = intent.getStringExtra("referrer");
    //some other code
}
</code></pre>

<p>}
```</p>

<h2>多个Receiver</h2>

<p>有些时候我们可能有这样的需求，我们需要多个Receiver监听<strong>INSTALL_REFERRER</strong>广播，其实是可以的。</p>

<h3>代码调用</h3>

<p>这一种是比较推荐的实现方式，比较简单，就是在一个Receiver的onReceive中，实例化另一个Receiver并调用其onReceive方法。
```java</p>

<p>public class PlayCampaignReceiver extends BroadcastReceiver {</p>

<pre><code>private static final String LOGTAG = "PlayCampaignReceiver";
@Override
public void onReceive(Context context, Intent intent) {
    Log.i(LOGTAG, "onReceive intent=" + intent);
    //调用另一个Receiver实例的onReceive方法
    new AnotherPlayCampaignReceiver().onReceive(context, intent);
}
</code></pre>

<p>}
```</p>

<h3>manifest声明</h3>

<p>通过manifest的增加另一个监听<strong>INSTALL_REFERRER</strong>广播的Receiver的形式理论上也可以，但是之前的Google文档中说这种方式有问题，不建议使用。之前Google统计关于市场推广的描述为</p>

<blockquote><p>Note: Only one BroadcastReceiver class can be specified per application. Should you need to incorporate two or more BroadcastReceivers from different SDKs, you will need to create your own BroadcastReceiver class that will receive all broadcasts and call the appropriate BroadcastReceivers for each type of Broadcast.</p></blockquote>

<h2>何时收到推广数据</h2>

<p>关于何时收到推广数据的问题争论颇多，基本上又两个答案：安装完成之后和打一次打开程序时。这两个答案可以说是都对或者都错。</p>

<p>在3.1之前，<strong>INSTALL_REFERRER</strong>广播 确实是在程序安装之后发送的。 <br/>
在3.1之后，<strong>INSTALL_REFERRER</strong>广播 就变成了在程序第一次启动的时候进行的。</p>

<p>那么这又是作何原因呢，其真实的原因就是在3.1 API 12之后，Android系统引入了停止状态，也就是说一个刚下载的程序，在用户手动点击图标启动之前，是收不到正常的广播的。只有当处于非停止状态的应用才能收到<strong>INSTALL_REFERRER</strong>广播。所以广播的发送就选择在程序第一次启动时。  更多关于<a href="http://droidyue.com/blog/2014/07/14/look-inside-android-package-stop-state-since-honeycomb-mr1/">Android中的停止状态</a></p>

<p>为了进一步验证这个发送广播实际，我在Play Store上传了一个测试程序，可以使用这个地址<a href="https://play.google.com/store/apps/details?id=com.droidyue.playstorereferrertester&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dblog%26utm_term%3Dtest%252Bapp%26utm_content%3Dtest%252Bapp%26utm_campaign%3Dandroidyue_123456">https://play.google.com/store/apps/details?id=com.droidyue.playstorereferrertester&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dblog%26utm_term%3Dtest%252Bapp%26utm_content%3Dtest%252Bapp%26utm_campaign%3Dandroidyue_123456</a>从Play Store下载测试一下，过滤日志<code>adb logcat | grep PlayCampaignReceiver</code>测试。</p>

<p>注意：这里的第一次安装可以是从Play Store 应用中点打开按钮，也可以是从Launcher中点击应用图标。前面两种情况都是可以接收到广播的。</p>

<h2>别的包也会收到么</h2>

<p>这也是一个被争论的问题，当然我也是通过上面的包验证了，答案就是不会的。<strong>INSTALL_REFERRER</strong>只会发给那个推广安装的程序。</p>

<h2>例外情况</h2>

<p>从网页到客户端的安装是无法发送<strong>INSTALL_REFERRER</strong>广播的。</p>

<h2>奇怪问题</h2>

<h3>协议为哪个</h3>

<p>其实有人会奇怪，究竟推广链接是market还是https协议，答案是都可以，但是推荐使用https协议的链接，首先的既定事实是Google Play URL Builder默认生成的就是https协议链接，另外https是一个被广泛采用的协议，设想如果一个market协议链接在PC浏览器上被点击是怎样的一种体验呢？答案不言自明。</p>

<h2>参考文章</h2>

<ul>
<li><a href="https://developers.google.com/analytics/devguides/collection/android/v2/campaigns#overview">Campaign Measurement </a></li>
</ul>

]]></content>
  </entry>
  
</feed>
