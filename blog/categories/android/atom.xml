<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Thinkblog]]></title>
  <link href="http://androidyue.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://androidyue.github.io/"/>
  <updated>2014-01-04T15:51:31+08:00</updated>
  <id>http://androidyue.github.io/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refer String Resources From Other Applications]]></title>
    <link href="http://androidyue.github.io/blog/2013/12/11/refer-string-resources-from-other-applications/"/>
    <updated>2013-12-11T16:22:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/12/11/refer-string-resources-from-other-applications</id>
    <content type="html"><![CDATA[<p>The following code works. Here take getting String resource for example.
```java
public void testUseAndroidString() {</p>

<pre><code>Context context = getContext();
Resources res = null;
try {
    //I want to use the clear_activities string in Package com.android.settings
    res = context.getPackageManager().getResourcesForApplication("com.android.settings");
    int resourceId = res.getIdentifier("com.android.settings:string/clear_activities", null, null);
    if(0 != resourceId) {
        CharSequence s = context.getPackageManager().getText("com.android.settings", resourceId, null);
        Log.i(VIEW_LOG_TAG, "resource=" + s);
    }
} catch (NameNotFoundException e) {
    e.printStackTrace();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Android System Available Features]]></title>
    <link href="http://androidyue.github.io/blog/2013/12/03/get-android-system-available-features/"/>
    <updated>2013-12-03T17:20:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/12/03/get-android-system-available-features</id>
    <content type="html"><![CDATA[<p>An easy way to get system available features.</p>

<p>```java
private void dumpSystemFeatures() {</p>

<pre><code>FeatureInfo[] features = this.getPackageManager().getSystemAvailableFeatures();
    for (FeatureInfo f : features) {
        Log.i(LOGTAG, "dumpSystemFeatures f" + f);
    }
</code></pre>

<p>}
<code>
Have a glance at the result  
</code>
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d74fd0 android.hardware.wifi fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75048 android.hardware.location.network fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d750d8 android.hardware.nfc fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75150 com.google.android.feature.GOOGLE_BUILD fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d751f0 android.hardware.location fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75270 android.hardware.sensor.gyroscope fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75300 android.hardware.screen.landscape fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75390 android.hardware.screen.portrait fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75420 android.hardware.wifi.direct fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d754a8 android.hardware.usb.accessory fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75530 android.hardware.bluetooth fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d755b0 android.hardware.touchscreen.multitouch.distinct fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75660 android.hardware.microphone fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d756e8 android.hardware.sensor.light fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75770 android.hardware.camera.autofocus fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75800 android.software.live_wallpaper fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75890 android.hardware.camera.flash fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75918 android.hardware.telephony fl=0x0}
I/MainActivity(13514): dumpSystemFeatures fFeatureInfo{40d75998 android.software.sip fl=0x0}
&hellip;&hellip;
```
For a detailed understanding of use-filter,please read this post <a href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html">http://developer.android.com/guide/topics/manifest/uses-feature-element.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get An Application Required Features]]></title>
    <link href="http://androidyue.github.io/blog/2013/12/03/get-an-application-required-features/"/>
    <updated>2013-12-03T17:20:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/12/03/get-an-application-required-features</id>
    <content type="html"><![CDATA[<p>How to get application&rsquo;s required features? Actually the <strong>aapt</strong> really does a great help.
```bash</p>

<h1>Usage:aapt dump badging apk_location | grep feature</h1>

<h1>Example</h1>

<p>aapt dump badging /tmp/language_check_maxthon_99985f_2793_4.1.3.1000_remote_develop.apk | grep Features</p>

<h1>Result</h1>

<p>uses-feature-not-required:&lsquo;android.hardware.location&rsquo;
uses-feature-not-required:&lsquo;android.hardware.location.network&rsquo;
uses-feature-not-required:&lsquo;android.hardware.location.gps&rsquo;
uses-feature-not-required:&lsquo;android.hardware.screen.portrait&rsquo;
uses-feature-not-required:&lsquo;android.hardware.telephony&rsquo;
uses-feature-not-required:&lsquo;android.hardware.wifi&rsquo;
uses-feature:&lsquo;android.hardware.touchscreen&rsquo;
uses-implied-feature:&lsquo;android.hardware.touchscreen&rsquo;,&lsquo;assumed you require a touch screen unless explicitly made optional&rsquo;
```
To understand the feature more detailed, please visit <a href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html">http://developer.android.com/guide/topics/manifest/uses-feature-element.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Android Packages From Command Line]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/19/build-android-packages-from-command-line/"/>
    <updated>2013-10-19T09:11:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/19/build-android-packages-from-command-line</id>
    <content type="html"><![CDATA[<p>A few months ago,I dealed with a task:To build a large amount of apk files.  The trick I came up with is to build apk file from the command so that I could use Python to glue all the works.  Eventually I made it.And so this post is to make some description about the trick.</p>

<h2>Requirements</h2>

<ul>
<li> Setup JDK</li>
<li> Setup Android SDK

<h2>Steps</h2></li>
<li>Generate R class file</li>
<li>Compile Java codes(.java files) into classes(.class) files</li>
<li>Convert .class files into .dex files</li>
<li>Package Resouces</li>
<li>Build Unsigned APK File</li>
<li>Sign Apk with Jarsigner</li>
<li>The Extra One:Use zipalign for optimization</li>
</ul>


<h3>Generate R class File</h3>

<p>In Android,We use R class to refer resources instead of hard-coding the resouces.<br/>
For a better understanding,pleae have a look at <a href="http://www.satyakomatineni.com/akc/display?url=displaynoteimpurl&amp;ownerUserId=satya&amp;reportId=2883  ">http://www.satyakomatineni.com/akc/display?url=displaynoteimpurl&amp;ownerUserId=satya&amp;reportId=2883  </a>
<code>bash
aapt package -f -m -J /home/androidyue/temp/ubuntu/workspace/MxDataProvider/gen/ -S /home/androidyue/temp/ubuntu/workspace/MxDataProvider/res/ -I /home/androidyue/dev_tools/android-sdk-linux_86_backup/platforms/android-17/android.jar -M /home/androidyue/temp/ubuntu/workspace/MxDataProvider/AndroidManifest.xml
</code></p>

<h4>Some descriptions</h4>

<ul>
<li> -f  force overwrite of existing files</li>
<li> -m  make package directories under location specified by -J</li>
<li> -J  specify where to output R.java resource constant definitions</li>
<li> -S  directory in which to find resources.  Multiple directories will be scanned and the first match found (left to right) will take precedence.</li>
<li> -I  add an existing package to base include set</li>
<li> -M  specify full path to AndroidManifest.xml to include in zip</li>
</ul>


<h3>Comiple .java into .class files</h3>

<p><code>bash
javac -encoding UTF-8 -source 1.6 -target 1.6 -bootclasspath /home/androidyue/dev_tools/android-sdk-linux_86_backup/platforms/android-17/android.jar -d /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin/ /home/androidyue/temp/ubuntu/workspace/MxDataProvider/src//coop/channel/provider/*.java /home/androidyue/temp/ubuntu/workspace/MxDataProvider/gen//coop/channel/provider/R.java
</code></p>

<h4>Some descriptions</h4>

<ul>
<li> -encoding encoding  Set the source file encoding name, such as EUC-JP and UTF-8. If -encoding is not specified, the platform default converter is used.</li>
<li> -source release   Specifies the version of source code accepted, Please Do NOT use Java 7(1.7)</li>
<li> -target version  Generate  class files that target a specified version of the VM. Class files will run on the specified target and on later versions, but not on earlier versions of the VM. Valid targets are 1.1, 1.2, 1.3, 1.4, 1.5 (also 5), 1.6(also 6), and 1.7 (also 7).</li>
<li> -bootclasspath bootclasspath Cross-compile against the specified set of boot classes. As with the user class path, boot class path entries are separated by colons (:) and can be directories, JAR archives, or ZIP archives.</li>
<li> -d directory  Set the destination directory for class files. The directory must already exist; javac will not create it.
As I have suffered a lot using Java 7, It&rsquo;s recomended to use Java 6</li>
</ul>


<h3>Convert .class into .dex files</h3>

<p><code>bash
/home/androidyue/dev_tools/android-sdk-linux_86_backup/build-tools/17.0.0/dx --dex --output=/home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//class.dex /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin/
</code>
To dive into Dalvik, please visit <a href="http://source.android.com/devices/tech/dalvik/index.html">http://source.android.com/devices/tech/dalvik/index.html</a></p>

<h3>Package Resouces</h3>

<p><code>bash
aapt package -f -M /home/androidyue/temp/ubuntu/workspace/MxDataProvider/AndroidManifest.xml -S /home/androidyue/temp/ubuntu/workspace/MxDataProvider/res/ -A /home/androidyue/temp/ubuntu/workspace/MxDataProvider//assets/ -I /home/androidyue/dev_tools/android-sdk-linux_86_backup/platforms/android-17/android.jar -F /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//resources.ap_
</code></p>

<h4>Some descriptions</h4>

<ul>
<li> -F  specify the apk file to output</li>
<li> -A  additional directory in which to find raw asset files</li>
</ul>


<h3>Build Unsigned APK File</h3>

<p><code>bash
/home/androidyue/temp/ubuntu/dev_tools/adt-bundle-linux_backup/sdk/tools/apkbuilder /tmp/unsignedApkFile.apk -v -u -z /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//resources.ap_ -f /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//class.dex -rf /home/androidyue/temp/ubuntu/workspace/MxDataProvider/src/
</code></p>

<h4>Some descriptions</h4>

<ul>
<li> -u      Creates an unsigned package.</li>
<li> -z      Followed by the path to a zip archive. Adds the content of the application package.</li>
<li> -f      Followed by the path to a file. Adds the file to the application package.</li>
<li> -rf     Followed by the path to a source folder. Adds the java resources found in that folder to the application package, while keeping their path relative to the source folder.</li>
</ul>


<h3>Sign Apk with Jarsigner</h3>

<p><code>bash
jarsigner -keystore /home/androidyue/temp/ubuntu/myKeystore -storepass storepassValue -keypass keypassValue -signedjar /home/androidyue/Desktop/output/max1111111.apk /tmp/unsignedApkFile.apk maxthon -digestalg SHA1 -sigalg MD5withRSA
</code></p>

<h4>Some descriptions</h4>

<ul>
<li> [-keystore <url>]           keystore location</li>
<li> [-storepass <password>]     password for keystore integrity</li>
<li> [-keypass <password>]       password for private key (if different)</li>
<li> [-signedjar <file>]         name of signed JAR file</li>
<li> [-digestalg <algorithm>]    name of digest algorithm</li>
<li> [-sigalg <algorithm>]       name of signature algorithm</li>
</ul>


<h3>Use Zipalign for optimization</h3>

<p><code>bash
zipalign -f -v 4 /home/androidyue/Desktop/output/max1111111.apk /home/androidyue/Desktop/output/max222222.apk
</code></p>

<h4>Some descriptions</h4>

<ul>
<li> The <alignment> is an integer that defines the byte-alignment boundaries. This must always be 4 (which provides 32-bit alignment) or else it effectively does nothing.</li>
<li> For more details, please visit <a href="http://developer.android.com/tools/help/zipalign.html">http://developer.android.com/tools/help/zipalign.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
