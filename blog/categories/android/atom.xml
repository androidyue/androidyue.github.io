<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2014-07-12T17:37:41+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中检测当前是否为主线程]]></title>
    <link href="http://droidyue.com/blog/2014/07/12/check-main-thread-in-android-chinese-edition/"/>
    <updated>2014-07-12T16:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/12/check-main-thread-in-android-chinese-edition</id>
    <content type="html"><![CDATA[<p>如果在Android中判断某个线程是否是主线程？对于这个问题，你可能说根据线程的名字，当然这个可以解决问题，但是这样是最可靠的么？万一某天Google一下子将线程的名字改称其他神马东西呢。</p>

<!-- more -->


<h2>方法揭晓</h2>

<p>下面的方法是最可靠的解决方案。
```java
public static boolean isInMainThread() {</p>

<pre><code>    return Looper.myLooper() == Looper.getMainLooper();
</code></pre>

<p>}
```
实际上，写到这里就基本解决了文章标题的问题了，但是仅仅研究到这里太肤浅了，刨的不够深，所以需要继续，希望你也可以继续读下去。</p>

<h2>刨根问底</h2>

<h3>实验一</h3>

<p>好，现在，我们对这个稳定的方法做一些测试，首先，下面的方法会增加一些调试打印信息。
```java
private boolean isInMainThread() {</p>

<pre><code>Looper myLooper = Looper.myLooper();
Looper mainLooper = Looper.getMainLooper();
Log.i(LOGTAG, "isInMainThread myLooper=" + myLooper 
    + ";mainLooper=" + mainLooper);
return myLooper == mainLooper;
</code></pre>

<p>}
<code>
好，然后我们在主线程中运行一个测试，调用上述方法。比如我们这样调用。
</code>java
Log.i(LOGTAG, &ldquo;testInMainThread inMainThread=&rdquo; + isInMainThread());
<code>
OK，我们看一下输出日志。验证OK。
</code>bash
I/TestInMainThread(32028): isInMainThread myLooper=Looper{40d35ef8};mainLooper=Looper{40d35ef8}
I/TestInMainThread(32028): testInMainThread inMainThread=true
```</p>

<h3>实验二</h3>

<p>现在我们继续在一个没有消息循环的非主线程，进行验证。
```java
new Thread() {</p>

<pre><code>@Override
public void run() {
    Log.i(LOGTAG, "testIn NOT in MainThread isMainThread="
        + isInMainThread());
    super.run();
}
</code></pre>

<p>}.start();
```</p>

<p>正如我们看到的如下日志结果，主线程的Looper（翻译成循环泵，不是很好听）已经被初始化赋值。但是我们新创建的线程的looper还是null。这是因为<strong>Android中的线程默认没有一个和它绑定了的消息循环</strong>（<strong>Threads by default do not have a message loop associated with them. Of course, the method works</strong>）
<code>bash
I/TestInMainThread(32028): isInMainThread myLooper=null;mainLooper=Looper{40d35ef8}
I/TestInMainThread(32028): testIn NOT in MainThread isMainThread=false
</code></p>

<h3>实验三</h3>

<p>继续，我们创建一个绑定了消息循环的线程，根据Android开发者文档说明，以下是一个典型的创建消息循环线程的示例，使用单独prepare（）方法和loop（）方法来创建一个绑定到Looper的Handler。
```java
new Thread() {</p>

<pre><code>private Handler mHandler;
@Override
public void run() {
    Looper.prepare();
    mHandler = new Handler() {
        public void handleMessage(Message msg) {
            // process incoming messages here
        }
    };
    Log.i(LOGTAG, "testInNonMainLooperThread isMainThread=" 
        + isInMainThread());
    Looper.loop();
}
</code></pre>

<p>}.start();
<code>
OK，现在再次检查以下日志，
</code>bash
I/TestInMainThread(32028): isInMainThread myLooper=Looper{40d72c58};mainLooper=Looper{40d35ef8}
I/TestInMainThread(32028): testInNonMainLooperThread isMainThread=false
```
两个Looper都被初始化赋值了，但是他们是不同的对象。</p>

<h2>原理发掘</h2>

<p>但是，这是为什么呢，这里面有什么奥秘呢？ 好，让我们看以下Looper.class
```java</p>

<pre><code>// sThreadLocal.get() will return null unless you've called prepare().
static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();
private static Looper sMainLooper;  // guarded by Looper.class

/**
 * Initialize the current thread as a looper, marking it as an
 * application's main looper. The main looper for your application
 * is created by the Android environment, so you should never need
 * to call this function yourself.  See also: {@link #prepare()}
 */
public static void prepareMainLooper() {
    prepare(false);
    synchronized (Looper.class) {
        if (sMainLooper != null) {
            throw new IllegalStateException("The main Looper has already been prepared.");
        }
        sMainLooper = myLooper();
    }
}

private static void prepare(boolean quitAllowed) {
    if (sThreadLocal.get() != null) {
        throw new RuntimeException("Only one Looper may be created per thread");
    }
    sThreadLocal.set(new Looper(quitAllowed));
}

/**
 * Return the Looper object associated with the current thread.  
 * Returns null if the calling thread is not associated with a Looper.
 */
public static Looper myLooper() {
    return sThreadLocal.get();
}

 /** Returns the application's main looper, which lives in the main thread of the application.
 */
public static Looper getMainLooper() {
    synchronized (Looper.class) {
        return sMainLooper;
    }
}
</code></pre>

<p>```</p>

<p>对于主线程来说，prepareMainLooper这个方法会被Android运行环境调用，而不是程序显式调用。通过这个方法，主线程的looper被创建，并且将对象引用传递给sMainLooper。所以保证了主线程myLooper()获取到的引用和getMainLooper()获取到的都是同一个引用。</p>

<p>对于没有消息循环的非主线程，默认的当前线程的looper是null，因为你从来没有手动地调用prepare()，所以它和主线程的looper不一样。</p>

<p>对于绑定了消息循环的非主线程，当调用Looper.prepare方法时，主线程的Looper已经由Android运行环境创建，当调用prepare方法后，绑定到这个非主线程的looper被创建，当然，这不可能和主线程的Looper一样。</p>

<p>综上所述，这个方法是可靠的。</p>

<p>引用:</p>

<ul>
<li> <a href="http://developer.android.com/reference/android/os/Looper.html">http://developer.android.com/reference/android/os/Looper.html</a></li>
<li> <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.2_r1/android/os/Looper.java/">http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.2_r1/android/os/Looper.java/</a></li>
</ul>


<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B009OLU8EE/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B009OLU8EE&linkCode=as2&tag=droidyue-23">Android系统源代码情景分析</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B009OLU8EE" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Webview加载网页时发送HTTP头信息]]></title>
    <link href="http://droidyue.com/blog/2014/07/12/load-url-with-extra-header-in-android-webview-chinese-edition/"/>
    <updated>2014-07-12T08:36:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/12/load-url-with-extra-header-in-android-webview-chinese-edition</id>
    <content type="html"><![CDATA[<p>众所周知，当你点击一个超链接进行跳转时，WebView会自动将当前地址作为Referer（引荐）发给服务器，因此很多服务器端程序通过是否包含referer来控制盗链，所以有些时候，直接输入一个网络地址，可能有问题，那么怎么解决盗链控制问题呢，其实在webview加载时加入一个referer就可以了，如何添加呢？</p>

<!-- more -->


<p>从Android 2.2 （也就是API 8）开始，WebView新增加了一个接口方法，就是为了便于我们加载网页时又想发送其他的HTTP头信息的。</p>

<blockquote><p>public void loadUrl (String url, Map&lt;String, String> additionalHttpHeaders)<br/>
Added in API level 8<br/>
Loads the given URL with the specified additional HTTP headers.<br/>
Parameters<br/>
url the URL of the resource to load<br/>
additionalHttpHeaders   the additional headers to be used in the HTTP request for this URL, specified as a map from name to value. Note that if this map contains any of the headers that are set by default by this WebView, such as those controlling caching, accept types or the User-Agent, their values may be overriden by this WebView&rsquo;s defaults.</p></blockquote>

<p>以下是一个简单的demo，来展示以下如何使用。
```java
public void testLoadURLWithHTTPHeaders() {</p>

<pre><code>final String url = "http://droidyue.com";
WebView webView = new WebView(getActivity());
Map&lt;String,String&gt; extraHeaders = new HashMap&lt;String, String&gt;();
extraHeaders.put("Referer", "http://www.google.com");
webView.loadUrl(url, extraHeaders);
</code></pre>

<p>}
```</p>

<p>同样上面也可以应用到UserAgent等其他HTTP头信息<br/>
<a href="http://droidyue.com/blog/2014/05/27/load-url-with-extra-http-headers-using-webview-in-android/" target="_blank">英文版文章</a></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00LF7R8MA/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00LF7R8MA&linkCode=as2&tag=droidyue-23">高性能浏览器网络</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00LF7R8MA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebView重写onJsAlert那些事]]></title>
    <link href="http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android/"/>
    <updated>2014-07-09T21:35:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android</id>
    <content type="html"><![CDATA[<p>本文主要将如何重写onJsAlert,让烦人的对话框变为无干扰的Toast,以及为什么onJsAlert只调用一次的问题.</p>

<h3>什么是Javascript Alert</h3>

<p>Alert是一种提示信息或者警告信息的对话框,一旦显示到用户面前,只能点击OK才能关闭.</p>

<!--more-->


<p>通常一般的实现类似
```html
<html></p>

<pre><code>&lt;SCRIPT type="text/javascript"&gt;
    alert('This is alert dialog !')
&lt;/SCRIPT&gt;
</code></pre>

<p></html>
```</p>

<p>对应的效果图:</p>

<p><img class="<a" src="href="http://droidyueimg.qiniudn.com/js_alert.png">http://droidyueimg.qiniudn.com/js_alert.png</a>" title="javascript alert dialog" ></p>

<h3>onJsAlert API 介绍</h3>

<blockquote><p>public boolean onJsAlert (WebView view, String url, String message, JsResult result)<br/>
Added in API level 1<br/>
Tell the client to display a javascript alert dialog. If the client returns true, WebView will assume that the client will handle the dialog. If the client returns false, it will continue execution.<br/>
Parameters<br/>
view    The WebView that initiated the callback.<br/>
url The url of the page requesting the dialog.<br/>
message Message to be displayed in the window.<br/>
result  A JsResult to confirm that the user hit enter.<br/>
Returns<br/>
boolean Whether the client will handle the alert dialog.</p></blockquote>

<h3>重写为Toast展示</h3>

<p>其实Alert,只是提示信息,而且这个提示信息还是阻塞其他操作的,为什么我们不适用一个长时间显示的Toast呢?</p>

<p>下面示范一下如何换成Toast.
```java
@Override
public boolean onJsAlert(WebView view, String url, String message, JsResult result) {</p>

<pre><code>Log.i("MainActivity", "onJsAlert url=" + url + ";message=" + message);
Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
result.confirm();
return true;
</code></pre>

<p>}
```</p>

<h3>为什么onJsAlert只调用了一次</h3>

<p>如果你没有参考上述部分或者没有留意,有时候你会发现onJsAlert只调用了一次,为什么呢,实际上,你可能忽略了一句调用.就是处理JsResult.</p>

<blockquote><p>public final void cancel ()
Added in API level 1
Handle the result if the user cancelled the dialog.</p>

<p>public final void confirm ()
Added in API level 1
Handle a confirmation response from the user.</p></blockquote>

<p>你需要调用result.confirm()或者result.cancel()来处理jsResult,否则会出问题.</p>

<h3>demo下载</h3>

<ul>
<li><a href="http://pan.baidu.com/s/14bjMA">http://pan.baidu.com/s/14bjMA</a></li>
</ul>


<h3>延伸阅读:</h3>

<p><a href="http://www.w3schools.com/js/js_popup.asp">http://www.w3schools.com/js/js_popup.asp</a>
<a href="http://developer.android.com/reference/android/webkit/JsResult.html">http://developer.android.com/reference/android/webkit/JsResult.html</a></p>

<h3>推荐</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00FQEDTA8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00FQEDTA8&linkCode=as2&tag=droidyue-23">精彩绝伦的Android UI设计:响应式用户界面与设计模式</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00FQEDTA8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0097CON2S&linkCode=as2&tag=droidyue-23">JavaScript语言精粹</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0097CON2S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android支持RTL(从右向左)语言]]></title>
    <link href="http://droidyue.com/blog/2014/07/07/support-rtl-in-android/"/>
    <updated>2014-07-07T13:28:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/07/support-rtl-in-android</id>
    <content type="html"><![CDATA[<h2>RTL语言</h2>

<ul>
<li>RTL语言即Right-to-left(从右向左)的语言.其书写习惯为从右向左,朝左继续.</li>
<li>这里的RTL严格意义上指的是Right-to-left,top-to-bottom 从右向左,从上到下. 而汉语,日语以及朝鲜语中存在Top-to-bottom, right-to-left从上到下,从右向左的情况. 但是这些语言大多数使用从左向右的情况.</li>
<li>常见的RTL语言有阿拉伯语,希伯来语等.</li>
<li>LTR语言和RTL语言刚好相反,即我们常见的Left-to-right,Top-to-bottom,从左向右,从上到下,朝右继续.这种语言很常见, 代表语言为英语等.</li>
<li>双向文本( Bi-Directional Text),即RTL文本和LTR文本混合的情况.比较复杂.</li>
</ul>


<!--more-->


<h2>Android对RTL支持情况</h2>

<ul>
<li>Android 4.1 Jelly Bean,引入了有限的在TextView和EditText支持RTL和LTR混合的双向文本的支持.</li>
<li>从Android 4.2 开始,提供了全面的本地布局支持,允许镜像布局,可以同时支持RTL和LTR.</li>
</ul>


<h2>如何支持RTL</h2>

<h3>快速应用RTL镜像布局</h3>

<ul>
<li>在manifest中的Application元素加入<strong>android:supportsRtl=&ldquo;true&rdquo;</strong>这个属性.</li>
</ul>


<p>未加入android:supportsRtl=&ldquo;true&rdquo; 阿拉伯语(RTL)的示例.<br/>
<img class="<a" src="href="http://droidyueimg.qiniudn.com/no_rtl_support_ar.png">http://droidyueimg.qiniudn.com/no_rtl_support_ar.png</a>" width="240" height="400" title="layout without rtl support" ></p>

<p>加入该属性的英文(LTR)语言效果.<br/>
<img class="<a" src="href="http://droidyueimg.qiniudn.com/rtl_support_en.png">http://droidyueimg.qiniudn.com/rtl_support_en.png</a>" width="240" height="400" title="rtl support english" ></p>

<p>加入该属性的阿拉伯语(RTL)语言效果.<br/>
<img class="<a" src="href="http://droidyueimg.qiniudn.com/rtl_support_ar.png">http://droidyueimg.qiniudn.com/rtl_support_ar.png</a>" width="240" height="400" title="rtl support arabic" ></p>

<ul>
<li>将所有的左右(left/right)布局属性替换成开始结束(start/end)属性.
如下述代码,使用paddingLeft
<code>xml
&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/tvOne"
    android:paddingLeft="100dp"
    android:background="#ccefc8"
    android:text="@string/share"
    /&gt;   
</code>
阿拉伯语下的效果图为<br/>
<img class="<a" src="href="http://droidyueimg.qiniudn.com/padding_left.png">http://droidyueimg.qiniudn.com/padding_left.png</a>" title="paddingLeft Arabic" >
如上面所说,RTL语言是以右作为开始,所以paddingLeft明显不符合规则.
那我们使用paddingStart看一下.
<code>xml
&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/tvOne"
    android:paddingStart="100dp"
    android:background="#ccefc8"
    android:text="@string/share"
    /&gt;   
</code>
上述代码在阿拉伯语下的效果图:<br/>
<img class="<a" src="href="http://droidyueimg.qiniudn.com/padding_start.png">http://droidyueimg.qiniudn.com/padding_start.png</a>" title="paddingStart Arabic" ></li>
</ul>


<h2>高级处理</h2>

<ul>
<li>android:layoutDirection 设置组件的布局方向</li>
<li>android:textDirection   设置组件文字的方向</li>
<li>android:textAlignment   设置组件文字的对齐</li>
<li>getLayoutDirectionFromLocale() 获取指定Locale的方向</li>
<li>创建单独的资源文件夹,以'ldrtl'(layout direction right-to-left)为后缀.如layout_ldrtl</li>
<li>使用Hierarchy Viewer来查看View的start/end属性,layoutDirection,textDirection,textAlignment属性.</li>
</ul>


<h2>贴代码</h2>

<h3>manifest</h3>

<p>```xml
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.rtldemo"
android:versionCode="1"
android:versionName="1.0" &gt;

&lt;uses-sdk
    android:minSdkVersion="8"
    android:targetSdkVersion="19" /&gt;

&lt;application
    android:allowBackup="true"
    android:icon="@drawable/ic_launcher"
    android:label="@string/app_name"
    android:theme="@style/AppTheme"
    android:supportsRtl="true"
     &gt;
    &lt;activity android:name=".MainActivity"&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MAIN" /&gt;
            &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;category android:name="android.intent.category.MULTIWINDOW_LAUNCHER" /&gt;
        &lt;/intent-filter&gt;
    &lt;/activity&gt;
&lt;/application&gt;
</code></pre>

<p></manifest>
```</p>

<h3>MainActivity.java</h3>

<p>```java
package com.example.rtldemo;</p>

<p>import java.util.ArrayList;
import java.util.Locale;</p>

<p>import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>private static final String LOGTAG = "MainActivity";

@SuppressLint("NewApi")
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main_layout);
    ListView listView = (ListView)findViewById(R.id.lvOne);

    int layoutDirection = TextUtils.getLayoutDirectionFromLocale(Locale.getDefault());
    Log.i(LOGTAG, "onCreate layoutDirection=" + layoutDirection);
    TestAdapter adapter = new TestAdapter();
    adapter.mData.add(getResources().getString(R.string.share));
    adapter.mData.add(getResources().getString(R.string.share));
    listView.setAdapter(adapter);

}

class TestAdapter extends BaseAdapter {
    ArrayList&lt;String&gt; mData = new ArrayList&lt;String&gt;();
    @Override
    public int getCount() {
        return mData.size();
    }

    @Override
    public String getItem(int position) {
        return mData.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View view = null;
        view = LayoutInflater.from(getApplicationContext()).inflate(R.layout.listview_item, null);
        ImageView imgView = (ImageView)view.findViewById(R.id.itemImageView);
        imgView.setImageResource(R.drawable.ic_launcher);
        TextView textView = (TextView)view.findViewById(R.id.itemTextView);
        textView.setText(mData.get(position));
        return view;
    }

}
</code></pre>

<p>}
```</p>

<h3>main_layout.xml</h3>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical" &gt;

&lt;Button 
    android:id="@+id/btnOne"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/share"
    /&gt;

    &lt;TextView 
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/tvOne"
    android:paddingStart="100dp"
    android:background="#ccefc8"
    android:text="@string/share"
    /&gt;   

&lt;EditText 
    android:id="@+id/etOne"
    android:layout_width="100dp" 
    android:layout_height="wrap_content"
    /&gt;

&lt;LinearLayout 
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    &gt;
    &lt;CheckBox 
        android:layout_width="100dp"
        android:layout_height="100dp"
        /&gt;
    &lt;TextView 
        android:layout_width="wrap_content"
        android:layout_height="100dp"
        android:text="@string/share"
        /&gt;
&lt;/LinearLayout&gt;

&lt;ListView 
    android:id="@+id/lvOne"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    &gt;&lt;/ListView&gt;
</code></pre>

<p></LinearLayout>
```</p>

<h3>listview_item.xml</h3>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal" &gt;
&lt;ImageView 
    android:id="@+id/itemImageView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    /&gt;    

&lt;TextView 
    android:id="@+id/itemTextView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    /&gt;
</code></pre>

<p></LinearLayout></p>

<p>```</p>

<h2>Demo下载</h2>

<ul>
<li><a href="http://pan.baidu.com/s/1eQvL0MA">http://pan.baidu.com/s/1eQvL0MA</a></li>
</ul>


<h2>延伸阅读</h2>

<ul>
<li><a href="http://android-developers.blogspot.hk/2013/03/native-rtl-support-in-android-42.html">http://android-developers.blogspot.hk/2013/03/native-rtl-support-in-android-42.html</a></li>
<li>RTL语言:<a href="http://en.wikipedia.org/wiki/Right-to-left">http://en.wikipedia.org/wiki/Right-to-left</a></li>
</ul>


<h2>推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00FQEDTA8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00FQEDTA8&linkCode=as2&tag=droidyue-23">精彩绝伦的Android UI设计:响应式用户界面与设计模式</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00FQEDTA8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00B1OC4AI/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00B1OC4AI&linkCode=as2&tag=droidyue-23">深入剖析Android系统</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00B1OC4AI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EditText和AutoCompleteTextView设置文字选中颜色]]></title>
    <link href="http://droidyue.com/blog/2014/07/01/set-selection-color-of-textviews/"/>
    <updated>2014-07-01T20:58:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/01/set-selection-color-of-textviews</id>
    <content type="html"><![CDATA[<p>EditText和AutoCompleteTextView设置文字选中颜色
大多数Android Rom上,文本选择的背景色都是很好看的鲜绿色, 但是在某些垃圾的三星手机上,居然是蓝色,令人恶心反感,其实完全可以通过程序来修改,文本的默认选中背景色.</p>

<!--more-->


<h3>所用API解释</h3>

<blockquote><p>android:textColorHighlight
Color of the text selection highlight.</p></blockquote>

<h3>EditText设置效果</h3>

<p><img class="<a" src="href="http://droidyueimg.qiniudn.com/demo-edittext_selection_bg.png">http://droidyueimg.qiniudn.com/demo-edittext_selection_bg.png</a>"></p>

<h3>AutoCompleteTextView 设置效果</h3>

<p><img class="<a" src="href="http://droidyueimg.qiniudn.com/demo_autocompletetextview_selection_bg.png">http://droidyueimg.qiniudn.com/demo_autocompletetextview_selection_bg.png</a>"></p>

<h3>实现代码</h3>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical" &gt;
&lt;EditText 
    android:id="@+id/et_inputBox"       
    android:layout_height="wrap_content"
    android:layout_width="match_parent"
    android:textColorHighlight="#B4DF87"
    /&gt;

&lt;AutoCompleteTextView 
    android:id="@+id/act_input"
    android:layout_below="@id/et_inputBox"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:textColorHighlight="#B4DF87"
    /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<h3>推荐</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00ELMXLOK/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00ELMXLOK&linkCode=as2&tag=droidyue-23">更优秀的APP:31个APP用户界面设计经典案例</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00ELMXLOK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B007B78JUS/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B007B78JUS&linkCode=as2&tag=droidyue-23">Android创意实例详解</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B007B78JUS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
