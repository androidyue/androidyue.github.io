<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2014-09-27T10:47:12+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中Java和JavaScript交互]]></title>
    <link href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/"/>
    <updated>2014-09-20T21:37:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android</id>
    <content type="html"><![CDATA[<p>Android提供了一个很强大的WebView控件用来处理Web网页，而在网页中，JavaScript又是一个很举足轻重的脚本。本文将介绍如何实现Java代码和Javascript代码的相互调用。</p>

<!--more-->


<h2>如何实现</h2>

<p>实现Java和js交互十分便捷。通常只需要以下几步。</p>

<ul>
<li>WebView开启JavaScript脚本执行</li>
<li>WebView设置供JavaScript调用的交互接口。</li>
<li>客户端和网页端编写调用对方的代码。</li>
</ul>


<h2>本例代码</h2>

<p>为了便于讲解，先贴出全部代码</p>

<h3>Java代码</h3>

<p>```java lineos:false
package com.example.javajsinteractiondemo;</p>

<p>import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.webkit.JavascriptInterface;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>private static final String LOGTAG = "MainActivity";
@SuppressLint("JavascriptInterface")
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    final WebView myWebView = (WebView) findViewById(R.id.myWebView);
    WebSettings settings = myWebView.getSettings();
    settings.setJavaScriptEnabled(true);
    myWebView.addJavascriptInterface(new JsInteration(), "control");
    myWebView.setWebChromeClient(new WebChromeClient() {});
    myWebView.setWebViewClient(new WebViewClient() {

        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
            testMethod(myWebView);
        }

    });
    myWebView.loadUrl("file:///android_asset/js_java_interaction.html");
}

private void testMethod(WebView webView) {
    String call = "javascript:sayHello()";

    call = "javascript:alertMessage(\"" + "content" + "\")";

    call = "javascript:toastMessage(\"" + "content" + "\")";

    call = "javascript:sumToJava(1,2)";
    webView.loadUrl(call);

}

public class JsInteration {

    @JavascriptInterface
    public void toastMessage(String message) {
        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
    }

    @JavascriptInterface
    public void onSumResult(int result) {
        Log.i(LOGTAG, "onSumResult result=" + result);
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<h3>前端网页代码</h3>

<p>```html lineos:false js_java_interaction.html
<html></p>

<script type="text/javascript">
    function sayHello() {
        alert("Hello")
    }

    function alertMessage(message) {
        alert(message)
    }

    function toastMessage(message) {
        window.control.toastMessage(message)
    }

    function sumToJava(number1, number2){
       window.control.onSumResult(number1 + number2) 
    }
</script>


<p>Java-Javascript Interaction In Android
</html>
```</p>

<h2>调用示例</h2>

<h3>js调用Java</h3>

<p>调用格式为window.jsInterfaceName.methodName(parameterValues)
此例中我们使用的是control作为注入接口名称。
```html lineos:false
function toastMessage(message) {</p>

<pre><code>window.control.toastMessage(message)
</code></pre>

<p>}</p>

<p>function sumToJava(number1, number2){
   window.control.onSumResult(number1 + number2)
}
```</p>

<h3>Java调用JS</h3>

<p>webView调用js的基本格式为webView.loadUrl(&ldquo;javascript:methodName(parameterValues)&rdquo;)</p>

<h4>调用js无参无返回值函数</h4>

<p><code>java lineos:false
String call = "javascript:sayHello()";
webView.loadUrl(call);
</code></p>

<h4>调用js有参无返回值函数</h4>

<p>注意对于字符串作为参数值需要进行转义双引号。
<code>java lineos:false
String call = "javascript:alertMessage(\"" + "content" + "\")";
webView.loadUrl(call);
</code></p>

<h4>调用js有参数有返回值的函数</h4>

<p>Android在4.4之前并没有提供直接调用js函数并获取值的方法，所以在此之前，常用的思路是 java调用js方法，js方法执行完毕，再次调用java代码将值返回。</p>

<h5>1.Java调用js代码</h5>

<p><code>java lineos:false
String call = "javascript:sumToJava(1,2)";
webView.loadUrl(call);
</code></p>

<h5>2.js函数处理，并将结果通过调用java方法返回</h5>

<p>```javascript lineos:false
function sumToJava(number1, number2){</p>

<pre><code>   window.control.onSumResult(number1 + number2) 
</code></pre>

<p>}
```</p>

<h5>3.Java在回调方法中获取js函数返回值</h5>

<p>```java lineos:false
@JavascriptInterface
public void onSumResult(int result) {</p>

<pre><code>Log.i(LOGTAG, "onSumResult result=" + result);
</code></pre>

<p>}
```</p>

<h4><font color="blue">4.4处理</font></h4>

<p>Android 4.4之后使用evaluateJavascript即可。这里展示一个简单的交互示例
具有返回值的js方法
```html lineos:false
function getGreetings() {</p>

<pre><code>    return 1;
</code></pre>

<p>}
<code>
java代码时用evaluateJavascript方法调用
</code>java lineos:false
private void testEvaluateJavascript(WebView webView) {</p>

<pre><code>webView.evaluateJavascript("getGreetings()", new ValueCallback&lt;String&gt;() {

@Override
public void onReceiveValue(String value) {
    Log.i(LOGTAG, "onReceiveValue value=" + value);
}});
</code></pre>

<p>}
<code>
输出结果
</code>bash lineos:false
I/MainActivity( 1432): onReceiveValue value=1
```</p>

<p>注意</p>

<ul>
<li>上面限定了结果返回结果为String，对于简单的类型会尝试转换成字符串返回，对于复杂的数据类型，建议以字符串形式的json返回。</li>
<li>evaluateJavascript方法必须在UI线程（主线程）调用，因此onReceiveValue也执行在主线程。</li>
</ul>


<h2>疑问解答</h2>

<h3><font color="red">Alert无法弹出</font></h3>

<p>你应该是没有设置WebChromeClient,按照以下代码设置
```java
myWebView.setWebChromeClient(new WebChromeClient() {});</p>

<p>```</p>

<h3><font color="red">Uncaught ReferenceError: functionName is not defined</font></h3>

<p>问题出现原因，<strong>网页的js代码没有加载完成</strong>，就调用了js方法。解决方法是在网页加载完成之后调用js方法
```java fileos:false
myWebView.setWebViewClient(new WebViewClient() {</p>

<pre><code>@Override
public void onPageFinished(WebView view, String url) {
    super.onPageFinished(view, url);
    //在这里执行你想调用的js函数
}
</code></pre>

<p>});
```</p>

<h3><font color="red">Uncaught TypeError: Object [object Object] has no method</font></h3>

<h4>安全限制问题</h4>

<p>如果只在4.2版本以上的机器出问题，那么就是系统处于安全限制的问题了。Android文档这样说的</p>

<blockquote><p>Caution: If you&rsquo;ve set your targetSdkVersion to 17 or higher, you must add the @JavascriptInterface annotation to any method that you want available your web page code (the method must also be public). If you do not provide the annotation, then the method will not accessible by your web page when running on Android 4.2 or higher.</p></blockquote>

<p>中文大意为</p>

<blockquote><p>警告：如果你的程序目标平台是17或者是更高，你必须要在暴露给网页可调用的方法（这个方法必须是公开的）加上@JavascriptInterface注释。如果你不这样做的话，在4.2以以后的平台上，网页无法访问到你的方法。</p></blockquote>

<h5>两种解决方法</h5>

<ul>
<li>将targetSdkVersion设置成17或更高，引入@JavascriptInterface注释</li>
<li>自己创建一个注释接口名字为@JavascriptInterface，然后将其引入。注意这个接口不能混淆。</li>
</ul>


<p>注，创建@JavascriptInterface代码
```java lineos:false
public @interface JavascriptInterface {</p>

<p>}
```</p>

<h4>代码混淆问题</h4>

<p>如果在没有混淆的版本运行正常，在混淆后的版本的代码运行错误，并提示Uncaught TypeError: Object [object Object] has no method，那就是你没有做混淆例外处理。
在混淆文件加入类似这样的代码
```ruby lineos:false
-keep class com.example.javajsinteractiondemo$JsInteration {</p>

<pre><code>*;
</code></pre>

<p>}</p>

<p>```</p>

<h3><font color="red">All WebView methods must be called on the same thread</font></h3>

<p>过滤日志曾发现过这个问题。
<code>java lineos:false
E/StrictMode( 1546): java.lang.Throwable: A WebView method was called on thread 'JavaBridge'. All WebView methods must be called on the same thread. (Expected Looper Looper (main, tid 1) {528712d4} called on Looper (JavaBridge, tid 121) {52b6678c}, FYI main Looper is Looper (main, tid 1) {528712d4})
E/StrictMode( 1546):    at android.webkit.WebView.checkThread(WebView.java:2063)
E/StrictMode( 1546):    at android.webkit.WebView.loadUrl(WebView.java:794)
E/StrictMode( 1546):    at com.xxx.xxxx.xxxx.xxxx.xxxxxxx$JavaScriptInterface.onCanGoBackResult(xxxx.java:96)
E/StrictMode( 1546):    at com.android.org.chromium.base.SystemMessageHandler.nativeDoRunLoopOnce(Native Method)
E/StrictMode( 1546):    at com.android.org.chromium.base.SystemMessageHandler.handleMessage(SystemMessageHandler.java:27)
E/StrictMode( 1546):    at android.os.Handler.dispatchMessage(Handler.java:102)
E/StrictMode( 1546):    at android.os.Looper.loop(Looper.java:136)
E/StrictMode( 1546):    at android.os.HandlerThread.run(HandlerThread.java:61)
</code>
在js调用后的Java回调线程并不是主线程。如打印日志可验证
<code>bash lineos:false
ThreadInfo=Thread[WebViewCoreThread,5,main]
</code>
解决上述的异常，将webview操作放在主线程中即可。
```java
webView.post(new Runnable() {</p>

<pre><code>@Override
public void run() {
    webView.loadUrl(YOUR_URL).
}
</code></pre>

<p>});
```</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00LVHTI9U/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00LVHTI9U&linkCode=as2&tag=droidyue-23">第一行代码:Android</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00LVHTI9U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0097CON2S&linkCode=as2&tag=droidyue-23">JavaScript语言精粹</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0097CON2S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00B14IGUK/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00B14IGUK&linkCode=as2&tag=droidyue-23">安全技术大系:Web前端黑客技术揭秘</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00B14IGUK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周一脚本：过滤单个Android程序日志]]></title>
    <link href="http://droidyue.com/blog/2014/09/15/weekly-scripts-grep-android-application-log-in-terminal/"/>
    <updated>2014-09-15T18:55:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/15/weekly-scripts-grep-android-application-log-in-terminal</id>
    <content type="html"><![CDATA[<p>在Android软件开发中，增加日志的作用很重要，便于我们了解程序的执行情况和数据。Eclipse开发工具会提供了可视化的工具，但是还是感觉终端效率会高一些，于是自己写了一个python的脚本来通过包名来过滤某一程序的日志。</p>

<h3>原理</h3>

<p>通过包名得到对应的进程ID（可能多个），然后使用adb logcat 过滤进程ID即可得到对应程序的日志。</p>

<!--more-->


<h3>源码</h3>

<p>```python lineos:false <a href="https://raw.githubusercontent.com/androidyue/weekly-scripts/master/python/logcatPkg.py">https://raw.githubusercontent.com/androidyue/weekly-scripts/master/python/logcatPkg.py</a></p>

<h1>!/usr/bin/env python</h1>

<h1>coding:utf-8</h1>

<h1>This script is aimed to grep logs by application(User should input a packageName and then we look up for the process ids then separate logs by process ids).</h1>

<p>import os
import sys</p>

<p>packageName=str(sys.argv[1])</p>

<p>command = &ldquo;adb shell ps | grep %s | awk &lsquo;{print $2}&rsquo;&rdquo;%(packageName)
p = os.popen(command)</p>

<h2>for some applications,there are multiple processes,so we should get all the process id</h2>

<p>pid = p.readline().strip()
filters = pid
while(pid != &ldquo;&rdquo;):</p>

<pre><code>pid = p.readline().strip()
if (pid != ''):
    filters = filters +  "|" + pid
    #print 'command = %s;filters=%s'%(command, filters)
</code></pre>

<p>if (filters != &lsquo;&rsquo;) :</p>

<pre><code>cmd = 'adb logcat | grep --color=always -E "%s" '%(filters)
os.system(cmd)
</code></pre>

<p>```</p>

<h3>使用方法</h3>

<p><code>bash lineos:false
python logcatPkg.py com.mx.browser
</code></p>

<h3>最新代码</h3>

<p> <a href="https://raw.githubusercontent.com/androidyue/weekly-scripts/master/python/logcatPkg.py" target="_blank">locatPkg.py</a></p>

<h3>不足</h3>

<ul>
<li> 当脚本执行后，Android程序如果关闭或者重新启动，导致进程ID变化，无法自动继续输出日志，只能再次执行此脚本。</li>
</ul>


<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00KVLDS20/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00KVLDS20&linkCode=as2&tag=droidyue-23">仅用两周就能自制脚本语言？</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00KVLDS20" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B002A2LQR2/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B002A2LQR2&linkCode=as2&tag=droidyue-23">一个不错的Shell脚本学习指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B002A2LQR2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B005YWYH6C/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B005YWYH6C&linkCode=as2&tag=droidyue-23">Windows 7脚本编程和命令行工具指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B005YWYH6C" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android根据资源名获取资源ID]]></title>
    <link href="http://droidyue.com/blog/2014/09/12/get-resource-id-by-name-in-android/"/>
    <updated>2014-09-12T22:12:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/12/get-resource-id-by-name-in-android</id>
    <content type="html"><![CDATA[<p>接触过Android开发的同学们都知道在Android中访问程序资源基本都是通过资源ID来访问。这样开发起来很简单，并且可以不去考虑各种分辨率，语言等不同资源显式指定。</p>

<!--more-->


<h2>痛点</h2>

<p>但是，有时候也会有一些问题，比如我们根据服务器端的值取图片，但是服务器端绝对不会返回给我们的是资源id，最多是一种和文件名相关联的值，操作资源少的时候，可以维护一个容器进行值与资源ID的映射，但是多的话，就需要另想办法了。</p>

<h3>便捷的方法</h3>

<p>在这种情况下，使用文件名来得到资源ID显得事半功倍。
通过调用Resources的getIdentifier可以很轻松地得到资源ID。
几个简单的示例
```java lineos:false
Resources res = getResources();
final String packageName = getPackageName();
int imageResId = res.getIdentifier(&ldquo;ic_launcher&rdquo;, &ldquo;drawable&rdquo;, packageName);
int imageResIdByAnotherForm = res.getIdentifier(packageName + &ldquo;:drawable/ic_launcher&rdquo;, null, null);</p>

<p>int musicResId = res.getIdentifier(&ldquo;test&rdquo;, &ldquo;raw&rdquo;, packageName);</p>

<p>int notFoundResId = res.getIdentifier(&ldquo;activity_main&rdquo;, &ldquo;drawable&rdquo;, packageName);</p>

<p>Log.i(LOGTAG, &ldquo;testGetResourceIds imageResId = &rdquo; + imageResId</p>

<pre><code>            + ";imageResIdByAnotherForm = " + imageResIdByAnotherForm  
            + ";musicResId=" + musicResId
            + ";notFoundResId =" + notFoundResId);
</code></pre>

<p>```</p>

<p>运行结果
<code>bash lineos:false
I/MainActivity( 4537): testGetResourceIds imageResId = 2130837504;imageResIdByAnotherForm = 2130837504;musicResId=2130968576;notFoundResId =0
</code></p>

<h2>看一看API</h2>

<h3>直接API</h3>

<ul>
<li>这个方法用来使用资源名来获取资源ID</li>
<li>完整的资源名为<code>package:type/entry</code>，如果资源名这个参数有完整地指定，后面的defType和defPackage可以省略。</li>
<li>defType和defPackage省略时，需要将其设置成null</li>
<li>注意这个方法不提倡，因为直接通过资源ID访问资源会更加效率高</li>
<li>如果资源没有找到，返回0,在Android资源ID中0不是合法的资源ID。</li>
</ul>


<p>```java  lineos:false android.content.res.Resources.class
/**</p>

<pre><code> * Return a resource identifier for the given resource name.  A fully
 * qualified resource name is of the form "package:type/entry".  The first
 * two components (package and type) are optional if defType and
 * defPackage, respectively, are specified here.
 * 
 * &lt;p&gt;Note: use of this function is discouraged.  It is much more
 * efficient to retrieve resources by identifier than by name.
 * 
 * @param name The name of the desired resource.
 * @param defType Optional default resource type to find, if "type/" is
 *                not included in the name.  Can be null to require an
 *                explicit type.
 * @param defPackage Optional default package to find, if "package:" is
 *                   not included in the name.  Can be null to require an
 *                   explicit package.
 * 
 * @return int The associated resource identifier.  Returns 0 if no such
 *         resource was found.  (0 is not a valid resource ID.)
 */
public int getIdentifier(String name, String defType, String defPackage) {
    try {
        return Integer.parseInt(name);
    } catch (Exception e) {
        // Ignore
    }
    return mAssets.getResourceIdentifier(name, defType, defPackage);
}
</code></pre>

<p>```</p>

<h3>间接API</h3>

<p>实际上上述API调用的是AssetManager.class中的native方法。
```java lineos:false
/**</p>

<pre><code> * Retrieve the resource identifier for the given resource name.
 */
/*package*/ native final int getResourceIdentifier(String type,
                                                   String name,
                                                   String defPackage);
</code></pre>

<p>```</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00J4DXWDG/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00J4DXWDG&linkCode=as2&tag=droidyue-23">Android编程权威指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00J4DXWDG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0011F7WU4&linkCode=as2&tag=droidyue-23">收藏必备：Java编程思想</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0011F7WU4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0011C2P7W/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0011C2P7W&linkCode=as2&tag=droidyue-23">经典著作：人月神话</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0011C2P7W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android UI之自定义Window Title样式]]></title>
    <link href="http://droidyue.com/blog/2014/08/14/style-android-window-title/"/>
    <updated>2014-08-14T20:07:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/14/style-android-window-title</id>
    <content type="html"><![CDATA[<p>Android提供了很多控件便于开发者进行UI相关的程序设计。但是很多时候，默认的一些UI设置不足以满足我们的需求，要么不好看，要么高度不够，亦或者是与应用界面不协调。于是这时候需要通过自定义样式或者自定义控件来实现。</p>

<p>当然，在空间足以满足需求的情况下，通常需要定义样式就可以搞定。本文将简单介绍如何通过自定义样式来实现定义Window Title。</p>

<!--more-->


<h2>先看一下效果图</h2>

<p><img class="<a" src="href="http://droidyueimg.qiniudn.com/style_window_title.png">http://droidyueimg.qiniudn.com/style_window_title.png</a>" title="Custom Window Title Using Style" ></p>

<h2>逐步实现</h2>

<p>在<strong>res/values/styles.xml</strong>文件中加入下列代码
```xml lineos:false res/values/styles.xml</p>

<p> <style name="MyActivityTheme" parent="android:Theme.Light" ></p>

<pre><code>    &lt;item name="android:windowTitleBackgroundStyle"&gt;@style/windowTitleBackgroundStyle&lt;/item&gt;
    &lt;item name="android:windowTitleStyle"&gt;@style/windowTitleStyle&lt;/item&gt;
    &lt;!-- Window Header Height --&gt;
    &lt;item name="android:windowTitleSize"&gt;54dp&lt;/item&gt;
&lt;/style&gt;

&lt;!-- Preference Settings Window Title --&gt;
&lt;style name="windowTitleBackgroundStyle"&gt;  
    &lt;item name="android:background"&gt;#CCE8CF&lt;/item&gt;                
&lt;/style&gt;

&lt;style name="windowTitleStyle"&gt;
    &lt;item name="android:textColor"&gt;#FF0000&lt;/item&gt;
    &lt;item name="android:paddingLeft"&gt;25dp&lt;/item&gt;
    &lt;item name="android:textSize"&gt;20sp&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p><code>
在Manifest中指定Activity或者Application的主题为上面定义的MyActivityTheme，下面以设置Activity为例。
</code>xml lineos:false
&lt;activity</p>

<pre><code>android:name="com.example.stylewindowtitle.MainActivity"
android:label="@string/app_name"
android:theme="@style/MyActivityTheme"
</code></pre>

<blockquote></blockquote>

<!--code goes here-->


<p>```</p>

<h2>延伸阅读</h2>

<p><a href="http://developer.android.com/reference/android/R.attr.html" target="_blank">Android中的属性</a></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00D73BJWK/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00D73BJWK&linkCode=as2&tag=droidyue-23">浪潮之巅</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00D73BJWK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B004Y4QWMS/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B004Y4QWMS&linkCode=as2&tag=droidyue-23">启示录:打造用户喜爱的产品</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B004Y4QWMS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/0307463745/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=0307463745&linkCode=as2&tag=droidyue-23">Rework</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=0307463745" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超简单生成微博微信应用签名]]></title>
    <link href="http://droidyue.com/blog/2014/08/13/create-fignerprint-for-weibo-or-wechat-in-the-easiest-way/"/>
    <updated>2014-08-13T20:00:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/13/create-fignerprint-for-weibo-or-wechat-in-the-easiest-way</id>
    <content type="html"><![CDATA[<p>集成微博或者微信的SDK时，编辑应用信息要求填写应用签名，官方推荐下载一个apk工具。有那么复杂么，直接终端就可以搞定。</p>

<!--more-->


<p>```bash
19:33 $ keytool -exportcert -alias your_alias_name -keystore your_keystore_path | openssl md5</p>

<h2>然后按照提示输入密码</h2>

<p>Enter keystore password:  ********
```
替换上面的your_alias_name 和your_keystore_path即可。</p>

<p>真心觉得从手机上安装apk，输入包名得到签名，再取复制，再转到计算机上。麻烦！！！！！</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00647RV78/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00647RV78&linkCode=as2&tag=droidyue-23">Google Android SDK开发范例大全</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00647RV78" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00HECZXKE/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00HECZXKE&linkCode=as2&tag=droidyue-23">Android 开发入门与实战</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00HECZXKE" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
