<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2014-08-06T21:51:22+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何从UA分辨出Android设备类型]]></title>
    <link href="http://droidyue.com/blog/2014/08/05/detect-android-device-type-by-sniffing-user-agent/"/>
    <updated>2014-08-05T22:29:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/05/detect-android-device-type-by-sniffing-user-agent</id>
    <content type="html"><![CDATA[<p>随着Android设备增多，不少网站都开始设备Android设备，而Android主流设备类型以手机和平板为主。网站在适配时通过User Agent(用户代理，以下简称UA)又如何区分呢，本文部分内容翻译自Google官方博客<a href="http://googlewebmastercentral.blogspot.hk/2011/03/mo-better-to-also-detect-mobile-user.html" target="_blank">Mo’ better to also detect “mobile” user-agent</a>。</p>

<!--more-->


<h2>一针见血</h2>

<p>标准判断规则：<strong>Mobile Android has &ldquo;Mobile&rdquo; string in the User-Agent header. Tablet Android does not.</strong><br/>
<font color="red">在Android设备UA字符串中，移动设备包含<strong>Mobile</strong>字符串，而平板设备没有。</font></p>

<h2>旁征博引</h2>

<p>在最初的Android设备（即手机）中UA字符串中包含着<strong>android</strong>,所以那时候可以使用检测UA字符串中是否包含（不区分大小写）<strong>android</strong>来判断。</p>

<p>但是后来一个新的Android设备出现了，就是Android平板，不幸的是，Android平板上的UA也包含android，而对于平板上更适合展示桌面（PC）的网页版式。而如果仅仅以上述的判断规则，会给平板用户带来不是很好的用户体验。</p>

<p>鉴于上述问题，Google的Android工程师提出了一个解决方案。对于引导到移动版式的设备，即手机，需要从UA字符串中同时判断是否包含<strong>mobile</strong>和<strong>android</strong>这两个单词。我们先看一些示例。</p>

<p>比如这个UA字符串
<code>bash
Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13
</code>
因为这个UA字符串中没有mobile，所以需要把它引导到桌面版式（或者一个为Android大屏设备定制的版式）。从这个UA字符串中我们可以了解到，它来自一个大屏设置，即摩托罗拉的XOOM平板。</p>

<p>我们再看另一个UA字符串
<code>bash
Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; Nexus One Build/FRG83) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
</code>
包含了mobile和android,所以把这台Nexus One手机导向到移动版式吧。</p>

<p>相信通过上面两个UA字符串对比，你发现了UA的一些共性了吧，我们看看这些共性吧。
<img class="<a" src="href="http://git.oschina.net/androidyue/blogres/raw/master/android-user-agent.jpeg">http://git.oschina.net/androidyue/blogres/raw/master/android-user-agent.jpeg</a>" title="Android User Agent commonalities" ></p>

<h2>最后</h2>

<p>所以，当你依据检测UA来判断Android手机设备，请同时检查android和mobile两个字符串。</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B007OQQVMY/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B007OQQVMY&linkCode=as2&tag=droidyue-23">这才是JavaScript的高级程序设计</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B007OQQVMY" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00ENZ67VE/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00ENZ67VE&linkCode=as2&tag=droidyue-23">极客用什么高科技的钟表</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00ENZ67VE" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00ASIN7G8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00ASIN7G8&linkCode=as2&tag=droidyue-23">这就叫精通Android？</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00ASIN7G8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义支持读取XML属性的View]]></title>
    <link href="http://droidyue.com/blog/2014/08/05/create-your-view-with-supporting-xml-attribute/"/>
    <updated>2014-08-05T19:12:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/05/create-your-view-with-supporting-xml-attribute</id>
    <content type="html"><![CDATA[<p>在Android中，添加一个View很简单，简单的你可以简简单单地使用xml和一部分简单的java代码就可以搞定。
比如这样</p>

<!--more-->


<p>```xml linenos:false
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingBottom="@dimen/activity_vertical_margin"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
tools:context=".MainActivity" &gt;

&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/hello_world" 
    /&gt;
</code></pre>

<p></RelativeLayout>
```
Android Framework提供了这种便捷的xml布局方式，而且还可以支持从XML节点读取属性值。那么如果如何自定义View并且支持读取XML属性值呢。<br/>
下面开始尝试以一种很简单容易理解的方式介绍一下。</p>

<h2>自定义View代码实现</h2>

<p>比如我们自定义一个View，这个View继承自TextView，名称为ExTextView。这里我们创建简单的构造方法，仅仅包含Context和AttributeSet参数。这样我们就可以在布局编辑器中创建或者修改ExTextView的实例。
```java  linenos:false ExTextView.java
package com.example.customviewwithxml;</p>

<p>import android.content.Context;
import android.util.AttributeSet;
import android.widget.TextView;</p>

<p>public class ExTextView extends TextView {</p>

<pre><code>public ExTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
}
</code></pre>

<p>}
```</p>

<h3>定义XML属性</h3>

<p>在使用系统内置的View时，我们可以通过在XML布局文件中指定属性来控制View的样式和行为。一个优秀的View应该可以通过XML来添加并且设置样式。所以，要让你自定义的View做到上述功能，你需要做。</p>

<ul>
<li>通过<code>&lt;declare-styleable&gt;</code> 来定义自定义View的属性集。</li>
<li>可以在布局文件中指定View的属性值。</li>
<li>在程序运行时可以检索读取属性值。</li>
<li>为View应用读取出来的属性值。</li>
</ul>


<p>现在就为你的View添加<code>&lt;declare-styleable&gt;</code>来定义属性集哈。 其存放文件为 <strong>res/values/attrs.xml</strong>。以下为几个简单实例。
```xml linenos:false attrs.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;attr name="enableOnPad" format="boolean" /&gt;
&lt;attr name="supportDeviceType" format="reference"/&gt;
&lt;declare-styleable name="ExTextView"&gt;
    &lt;attr name="enableOnPad"/&gt;
    &lt;attr name="supportDeviceType"/&gt;
&lt;/declare-styleable&gt;
</code></pre>

<p></resources>
```</p>

<h3>注意</h3>

<ul>
<li><code>&lt;declare-styleable name="ExTextView"&gt;</code>中ExTextView为样式实体的名字，例样式实体的名字没有特殊的限制，但是通常约定为View的类名。</li>
</ul>


<h2>布局中使用自定义View</h2>

<p>一旦我们定义了属性值，我们可以想系统内置的属性值一样使用，唯一不同的是，自定义的属性值和系统提供的属于不同的名字空间。系统内置的属性归属于名字空间<code>http://schemas.android.com/apk/res/android</code> 而自定义的属性归属于名字空间<strong><code>http://schemas.android.com/apk/res/[your package name]</code></strong>
```xml linenos:false activity_main.xml
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
xmlns:droidyue="http://schemas.android.com/apk/res/com.example.customviewwithxml"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingBottom="@dimen/activity_vertical_margin"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
tools:context=".MainActivity" &gt;

&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/hello_world" 
    /&gt;

&lt;com.example.customviewwithxml.ExTextView 
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello World"
    droidyue:supportDeviceType="@array/support_device_types"    
    droidyue:enableOnPad="true"

    /&gt;    
</code></pre>

<p></RelativeLayout>
```</p>

<h2>读取XML属性值</h2>

<p>当View从XML中被创建时，其所有标签的属性值都是以AttributeSet的对象从资源包中获取并传递。</p>

<h3>为什么不直接读取AttributeSet，而是obtainStyledAttributes</h3>

<ul>
<li>属性值中得资源引用不能解析</li>
<li>样式不会应用到View</li>
</ul>


<p>```java linenos:false  ExTextView.java
public ExTextView(Context context, AttributeSet attrs) {</p>

<pre><code>    super(context, attrs);
    TypedArray a = context.getTheme().obtainStyledAttributes(
            attrs,R.styleable.ExTextView,
            0, 0);
    int supportDevicesResId = a.getResourceId(R.styleable.ExTextView_supportDeviceType, 0);
    String[] supportDeviceTypes = context.getResources().getStringArray(supportDevicesResId);
    boolean enableOnPad = a.getBoolean(R.styleable.ExTextView_enableOnPad, false);
    Log.i(VIEW_LOG_TAG, "getAtrributeFromXml supportDeviceType=" + Arrays.toString(supportDeviceTypes) + ";enableOnPad=" + enableOnPad);
    a.recycle();
}
</code></pre>

<p>```
注意，TypedArray实例为公用资源，再次使用之前需要回收（recycle）。</p>

<h2>延伸阅读</h2>

<p><a href="http://developer.android.com/training/custom-views/create-view.html" target="_blank">Create View</a></p>

<h2>源码下载</h2>

<p><a href="http://pan.baidu.com/s/1c0gXfw8" target="_blank">百度云</a></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00ASIN7G8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00ASIN7G8&linkCode=as2&tag=droidyue-23">如何才能精通Android</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00ASIN7G8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B009OLU8EE/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B009OLU8EE&linkCode=as2&tag=droidyue-23">你能看懂Android系统源代码么</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B009OLU8EE" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00LVHTI9U/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00LVHTI9U&linkCode=as2&tag=droidyue-23">第一行代码:Android</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00LVHTI9U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速提高Android开发效率的Web工具]]></title>
    <link href="http://droidyue.com/blog/2014/08/03/great-web-tools-for-android-development/"/>
    <updated>2014-08-03T14:34:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/03/great-web-tools-for-android-development</id>
    <content type="html"><![CDATA[<p>在Google的广大支持下，便捷开发Android程序的Native工具层出不穷。其实Android开发涉及到的范围也不小，一些Web工具有时候也会带来事半功倍的效果。有些甚至是一些native应用无法做到的。本文，将简单列举一下本人正在使用的一些工具，当然也会持续更新。</p>

<!--more-->


<h2>快速下载Google Play应用</h2>

<p>由于一些你懂的原因，国内无法直接访问Google Play商店。而且下载Google Play商店还是需要登陆谷歌账户，以国内的网络，下载成功简直是太困难了。<br/>
这里介绍一款不需要账户国内即可访问的Web工具。可以通过输入包名或者Google Play地址即可下载。</p>

<p>地址:<a href="http://apps.evozi.com/apk-downloader/" target="_blank">APK Downloader</a></p>

<h2>进制转换</h2>

<p>Android中所有的资源都有一个对应的资源ID，资源ID的类型为16进制的整数。有些时候特殊的场合处理资源ID，为了调试需要进行进制转换，比如16进制转常用的10进制。不用自己算，使用下面的工具就可以轻松搞定。</p>

<p>地址：<a href="http://www.binaryhexconverter.com/hex-to-decimal-converter" target="_blank">Hex To Decimal Converter</a></p>

<h2>UI相关必备</h2>

<p>通常UI设计师都会给开花童鞋色值，当疏忽的时候，我们可以使用截图软件得到10进制的三个值，然后将其转换成色值。这里有一个便捷的RGB工具。</p>

<p>地址：<a href="http://www.colorspire.com/rgb-color-wheel/" target="_blank">RGB Color Wheel/</a></p>

<h2>JSON格式化</h2>

<p>在CS应用中，客户端和服务器端通常使用json作为数据交换格式。当分析的时候，我们必然是将raw数据转换成可读性更高的。快来使用这个强大的工具吧。</p>

<p>地址：<a href="http://json.parser.online.fr/" target="_blank">JSON Parser</a></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B007A9W11U/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B007A9W11U&linkCode=as2&tag=droidyue-23">提升工作与生活效率的52项原则</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B007A9W11U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00CE1JQO4/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00CE1JQO4&linkCode=as2&tag=droidyue-23">Android中的高级编程有哪些</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00CE1JQO4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中自定义Checkbox]]></title>
    <link href="http://droidyue.com/blog/2014/07/27/change-default-image-of-checkbox-on-android/"/>
    <updated>2014-07-27T14:06:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/27/change-default-image-of-checkbox-on-android</id>
    <content type="html"><![CDATA[<p>在Android中，Checkbox是一个很重要的UI组件，而且在Android中，它展现的形式越来越好看，这就说明有些系统，比如4.0以下，checkbox还是比较不好看，或者跟软件的风格不协调，就需要我们自定义这个组件。</p>

<p>自定义这个组件很简单，简单的增加修改xml文件即可。</p>

<!--more-->


<h2>准备工作</h2>

<p>准备好两张图片，一个是选中的图片，另一个是未选中的图片。本文以checked.png和unchecked.png为例。</p>

<h2>设置选择框</h2>

<p>在drawable下新建文件custom_checkbox.xml
```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<selector xmlns:android="http://schemas.android.com/apk/res/android" ></p>

<pre><code>&lt;item android:state_checked="true" android:drawable="@drawable/checked"&gt;&lt;/item&gt;
&lt;item android:state_checked="false" android:drawable="@drawable/unchecked"&gt;&lt;/item&gt;
&lt;item android:drawable="@drawable/unchecked"&gt;&lt;/item&gt;&lt;!-- The default one --&gt;
</code></pre>

<p></selector>
```</p>

<h2>应用自定义</h2>

<p>设置button属性值为上面定义的custom_checkbox。
```xml
&lt;CheckBox</p>

<pre><code>android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:button="@drawable/custom_checkbox"
</code></pre>

<p>/>
```</p>

<p>自定义完毕，跑起来你的程序吧。</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00FQEDTA8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00FQEDTA8&linkCode=as2&tag=droidyue-23">从响应用户交互出发，设计Android的UI</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00FQEDTA8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B009NKMGTG/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B009NKMGTG&linkCode=as2&tag=droidyue-23">一个都不能少的Android UI基础教程</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B009NKMGTG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[捕获Android文本中链接点击事件]]></title>
    <link href="http://droidyue.com/blog/2014/07/27/capture-link-click-event-in-text-on-android/"/>
    <updated>2014-07-27T09:33:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/27/capture-link-click-event-in-text-on-android</id>
    <content type="html"><![CDATA[<p>Android中的TTextView很强大，我们可以不仅可以设置纯文本为其内容，还可以设置包含网址和电子邮件地址的内容，并且使得这些点击可以点击。但是我们可以捕获并控制这些链接的点击事件么，当然是可以的。</p>

<p>本文将一个超级简单的例子介绍一下如何实现在Android TextView　捕获链接的点击事件。</p>

<!--more-->


<h2>关键实现</h2>

<p>实现原理就是将所有的URL设置成ClickSpan，然后在它的onClick事件中加入你想要的控制逻辑就可以了。
```java</p>

<pre><code>private void setLinkClickable(final SpannableStringBuilder clickableHtmlBuilder, 
        final URLSpan urlSpan) {
    int start = clickableHtmlBuilder.getSpanStart(urlSpan);
    int end = clickableHtmlBuilder.getSpanEnd(urlSpan);
    int flags = clickableHtmlBuilder.getSpanFlags(urlSpan);
    ClickableSpan clickableSpan = new ClickableSpan() {
          public void onClick(View view) {
              //Do something with URL here.

          }
    };
    clickableHtmlBuilder.setSpan(clickableSpan, start, end, flags);
}

private CharSequence getClickableHtml(String html) {
    Spanned spannedHtml = Html.fromHtml(html);
    SpannableStringBuilder clickableHtmlBuilder = new SpannableStringBuilder(spannedHtml);
    URLSpan[] urls = clickableHtmlBuilder.getSpans(0, spannedHtml.length(), URLSpan.class);   
    for(final URLSpan span : urls) {
        setLinkClickable(clickableHtmlBuilder, span);
    }
    return clickableHtmlBuilder;
}
</code></pre>

<p>```</p>

<h2>如何使用</h2>

<p>```java</p>

<pre><code>    TextView myTextView = (TextView)findViewById(R.id.myTextView);
    String url = "This is a page with lots of URLs. &lt;a href=\"http://droidyue.com\"&gt;droidyue.com&lt;/&gt; " +
            "This left is a very good blog. There are so many great blogs there. You can find what" +
            "you want in that blog."  
            + "The Next Link is &lt;a href=\"http://www.google.com.hk\"&gt;Google HK&lt;/a&gt;";
    myTextView.setText(getClickableHtml(url));
</code></pre>

<p>```</p>

<h2>实现自己的控制</h2>

<p>我们需要在ClickSpan的onClick方法中加入自己的控制逻辑，比如我们使用傲游浏览器打开点击的链接。
```java
public void onClick(View view) {</p>

<pre><code>Log.i(LOGTAG, "onClick url=" + urlSpan.getURL() );
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse(urlSpan.getURL()));
intent.setPackage("com.mx.browser");
startActivity(intent);
</code></pre>

<p>}
```</p>

<h2>提醒</h2>

<p>不要忘了设置TextView的autoLink属性。
```xml
&lt;TextView</p>

<pre><code>android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="@string/hello_world" 
android:id="@+id/myTextView"
android:autoLink="web" 
</code></pre>

<p>/>
```</p>

<h2>demo源码</h2>

<p><a href="http://pan.baidu.com/s/1i3kQ1RB" target="_blank">百度云盘</a></p>

<h3>其他</h3>

<ul>
<li><p><a href="http://www.amazon.cn/gp/product/B00CE1JQO4/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00CE1JQO4&linkCode=as2&tag=droidyue-23">Android中的高级编程部分</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00CE1JQO4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p></li>
<li><p><a href="http://www.amazon.cn/gp/product/B00ASIN7G8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00ASIN7G8&linkCode=as2&tag=droidyue-23">精通Android其实并不难</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00ASIN7G8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
