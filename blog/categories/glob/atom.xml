<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: glob | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/glob/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2015-05-25T21:41:53+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[效率工具：强大的批量删除文件的脚本]]></title>
    <link href="http://droidyue.com/blog/2014/11/29/a-super-tool-to-remove-files/"/>
    <updated>2014-11-29T17:29:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/11/29/a-super-tool-to-remove-files</id>
    <content type="html"><![CDATA[<p>最近打包服务器上的apk包又增多了，每次手动rm操作过于麻烦，于是花了几分钟写了一个可以对指定目录下根据最后修改时间和通配符匹配进行批量删除的脚本。将这个脚本加入crontab中之后，以后就再也不用担心多余的安装包占用磁盘空间了。</p>

<!--more-->


<h2>简短的代码</h2>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding: utf-8</h1>

<h1>Usage: ruby removeOldFiles.rb &ldquo;dest_file_pattern&rdquo; days_ago</h1>

<p>destFilePattern= ARGV[0]
daysAgo= ARGV[1]
edenTime = Time.now.to_i &ndash; daysAgo.to_i * 86400
Dir[destFilePattern].each{|child|</p>

<pre><code>system "rm -rfv #{child}"   if (File.mtime(child).to_i &lt; edenTime)
</code></pre>

<p>}
```</p>

<h2>如何使用</h2>

<p>使用起来很简单，使用规则如下<br/>
<code>bash
ruby removeOldFiles.rb "dest_file_pattern" days_ago
</code>
举个例子，比如我们想删除/tmp目录下的，所有最后修改时间为3天前的apk文件，我们只需要这样执行。
<code>bash
ruby removeOldFiles.rb "/tmp/*.apk" 3
</code></p>

<h2>为什么第一个参数使用双引号</h2>

<p>第一个参数为包含通配符的路径，在shell中存在一个工具就是glob会将包含通配符的路径匹配到具体的文件，比如这样的一段代码。
```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding: utf-8</h1>

<p>puts ARGV.length
ARGV.each do |a|</p>

<pre><code>puts "Argument: #{a}"
</code></pre>

<p>end
<code>
我们传入含有通配符的路径参数，得到的结果就是glob匹配后的文件名（前提是通配符可以匹配到文件）。
</code>bash
10:41 $ ruby test.rb <em>.txt
2
Argument: abc.txt
Argument: def.txt
<code>
为了避免进行glob操作,需要对包含通配符的路径参数使用双引号标记。
</code>bash
10:41 $ ruby test.rb &ldquo;</em>.txt&rdquo;
1
Argument: *.txt
```
所以在使用脚本时第一个参数一定要使用双引号。</p>

<h2>如何遍历文件包含子目录内的</h2>

<p>比如我们想遍历<code>/tmp/abc/def.txt</code> 我们可以使用<code>/tmp/**/.txt</code>即可</p>
]]></content>
  </entry>
  
</feed>
