<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 编程随想 | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/bian-cheng-sui-xiang/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2014-09-30T21:54:16+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最小特权原则]]></title>
    <link href="http://droidyue.com/blog/2014/08/03/principle-of-least-privilege/"/>
    <updated>2014-08-03T09:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/03/principle-of-least-privilege</id>
    <content type="html"><![CDATA[<p>之前的项目中的一些事情的做法违背了最小特权原则（亦为最小权限原则），这里记录以下什么是该原则。</p>

<h2>原始定义</h2>

<p>该原则最早由Jerome Saltzer提出。其最原始的表述为
<strong>Every program and every privileged user of the system should operate using the least amount of privilege necessary to complete the job.</strong><br/>
其中文意思为<br/>
<strong>系统的每个程序或者用户应该使用完成工作所需的最小权限工作。</strong></p>

<!--more-->


<h2>带来的好处</h2>

<ul>
<li>更好的系统稳定性。 当一段程序被限定了最小权限原则，就可以更加容易地测试可能的行为以及与其他程序的交互。比如，一个被赋予最小特权的程序没有权限让机器设备崩溃，也不会阻碍同一系统上的其他程序运行。</li>
<li>更好的系统安全性。 当代码在系统范围的行动，它可以执行有限的，在一个应用程序中的漏洞不能用来利用机器的其他部分，例如，微软指出：“运行在标准用户模式为客户提供了更多的保护，防止意外造成“粉碎攻击”和恶意软件，比如根工具包，间谍软件和病毒无法检测“系统级的损坏。</li>
<li>更容易的部署。     通常情况下，在一个比较大的环境下，程序需要权限越少就越容易部署。通常表现在以下两点。需要安装设备驱动或者需要提升权限的程序通常需要额外的步骤来完成部署。比如，Windows下，一个不需要设备驱动的解决方案不需要安装即可运行。而需要安装设备驱动的程序，需要使用Windows Installer服务来来装从而提升驱动的权限。</li>
</ul>


<h2>延伸阅读</h2>

<ul>
<li><a href="http://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E5%8E%9F%E5%88%99" target="_blank">最小权限原则</a></li>
<li><a href="http://en.wikipedia.org/wiki/Principle_of_least_privilege" target="_blank">Principle of least privilege</a></li>
</ul>


<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B0011C2P7W/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0011C2P7W&linkCode=as2&tag=droidyue-23">人月神话</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0011C2P7W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0016K8XGQ/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0016K8XGQ&linkCode=as2&tag=droidyue-23">编程之美:微软技术面试心得</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0016K8XGQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纠结才能写出好代码]]></title>
    <link href="http://droidyue.com/blog/2014/07/27/think-twice-when-coding/"/>
    <updated>2014-07-27T14:41:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/27/think-twice-when-coding</id>
    <content type="html"><![CDATA[<p>程序员的代码修炼应该有两个目标，一个是代码的执行效率，另一个是代码的可读性。朝着这两个目标努力的人很多，但是能够达到目标的人很少。</p>

<p>以前部门老大曾经说过一句话，大概意思是，想要写出好的代码，就要在写的时候纠结一会儿。</p>

<p>其实编程本身就是一个寻找最优解的哲学问题。解决一个问题，有时候我们要适度纠结，来使我们的代码更加可读，效率更高。</p>

<!--more-->


<p>以下以一个简单的例子，列举一下一个小纠结的问题。我们这里尽量将重点放在如何改善代码等问题上。</p>

<h2>方法作用</h2>

<p>从WebView中读取Favicon，并且返回，如果webview为null，或者web.getFavicon()为null，则返回默认的一个图标。</p>

<h2>原始的代码</h2>

<p>```java
public Bitmap getFavicon(final WebView webview) {</p>

<pre><code>if (null != webview &amp;&amp; null != webview.getFavicon()) {
    return webview.getFavicon();
} else {
    return BitmapFactory.decodeResource(getResources(), R.drawable.default_favicon);
}
</code></pre>

<p>}
```
上面存在一种情况，即null != webview &amp;&amp; null != webview.getFavicon() 这个条件成立的时候，其实还是有改善的地方，因为这种情况下webview.getFavicon()会存在两次调用，一次作为判断条件需要，另一次是返回引用需要。</p>

<h2>这样改好么</h2>

<p>```java
public Bitmap getFavicon(final WebView webview) {</p>

<pre><code>if (null != webview) {
    Bitmap favicon = webview.getFavicon();
    if (null != favicon) {
        return favicon;
    } else {
        return BitmapFactory.decodeResource(getResources(), R.drawable.default_favicon);
    }
} else {
    return BitmapFactory.decodeResource(getResources(), R.drawable.default_favicon);
}
</code></pre>

<p>}
```
这种情况下，没有了上面存在的两次调用的问题了，但是关于返回默认值是存在两处相同的代码，如果需要修改默认的图标时，有可能需要修改两次。还是不够好。</p>

<h2>这个总可以了吧</h2>

<p>```java
public Bitmap getFavicon(final WebView webview) {</p>

<pre><code>Bitmap defaultFavicon = BitmapFactory.decodeResource(getResources(), R.drawable.default_favicon);
if (null != webview) {
    Bitmap favicon = webview.getFavicon();
    if (null != favicon) {
        return favicon;
    } else {
        return defaultFavicon;
    }
} else {
    return defaultFavicon;
}
</code></pre>

<p>}
```
这个确实没有上面的两个问题了，但是还是有不完美的地方，就是如果webview不为null，并且webview.getFavicon()也不为null，那么<strong>Bitmap defaultFavicon = BitmapFactory.decodeResource(getResources(), R.drawable.default_favicon);</strong>实际上是多余的。</p>

<h2>终于改好了</h2>

<p>```java
public Bitmap getFavicon(final WebView webview) {</p>

<pre><code>Bitmap favicon = null;
if (null != webview &amp;&amp; (favicon = webview.getFavicon()) != null) {
    return favicon;
} else {
    return BitmapFactory.decodeResource(getResources(), R.drawable.default_favicon);
}
</code></pre>

<p>}
```
对，上面的代码没有一处多余，并且也是最简单的。</p>

<p>从现在开始，写代码的时候纠结吧。不要仅仅为了实现，更不要追求代码的数量，培养你的代码洁癖，做个代码艺术家。</p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B0061XKRXA/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0061XKRXA&linkCode=as2&tag=droidyue-23">纠结经典：代码大全</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0061XKRXA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0031M9GHC&linkCode=as2&tag=droidyue-23">如何写出高效整洁的代码</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0031M9GHC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B003BY6PLK/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B003BY6PLK&linkCode=as2&tag=droidyue-23">Martin Fowler这样重构代码</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B003BY6PLK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
