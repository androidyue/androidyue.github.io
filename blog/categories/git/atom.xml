<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-03-13T13:08:59+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[效率脚本：删除已经合并的git分支]]></title>
    <link href="http://droidyue.com/blog/2014/10/24/auto-delete-merged-branches/"/>
    <updated>2014-10-24T22:45:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/10/24/auto-delete-merged-branches</id>
    <content type="html"><![CDATA[<p>使用Git管理代码工程，着实方便了很多，但是当做完feature分支或者完成hotfix之后，总是忘记删除这些无用的分支，一个一个地删除着实麻烦，重复手工劳动不符合程序员的风格，于是写了一个简单的脚本。一键删除那些不需要的分支，让多余的干扰信息离开视线。</p>

<!--more-->


<h2>删除哪些分支？</h2>

<p>删除的为Merge（合并）操作的源分支。如果工程正在处于分支A(HEAD为A分支),分支B已经合并到了分支A，即A分支包含了B分支的内容，则会删除B分支。</p>

<h2>代码</h2>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding: utf-8</h1>

<p>exceptBranches = [&lsquo;master&rsquo;, &lsquo;pre&rsquo;, &lsquo;develop&rsquo;]
for branch in <code>cd #{ARGV[0]} &amp;&amp; git branch -l</code>.split(&lsquo; &rsquo;) &ndash; [&lsquo;*&rsquo;]</p>

<pre><code>next if exceptBranches.include? branch
system("git branch -d #{branch}")
</code></pre>

<p>end
```</p>

<h2>使用方法</h2>

<p><code>bash
ruby removeMergedBranches.rb your_git_project
</code></p>

<h2>执行结果</h2>

<p>执行结果类似如下，注意如果没有进行合并，则会提示警告或者错误，这些可以忽略。
```bash
warning: deleting branch &lsquo;custom&rsquo; that has been merged to</p>

<pre><code>     'refs/remotes/origin/custom', but not yet merged to HEAD.
</code></pre>

<p>Deleted branch custom (was b63ab7d).
Deleted branch hotfix (was 340cca0).
Deleted branch mgit (was 86b4004).
error: The branch &lsquo;develop_rtl&rsquo; is not fully merged.
If you are sure you want to delete it, run &lsquo;git branch -D develop_rtl&rsquo;.
```</p>

<h2>链接</h2>

<p><a href="https://github.com/androidyue/weekly-scripts/blob/master/ruby/removeMergedBranches.rb">在Github上的脚本</a></p>

<h3>学习书籍</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B0058FLC40/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0058FLC40&linkCode=as2&tag=droidyue-23">Git权威指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0058FLC40" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B008041DUY/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B008041DUY&linkCode=as2&tag=droidyue-23">七周七语言:理解多种编程范型</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B008041DUY" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生苦短，让你的Git飞起来吧]]></title>
    <link href="http://droidyue.com/blog/2014/10/15/speed-up-your-git/"/>
    <updated>2014-10-15T21:37:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/10/15/speed-up-your-git</id>
    <content type="html"><![CDATA[<p>git是一款超极优秀的版本控制工具，包括Linus大神的linux项目在内的千千万万的项目在使用。你可以使用Eclipse插件管理，亦可以使用终端工具。</p>

<p>git虽然有着svn不能匹及的本地仓库，但是和svn一样，和远程服务器通信也相当常用。常用的pull和push就是比较常见的命令。</p>

<p>然后，你是不是觉得从远程拉取（pull）到本地是不是很慢，从本地推到服务器端（push）又是不是很耗时呢，是吧，正所谓人生苦短，赶紧加速你的git吧。</p>

<!--more-->


<h2>修改ssh配置</h2>

<p>按照下面的内容修改这个文件<code>vim ~/.ssh/config</code>
```ruby
ControlMaster auto</p>

<h2>ControlPath /tmp/%r@%h:%p</h2>

<p>ControlPath /tmp/git@github.com:22
ControlPersist yes
```</p>

<h2>一些注解</h2>

<ul>
<li><strong>ControlMaster auto</strong>可以使多个ssh会话共享一个已经存在的连接，如果没有，则自动创建一个连接。</li>
<li><strong>ControlPath /tmp/%r@%h:%p</strong>可以指定想要共享的连接。%r代表远程登录用户名，一般都为git，%h表示目标主机，%p表示端口。</li>
<li><strong>ControlPersist yes</strong> 则可以让共享的连接持有处于连接状态。</li>
</ul>


<h2>常用的ControlPath</h2>

<p>下面包含开源中国，github，gitcafe等代码托管。
<code>
ControlPath /tmp/git@git.oschina.net:22
ControlPath /tmp/git@github.com:22
ControlPath /tmp/git@gitcafe.com:22
</code></p>

<p>快来试一试吧，是不是提高了5倍！</p>

<p>注：由于网络的情况，结果可能略有不同。已经很快的但没有感觉改善的同学，可以继续读下去。</p>

<h2>还能更快</h2>

<p>还有一个能提高50倍的方法，不过对于一般开发者不是很常用，如需了解可以参考<a href="http://interrobeng.com/2013/08/25/speed-up-git-5x-to-50x/">Speed Up Git (5x to 50x)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续整理：Git 标签操作]]></title>
    <link href="http://droidyue.com/blog/2014/08/02/git-tutorial-about-tag/"/>
    <updated>2014-08-02T13:20:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/08/02/git-tutorial-about-tag</id>
    <content type="html"><![CDATA[<p>使用Git作为版本控制工具，当每次发版的时候我们通常会做一个tag（标签），比如我们的软件发布了1.0版，那么我们需要生成一个类似v1.0的标签。<br/>
很多工具都可以生成，比如Gitlab网页就可以很方便的生成。 这里简单地介绍以下如何使用终端进行git相关的标签操作。</p>

<!--more-->


<h2>签出</h2>

<p>```bash linenos:false</p>

<h1>语法：git checkout tagName</h1>

<p>git checkout v0.9
```
注意git clone会将远程所有的标签都保存到本地仓库。</p>

<h2>创建</h2>

<p>```bash linenos:false</p>

<h1>语法：git tag tagName 如下面示例</h1>

<p>git tag v1.0
```</p>

<h2>查看</h2>

<p>创建之后如何查看呢，也相当简单。
<code>bash linenos:false
13:37:49-androidyue/tmp/tagdemo (master)$ git tag
v1.0
v2.0
</code></p>

<h3>过滤查看</h3>

<ul>
<li>git tag -l
<code>bash linenos:false
13:37:49-androidyue/tmp/tagdemo (master)$ git tag -l v*
v1.0
v2.0
</code></li>
<li>git tag &mdash;list
<code>bash linenos:false
13:37:49-androidyue/tmp/tagdemo (master)$ git tag --list v*
v1.0
v2.0
</code></li>
<li>git tag | grep regex
<code>bash linonos:false
13:45:26-androidyue/tmp/tagdemo (master)$ git tag | grep v
v1.0
v2.0
</code></li>
</ul>


<h2>删除</h2>

<p>```bash linenos:false
13:47:06-androidyue/tmp/tagdemo (master)$ git tag -d v1.0
Deleted tag &lsquo;v1.0&rsquo; (was bc70b55)</p>

<h2>或者</h2>

<p>13:47:11-androidyue/tmp/tagdemo (master)$ git tag &mdash;delete v2.0
Deleted tag &lsquo;v2.0&rsquo; (was bc70b55)
```</p>

<h2>分享</h2>

<ul>
<li>推送单个到服务器端，和推送分支规则一样
```bash linenos:false

<h1>git push origin tag_name</h1>

<p>git push  origin v1.0
```</p></li>
<li>推送全部标签到服务器端
<code>bash linenos:false
git push  origin --tags
</code></li>
</ul>


<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/1430218339/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=1430218339&linkCode=as2&tag=droidyue-23">Pro Git</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=1430218339" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/1430218339/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=1430218339&linkCode=as2&tag=droidyue-23">成为大神必读的Git书籍</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=1430218339" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 取消跟踪已版本控制的文件]]></title>
    <link href="http://droidyue.com/blog/2014/07/25/untrack-versioned-file-in-git/"/>
    <updated>2014-07-25T20:00:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/25/untrack-versioned-file-in-git</id>
    <content type="html"><![CDATA[<p>Git 是一个很好的版本控制工具，当然驾驭起来相比 SVN 要稍微复杂一些。初入 Git，难免有一些问题。比如我们不小心将某个文件加入了版本控制，但是突然又不想继续跟踪控制这个文件了，怎么办呢？</p>

<!--more-->


<p>其实方法也是很简单的。使用<strong>git update-index</strong>即可。</p>

<h3>不想继续追踪某个文件</h3>

<p><code>bash
git update-index --assume-unchanged your_file_path
</code></p>

<h3>如果想再次继续跟踪某个文件</h3>

<p><code>bash
git update-index --no-assume-unchanged your_file_path
</code></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/1430218339/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=1430218339&linkCode=as2&tag=droidyue-23">Git大神之路：Pro Git</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=1430218339" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0058FLC40/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0058FLC40&linkCode=as2&tag=droidyue-23">Git权威指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0058FLC40" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续整理:git分支操作]]></title>
    <link href="http://droidyue.com/blog/2014/07/21/git-tutorial-about-branch/"/>
    <updated>2014-07-21T19:07:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/21/git-tutorial-about-branch</id>
    <content type="html"><![CDATA[<p>这篇文章主要的目的是记录一下git中关于分支相关的操作记录. 本文会持续更新,所有的操作都经过本人实践,可以正常运行,并且可以解决问题.</p>

<p>我就不罗嗦介绍什么事Git和Git有多么牛了.</p>

<!--more-->


<hr />

<h3>迁出远程分支</h3>

<p>```bash
git checkout  -b new_local_branch_name repository_name/remote_branch_name</p>

<h2>Example</h2>

<p>git checkout  -b custom origin/custom</p>

<h2>建议是本地的分支名字和其对应的远程分支名称一样.</h2>

<h2>```</h2>

<h3>查看本地所有分支</h3>

<p><code>bash
git branch
</code></p>

<hr />

<h3>查看远程所有分支</h3>

<p>```bash
git branch -r</p>

<h2>```</h2>

<h3>删除本地分支</h3>

<p>```bash
git branch -d your_branch_name</p>

<h2>```</h2>

<h3>强制删除本地分支</h3>

<p>```bash
git branch -D your_branch_name</p>

<h2>```</h2>

<h3>删除远程分支</h3>

<p><code>bash
git push origin --delete your_branch_name
</code>
或者更简单的写法</p>

<p>```bash
git push origin :your_branch_name</p>

<h2>```</h2>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/1430218339/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=1430218339&linkCode=as2&tag=droidyue-23">Pro Git</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=1430218339" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/1430218339/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=1430218339&linkCode=as2&tag=droidyue-23">成为大神必读的Git书籍</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=1430218339" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
