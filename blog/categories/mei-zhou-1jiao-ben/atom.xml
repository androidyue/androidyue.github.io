<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 每周1脚本 | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/mei-zhou-1jiao-ben/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2014-12-30T21:55:56+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每周一脚本：js设置链接为新标签打开]]></title>
    <link href="http://droidyue.com/blog/2014/09/29/open-url-in-new-tab-using-javascript/"/>
    <updated>2014-09-29T21:59:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/29/open-url-in-new-tab-using-javascript</id>
    <content type="html"><![CDATA[<p>由于Markdown在编辑Octopress文章的链接时无法指定打开方式，所以很多时候需要使用html写。后来想了一下，为什么不通过javascript把超链接的打开方式默认成新标签实现呢。</p>

<!--more-->


<p>JQuery中提供了一个DOM元素插入事件 DOMNodeInserted ，我们可以通过监听这个事件，对没有target属性值的a标签设置其target为_blank。这样就实现了默认新标签打开了。</p>

<h3>脚本代码</h3>

<p>```javascript lineos:false
/<em>To use the  DOMNodeInserted event listening, jquery is required</em>/
$(document).bind(&lsquo;DOMNodeInserted&rsquo;, function(event) {</p>

<pre><code>$('a[href^="http"]').each(
    function(){
        if (!$(this).attr('target')) {
            $(this).attr('target', '_blank')
        }   
    }
);
</code></pre>

<p>});
```</p>

<h3>示例</h3>

<p>```html lineos:false
<html></p>

<pre><code>&lt;script type="text/javascript" src="http://droidyue.com//code.jquery.com/jquery-1.11.0.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://rawgit.com/androidyue/weekly-scripts/master/javascript/target_blank_link.js"&gt;&lt;/script&gt;
&lt;body&gt;
    &lt;a href="http://droidyue.com"&gt;droidyue&lt;/a&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```
上述示例在浏览器加载之后，就会对a标签添加target=&ldquo;_blank"属性。</p>

<p><a href="https://github.com/androidyue/weekly-scripts/blob/master/javascript/target_blank_link.js">每周一脚本@Github</a></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B0089TDFNS/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0089TDFNS&linkCode=as2&tag=droidyue-23">锋利的jQuery</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0089TDFNS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00BQ7RMW0/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00BQ7RMW0&linkCode=as2&tag=droidyue-23">编写可维护的JavaScript</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00BQ7RMW0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00B14IGUK/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00B14IGUK&linkCode=as2&tag=droidyue-23">安全技术大系:Web前端黑客技术揭秘</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00B14IGUK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周一脚本：批量对多个文件增加前缀]]></title>
    <link href="http://droidyue.com/blog/2014/09/22/weekly-script-add-prefix-to-mutiple-files-in-ruby/"/>
    <updated>2014-09-22T17:03:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/22/weekly-script-add-prefix-to-mutiple-files-in-ruby</id>
    <content type="html"><![CDATA[<p>最近从设计师那里get了超多的图，结果都是1.png，2.png这样的文件名，自己还需要将这些文件变成可读的文件名，不想一个一个得修改，于是就写了一个简单的脚本，实现批量对多个文件增加前缀的操作，后期修改了一下，分享一下。</p>

<!--more-->


<h2>代码</h2>

<p>```ruby lineos:false  add_prefix_files.rb <a href="https://raw.githubusercontent.com/androidyue/weekly-scripts/master/ruby/add_prefix_files.rb">https://raw.githubusercontent.com/androidyue/weekly-scripts/master/ruby/add_prefix_files.rb</a></p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding: utf-8</h1>

<p>srcDir= ARGV[0]
prefix= ARGV[1]
pattern = &lsquo;*&rsquo;
pattern = ARGV[2] if ARGV.size == 3</p>

<p>Dir[srcDir + &lsquo;/&rsquo; + pattern ].each{|child|</p>

<pre><code>childName = File.basename(child)
destChildName = prefix  + childName
destChild = child.gsub(childName, destChildName)
system 'mv %s %s'%[child, destChild]
</code></pre>

<p>}
```</p>

<h2>如何使用</h2>

<h3>使用的方法</h3>

<ul>
<li><strong>ruby add_prefix_files.rb dest_folder prefix pattern</strong></li>
<li>dest_folder 必选 操作进行的基础目录，并不一定总是直接父目录</li>
<li>prefix      必须 前缀名称  建议结尾以_结束</li>
<li>pattern     可选，如不填写为dest_folder的直接子文件（含目录），否则应用提供的pattern匹配</li>
</ul>


<h3>使用示例</h3>

<p>对当前目录下所有文件增加test_前缀。
<code>ruby lineos:false
~/rubydir/tools/add_prefix_files.rb ./ test_
</code></p>

<p>对当前目录下res/drawable-hdpi/所有的png文件，增加test_前缀
<code>ruby lineos:false
 ~/rubydir/tools/add_prefix_files.rb ./ test_  "res/drawable-hdpi/*.png"
</code></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/0596009658/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=0596009658&linkCode=as2&tag=droidyue-23">Learning the Bash Shell</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=0596009658" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0096EXMS8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0096EXMS8&linkCode=as2&tag=droidyue-23">Linux命令行与shell脚本编程大全</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0096EXMS8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00N75YP74/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00N75YP74&linkCode=as2&tag=droidyue-23">穿布鞋的马云:决定阿里巴巴生死的27个节点</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00N75YP74" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周一脚本：过滤单个Android程序日志]]></title>
    <link href="http://droidyue.com/blog/2014/09/15/weekly-scripts-grep-android-application-log-in-terminal/"/>
    <updated>2014-09-15T18:55:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/09/15/weekly-scripts-grep-android-application-log-in-terminal</id>
    <content type="html"><![CDATA[<p>在Android软件开发中，增加日志的作用很重要，便于我们了解程序的执行情况和数据。Eclipse开发工具会提供了可视化的工具，但是还是感觉终端效率会高一些，于是自己写了一个python的脚本来通过包名来过滤某一程序的日志。</p>

<h3>原理</h3>

<p>通过包名得到对应的进程ID（可能多个），然后使用adb logcat 过滤进程ID即可得到对应程序的日志。</p>

<!--more-->


<h3>源码</h3>

<p>```python lineos:false <a href="https://raw.githubusercontent.com/androidyue/weekly-scripts/master/python/logcatPkg.py">https://raw.githubusercontent.com/androidyue/weekly-scripts/master/python/logcatPkg.py</a></p>

<h1>!/usr/bin/env python</h1>

<h1>coding:utf-8</h1>

<h1>This script is aimed to grep logs by application(User should input a packageName and then we look up for the process ids then separate logs by process ids).</h1>

<p>import os
import sys</p>

<p>packageName=str(sys.argv[1])</p>

<p>command = &ldquo;adb shell ps | grep %s | awk &lsquo;{print $2}&rsquo;&rdquo;%(packageName)
p = os.popen(command)</p>

<h2>for some applications,there are multiple processes,so we should get all the process id</h2>

<p>pid = p.readline().strip()
filters = pid
while(pid != &ldquo;&rdquo;):</p>

<pre><code>pid = p.readline().strip()
if (pid != ''):
    filters = filters +  "|" + pid
    #print 'command = %s;filters=%s'%(command, filters)
</code></pre>

<p>if (filters != &lsquo;&rsquo;) :</p>

<pre><code>cmd = 'adb logcat | grep --color=always -E "%s" '%(filters)
os.system(cmd)
</code></pre>

<p>```</p>

<h3>使用方法</h3>

<p><code>bash lineos:false
python logcatPkg.py com.mx.browser
</code></p>

<h3>最新代码</h3>

<p> <a href="https://raw.githubusercontent.com/androidyue/weekly-scripts/master/python/logcatPkg.py" target="_blank">locatPkg.py</a></p>

<h3>不足</h3>

<ul>
<li> 当脚本执行后，Android程序如果关闭或者重新启动，导致进程ID变化，无法自动继续输出日志，只能再次执行此脚本。</li>
</ul>


<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00KVLDS20/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00KVLDS20&linkCode=as2&tag=droidyue-23">仅用两周就能自制脚本语言？</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00KVLDS20" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B002A2LQR2/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B002A2LQR2&linkCode=as2&tag=droidyue-23">一个不错的Shell脚本学习指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B002A2LQR2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B005YWYH6C/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B005YWYH6C&linkCode=as2&tag=droidyue-23">Windows 7脚本编程和命令行工具指南</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B005YWYH6C" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
