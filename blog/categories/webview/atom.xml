<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WebView | 技术小黑屋]]></title>
  <link href="http://droidyue.com/blog/categories/webview/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-03-13T21:01:27+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中WebView拦截替换网络请求数据]]></title>
    <link href="http://droidyue.com/blog/2014/11/23/block-web-resource-in-webview/"/>
    <updated>2014-11-23T21:54:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/11/23/block-web-resource-in-webview</id>
    <content type="html"><![CDATA[<p>Android中处理网页时我们必然用到WebView,这里我们有这样一个需求，我们想让WebView在处理网络请求的时候将某些请求拦截替换成某些特殊的资源。具体一点儿说，在WebView加载 <code>http://m.sogou.com</code> 时，会加载一个logo图片，我们的需求就是将这个logo图片换成另一张图片。</p>

<!--more-->


<h3>shouldInterceptRequest</h3>

<p>好在Android中的WebView比较强大，从API 11(Android 3.0)开始， shouldInterceptRequest被引入就是为了解决这一类的问题。</p>

<p>shouldInterceptRequest这个回调可以通知主程序WebView处理的资源（css,js,image等）请求，并允许主程序进行处理后返回数据。如果主程序返回的数据为null，WebView会自行请求网络加载资源，否则使用主程序提供的数据。注意这个回调发生在非UI线程中,所以进行UI系统相关的操作是不可以的。</p>

<p>shouldInterceptRequest有两种重载。</p>

<ul>
<li><strong>public WebResourceResponse shouldInterceptRequest (WebView view, String url)</strong> 从API 11开始引入，API 21弃用</li>
<li><strong>public WebResourceResponse shouldInterceptRequest (WebView view, WebResourceRequest request)</strong> 从API 21开始引入</li>
</ul>


<p>本次例子暂时使用第一种，即shouldInterceptRequest (WebView view, String url)。</p>

<h3>示例代码</h3>

<p>```java
WebView webView = new WebView(this);
webView.setWebViewClient(new WebViewClient() {</p>

<pre><code>@Override
public WebResourceResponse shouldInterceptRequest(WebView view, String url) {
    Log.i(LOGTAG, "shouldInterceptRequest url=" + url + ";threadInfo" + Thread.currentThread());
    WebResourceResponse response = null;
    if (url.contains("logo")) {
        try {
            InputStream localCopy = getAssets().open("droidyue.png");
            response = new WebResourceResponse("image/png", "UTF-8", localCopy);
        } catch (IOException e) {
            e.printStackTrace();
        }       
    }
    return response;
}   
</code></pre>

<p>});
setContentView(webView);
webView.loadUrl(&ldquo;<a href="http://m.sogou.com">http://m.sogou.com</a>&rdquo;);
```
其中WebResourceResponse需要设定三个属性，MIME类型，数据编码，数据(InputStream流形式)。</p>

<h3>示例下载</h3>

<ul>
<li><a href="http://pan.baidu.com/s/1ntOaHoH">百度云盘</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebView处理网页位置请求]]></title>
    <link href="http://droidyue.com/blog/2014/10/01/handle-geolocation-request-in-webview/"/>
    <updated>2014-10-01T17:23:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/10/01/handle-geolocation-request-in-webview</id>
    <content type="html"><![CDATA[<p>随着移动设备的激增，LBS（Location Based Service）已然成为趋势，其最关键的还是获取设备的位置信息。native代码获取位置信息轻轻松松可以搞定，实际上网页获取位置信息也不是那么困难。</p>

<p>在HTML5中，提供了一套定位用户信息的接口，当然这个位置信息是通过客户端，准确说是浏览器获取的。</p>

<!--more-->


<p>注意，位置信息属于个人隐私的范围，只有经过用户同意之后才能获取到信息。</p>

<h2>网页如何实现请求位置信息</h2>

<p>使用getCurrentPosition()方法来请求位置信息。<br/>
下面是一个很简单的示例，来展示用户位置信息的经度和纬度。
```html lineos:false
&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;body&gt;
&lt;p id="demo"&gt;Click the button to get your coordinates:&lt;/p&gt;
&lt;button onclick="getLocation()"&gt;Try It&lt;/button&gt;

&lt;script&gt;
    var x = document.getElementById("demo");

    function getLocation() {
        console.info("getLocation working")
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition,showError);
        } else { 
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {
        x.innerHTML="Latitude: " + position.coords.latitude + "&lt;br&gt;Longitude: " + position.coords.longitude;
    }

    function showError(error) {
        switch(error.code) {
        case error.PERMISSION_DENIED:
            x.innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
            x.innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
            x.innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            x.innerHTML = "An unknown error occurred."
            break;
    }
</code></pre>

<p>}</p>

<pre><code>&lt;/script&gt;

&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<h3>示例阐述</h3>

<ul>
<li> 检测getLocation方法是否可用</li>
<li> 如果可以调用getCurrentPosition方法，否则提示浏览器不支持</li>
<li> 如果getCurrentPosition获取信息成功，返回一个坐标系的对象，并将这个对象作为参数传递到showPosition方法,如果失败，调用showError方法，并将错误码作为showError方法的参数。</li>
<li> showPosition方法展示经度和纬度信息</li>
<li> showError方法用来处理请求错误</li>
</ul>


<p>上述部分参考自<a href="http://www.w3schools.com/HTML/html5_geolocation.asp">html5_geolocation w3cschool</a>，更多高级操作请访问左侧链接。</p>

<h2>WebView如何返回给网页</h2>

<h3>大致操作步骤</h3>

<ul>
<li>在manifest中申请android.permission.ACCESS_FINE_LOCATION 或 android.permission.ACCESS_COARSE_LOCATION 权限。两者都有更好。</li>
<li>设置webivew开启javascript功能，地理定位功能，设置物理定位数据库路径</li>
<li>在onGeolocationPermissionsShowPrompt处理物理位置请求，常用的是提示用户，让用户决定是否允许。</li>
</ul>


<h3>使用的API</h3>

<ul>
<li>android.permission.ACCESS_FINE_LOCATION 通过GPS，基站，Wifi等获取<strong>精确的</strong>位置信息。</li>
<li>android.permission.ACCESS_COARSE_LOCATION 通过基站，Wifi等获取<strong>错略的</strong>位置信息。</li>
<li>onGeolocationPermissionsShowPrompt 位置信息请求回调，通常在这里弹出选择是否赋予权限的对话框</li>
<li>GeolocationPermissions.Callback.invoke(String origin, boolean allow, boolean remember)决定是否真正提供给网页信息，可根据用户的选择结果选择处理。

<h3>实现代码</h3>

<p>```java lineos:false
final WebView webView = new WebView(this);
addContentView(webView,  new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)  );
WebSettings settings = webView.getSettings();
settings.setJavaScriptEnabled(true);
settings.setGeolocationEnabled(true);
settings.setGeolocationDatabasePath(getFilesDir().getPath());</p></li>
</ul>


<p>webView.setWebChromeClient(new WebChromeClient() {</p>

<pre><code>@Override
public void onGeolocationPermissionsHidePrompt() {
    super.onGeolocationPermissionsHidePrompt();
    Log.i(LOGTAG, "onGeolocationPermissionsHidePrompt");
}

@Override
public void onGeolocationPermissionsShowPrompt(final String origin,
                final Callback callback) {
    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
    builder.setMessage("Allow to access location information?");
    OnClickListener dialogButtonOnClickListener = new OnClickListener() {

        @Override
        public void onClick(DialogInterface dialog, int clickedButton) {
            if (DialogInterface.BUTTON_POSITIVE == clickedButton) {
                callback.invoke(origin, true, true);
            } else if (DialogInterface.BUTTON_NEGATIVE == clickedButton) {
                callback.invoke(origin, false, false);
            }
        }
    };
    builder.setPositiveButton("Allow", dialogButtonOnClickListener);
    builder.setNegativeButton("Deny", dialogButtonOnClickListener);
    builder.show();
    super.onGeolocationPermissionsShowPrompt(origin, callback);
    Log.i(LOGTAG, "onGeolocationPermissionsShowPrompt");
}
</code></pre>

<p>});
webView.loadUrl(&ldquo;file:///android_asset/geolocation.html&rdquo;);
```</p>

<h2>疑问解答</h2>

<h3>I/SqliteDatabaseCpp(21863): sqlite returned: error code = 14</h3>

<p>原因是你没有设置setGeolocationDatabasePath，按照上面例子设置即可。</p>

<h3>点击之后没有任何变化</h3>

<ul>
<li>检查代码是否按照上面一样，是否有错误。</li>
<li>在第一次请求的是否，需要的反应时间比较长。</li>
</ul>


<h3>检测定位服务是否可用</h3>

<p>当GPS_PROVIDER和NETWORK_PROVIDER有一者可用，定位服务就可以用，当两者都不能用时，即定位服务不可以用。<br/>
注意PASSIVE_PROVIDER不能作为定位服务可用的标志。因为这个provider只会返回其他Provider提供的位置信息，自己无法定位。
```java lineos:false
private void testGeolocationOK() {</p>

<pre><code>    LocationManager manager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
    boolean gpsProviderOK = manager.isProviderEnabled(LocationManager.GPS_PROVIDER);
    boolean networkProviderOK = manager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
    boolean geolocationOK = gpsProviderOK &amp;&amp; networkProviderOK;
    Log.i(LOGTAG, "gpsProviderOK = " + gpsProviderOK + "; networkProviderOK = " + networkProviderOK + "; geoLocationOK=" + geolocationOK);
</code></pre>

<p>}
```</p>

<h3>跳转到位置设置界面</h3>

<p>我们只需要发送一个简单的隐式intent即可启动位置设置界面
<code>java lineos:false
Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
startActivity(intent);
</code></p>

<h2>示例代码</h2>

<p><a href="http://pan.baidu.com/s/1gdrHIin">百度云盘</a></p>

<h3>其他</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B007RSKTXQ/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B007RSKTXQ&linkCode=as2&tag=droidyue-23">程序员装B必备：黑轴机械键盘</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B007RSKTXQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00E7XVAZA/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00E7XVAZA&linkCode=as2&tag=droidyue-23">位置信息服务(LBS)关键技术及应用</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00E7XVAZA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B00KHG1006/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00KHG1006&linkCode=as2&tag=droidyue-23">基于语义Web的LBS服务架构及其服务发现算法研究</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00KHG1006" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebView重写onJsAlert那些事]]></title>
    <link href="http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android/"/>
    <updated>2014-07-09T21:35:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/07/09/override-javascript-alert-in-android</id>
    <content type="html"><![CDATA[<p>本文主要将如何重写onJsAlert,让烦人的对话框变为无干扰的Toast,以及为什么onJsAlert只调用一次的问题.</p>

<h3>什么是Javascript Alert</h3>

<p>Alert是一种提示信息或者警告信息的对话框,一旦显示到用户面前,只能点击OK才能关闭.</p>

<!--more-->


<p>通常一般的实现类似
```html
<html></p>

<pre><code>&lt;SCRIPT type="text/javascript"&gt;
    alert('This is alert dialog !')
&lt;/SCRIPT&gt;
</code></pre>

<p></html>
```</p>

<p>对应的效果图:</p>

<p>{%img <a href="http://7jpolu.com1.z0.glb.clouddn.com/js_alert.png">http://7jpolu.com1.z0.glb.clouddn.com/js_alert.png</a> javascript alert dialog %}</p>

<h3>onJsAlert API 介绍</h3>

<blockquote><p>public boolean onJsAlert (WebView view, String url, String message, JsResult result)<br/>
Added in API level 1<br/>
Tell the client to display a javascript alert dialog. If the client returns true, WebView will assume that the client will handle the dialog. If the client returns false, it will continue execution.<br/>
Parameters<br/>
view    The WebView that initiated the callback.<br/>
url The url of the page requesting the dialog.<br/>
message Message to be displayed in the window.<br/>
result  A JsResult to confirm that the user hit enter.<br/>
Returns<br/>
boolean Whether the client will handle the alert dialog.</p></blockquote>

<h3>重写为Toast展示</h3>

<p>其实Alert,只是提示信息,而且这个提示信息还是阻塞其他操作的,为什么我们不适用一个长时间显示的Toast呢?</p>

<p>下面示范一下如何换成Toast.
```java
@Override
public boolean onJsAlert(WebView view, String url, String message, JsResult result) {</p>

<pre><code>Log.i("MainActivity", "onJsAlert url=" + url + ";message=" + message);
Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
result.confirm();
return true;
</code></pre>

<p>}
```</p>

<h3>为什么onJsAlert只调用了一次</h3>

<p>如果你没有参考上述部分或者没有留意,有时候你会发现onJsAlert只调用了一次,为什么呢,实际上,你可能忽略了一句调用.就是处理JsResult.</p>

<blockquote><p>public final void cancel ()
Added in API level 1
Handle the result if the user cancelled the dialog.</p>

<p>public final void confirm ()
Added in API level 1
Handle a confirmation response from the user.</p></blockquote>

<p>你需要调用result.confirm()或者result.cancel()来处理jsResult,否则会出问题.</p>

<h3>demo下载</h3>

<ul>
<li><a href="http://pan.baidu.com/s/14bjMA">http://pan.baidu.com/s/14bjMA</a></li>
</ul>


<h3>延伸阅读:</h3>

<p><a href="http://www.w3schools.com/js/js_popup.asp">http://www.w3schools.com/js/js_popup.asp</a>
<a href="http://developer.android.com/reference/android/webkit/JsResult.html">http://developer.android.com/reference/android/webkit/JsResult.html</a></p>

<h3>推荐</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00FQEDTA8/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00FQEDTA8&linkCode=as2&tag=droidyue-23">精彩绝伦的Android UI设计:响应式用户界面与设计模式</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B00FQEDTA8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a href="http://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0097CON2S&linkCode=as2&tag=droidyue-23">JavaScript语言精粹</a><img src="http://ir-cn.amazon-adsystem.com/e/ir?t=droidyue-23&l=as2&o=28&a=B0097CON2S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
