<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2020-02-23T17:46:19+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树莓派安装jdk 8 ]]></title>
    <link href="https://droidyue.com/blog/2020/02/23/install-jdk-on-raspberry-pi/"/>
    <updated>2020-02-23T17:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/23/install-jdk-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span><span class='line'>sudo apt install openjdk-8-jdk openjdk-8-jre
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复 LC_CTYPE LC_ALL 设置问题]]></title>
    <link href="https://droidyue.com/blog/2020/02/23/fix-lc-ctype-lc-all-cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory-issue/"/>
    <updated>2020-02-23T17:12:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/23/fix-lc-ctype-lc-all-cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory-issue</id>
    <content type="html"><![CDATA[<h2>错误日志</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>locale: Cannot <span class="nb">set </span>LC_CTYPE to default locale: No such file or directory
</span><span class='line'>locale: Cannot <span class="nb">set </span>LC_ALL to default locale: No such file or directory
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>修复方式</h2>

<p>第一步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get purge locales
</span></code></pre></td></tr></table></div></figure>


<p>第二步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude install locales
</span></code></pre></td></tr></table></div></figure>


<p>第三部</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dpkg-reconfigure locales
</span></code></pre></td></tr></table></div></figure>


<p>如果出现选择locale时，选择<code>en-us-utf-8</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Webview 后台播放音视频实现]]></title>
    <link href="https://droidyue.com/blog/2020/02/09/play-audio-or-video-background-in-webview-app-android/"/>
    <updated>2020-02-09T20:49:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/09/play-audio-or-video-background-in-webview-app-android</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<ul>
<li>我们使用WebView播放音乐或视频（比如油管视频）</li>
<li>前台播放一直很正常，但是比较费电</li>
<li>进入后台后就会暂停播放</li>
<li>所以需求就是我们想要App在后台时同样播放音视频</li>
</ul>


<!--more-->


<h2>解决方法</h2>

<ul>
<li>重写onWindowVisibilityChanged方法，让网页任然感觉像是在前台执行。</li>
</ul>


<h2>关键代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onWindowVisibilityChanged</span><span class="o">(</span><span class="nl">visibility:</span> <span class="n">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onWindowVisibilityChanged</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;BackgroundMediaWebView&quot;</span><span class="o">,</span> <span class="s">&quot;onWindowVisibilityChanged &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;visibility=${toReadableVisibility(visibility)}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当App 进入后台（按Home键），visibility会变成Gone</li>
<li>我们强制调用<code>super.onWindowVisibilityChanged(View.VISIBLE)</code>会保持WebView继续播放音视频</li>
</ul>


<h2>完整代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">webviewvisibilitychangedsample</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.AttributeSet</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebView</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">BackgroundMediaWebView</span> <span class="nd">@JvmOverloads</span> <span class="n">constructor</span><span class="o">(</span>
</span><span class='line'>    <span class="nl">context:</span> <span class="n">Context</span><span class="o">,</span> <span class="nl">attrs:</span> <span class="n">AttributeSet</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span> <span class="nl">defStyleAttr:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">)</span> <span class="o">:</span> <span class="n">WebView</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">fun</span> <span class="nf">onWindowVisibilityChanged</span><span class="o">(</span><span class="nl">visibility:</span> <span class="n">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onWindowVisibilityChanged</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;BackgroundMediaWebView&quot;</span><span class="o">,</span> <span class="s">&quot;onWindowVisibilityChanged &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;visibility=${toReadableVisibility(visibility)}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">fun</span> <span class="nf">toReadableVisibility</span><span class="o">(</span><span class="nl">visibility:</span> <span class="n">Int</span><span class="o">):</span> <span class="n">String</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">when</span><span class="o">(</span><span class="n">visibility</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span> <span class="o">-&gt;</span> <span class="s">&quot;Visible&quot;</span>
</span><span class='line'>            <span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span> <span class="o">-&gt;</span> <span class="s">&quot;Invisible&quot;</span>
</span><span class='line'>            <span class="n">View</span><span class="o">.</span><span class="na">GONE</span> <span class="o">-&gt;</span> <span class="s">&quot;Gone&quot;</span>
</span><span class='line'>            <span class="k">else</span> <span class="o">-&gt;</span> <span class="s">&quot;Unknown&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>完整示例项目</h2>

<ul>
<li><a href="https://github.com/androidyue/WebViewVisibilityChangedSample">https://github.com/androidyue/WebViewVisibilityChangedSample</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下实现超快捷切换DNS]]></title>
    <link href="https://droidyue.com/blog/2020/01/28/a-script-to-change-dns-on-mac-os/"/>
    <updated>2020-01-28T14:39:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/01/28/a-script-to-change-dns-on-mac-os</id>
    <content type="html"><![CDATA[<p>在有些情况下，我们需要切换DNS来实现一些处理。但是频繁的进入设置-网络 的确很麻烦，于是再次朝着脚本的思路想了想，发现还是可以实现的。下面的脚本就能便捷的实现切换WIFI的DNS并验证。</p>

<!--more-->


<h2>changeToGoogleDns.sh</h2>

<p>该脚本的内容切换DNS为信用值很高的Google DNS 8.8.8.8。虽然Google被墙，但是这个DNS地址还是可以用的。而且这也算是我主要使用的DNS。</p>

<p>对应的脚本内容为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>networksetup -setdnsservers Wi-Fi 8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<h2>changeTo114Dns.sh</h2>

<p>114的DNS也是一种选择，但是我几乎不用，可以作为一种选择。</p>

<p>对应的脚本内容为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>networksetup -setdnsservers Wi-Fi 114.114.114.114
</span></code></pre></td></tr></table></div></figure>


<h2>dumpWifiDNS.sh</h2>

<p>设置完成DNS之后，需要做的通常是验证以下，下面是验证DNS设置结果的脚本的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>networksetup -getdnsservers Wi-Fi
</span></code></pre></td></tr></table></div></figure>


<p>简单执行以下就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  scripts dumpWifiDNS.sh
</span><span class='line'>8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<h2>其他酷酷的脚本</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/12/15/translate-words-in-terminal/">终端依赖者福利：终端也能实现翻译功能了</a></li>
<li><a href="https://droidyue.com/blog/2019/12/08/display-img-in-ternimal/">Mac 下在终端直接查看图片</a></li>
<li><a href="https://droidyue.com/blog/2019/10/27/view-ssl-certificate-in-terminal/">在终端使用脚本查看网站 SSL 证书信息</a></li>
<li><a href="https://droidyue.com/blog/categories/jiao-ben/">更多脚本</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Checkstyle file name 异常的问题]]></title>
    <link href="https://droidyue.com/blog/2020/01/12/fix-checkstyle-file-name-issue/"/>
    <updated>2020-01-12T20:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/01/12/fix-checkstyle-file-name-issue</id>
    <content type="html"><![CDATA[<p>Checkstyle是一款很棒的工具，用来发现很多编码风格的问题。还不了解的同学可以移步这里<a href="https://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/">Android代码规范利器： Checkstyle</a>查看。</p>

<p>但是在使用Checkstyle时，却出现了一些问题，就是file元素的name不是我们当前执行checkstyle任务的路径。</p>

<!--more-->


<p>举个例子，比如</p>

<ul>
<li>我们执行<code>./gradlew checkstyle</code>时项目的路径为<code>~/Document/aProject</code></li>
<li>但是报告输出的file name属性为<code>/tmp/aProject/Commonxxxx/src/main/java/com/xxxx/core/adapter/xxxxxx.java</code>，基础路径为<code>/tmp/aProject</code></li>
</ul>


<p>具体的相关报告的输出结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;checkstyle</span> <span class="na">version=</span><span class="s">&quot;6.19&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;/tmp/aProject/Commonxxxx/src/main/java/com/xxxx/core/adapter/xxxxxx.java&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;26&quot;</span> <span class="na">column=</span><span class="s">&quot;37&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Member name &amp;apos;mHeaderViews&amp;apos; must match pattern &amp;apos;^[a-z][a-z0-9][a-zA-Z0-9]*$&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;27&quot;</span> <span class="na">column=</span><span class="s">&quot;37&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Member name &amp;apos;mFootViews&amp;apos; must match pattern &amp;apos;^[a-z][a-z0-9][a-zA-Z0-9]*$&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;30&quot;</span> <span class="na">column=</span><span class="s">&quot;23&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Member name &amp;apos;mContext&amp;apos; must match pattern &amp;apos;^[a-z][a-z0-9][a-zA-Z0-9]*$&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;62&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Overload methods should not be split. Previous overloaded method located at line &amp;apos;52&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.coding.OverloadMethodsDeclarationOrderCheck&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原因</h2>

<p>原因是使用了gralde的build cache导致的。</p>

<h2>解决方法</h2>

<p>执行时不使用gralde build cache</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew --no-build-cache checkstyle
</span></code></pre></td></tr></table></div></figure>


<h2>相关文章推荐</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
<li><a href="https://droidyue.com/blog/2017/04/09/error-prone-tool-for-java-and-android/">Error-prone,Google出品的Java和Android Bug分析利器</a></li>
<li><a href="https://droidyue.com/blog/categories/gradle/">更多gradle文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 处理位操作Flag 快捷方法]]></title>
    <link href="https://droidyue.com/blog/2020/01/05/kotlin-flag-extension-methods/"/>
    <updated>2020-01-05T20:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/01/05/kotlin-flag-extension-methods</id>
    <content type="html"><![CDATA[<p>一般涉及到标记位相关的操作，我们都会使用位运算，无论你是从Java转到Kotlin，还是全新使用Kotlin，进行位运算处理Flag都会感到疑问，该怎么处理呢。</p>

<!--more-->


<p>这里简单整理了几个方法，文件名为(FlagExt.kt)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;FlagUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 添加flag</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="n">Int</span><span class="p">.</span><span class="n">addFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="n">or</span> <span class="n">flag</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 移除flag</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="n">Int</span><span class="p">.</span><span class="n">removeFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="n">and</span> <span class="n">flag</span><span class="p">.</span><span class="n">inv</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 检查是否包含flag</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="n">Int</span><span class="p">.</span><span class="n">hasFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="n">and</span> <span class="n">flag</span> <span class="p">==</span> <span class="n">flag</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如下是验证代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">flags</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">FLAG_AUTO_REBOOT</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;flags.hasAutoRebootFlag=${flags.hasFlag(FLAG_AUTO_REBOOT)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flags</span> <span class="p">=</span> <span class="n">flags</span><span class="p">.</span><span class="n">addFlag</span><span class="p">(</span><span class="n">FLAG_AUTO_REBOOT</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;flags.hasAutoRebootFlag(afterAdded)=${flags.hasFlag(FLAG_AUTO_REBOOT)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flags</span> <span class="p">=</span> <span class="n">flags</span><span class="p">.</span><span class="n">removeFlag</span><span class="p">(</span><span class="n">FLAG_AUTO_REBOOT</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;flags.hasAutoRebootFlag(afterRemoved)=${flags.hasFlag(FLAG_AUTO_REBOOT)}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * result:</span>
</span><span class='line'><span class="cm">     * flags.hasAutoRebootFlag=false</span>
</span><span class='line'><span class="cm">     * flags.hasAutoRebootFlag(afterAdded)=true</span>
</span><span class='line'><span class="cm">     * flags.hasAutoRebootFlag(afterRemoved)=false</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">flags</span><span class="o">.</span><span class="na">hasAutoRebootFlag</span><span class="o">=</span><span class="kc">false</span>
</span><span class='line'><span class="n">flags</span><span class="o">.</span><span class="na">hasAutoRebootFlag</span><span class="o">(</span><span class="n">afterAdded</span><span class="o">)=</span><span class="kc">true</span>
</span><span class='line'><span class="n">flags</span><span class="o">.</span><span class="na">hasAutoRebootFlag</span><span class="o">(</span><span class="n">afterRemoved</span><span class="o">)=</span><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建Linux服务，轻松管理（自启动，恢复）进程]]></title>
    <link href="https://droidyue.com/blog/2019/12/29/create-a-linux-service-with-systemd/"/>
    <updated>2019-12-29T20:08:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/29/create-a-linux-service-with-systemd</id>
    <content type="html"><![CDATA[<p>有这样一个场景，在一台服务器上，我们想要启动一个简单的网络文件服务器，用来提供给内网的用户下载。</p>

<p>这里，我们使用ruby启动一个服务</p>

<ul>
<li>使用<code>ruby -run -ehttpd /home/webbuild/easy_file_server/  -p8000</code>启动文件服务器</li>
<li>使用<code>ruby -run -ehttpd /home/webbuild/easy_file_server/  -p8000 &amp;</code> 将该进程设置为后台执行</li>
<li>为了防止挂起，我们还需要使用nohup处理。像这样<code>nohup ruby -run -ehttpd /home/webbuild/easy_file_server/  -p8000 &amp;</code></li>
</ul>


<p>如上面设置一番，基本上可以工作了。</p>

<!--more-->


<p>但是还有一些问题，比如</p>

<ul>
<li>进程意外停止了，无法自动启动</li>
<li>服务器重启，该进程也不会自动启动</li>
</ul>


<p>那么我们有没有什么好的办法解决呢，答案是有的。就是下面介绍的使用systemd创建Linux 服务的方式解决。</p>

<h2>创建服务Unit文件</h2>

<p>创建一个服务文件，比如这里叫做<code>vim /etc/systemd/system/apk_server.service</code>(可以将apk_server替换为你希望的名称)</p>

<p>内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Unit</span><span class="o">]</span>
</span><span class='line'><span class="no">Description</span><span class="o">=</span><span class="no">APK</span> <span class="no">Server</span> <span class="no">Service</span>
</span><span class='line'><span class="no">StartLimitIntervalSec</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="o">[</span><span class="no">Service</span><span class="o">]</span>
</span><span class='line'><span class="no">Type</span><span class="o">=</span><span class="n">simple</span>
</span><span class='line'><span class="no">Restart</span><span class="o">=</span><span class="n">always</span>
</span><span class='line'><span class="no">RestartSec</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="no">User</span><span class="o">=</span><span class="n">root</span>
</span><span class='line'><span class="no">ExecStart</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span> <span class="o">-</span><span class="n">run</span> <span class="o">-</span><span class="n">ehttpd</span> <span class="sr">/home/</span><span class="n">webbuild</span><span class="o">/</span><span class="n">easy_file_server</span><span class="o">/</span>  <span class="o">-</span><span class="n">p8000</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="no">Install</span><span class="o">]</span>
</span><span class='line'><span class="no">WantedBy</span><span class="o">=</span><span class="n">multi</span><span class="o">-</span><span class="n">user</span><span class="o">.</span><span class="n">target</span>
</span></code></pre></td></tr></table></div></figure>


<p>重点可能需要替换的有</p>

<ul>
<li>Description 该服务的描述信息</li>
<li>User 填写真实的用户名称，也可以填写root不修改。</li>
<li>ExecStart 必须替换为你需要执行的命令。</li>
</ul>


<h2>基本搞定了</h2>

<h3>启动服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl start apk_server.service
</span></code></pre></td></tr></table></div></figure>


<h3>停止服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl stop apk_server.service
</span></code></pre></td></tr></table></div></figure>


<h3>重新启动服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl restart apk_server.service
</span></code></pre></td></tr></table></div></figure>


<h3>设置开启自启动</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl <span class="nb">enable </span>apk_server.service
</span><span class='line'>//执行结果
</span><span class='line'>Created symlink /etc/systemd/system/multi-user.target.wants/apk_server.service → /etc/systemd/system/apk_server.service.
</span></code></pre></td></tr></table></div></figure>


<h2>其他字段解释</h2>

<ul>
<li>StartLimitIntervalSec 启动频率限制，设置为0</li>
<li>Restart=always  当进程退出后自动重启</li>
<li>RestartSec 重启延迟时间，单位为毫秒</li>
<li>WantedBy 自动启动相关参数</li>
</ul>


<h2>查看服务状态</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl status apk_server.service
</span><span class='line'>● apk_server.service - APK Server Service
</span><span class='line'>   Loaded: loaded <span class="o">(</span>/etc/systemd/system/apk_server.service; disabled; vendor preset: disabled<span class="o">)</span>
</span><span class='line'>   Active: active <span class="o">(</span>running<span class="o">)</span> since Fri 2019-12-xx 22:06:40 CST; 9s ago
</span><span class='line'> Main PID: 17802 <span class="o">(</span>ruby<span class="o">)</span>
</span><span class='line'>    Tasks: 2 <span class="o">(</span>limit: 26213<span class="o">)</span>
</span><span class='line'>   Memory: 15.8M
</span><span class='line'>   CGroup: /system.slice/apk_server.service
</span><span class='line'>           └─17802 ruby -run -ehttpd /home/webbuild/easy_file_server/ -p8000
</span><span class='line'>
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Started APK Server Service.
</span><span class='line'>localhost.localdomain env<span class="o">[</span>17802<span class="o">]</span>: <span class="o">[</span>2019-12-xx 22:06:40<span class="o">]</span> INFO  WEBrick 1.4.2
</span><span class='line'>localhost.localdomain env<span class="o">[</span>17802<span class="o">]</span>: <span class="o">[</span>2019-12-xx 22:06:40<span class="o">]</span> INFO  ruby 2.5.3 <span class="o">(</span>2018-10-18<span class="o">)</span> <span class="o">[</span>x86_64-linux<span class="o">]</span>
</span><span class='line'>localhost.localdomain env<span class="o">[</span>17802<span class="o">]</span>: <span class="o">[</span>2019-12-xx 22:06:40<span class="o">]</span> INFO  WEBrick::HTTPServer#start: <span class="nv">pid</span><span class="o">=</span>17802 <span class="nv">port</span><span class="o">=</span>8000
</span></code></pre></td></tr></table></div></figure>


<h2>配置更新</h2>

<p>当我们修改了之前的service文件后，会得到的提示</p>

<blockquote><p>Warning: The unit file, source configuration file or drop-ins of apk_server.service changed on disk. Run &lsquo;systemctl daemon-reload&rsquo; to reload units.</p></blockquote>

<p>所以，当我们每次修改后，都需要执行<code>systemctl daemon-reload</code>确保配置生效。</p>

<h2>排查错误</h2>

<h3>查找错误信息</h3>

<p>可以使用使用两种方法</p>

<ul>
<li>第一种是<code>systemctl status</code>，上面介绍的</li>
<li>第二种是<code>journalctl</code></li>
</ul>


<h4>journalctl</h4>

<p>journalctl相对提供的日志会更多一些，使用方法也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>journalctl -u coo_code_review.service --no-pager --reverse
</span></code></pre></td></tr></table></div></figure>


<p>对应的日志就能看到了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Failed with result <span class="s1">&#39;exit-code&#39;</span>.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Service <span class="nv">RestartSec</span><span class="o">=</span>1s expired, scheduling restart.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Scheduled restart job, restart counter is at 52.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Stopped Coo Code Review Service.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Started Coo Code Review Service.
</span></code></pre></td></tr></table></div></figure>


<h3>code=exited, status=217/USER</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apk_server.service - APK Server Service
</span><span class='line'>   Loaded: loaded <span class="o">(</span>/etc/systemd/system/apk_server.service; disabled; vendor preset: disabled<span class="o">)</span>
</span><span class='line'>   Active: activating <span class="o">(</span>auto-restart<span class="o">)</span> <span class="o">(</span>Result: <span class="nb">exit</span>-code<span class="o">)</span> since Fri 2019-12-20 14:03:12 CST; 409ms ago
</span><span class='line'>  Process: 17535 <span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/env bash /root/startApkServer.sh <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>217/USER<span class="o">)</span>
</span><span class='line'> Main PID: 17535 <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>217/USER<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常的错误原因是上面配置中的User设置的用户名不对。更新正确即可</p>

<h3>设置工作目录</h3>

<p>很多是否我们的命令会是这样</p>

<ul>
<li>进入一个目录</li>
<li>然后执行命令</li>
</ul>


<p>但是当我们这样设置<code>ExecStart=/usr/bin/env cd your_dir &amp;&amp; ruby -run -ehttpd easy_file_server/  -p8000</code>是有问题的。好在可以这样设置工作目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Unit</span><span class="o">]</span>
</span><span class='line'><span class="no">Description</span><span class="o">=</span><span class="no">APK</span> <span class="no">Server</span> <span class="no">Service</span>
</span><span class='line'><span class="no">StartLimitIntervalSec</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="o">[</span><span class="no">Service</span><span class="o">]</span>
</span><span class='line'><span class="no">Type</span><span class="o">=</span><span class="n">simple</span>
</span><span class='line'><span class="no">Restart</span><span class="o">=</span><span class="n">always</span>
</span><span class='line'><span class="no">RestartSec</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="no">User</span><span class="o">=</span><span class="n">root</span>
</span><span class='line'><span class="no">WorkingDirectory</span><span class="o">=</span><span class="sr">/root/</span><span class="n">your_dir</span>
</span><span class='line'><span class="no">ExecStart</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span> <span class="o">-</span><span class="n">run</span> <span class="o">-</span><span class="n">ehttpd</span> <span class="sr">/home/</span><span class="n">webbuild</span><span class="o">/</span><span class="n">easy_file_server</span><span class="o">/</span>  <span class="o">-</span><span class="n">p8000</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="no">Install</span><span class="o">]</span>
</span><span class='line'><span class="no">WantedBy</span><span class="o">=</span><span class="n">multi</span><span class="o">-</span><span class="n">user</span><span class="o">.</span><span class="n">target</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过增加<code>WorkingDirectory=/root/your_dir</code>可以解决问题。</p>

<h3>设置环境变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>xxxxx Service
</span><span class='line'><span class="nv">StartLimitIntervalSec</span><span class="o">=</span>0
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>simple
</span><span class='line'><span class="nv">Restart</span><span class="o">=</span>always
</span><span class='line'><span class="nv">RestartSec</span><span class="o">=</span>1
</span><span class='line'><span class="nv">User</span><span class="o">=</span>root
</span><span class='line'><span class="nv">Environment</span><span class="o">=</span><span class="s2">&quot;ANDROID_HOME=/opt/android-sdk-linux&quot;</span>
</span><span class='line'><span class="nv">WorkingDirectory</span><span class="o">=</span>/root/automan/xxx
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/env bash /root/automan/xxx/gradlew run
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>使用上面的代码，我们就增加了<code>ANDROID_HOME=/opt/android-sdk-linux</code>这个环境变量。</p>

<p>如果是多个环境变量，设置多行<code>Environment="ANDROID_HOME=/opt/android-sdk-linux"</code>就行</p>

<h3>203/EXEC 错误</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Started Coo Code Review Service.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Main process exited, <span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>203/EXEC
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Failed with result <span class="s1">&#39;exit-code&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>解决方法,增加<code>/usr/bin/env</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ExecStart</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">bash</span> <span class="sr">/root/</span><span class="n">automan</span><span class="o">/</span><span class="n">xxxxx</span><span class="o">/</span><span class="n">gradlew</span> <span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxHttp 一款让你眼前一亮的 Http 请求框架]]></title>
    <link href="https://droidyue.com/blog/2019/12/28/rxhttp-an-awesome-library-mixed-with-rxjava-and-okhttp/"/>
    <updated>2019-12-28T15:15:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/28/rxhttp-an-awesome-library-mixed-with-rxjava-and-okhttp</id>
    <content type="html"><![CDATA[<blockquote><p>本文系 RxHttp作者不怕天黑 向本博客投稿，并授权在本站发表。</p></blockquote>

<h1>1、前言</h1>

<p>RxHttp在今年4月份一经推出，就受到了广大Android 开发者的喜爱，截止本文发表在github上已有<a href="https://github.com/liujingxing/RxHttp">1100+star</a>，为此，我自己也建个RxHttp&amp;RxLife 的群（群号：378530627）目前群里也有将近120号人，里面有不少小伙伴提了很多有价值的创意，才使得RxHttp一直坚持走到了现在，在此，感谢大家的喜爱。</p>

<!--more-->


<p>这期间，一直有人问我，retrofit不香吗？之前不知道该如何回答这个问题，现在我想说，香！！retrofit无疑是目前综合得分最高的选手，但它也有它的不足。</p>

<p>RxHttp相较于retrofit，功能上，两者均能实现，并无多大差异，更多的差异体现功能的使用上，也就是易用性，如对文件上传/下载/进度监听的操作上，RxHttp用及简的API，可以说碾压retrofit；另外在baseUrl、公共参数/请求头、请求加解密等功能上的易用性都要优于retrofit；然而这些，个人觉得都不算什么，个人觉得RxHttp最大的优势在于它近乎为0的上手成本、及简的API以及高扩展性，看完这篇文章，相信你会有同感。</p>

<p>那RxHttp就没有缺点吗？有，那就是它的稳定性目前还不如retrofit，毕竟RxHttp刚出道8个月，且全部是我一个人在维护，当然，并不是说RxHttp不稳定，RxHttp未开源前，在我司的项目已经使用了近2年，接着今年4月份将其开源，至今大大小小已迭代20多个版本，目前用的人也不在少数，可以说很稳定了。</p>

<h1>2、简介</h1>

<p>RxHttp是基于OkHttp的二次封装，并与RxJava做到无缝衔接，一条链就能发送任意请求。主要优势如下：</p>

<p>  <strong>1. 支持Gson、Xml、ProtoBuf、FastJson等第三方数据解析工具</strong></p>

<p>  <strong>2. 支持Get、Post、Put、Delete等任意请求方式，可自定义请求方式</strong></p>

<p>  <strong>3. 支持在Activity/Fragment/View/ViewModel/任意类中，自动关闭请求</strong></p>

<p>  <strong>4. 支持统一加解密，且可对单个请求设置是否加解密</strong></p>

<p>  <strong>5. 支持添加公共参数/头部，且可对单个请求设置是否添加公共参数/头部</strong></p>

<p>  <strong>6. 史上最优雅的实现文件上传/下载及进度的监听，且支持断点下载</strong></p>

<p>  <strong>7. 史上最优雅的对错误统一处理，且不打破Lambda表达式</strong></p>

<p>  <strong>8. 史上最优雅的处理多个BaseUrl及动态BaseUrl</strong></p>

<p>  <strong>9. 史上最优雅的处理网络缓存</strong></p>

<p>  <strong>10. 30秒即可上手，学习成本极低</strong></p>

<p><strong>gradle依赖</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="nl">rxhttp:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="c1">//注解处理器，生成RxHttp类，即可一条链发送请求</span>
</span><span class='line'><span class="n">annotationProcessor</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">rxhttp</span><span class="o">-</span><span class="nl">compiler:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="c1">//管理RxJava及生命周期，Activity/Fragment 销毁，自动关闭未完成的请求</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxlife</span><span class="o">:</span><span class="nl">rxlife:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//非必须 根据自己需求选择Converter  RxHttp默认内置了GsonConverter</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">jackson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">fastjson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">protobuf:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">simplexml:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：kotlin用户，请使用kapt替代annotationProcessor</code></p>

<p>缓存功能，请查看：<a href="https://juejin.im/post/5dff3c2de51d45582c27cea6">RxHttp 全网Http缓存最优解</a></p>

<h1>3、使用</h1>

<h2>3.1、准备工作</h2>

<p>RxHttp 要求项目使用Java 8，请在 app 的 build.gradle 文件中添加以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">compileOptions</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sourceCompatibility</span> <span class="n">JavaVersion</span><span class="o">.</span><span class="na">VERSION_1_8</span>
</span><span class='line'>    <span class="n">targetCompatibility</span> <span class="n">JavaVersion</span><span class="o">.</span><span class="na">VERSION_1_8</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，再Rebuild一下项目（通过Rebuild生成RxHttp类），就可以开始RxHttp的入坑之旅</p>

<h2>3.2、配置默认的BaseUrl</h2>

<p>通过<code>@DefaultDomain</code>注解配置默认域名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Url</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@DefaultDomain</span> <span class="c1">//设置为默认域名</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">&quot;https://www.wanandroid.com/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此步骤是非必须的，这里先介绍<code>@DefaultDomain</code>注解的用法，更多有关域名的介绍，请查看本文3.6章节&mdash;&mdash;多域名/动态域名</p>

<h2>3.3、请求三部曲</h2>

<p>先来看看如何发送一个最简单的请求，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://...&quot;</span><span class="o">)</span>  <span class="c1">//第一步, 通过get、postXxx、putXxx等方法，确定请求类型         </span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>           <span class="c1">//第二步, 通过asXxx系列方法，确定返回数据类型    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>     <span class="c1">//第三步, 订阅回调(此步骤同RxJava订阅观察者)</span>
</span><span class='line'>        <span class="c1">//请求成功                                         </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                                         </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，不用怀疑，就是这么简单，重要的事情说3遍</p>

<p><strong>任意请求，任意返回数据类型，皆遵循请求三部曲</strong></p>

<p><strong>任意请求，任意返回数据类型，皆遵循请求三部曲</strong></p>

<p><strong>任意请求，任意返回数据类型，皆遵循请求三部曲</strong></p>

<p>到这，你已经掌握了<a href="https://github.com/liujingxing/RxHttp">RxHttp</a>的精髓，我们只需牢记请求三部曲，使用RxHttp就会得心应手。</p>

<h3>3.3.1、第一部曲：确定请求类型</h3>

<p>RxHttp内部共提供了14个请求方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>              <span class="c1">//get请求    参数拼接在url后面</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">head</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>             <span class="c1">//head请求   参数拼接在url后面</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>         <span class="c1">//post请求   参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>         <span class="c1">//post请求   参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>    <span class="c1">//post请求   参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">putForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>          <span class="c1">//put请求    参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">putJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>          <span class="c1">//put请求    参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">putJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>     <span class="c1">//put请求    参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">patchForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>        <span class="c1">//patch请求  参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">patchJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>        <span class="c1">//patch请求  参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">patchJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>   <span class="c1">//patch请求  参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">deleteForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>       <span class="c1">//delete请求 参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">deleteJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>       <span class="c1">//delete请求 参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">deleteJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>  <span class="c1">//delete请求 参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上14个请求方法你会发现，其实就6个类型，分别对应是Get、Head、Post、Put、Patch、Delete方法，只是其中Post、Put、Patch、Delete各有3个方法有不同形式的提交方式，只需要根据自己的需求选择就好。</p>

<p>如以上方法还不能满足你的需求，我们还可以通过<code>@Param</code>注解自定义请求方法，有关注解的使用，本文后续会详细介绍。</p>

<p><code>注：当调用xxxForm方法发送请求时，通过setMultiForm()方法或者调用addFile(String, File)添加文件时，内部会自动将参数以{multipart/form-data}方式提交</code></p>

<p><strong>添加参数/请求头</strong></p>

<p>确定请求方法后，我们就可以调用一系列<code>addXxx()</code>方法添加参数/请求头，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>       <span class="c1">//发送get请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;())</span>     <span class="c1">//通过Map添加多个参数</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;deviceType&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">)</span>     <span class="c1">//添加请求头</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>任意请求，都可调用以上3个方法添加参数/请求头，当然，在不同的请求方式下，也会有不同的addXxx方法供开发者调用。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//postJson请求方法下会有更多addAll等方法可供调用</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postJson</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span> <span class="c1">//发送post Json请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonObject</span><span class="o">())</span>   <span class="c1">//通过json对象添加多个参数</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="s">&quot;{\&quot;height\&quot;:180,\&quot;weight\&quot;:70}&quot;</span><span class="o">)</span> <span class="c1">//通过json字符串添加多个参数</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//postForm请求方法下会有一系列addFile方法可供调用</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>  <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/1.png&quot;</span><span class="o">))</span> <span class="c1">//添加单个文件</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;fileList&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;())</span> <span class="c1">//添加多个文件</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上只列出了几个常用的addXxx方法，更多方法请下载源码体验。</p>

<h3>3.3.2、第二部曲：确定返回数据类型</h3>

<p>添加好参数/请求头后，正式进入第二部曲，确定返回数据类型，我们通过<code>asXxx</code>方法确定返回类型，比如，我们要返回一个Student对象，就可以通过<code>asObject(Class&lt;T&gt;)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>  <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里就能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要返回Student对象列表，则可以通过<code>asList(Class&lt;T&gt;)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>  <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>       <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里就能拿到 Student对象列表               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>解析<code>Response&lt;T&gt;</code>类型数据</strong></p>

<p>然而，现实开发中，大多数人的接口，返回的数据结构都类似下面的这个样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span>    <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span>      <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//这里省略get、set方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于这种数据结构，按传统的写法，每次都要对code做判断，如果有100个请求，就要判断100次，真的会逼死强迫症患者。</p>

<p>RxHttp对于这种情况，给出完美的答案，比如<code>Response&lt;T&gt;</code>里面的T代表一个Student对象，则可以通过<code>asResponse(Class&lt;T&gt;)</code>方法获取，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponse</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<code>Response&lt;T&gt;</code>里面的T代表一个<code>List&lt;Student&gt;</code>列表对象，则可以通过<code>asResponseList(Class&lt;T&gt;)</code>方法获取，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到List&lt;Student&gt;列表对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多时候，我们的列表数据是分页的，类似下面的数据结构</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;code&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;msg&quot;</span><span class="o">:</span> <span class="s">&quot;&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;data&quot;</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>        <span class="s">&quot;totalPage&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;list&quot;</span><span class="o">:</span> <span class="o">[]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，调用RxHttp的<code>asResponsePageList(Class&lt;T&gt;)</code>方法依然可以完美解决，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponsePageList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回PageList&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到PageList&lt;Student&gt;列表对象 </span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">totalPage</span> <span class="o">=</span> <span class="n">pageList</span><span class="o">.</span><span class="na">getTotalPage</span><span class="o">();</span>   <span class="c1">//总页数</span>
</span><span class='line'>       <span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="n">pageList</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>  <span class="c1">//单页列表数据        </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这，估计很多人会问我：</p>

<ul>
<li>你的code在哪里判断的？</li>
<li>我的code是100或者其它值才代表正确，怎么改？</li>
<li>我的<code>Response&lt;T&gt;</code>类里面的字段名，跟你的都不一样，怎么该？</li>
<li>你这成功的时候直接返回<code>Response&lt;T&gt;</code>里面的T，那我还要拿到code做其他的判断，执行不同业务逻辑，怎么办？</li>
</ul>


<p>这里可以先告诉大家，<code>asResponse(Class&lt;T&gt;)</code>、<code>asResponseList(Class&lt;T&gt;)</code>、<code>asResponsePageList(Class&lt;T&gt;)</code>这3个方法并不是RxHttp内部提供的，而是通过自定义解析器生成，里面的code判断、<code>Response&lt;T&gt;</code>类都是开发者自定义的，如何自定义解析器，请查看本文5.1章节&mdash;&mdash;自定义Parser。</p>

<p>接着回答第4个问题，如何拿到code做其他的业务逻辑判断，很简单，我们只需用<code>OnError</code>接口处理错误回调即可，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponse</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>     <span class="c1">//注意，这里要用OnError接口，其中error是一个ErrorInfo对象  </span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>        <span class="c1">//拿到code字段，此时就可以对code做判断，执行不同的业务逻辑 </span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="na">getErrorCode</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">errorMsg</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="na">getErrorMsg</span><span class="o">()</span>  <span class="c1">//拿到msg字段             </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：上面的OnError接口并非是RxHttp内部提供的，而是自定义的，在Demo里可以找到</code></p>

<p>以上介绍的5个asXxx方法，可以说基本涵盖80%以上的业务场景，接下来我们看看RxHttp都提供了哪些asXxx方法，如下：<img src="https://asset.droidyue.com/image/2019_12/rxhttp_as_methods.png" alt="" />
RxHttp内部共提供了<code>23</code>个<code>asXXX</code>方法，其中：</p>

<ul>
<li>有7个是返回基本类型的包装类型，如：asInteger、asBoolean、asLong等等；</li>
<li>还有7个是返回对象类型，如：asString、asBitmap、asList、asMap(3个)以及最常用<code>asObject</code>方法；</li>
<li>剩下9个是<code>asParser(Parser&lt;T&gt;)</code>、    <code>asUpload</code>系列方法及<code>asDownload</code>系列方法。</li>
</ul>


<p>duang、duang、duang !!! 划重点，这里我可以告诉大家，其实前面的14个方法，最终都是通过<code>asParser(Parser&lt;T&gt;)</code>方法实现的，具体实现过程，这里先跳过，后续会详细讲解。</p>

<h3>3.3.3、第三部曲：订阅回调</h3>

<p>这一步就很简单了，在第二部曲中，asXxx方法会返回<code>Observable&lt;T&gt;</code>对象，没错，就是RxJava内部的<code>Observable&lt;T&gt;</code>对象，此时我们便可通过<code>subscribe</code>系列方法订阅回调，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//不处理任何回调</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>    <span class="c1">//不订阅任何回调</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//仅订阅成功回调</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到List&lt;Student&gt;列表对象               </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//订阅成功与失败回调</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到List&lt;Student&gt;列表对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//等等，省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，我们还可以订阅请求开始/结束的回调，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(</span><span class="n">disposable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求开始，当前在主线程回调</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="o">.</span><span class="na">doFinally</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求结束，当前在主线程回调</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//感知生命周期</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调，当前在主线程回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调，当前在主线程回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这，请求三部曲介绍完毕，接着，将介绍其它常用的功能</p>

<h2>3.4、初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//设置debug模式，默认为false，设置为true后，发请求，过滤&quot;RxHttp&quot;能看到请求日志</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">debug</span><span class="o">)</span>
</span><span class='line'><span class="c1">//非必须,只能初始化一次，第二次将抛出异常</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">okHttpClient</span><span class="o">)</span>
</span><span class='line'><span class="c1">//或者，调试模式下会有日志输出</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">okHttpClient</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">debug</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此步骤是非必须的，如需要添加拦截器等其他业务需求，则可调用<code>init</code>方法进行初始化，不初始化或者传入<code>null</code>即代表使用默认OkHttpClient对象，建议在Application中初始化，默认的OkHttpClient对象在HttpSender类中可以找到，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">OkHttpClient</span> <span class="nf">getDefaultOkHttpClient</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">X509TrustManager</span> <span class="n">trustAllCert</span> <span class="o">=</span> <span class="k">new</span> <span class="n">X509TrustManagerImpl</span><span class="o">();</span>
</span><span class='line'>    <span class="n">SSLSocketFactory</span> <span class="n">sslSocketFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SSLSocketFactoryImpl</span><span class="o">(</span><span class="n">trustAllCert</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">connectTimeout</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">readTimeout</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeTimeout</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">sslSocketFactory</span><span class="o">(</span><span class="n">sslSocketFactory</span><span class="o">,</span> <span class="n">trustAllCert</span><span class="o">)</span> <span class="c1">//添加信任证书                  </span>
</span><span class='line'>        <span class="o">.</span><span class="na">hostnameVerifier</span><span class="o">((</span><span class="n">hostname</span><span class="o">,</span> <span class="n">session</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">//忽略host验证                   </span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然初始化是非必须的，但是建议大家传入自定义的OkHttpClient对象，一来，自定义的OkHttpClient能最大化满足自身的业务；二来，随着RxHttp版本的升级，默认的OkHttpClient可能会发生变化(虽然可能性很小)，故建议自定义OkHttpClient对象传入RxHttp。</p>

<h2>3.5、公共参数/请求头</h2>

<p>RxHttp支持为所有的请求添加公共参数/请求头，当然，如果你希望某个请求不添加公共参数/请求头，也是支持的，而且非常简单。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setOnParamAssembly</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Param</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Param</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//此方法在子线程中执行，即请求发起线程</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isGet</span><span class="o">())</span> <span class="o">{</span>     <span class="c1">//可根据请求类型添加不同的参数</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isPost</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;versionName&quot;</span><span class="o">,</span> <span class="s">&quot;1.0.0&quot;</span><span class="o">)</span><span class="c1">//添加公共参数</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;deviceType&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">);</span> <span class="c1">//添加公共请求头</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要调用<code>RxHttp.setOnParamAssembly(Function)</code>方法，并传入一个Function接口对象，每次发起请求，都会回调该接口。</p>

<p>当然，如果希望某个请求不回调该接口，即不添加公共参数/请求头，则可以调用<code>setAssemblyEnabled(boolean)</code>方法，并传入false即可，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>       <span class="c1">//get请求 </span>
</span><span class='line'>    <span class="o">.</span><span class="na">setAssemblyEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>   <span class="c1">//设置是否添加公共参数/头部，默认为true    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回字符串数据    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>            <span class="c1">//这里的s为String类型</span>
</span><span class='line'>        <span class="c1">//请求成功                                         </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                                         </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.6、多域名/动态域名</h2>

<p><strong>3.6.1、多域名</strong></p>

<p>现实开发中，我们经常会遇到多个域名的情况，其中1个为默认域名，其它为非默认域名，对于这种情况，RxHttp提供了<code>@DefaultDomain()</code>、<code>@Domain()</code>这两个注解来标明默认域名和非默认域名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Url</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@DefaultDomain</span><span class="o">()</span> <span class="c1">//设置为默认域名</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">&quot;https://www.wanandroid.com/&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Domain</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;BaseUrlBaidu&quot;</span><span class="o">)</span> <span class="c1">//非默认域名，并取别名为BaseUrlBaidu</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">baidu</span> <span class="o">=</span> <span class="s">&quot;https://www.baidu.com/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Domain</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;BaseUrlGoogle&quot;</span><span class="o">)</span> <span class="c1">//非默认域名，并取别名为BaseUrlGoogle</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">google</span> <span class="o">=</span> <span class="s">&quot;https://www.google.com/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>@Domain()</code>注解标注非默认域名，就会在RxHttp类中生成<code>setDomainToXxxIfAbsent()</code>方法，其中Xxx就是注解中取的别名。</p>

<p>上面我们使用了两个<code>@Domain()</code>注解，此时(需要Rebuild一下项目)就会在RxHttp类中生成<code>setDomainToBaseUrlBaiduIfAbsent()</code>、<code>setDomainToBaseUrlGoogleIfAbsent()</code>这两方法，此时发请求，我们就可以使用指定的域名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//使用默认域名，则无需添加任何额外代码</span>
</span><span class='line'><span class="c1">//此时 url = &quot;https://www.wanandroid.com/service/...&quot; </span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//手动输入域名，此时 url = &quot;https://www.mi.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;https://www.mi.com/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//手动输入域名时，若再次指定域名，则无效</span>
</span><span class='line'><span class="c1">//此时 url = &quot;https://www.mi.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;https://www.mi.com/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setDomainToBaseUrlBaiduIfAbsent</span><span class="o">()</span>  <span class="c1">//此时指定Baidu域名无效</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用谷歌域名，此时 url = &quot;https://www.google.com/service/...&quot;       </span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setDomainToBaseUrlGoogleIfAbsent</span><span class="o">()</span> <span class="c1">//指定使用Google域名</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上案例，可以知道，RxHttp共有3种指定域名的方式，按优先级排名分别是：手动输入域名 > 指定非默认域名 > 使用默认域名。</p>

<p><strong>3.6.2、动态域名</strong></p>

<p>现实开发中，也会有动态域名切换的需求，如域名被封、或者需要根据服务端下发的域名去配置，这对于RxHttp来说简直就是 so easy !!! 我们只需要对BaseUrl重新赋值，此时发请求便会立即生效，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//此时 url = &quot;https://www.wanandroid.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Url</span><span class="o">.</span><span class="na">baseUrl</span> <span class="o">=</span> <span class="s">&quot;https://www.qq.com&quot;</span><span class="o">;</span> <span class="c1">//动态更改默认域名，改完立即生效，非默认域名同理</span>
</span><span class='line'><span class="c1">//此时 url = &quot;https://www.qq.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.7、关闭请求</h2>

<p>我们知道，在Activity/Fragment中发起请求，如果页面销毁时，请求还未结束，就会有内存泄漏的危险，因此，我们需要在页面销毁时，关闭一些还未完成的请求，RxHttp提供了两种关闭请求的方式，分别是自动+手动。</p>

<p><strong>3.7.1、自动关闭请求</strong></p>

<p>自动关闭请求，需要引入本人开源的另一个库<a href="https://github.com/liujingxing/RxLife">RxLife</a>，先来看看如何用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//以下代码均在FragmentActivty/Fragment中调用</span>
</span><span class='line'>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="c1">//页面销毁、自动关闭请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//或者</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="c1">//页面销毁、自动关闭请求 并且在主线程回调观察者</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//kotlin用户，请使用life或lifeOnMain方法，如下：</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">life</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="c1">//页面销毁、自动关闭请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//或者</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">lifeOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="c1">//页面销毁、自动关闭请求 并且在主线程回调观察者</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的<code>this</code>为<code>LifecycleOwner</code>接口对象，我们的FragmentActivity/Fragment均实现了这个接口，所有我们在FragmentActivity/Fragment中可以直接传<code>this</code>。
对<code>RxLife</code>不了解的同学请查看<a href="https://juejin.im/post/5cf3e1235188251c064815f1">RxLife 史上最优雅的管理RxJava生命周期</a>，这里不详细讲解。</p>

<p><strong>3.7.2、手动关闭请求</strong></p>

<p>手动关闭请求，我们只需要在订阅回调的时候拿到Disposable对象，通过该对象可以判断请求是否结束，如果没有，就可以关闭请求，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//订阅回调，可以拿到Disposable对象</span>
</span><span class='line'><span class="n">Disposable</span> <span class="n">disposable</span> <span class="o">=</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">disposable</span><span class="o">.</span><span class="na">isDisposed</span><span class="o">())</span> <span class="o">{</span>  <span class="c1">//判断请求有没有结束</span>
</span><span class='line'>    <span class="n">disposable</span><span class="o">.</span><span class="na">dispose</span><span class="o">();</span>       <span class="c1">//没有结束，则关闭请求</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.8、文件上传/下载/进度监听</h2>

<p>RxHttp可以非常优雅的实现上传/下载及进度的监听，是骡子是马，拉出来溜溜</p>

<p><strong>3.8.1上传</strong></p>

<p>通过addFile系列方法添加文件，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span> <span class="c1">//发送Form表单形式的Post请求  </span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/1.png&quot;</span><span class="o">))</span>  <span class="c1">//添加单个文件      </span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;fileList&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;())</span>   <span class="c1">//通过List对象，添加多个文件     </span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传成功                                     </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传失败                                     </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过asUpload系列方法监听上传进度，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span> <span class="c1">//发送Form表单形式的Post请求                                    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/1.png&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file2&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/2.png&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asUpload</span><span class="o">(</span><span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传进度回调,0-100，仅在进度有更新时才会回调                                                  </span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100                   </span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已上传的字节大小                   </span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要上传的总字节大小                    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>   <span class="c1">//指定回调(进度/成功/失败)线程,不指定,默认在请求所在线程回调                                           </span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传成功                                                                       </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传失败                                                                       </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，跟上传的代码相比，我们仅仅是使用了<code>asUpload(Consumer, Scheduler)</code>方法替换<code>asString()</code>方法，第一个参数是进度监听接口，每当进度有更新时，都会回调该接口，第二个参数是指定回调的线程，这里我们指定了在UI线程中回调。</p>

<p><strong>3.8.2、下载</strong></p>

<p>下载使用<code>asDownload(String)</code>方法，传入本地路径即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">//文件存储路径</span>
</span><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">)</span> <span class="c1">//注意这里使用asDownload操作符，并传入本地路径</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载成功,回调文件下载路径</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.8.3、带进度下载</strong></p>

<p>带进度下载使用<code>asDownload(String,Consumer,Scheduler)</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">//文件存储路径</span>
</span><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">,</span> <span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载进度回调,0-100，仅在进度有更新时才会回调，最多回调101次，最后一次回调文件存储路径</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已下载的字节大小</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要下载的总字节大小</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span><span class="c1">//s为String类型，这里为文件存储路径</span>
</span><span class='line'>        <span class="c1">//下载完成，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.8.4、断点下载</strong></p>

<p><code>断点下载</code>相较于<code>下载</code>，仅需要调用<code>setRangeHeader(long startIndex, long endIndex)</code>方法传入开始及结束位置即可（结束位置不传默认为文件末尾），其它没有任何差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="s">&quot;Miaobo.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">destPath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span> <span class="c1">//已下载的文件长度</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setRangeHeader</span><span class="o">(</span><span class="n">length</span><span class="o">)</span>  <span class="c1">//设置开始下载位置，结束位置默认为文件末尾</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型</span>
</span><span class='line'>        <span class="c1">//下载成功，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.8.5、带进度断点下载</strong></p>

<p><code>带进度断点下载</code>相较于<code>带进度下载</code>仅需要调用<code>setRangeHeader</code>方法传入开始及结束位置即可（结束位置不传默认为文件末尾），其它没有任何差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="s">&quot;Miaobo.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">destPath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span> <span class="c1">//已下载的文件长度</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setRangeHeader</span><span class="o">(</span><span class="n">length</span><span class="o">)</span>  <span class="c1">//设置开始下载位置，结束位置默认为文件末尾</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">,</span> <span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载进度回调,0-100，仅在进度有更新时才会回调</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已下载的字节大小</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要下载的总字节大小</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型</span>
</span><span class='line'>        <span class="c1">//下载成功，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：</code>上面带进度断点下载中，返回的进度会从0开始，如果需要衔接上次下载的进度，则调用<code>asDownload(String,long,Consumer,Scheduler)</code>方法传入上次已经下载好的长度(第二个参数)，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="s">&quot;Miaobo.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">destPath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span> <span class="c1">//已下载的文件长度</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setRangeHeader</span><span class="o">(</span><span class="n">length</span><span class="o">)</span>  <span class="c1">//设置开始下载位置，结束位置默认为文件末尾</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载进度回调,0-100，仅在进度有更新时才会回调</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已下载的字节大小</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要下载的总字节大小</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型</span>
</span><span class='line'>        <span class="c1">//下载成功，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.9、超时设置</h2>

<p><strong>3.9.1、设置全局超时</strong></p>

<p>RxHttp内部默认的读、写、连接超时时间均为10s，如需修改，请自定义OkHttpClient对象，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//设置读、写、连接超时时间为15s</span>
</span><span class='line'><span class="n">OkHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">connectTimeout</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">readTimeout</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">writeTimeout</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">client</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.9.2、为单个请求设置超时</strong></p>

<p>为单个请求设置超时，使用的是RxJava的<code>timeout(long timeout, TimeUnit timeUnit)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">timeout</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span><span class="c1">//设置总超时时间为5s</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//感知生命周期，并在主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注：这里设置的总超时时间要小于全局读、写、连接超时时间之和，否则无效</strong></p>

<h2>3.10、设置Converter</h2>

<p><strong>3.10.1、设置全局Converter</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="n">FastJsonConverter</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setConverter</span><span class="o">(</span><span class="n">converter</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.10.2、为请求设置单独的Converter</strong></p>

<p>首先需要在任意public类中通过@Converter注解声明Converter，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RxHttpManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Converter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;XmlConverter&quot;</span><span class="o">)</span> <span class="c1">//指定Converter名称</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">IConverter</span> <span class="n">xmlConverter</span> <span class="o">=</span> <span class="n">XmlConverter</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，rebuild 一下项目，就在自动在RxHttp类中生成<code>setXmlConverter()</code>方法，随后就可以调用此方法为单个请求指定Converter，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setXmlConverter</span><span class="o">()</span>   <span class="c1">//指定使用XmlConverter，不指定，则使用全局的Converter</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">NewsDataXml</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//感知生命周期，并在主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">dataXml</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.11、请求加解密</h2>

<p><strong>3.11.1、加密</strong></p>

<p>请求加密，需要自定义Param，非常简单，详情请查看本文5.2章节&mdash;&mdash;自定义Param</p>

<p><strong>3.11.2、解密</strong></p>

<p>有些时候，请求会返回一大串的密文，此时就需要将密文转化为明文，直接来看代码，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//设置数据解密/解码器                                               </span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setResultDecoder</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//每次请求成功，都会回调这里，并传入请求返回的密文   </span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>   <span class="c1">//将密文解密成明文，解密逻辑自己实现</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">plaintext</span><span class="o">;</span>    <span class="c1">//返回明文                                   </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，通过<code>RxHttp.setResultDecoder(Function&lt;String, String&gt;)</code>静态方法，传入一个接口对象，此接口会在每次请求成功的时候被回调，并传入请求返回的密文，只需要将密文解密后返回即可。</p>

<p>然而，有些请求是不需求解密的，此时就可以调用<code>setDecoderEnabled(boolean)</code>方法，并传入false即可，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setDecoderEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>  <span class="c1">//设置本次请求不需要解密，默认为true</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.12、指定请求/回调线程</h2>

<p>RxHttp默认在Io线程执行请求，也默认在Io线程回调，即默认在同一Io线程执行请求并回调，当然，我们也可以指定请求/回调所在线程。</p>

<p><strong>3.12.1、指定请求所在线程</strong></p>

<p>我们可以调用一些列subscribeXxx方法指定请求所在线程，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//指定请求所在线程，需要在第二部曲前任意位置调用，第二部曲后调用无效</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribeOnCurrent</span><span class="o">()</span> <span class="c1">//指定在当前线程执行请求，即同步执行，</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//其它subscribeXxx方法</span>
</span><span class='line'><span class="n">subscribeOnIo</span><span class="o">()</span>   <span class="c1">//RxHttp默认的请求线程</span>
</span><span class='line'><span class="n">subscribeOnSingle</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOnNewThread</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOnComputation</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOnTrampoline</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOn</span><span class="o">(</span><span class="n">Scheduler</span><span class="o">)</span> <span class="c1">//自定义请求线程</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上使用的皆是RxJava的线程调度器，不熟悉的请自行查阅相关资料，这里不做详细介绍。</p>

<p><strong>3.12.2、指定回调所在线程</strong></p>

<p>指定回调所在线程，依然使用RxJava的线程调度器，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//指定回调所在线程，需要在第二部曲后调用</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定在主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型，主线程回调</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.13、 Retrofit用户</h2>

<p>时常会有童鞋问我，我是Retrofit用户，喜欢把接口写在一个类里，然后可以直接调用，RxHttp如何实现？其实，这个问题压根就不是问题，在介绍第二部曲的时候，我们知道，使用asXxx方法后，就会返回<code>Observable&lt;T&gt;</code>对象，因此，我们就可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpWrapper</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;&gt;</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;page&quot;</span><span class="o">,</span> <span class="n">page</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//随后在其它地方就可以直接调用</span>
</span><span class='line'><span class="n">HttpWrapper</span><span class="o">.</span><span class="na">getStudent</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//主线程回调，并在页面销毁自动关闭请求(如果还未关闭的话)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//学生列表</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，封装的时候返回<code>Observable&lt;T&gt;</code>对象即可。</p>

<p>还有的同学问，我们获取列表的接口，页码是和url拼接在一起的，Retrofit可以通过占位符，那RxHttp又如何实现？简单，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpWrapper</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//单个占位符</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/%d/...&quot;</span><span class="o">,</span> <span class="n">page</span><span class="o">)</span>  <span class="c1">//使用标准的占位符协议</span>
</span><span class='line'>            <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//多个占位符</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/%1$d/%2$d/...&quot;</span><span class="o">,</span> <span class="n">page</span><span class="o">,</span> <span class="n">count</span><span class="o">)</span>  <span class="c1">//使用标准的占位符协议</span>
</span><span class='line'>            <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一点跟Retrofit不同，Retrofit是通过注解指定占位符的，而RxHttp是使用标准的占位符，我们只需要在url中声明占位符，随后在传入url的后面，带上对应的参数即可。</p>

<h1>4、原理剖析</h1>

<h2>4.1、工作流程</h2>

<p>在RxHttp有4个重要的角色，分别是：</p>

<ul>
<li>Param：RxHttp类中所有添加的参数/请求头/文件都交由它处理，它最终目的就是为了构建一个Request对象</li>
<li>HttpSender ：它负责从Param对象中拿到Request对象，从而执行请求，最终返回Response对象</li>
<li>Parser：它负责将HttpSender返回的Response对象，解析成我们期望的实体类对象，也就是泛型T</li>
<li>RxHttp：它像一个管家，指挥前面3个角色做事情，当然，它也有自己的事情要做，比如：请求线程的调度，BaseUrl的处理、允许开发者自定义API等等</li>
</ul>


<p>为此，我画了一个流程图，可以直观的了解到RxHttp的大致工作流程
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_workflow.png" alt="在这里插入图片描述" /></p>

<p>我想应该很好理解，RxHttp要做的事情，就是把添加的参数/请求头等全部丢给Param处理，自己啥事也不敢；随后将Param交给HttpSender，让它去执行请求，执行完毕，返回Response对象；接着又将Response对象丢给Parser去做数据解析工作，并返回实体类对象T；最后，将T通过回调传给开发者，到此，一个请求就处理完成。</p>

<h2>4.2、Param</h2>

<p>首先，附上一张Param类的继承关系图
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_class_hierachy.png" alt="" />
下面将从上往下对上图中的类做个简单的介绍：</p>

<ul>
<li>IHeaders：接口类，里面定义了一系列addHeader方法</li>
<li>IParam：接口类，里面定义了add(String,Object)、addAll(Map)等方法，</li>
<li>IRequest：接口类，里面定义了一系列getXxx方法，通过这些方法最终构建一个Request对象</li>
<li>Param：接口类，是一个空接口，继承了前面3个接口，里面有一系列静态方法可以获取到Param的具体实现类</li>
<li>AbstractParam：Param接口的抽象实现类，实现了Param接口的所有方法</li>
<li>IFile：接口类，里面定义了一系列addFile方法</li>
<li>IUploadLengthLimit：接口类，里面就定义了一个checkLength()方法，用于限制文件上传大小</li>
<li>NoBodyParam：Param的具体实现类，Get、Head请求就是通过该类去实现的</li>
<li>JsonParam：Param的具体实现类，调用RxHttp.xxxJson(String)请求方法时，内部就是通过该类去实现的</li>
<li>JsonArrayParam：Param的具体实现类，调用RxHttp.xxxJsonArray(String)请求方法时，内部就是通过该类去实现的</li>
<li>FormParam：Param的具体实现类，同时又实现了IFile、IUploadLengthLimit两个接口，调用RxHttp.xxxForm(String)请求方法时，内部就是通过该类去实现的</li>
</ul>


<h2>4.3、HttpSender</h2>

<p>HttpSender可以把它理解为请求发送者，里面声明OkHttpClient对象和一系列静态方法，我们来简单看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">HttpSender</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">OkHttpClient</span> <span class="n">mOkHttpClient</span><span class="o">;</span> <span class="c1">//只能初始化一次,第二次将抛出异常</span>
</span><span class='line'>    <span class="c1">//处理化OkHttpClient对象</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">okHttpClient</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mOkHttpClient</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;OkHttpClient can only be initialized once&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mOkHttpClient</span> <span class="o">=</span> <span class="n">okHttpClient</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//通过Param对象同步执行一个请求</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Response</span> <span class="nf">execute</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">param</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Call</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">getOkHttpClient</span><span class="o">(),</span> <span class="n">param</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//所有的请求，最终都会调此方法拿到Call对象，然后执行请求</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Call</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">client</span><span class="o">,</span> <span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">param</span> <span class="o">=</span> <span class="n">RxHttpPlugins</span><span class="o">.</span><span class="na">onParamAssembly</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">param</span> <span class="k">instanceof</span> <span class="n">IUploadLengthLimit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">((</span><span class="n">IUploadLengthLimit</span><span class="o">)</span> <span class="n">param</span><span class="o">).</span><span class="na">checkLength</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">param</span><span class="o">.</span><span class="na">buildRequest</span><span class="o">();</span>  <span class="c1">//通过Param拿到Request对象</span>
</span><span class='line'>        <span class="n">LogUtil</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">newCall</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们重点看下<code>newCall(OkHttpClient, Param)</code>方法，该方法第一行就是为Param添加公共参数；然后判断Param有没有实现IUploadLengthLimit接口，有的话，检查文件上传大小，超出大小，则抛出IO异常；接着就是通过Param拿到Request对象；最后拿到Call对象，就可以发送一个请求。</p>

<h2>4.4、Parser</h2>

<p>先看下Parser继承结构图
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_parser.png" alt="在这里插入图片描述" />
这里对上图中的类做个简单的介绍</p>

<ul>
<li>Parser：接口类，里面定义了一个<code>T onParse(Response)</code>方法，输入Response对象，输出实体类对象T</li>
<li>AbstractParser：抽象类，里面没有任何具体实现，主要作用是在构造方法内获取泛型类型</li>
<li>SimpleParser：是一个万能的解析器，可以解析任意数据结构，RxHttp内置的大部分asXxx方法，内部就是通过该解析器实现的</li>
<li>ListParser：是一个列表解析器，可以解析任意列表数据，内置<code>asList(Class&lt;T&gt;)</code>方法，就是通过该解析器实现的</li>
<li>MapParser：是一个Map解析器，可以解析任意Map数据类型，内置的asMap系列方法，就是通过该解析器实现的</li>
<li>BitmapParser：是一个Bitmap解析器，通过该解析器可以获得一个Bitmap对象，asBitmap()方法内部就是通过该解析器实现的</li>
<li>DownloadParser：文件下载解析器，用于文件下载，内置的一系列asDownload方法就是通过该解析器实现的</li>
</ul>


<h1>5、扩展</h1>

<h2>5.1、自定义Parser</h2>

<p>前面第二部曲中，我们介绍了一系列asXxx方法，通过该系列方法可以很方便的指定数据返回类型，特别是自定义的<code>asResponse(Class&lt;T&gt;)</code>、<code>asResponseList(Class&lt;T&gt;)</code>、<code>asResponsePageList(Class&lt;T&gt;)</code>这3个方法，将<code>Reponse&lt;T&gt;</code>类型数据，处理的简直不要太完美，下面我们就来看看如何自定义Parser。</p>

<p>源码永远是最好的学习方式，在学习自定义Parser前，我们不妨先看看内置的Parser是如何实现的</p>

<p><strong>SimPleParser</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，SimpleParser除了构造方法，就剩一个onParser方法，该方法是在Parser接口中定义的，再来看看具体的实现<code>convert(Response, Type)</code>，这个方法也是在Parser接口中定义的，并且有默认的实现，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Parser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//输入Response 输出T</span>
</span><span class='line'>    <span class="n">T</span> <span class="nf">onParse</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//对Http返回的结果，转换成我们期望的实体类对象</span>
</span><span class='line'>    <span class="k">default</span> <span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">R</span> <span class="n">convert</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">,</span> <span class="n">Type</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ResponseBody</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ExceptionHelper</span><span class="o">.</span><span class="na">throwIfFatal</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>  <span class="c1">//这里内部会判断code&lt;200||code&gt;=300 时，抛出异常</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">onResultDecoder</span> <span class="o">=</span> <span class="n">isOnResultDecoder</span><span class="o">(</span><span class="n">response</span><span class="o">);</span> <span class="c1">//是否需要对返回的数据进行解密</span>
</span><span class='line'>        <span class="n">LogUtil</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">onResultDecoder</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="n">getConverter</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>        <span class="c1">//取出转换器</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">converter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">body</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">onResultDecoder</span><span class="o">);</span> <span class="c1">//对数据进场转换</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//省略若干方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，非常的简单，输入Response对象和泛型类型Type，内部就通过IConverter接口转换为我们期望的实体类对象并返回。</p>

<p>到这，我想大家应该就多少有点明白了，自定义Parser，无非就是继承AbstractParser，然后实现onParser方法即可，那我们来验证一下，我们来看看内置ListParser是不是这样实现的，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//拿到泛型类型</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，跟SimpleParser解析器几乎是一样的实现，不同是的，这里将我们输入的泛型T与List组拼为一个新的泛型类型，最终返回<code>List&lt;T&gt;</code>对象。</p>

<p>现在，我们就可以来自定义Parser了，先来自定义ResponseParser，用来处理<code>Response&lt;T&gt;</code>数据类型，先看看数据结构:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span>    <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span>      <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//这里省略get、set方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自定义ResponseParser代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//通过@Parser注解，为解析器取别名为Response，此时就会在RxHttp类生成asResponse(Class&lt;T&gt;)方法</span>
</span><span class='line'><span class="nd">@Parser</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Response&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">okhttp3</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//获取泛型类型</span>
</span><span class='line'>        <span class="n">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">t</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span> <span class="c1">//获取data字段</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">t</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span><span class="c1">//这里假设code不等于0，代表数据不正确，抛出异常</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ParseException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()),</span> <span class="n">data</span><span class="o">.</span><span class="na">getMsg</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，非常的简单，首先将我们输入泛型和自定义的<code>Response&lt;T&gt;</code>类组拼成新的泛型类型，随后通过<code>convert(Response, Type)</code>方法得到<code>Response&lt;T&gt;</code>对象，接着又对code及T做了判断，如果不正确就抛出异常，最后返回T。</p>

<p>估计这里有人会问，我怎么用这个解析器呢？相信不少小伙伴以及发现了，我们在ResponseParser类名上面用了<code>@Parser</code>注解，只要用了该注解，就会在RxHttp自动生成<code>asXxx(Class&lt;T&gt;)</code>方法，其中Xxx就是我们在<code>@Parser</code>注解中为解析器取的别名，这里取别名为Response，所以便会在RxHttp类中自动生成<code>asResponse(Class&lt;T&gt;)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">asResponse</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">asParser</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseParser</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，该方法内部又调用了<code>asParser(Parser&lt;T&gt;)</code>方法，并传入了ResponseParser，因此，我们有两种方式使用自定义的ResponseParser，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//第一种方式，使用@parser注解生成的asResponse方法</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponse</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第二种方式，直接使用asParser(Parser&lt;T&gt;)方法</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asParser</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseParser</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;(){})</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上两种方式，除了写法上的区别，其它都一样，用哪种，看个人喜好，但还是建议使用第一种方式，不仅写法简单，也降低了耦合。</p>

<p>这里最后再贴上ResponseListParser、ResponsePageListParser的源码，原理都是一样的，代码实现也差不多，就不再详解
<strong>ResponseListParser</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Parser</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ResponseList&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseListParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">okhttp3</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//获取泛型类型</span>
</span><span class='line'>        <span class="n">Response</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span> <span class="c1">//获取data字段</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">list</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">//code不等于0，说明数据不正确，抛出异常</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ParseException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()),</span> <span class="n">data</span><span class="o">.</span><span class="na">getMsg</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>ResponsePageListParser</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Parser</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ResponsePageList&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponsePageListParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">okhttp3</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">PageList</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//获取泛型类型</span>
</span><span class='line'>        <span class="n">Response</span><span class="o">&lt;</span><span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pageList</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span> <span class="c1">//获取data字段</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pageList</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">//code不等于0，说明数据不正确，抛出异常</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ParseException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()),</span> <span class="n">data</span><span class="o">.</span><span class="na">getMsg</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">pageList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5.2、自定义Param</h2>

<p>自定义Param，想较于自定义Parser，要更加的简单，我们只需根据自己的需求，继承NoBodyParam、FormParam、JsonParam等，增加或者重写方法即可，比如我们有以下3种情况，需要自定义Param，如下：</p>

<ul>
<li>postForm请求，需要将所有添加的参数，拼接在一起，随后加密，最后将加密的字符串添加到请求头中</li>
<li>postJson请求，需要将所有的参数，也就是json字符串加密后再发送出去</li>
<li>FormParam里面的API不够用，我要自定义API</li>
</ul>


<h4>5.2.1、postForm请求加密</h4>

<p>这种情况，我们需要继承FormParam，并重写getRequestBody()方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Param</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;postEncryptForm&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostEncryptFormParam</span> <span class="kd">extends</span> <span class="n">FormParam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PostEncryptFormParam</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>  <span class="c1">//Method.POST代表post请求</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">RequestBody</span> <span class="nf">getRequestBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里拿到你添加的所有参数</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">KeyValuePair</span><span class="o">&gt;</span> <span class="n">keyValuePairs</span> <span class="o">=</span> <span class="n">getKeyValuePairs</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">encryptStr</span> <span class="o">=</span> <span class="s">&quot;加密后的字符串&quot;</span><span class="o">;</span>  <span class="c1">//根据上面拿到的参数，自行实现加密逻辑</span>
</span><span class='line'>        <span class="n">addHeader</span><span class="o">(</span><span class="s">&quot;encryptStr&quot;</span><span class="o">,</span> <span class="n">encryptStr</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getRequestBody</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2.2、postJson请求加密</h4>

<p>这种情况，我们需要继承JsonParam，也重写getRequestBody()方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Param</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;postEncryptJson&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostEncryptJsonParam</span> <span class="kd">extends</span> <span class="n">JsonParam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PostEncryptFormParam</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">RequestBody</span> <span class="nf">getRequestBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里拿到你添加的所有参数</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">getParams</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">encryptStr</span> <span class="o">=</span> <span class="s">&quot;加密后的字符串&quot;</span><span class="o">;</span>  <span class="c1">//根据上面拿到的参数，自行实现解密逻辑</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RequestBody</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">MEDIA_TYPE_JSON</span><span class="o">,</span> <span class="n">encryptStr</span><span class="o">);</span>  <span class="c1">//发送加密后的字符串</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2.3、自定义API</h4>

<p>我们继承FormParam，并新增两个test方法`，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Param</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;postTestForm&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostTestFormParam</span> <span class="kd">extends</span> <span class="n">FormParam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PostEncryptFormParam</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PostEncryptFormParam</span> <span class="nf">test</span><span class="o">(</span><span class="kt">long</span> <span class="n">a</span><span class="o">,</span> <span class="kt">float</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里的业务逻辑自行实现</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PostEncryptFormParam</span> <span class="nf">test1</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里的业务逻辑自行实现</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2.4、使用自定义的Param</h4>

<p>同样的问题，我们怎么用这3个自定义的Param呢？我想大多数人在类名前发现类<code>@Param</code>注解，并为Param取了别名。那这个又有什么作用呢？
答案揭晓，只要在自定的Param上使用了<code>@Param</code>注解，并取了别名，就会在RxHttp类自动生成一个跟别名一样的方法，在上面我们自定义了3个Param，并分别取别名为postEncryptForm、postEncryptJson、postTestForm，此时就会在RxHttp类中生成<code>postEncryptForm(String)</code>、<code>postEncryptJsonString)</code>、<code>postTestForm(String)</code>这3个方法，我们在RxHttp这个类中来看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RxHttp$PostEncryptFormParam</span> <span class="n">postEncryptForm</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RxHttp$PostEncryptFormParam</span><span class="o">(</span><span class="k">new</span> <span class="n">PostEncryptFormParam</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RxHttp$PostEncryptJsonParam</span> <span class="n">postEncryptJson</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RxHttp$PostEncryptJsonParam</span><span class="o">(</span><span class="k">new</span> <span class="n">PostEncryptJsonParam</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RxHttp$PostTestFormParam</span> <span class="n">postTestForm</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RxHttp$PostTestFormParam</span><span class="o">(</span><span class="k">new</span> <span class="n">PostTestFormParam</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发请求时，只需要调用对应的方法就好，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送加密的postForm请求</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postEncryptForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回String类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//发送加密的postJson请求</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postEncryptJson</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回String类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>那我自定义的API如何调用呢，so easy!!!!，选择对应的请求方法后，就可以直接调用，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送加密的postJson请求</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postTestJson</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="mi">100L</span><span class="o">,</span> <span class="mf">99.99</span><span class="n">F</span><span class="o">)</span>          <span class="c1">//调用自定义的API</span>
</span><span class='line'>    <span class="o">.</span><span class="na">test1</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">,</span> <span class="mf">88.88</span><span class="n">D</span><span class="o">)</span>    <span class="c1">//调用自定义的API</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回String类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5.3、自定义Converter</h2>

<p>RxHttp内部默认使用来GsonConverter，并且额外提供了4个Converter，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//非必须 根据自己需求选择Converter  RxHttp默认内置了GsonConverter</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">jackson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">fastjson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">protobuf:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">simplexml:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.3.1、自定义TestConverter</h4>

<p>即使这样，RxHttp也无法保证满足所有的业务需求，为此，我们可以选择自定义Converter，自定义Converter需要继承IConverter接口，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestConverter</span> <span class="kd">implements</span> <span class="n">IConverter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 请求成功后会被回调</span>
</span><span class='line'><span class="cm">     * @param body             ResponseBody</span>
</span><span class='line'><span class="cm">     * @param type             泛型类型</span>
</span><span class='line'><span class="cm">     * @param onResultDecoder  是否需要对结果进行解码/解密</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">convert</span><span class="o">(</span><span class="n">ResponseBody</span> <span class="n">body</span><span class="o">,</span> <span class="n">Type</span> <span class="n">type</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">onResultDecoder</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//自行实现相关逻辑</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * json请求前会被回调，需要自行根据泛型T创建RequestBody对象，并返回</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">RequestBody</span> <span class="n">convert</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//自行实现相关逻辑</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上两个convert方法根据自身业务需求自行实现，可以参考RxHttp提供FastJsonConverter、SimpleXmlConverter等Converter</p>

<h4>5.3.2、怎么用Converter</h4>

<p>请查看本文3.10章节&mdash;&mdash;设置Converter</p>

<h1>6、小技巧</h1>

<p>在这教大家一个小技巧，由于使用RxHttp发送请求都遵循请求三部曲，故我们可以在android studio 设置代码模版,如下<img src="https://asset.droidyue.com/image/2019_12/rxhttp_android_studio.png" alt="在这里插入图片描述" />
如图设置好后，写代码时，输入rp,就会自动生成模版，如下：
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_coding.gif" alt="在这里插入图片描述" /></p>

<h1>7、小结</h1>

<p>到这，RxHttp常用功能介绍完毕，你会发现，一切都是那么的美好，无论你是get、post、加密请求、自定义解析器，还是文件上传/下载/进度监听等等，皆遵循请求三部曲。特别是对<code>Response&lt;T&gt;</code>类型数据处理，可以说是天衣无缝，我们无需每次都判断code，直接就可以拿到T，简直了。。。</p>

<p>最后，喜欢的，请给本文点个赞，如果可以，还请给个<a href="https://github.com/liujingxing/RxHttp">star</a>，创作不易，感激不尽。🙏🙏🙏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 注解 第三篇 @JvmField 与 @JvmStatic]]></title>
    <link href="https://droidyue.com/blog/2019/12/22/kotlin-annotation-jvmfiled-and-jvmstatic-and-object/"/>
    <updated>2019-12-22T20:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/22/kotlin-annotation-jvmfiled-and-jvmstatic-and-object</id>
    <content type="html"><![CDATA[<p>本文是既 <a href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/">JvmName 注解在 Kotlin 中的应用</a>和<a href="https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin/">JvmMultifile 注解在 Kotlin 中的应用</a>的第三篇关于 Kotlin的注解文章。</p>

<p>介绍的内容比较简单，主要是包含了JvmField和JvmStatic两个。</p>

<!--more-->


<h3>@JvmField</h3>

<p>示例代码声明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nf">Developer</span> <span class="p">(</span><span class="n">@JvmField</span> <span class="k">val</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="n">ide</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用@JvmField，我们在Java中调用的时候，可以直接使用属性名，而不是对应的getter方法。</p>

<p>调用代码对比</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//test jvmField</span>
</span><span class='line'><span class="n">Developer</span> <span class="n">developer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Developer</span><span class="o">(</span><span class="s">&quot;Andy&quot;</span><span class="o">,</span> <span class="s">&quot;Android Studio&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">developer</span><span class="o">.</span><span class="na">getIde</span><span class="o">());</span><span class="c1">// not using JvmField</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">developer</span><span class="o">.</span><span class="na">name</span><span class="o">);</span><span class="c1">// using JvmField</span>
</span></code></pre></td></tr></table></div></figure>


<h3>@JvmStatic</h3>

<p>除此之外，对于静态属性和静态方法的实现，我们也可以使用@JvmStatic实现，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sample</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">@JvmStatic</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">TAG_NAME</span> <span class="p">=</span> <span class="s">&quot;Sample&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">NON_STATIC_VALUE</span> <span class="p">=</span> <span class="s">&quot;non_static_value&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">@JvmStatic</span> <span class="k">fun</span> <span class="nf">callStatic</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">callNonStatic</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//JVM static method</span>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">callStatic</span><span class="o">();</span>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">Companion</span><span class="o">.</span><span class="na">callNonStatic</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">getTAG_NAME</span><span class="o">();</span>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">Companion</span><span class="o">.</span><span class="na">getNON_STATIC_VALUE</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Companion</h3>

<p>Kotlin中我们可以借助<code>object</code>实现静态的形式，比如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">getCommonProperties</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">emptyList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实除此之外，我们还能命名companion的名称,如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AnotherClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="n">Assistant</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">scheduleSomething</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//test companion</span>
</span><span class='line'><span class="n">SomeClass</span><span class="o">.</span><span class="na">Companion</span><span class="o">.</span><span class="na">getCommonProperties</span><span class="o">();</span>
</span><span class='line'><span class="n">AnotherClass</span><span class="o">.</span><span class="na">Assistant</span><span class="o">.</span><span class="na">scheduleSomething</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>相关文章推荐</h3>

<ul>
<li><a href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/">JvmName注解</a></li>
<li><a href="https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin/">JvmMultifile注解</a></li>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">Kotlin编译调校</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多Kotlin文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端依赖者福利：终端也能实现翻译功能了]]></title>
    <link href="https://droidyue.com/blog/2019/12/15/translate-words-in-terminal/"/>
    <updated>2019-12-15T19:41:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/15/translate-words-in-terminal</id>
    <content type="html"><![CDATA[<p>一直是终端重度依赖，现在发现了一个终端翻译的工具，更加爱不释手。本文介绍一下一个终端可以实现的工具，trans。</p>

<h2>是什么</h2>

<blockquote><p>Command-line translator using Google Translate, Bing Translator, Yandex.Translate, etc</p>

<p>一个终端翻译工具，利用Google翻译，Bing翻译，Yandex翻译等。</p></blockquote>

<!--more-->


<h2>效果</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>trans Android
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'>noun
</span><span class='line'>    <span class="o">(</span>in science fiction<span class="o">)</span> a robot with a human appearance.
</span><span class='line'>        - <span class="s2">&quot;The science fiction fascination with robots and androids is the culmination of this perception of machines as being almost like one of us.&quot;</span>
</span><span class='line'>    Synonyms: robot, automaton, cyborg, droid, bot
</span><span class='line'>
</span><span class='line'>    an open-source operating system used <span class="k">for </span>smartphones and tablet computers.
</span><span class='line'>        - <span class="s2">&quot;I have an Android phone and I like it a lot&quot;</span>
</span><span class='line'>
</span><span class='line'>Synonyms
</span><span class='line'>    noun
</span><span class='line'>        - robot, automaton, cyborg, droid, bot
</span><span class='line'>        - humanoid
</span></code></pre></td></tr></table></div></figure>


<h2>安装</h2>

<h3>Debian/Ubuntu</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> sudo apt-get install translate-shell
</span></code></pre></td></tr></table></div></figure>


<h3>Homebrew Mac</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install translate-shell
</span></code></pre></td></tr></table></div></figure>


<p>更多安装方式，请查看<a href="https://github.com/soimort/translate-shell/wiki/Distros">https://github.com/soimort/translate-shell/wiki/Distros</a></p>

<h2>查看支持的搜索引擎</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> trans -list-engines
</span><span class='line'>  aspell
</span><span class='line'>* google
</span><span class='line'>  bing
</span><span class='line'>  spell
</span><span class='line'>  hunspell
</span><span class='line'>  apertium
</span><span class='line'>  yandex
</span></code></pre></td></tr></table></div></figure>


<h2>设置搜索引擎</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>trans -engine yandex  Android
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'><span class="o">[</span> English -&gt; English <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置源语言和目标语言</h2>

<p>前面的是源语言，后面的是目标语言，比如下面的<code>en:zh</code>就是将英文翻译成中文</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> trans   en:zh Android
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'>Android的
</span><span class='line'><span class="o">(</span>Android de<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Translations of Android
</span><span class='line'><span class="o">[</span> English -&gt; 简体中文 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Android
</span><span class='line'>    Android的, 安卓, 的Android, Android版, Android电子
</span></code></pre></td></tr></table></div></figure>


<h2>查看语言代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>trans -R
</span><span class='line'>┌───────────────────────┬───────────────────────┬───────────────────────┐
</span><span class='line'>│ Afrikaans      -   af │ Hebrew         -   he │ Portuguese     -   pt │
</span><span class='line'>│ Albanian       -   sq │ Hill Mari      -  mrj │ Punjabi        -   pa │
</span><span class='line'>│ Amharic        -   am │ Hindi          -   hi │ Querétaro Otomi-  otq │
</span><span class='line'>│ Arabic         -   ar │ Hmong          -  hmn │ Romanian       -   ro │
</span><span class='line'>│ Armenian       -   hy │ Hmong Daw      -  mww │ Russian        -   ru │
</span><span class='line'>│ Azerbaijani    -   az │ Hungarian      -   hu │ Samoan         -   sm │
</span><span class='line'>│ Bashkir        -   ba │ Icelandic      -   is │ Scots Gaelic   -   gd │
</span><span class='line'>│ Basque         -   eu │ Igbo           -   ig │ Serbian <span class="o">(</span>Cyr...-sr-Cyrl
</span><span class='line'>│ Belarusian     -   be │ Indonesian     -   id │ Serbian <span class="o">(</span>Latin<span class="o">)</span>-sr-Latn
</span><span class='line'>│ Bengali        -   bn │ Irish          -   ga │ Sesotho        -   st │
</span><span class='line'>│ Bosnian        -   bs │ Italian        -   it │ Shona          -   sn │
</span><span class='line'>│ Bulgarian      -   <span class="nb">bg</span> │ Japanese       -   ja │ Sindhi         -   sd │
</span><span class='line'>│ Cantonese      -  yue │ Javanese       -   jv │ Sinhala        -   si │
</span><span class='line'>│ Catalan        -   ca │ Kannada        -   kn │ Slovak         -   sk │
</span><span class='line'>│ Cebuano        -  ceb │ Kazakh         -   kk │ Slovenian      -   sl │
</span><span class='line'>│ Chichewa       -   ny │ Khmer          -   km │ Somali         -   so │
</span><span class='line'>│ Chinese Simp...- zh-CN│ Klingon        -  tlh │ Spanish        -   es │
</span><span class='line'>│ Chinese Trad...- zh-TW│ Klingon <span class="o">(</span>pIqaD<span class="o">)</span>tlh-Qaak Sundanese      -   su │
</span><span class='line'>│ Corsican       -   co │ Korean         -   ko │ Swahili        -   sw │
</span><span class='line'>│ Croatian       -   hr │ Kurdish        -   ku │ Swedish        -   sv │
</span><span class='line'>│ Czech          -   cs │ Kyrgyz         -   ky │ Tahitian       -   ty │
</span><span class='line'>│ Danish         -   da │ Lao            -   lo │ Tajik          -   tg │
</span><span class='line'>│ Dutch          -   nl │ Latin          -   la │ Tamil          -   ta │
</span><span class='line'>│ Eastern Mari   -  mhr │ Latvian        -   lv │ Tatar          -   tt │
</span><span class='line'>│ Emoji          -  emj │ Lithuanian     -   lt │ Telugu         -   te │
</span><span class='line'>│ English        -   en │ Luxembourgish  -   lb │ Thai           -   th │
</span><span class='line'>│ Esperanto      -   eo │ Macedonian     -   mk │ Tongan         -   to │
</span><span class='line'>│ Estonian       -   et │ Malagasy       -   mg │ Turkish        -   tr │
</span><span class='line'>│ Fijian         -   fj │ Malay          -   ms │ Udmurt         -  udm │
</span><span class='line'>│ Filipino       -   tl │ Malayalam      -   ml │ Ukrainian      -   uk │
</span><span class='line'>│ Finnish        -   <span class="k">fi</span> │ Maltese        -   mt │ Urdu           -   ur │
</span><span class='line'>│ French         -   fr │ Maori          -   mi │ Uzbek          -   uz │
</span><span class='line'>│ Frisian        -   fy │ Marathi        -   mr │ Vietnamese     -   vi │
</span><span class='line'>│ Galician       -   gl │ Mongolian      -   mn │ Welsh          -   cy │
</span><span class='line'>│ Georgian       -   ka │ Myanmar        -   my │ Xhosa          -   xh │
</span><span class='line'>│ German         -   de │ Nepali         -   ne │ Yiddish        -   yi │
</span><span class='line'>│ Greek          -   el │ Norwegian      -   no │ Yoruba         -   yo │
</span><span class='line'>│ Gujarati       -   gu │ Papiamento     -  pap │ Yucatec Maya   -  yua │
</span><span class='line'>│ Haitian Creole -   ht │ Pashto         -   ps │ Zulu           -   zu │
</span><span class='line'>│ Hausa          -   ha │ Persian        -   fa │                       │
</span><span class='line'>│ Hawaiian       -  haw │ Polish         -   pl │                       │
</span><span class='line'>└───────────────────────┴───────────────────────┴───────────────────────┘
</span></code></pre></td></tr></table></div></figure>


<h2>翻译句子</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>trans :zh <span class="s2">&quot;What is your name?&quot;</span>
</span><span class='line'>What is your name?
</span><span class='line'>
</span><span class='line'>你叫什么名字？
</span><span class='line'><span class="o">(</span>Nǐ jiào shénme míngzì?<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Definitions of What is your name?
</span><span class='line'><span class="o">[</span> English -&gt; 简体中文 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>interjection
</span><span class='line'>    贵姓?
</span><span class='line'>        What is your name?
</span><span class='line'>
</span><span class='line'>What is your name?
</span><span class='line'>    你叫什么名字？, 请问你贵姓大名？
</span></code></pre></td></tr></table></div></figure>


<h2>翻译文件内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/tmp<span class="o">(</span>:|✔<span class="o">)</span> % cat /tmp/greetings.txt
</span><span class='line'>Hello, World
</span><span class='line'>/tmp<span class="o">(</span>:|✔<span class="o">)</span> % trans en:zh file:///tmp/greetings.txt
</span><span class='line'>你好，世界
</span></code></pre></td></tr></table></div></figure>


<h2>查看更多详细</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>man trans
</span></code></pre></td></tr></table></div></figure>


<h2>自己简单包裹一下</h2>

<p>将下面的内容，保存成<code>fanyi.sh</code>并设置可执行，同时加入环境变量PATH.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>trans   :zh <span class="err">&quot;</span><span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时就更加简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fanyi.sh Google
</span><span class='line'>Google
</span><span class='line'>
</span><span class='line'>谷歌
</span><span class='line'><span class="o">(</span>Gǔgē<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Translations of Google
</span><span class='line'><span class="o">[</span> English -&gt; 简体中文 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Google
</span><span class='line'>    谷歌
</span></code></pre></td></tr></table></div></figure>


<h2>其他</h2>

<ul>
<li>github地址:<a href="https://github.com/soimort/translate-shell">https://github.com/soimort/translate-shell</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下在终端直接查看图片]]></title>
    <link href="https://droidyue.com/blog/2019/12/08/display-img-in-ternimal/"/>
    <updated>2019-12-08T20:02:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/08/display-img-in-ternimal</id>
    <content type="html"><![CDATA[<p>在开发的过程中，我们通常会遇到这样的情况，就是我们需要根据图片的url地址查看其对应的内容，通常的做法就是把这个图片链接贴到浏览器。不过一直好奇，能不能再终端中直接展示，于是做了一些搜索，发现了对应的实现方式。</p>

<p>注意：此方式只适用于Mac，其他的Linux 发行版 需要自行按照如下的思路查找对应的工具。</p>

<!--more-->


<h2>安装imgcat</h2>

<p>使用iTerm 2 执行如下的语句(或者是选择 iTerm2菜单 &ndash;> Install Shell Integration安装)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash</span></code></pre></td></tr></table></div></figure>


<p>安装完成之后，建议重新启动iTerm 2</p>

<h2>使用imgcat 展示本地图片</h2>

<p>用法很简单，<code>imgcat localfile</code>,操作示例</p>

<p><img src="https://asset.droidyue.com/image/2019_11/imgcat_local_file_2.png" alt="https://asset.droidyue.com/image/2019_11/imgcat_local_file_2.png" /></p>

<h2>使用imgcat 展示网络上的图片</h2>

<p>由于imgcat的参数只支持本地的文件，如果想要展示网络的文件，我们需要写一个简单的脚本实现。</p>

<p>脚本内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>rm -rf <span class="s2">&quot;/tmp/1.png&quot;</span>
</span><span class='line'>curl -o <span class="s2">&quot;/tmp/1.png&quot;</span> <span class="s2">&quot;$1&quot;</span>
</span><span class='line'>~/.iterm2/imgcat <span class="s2">&quot;/tmp/1.png&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行效果如下</p>

<p><img src="https://asset.droidyue.com/image/2019_11/catimg_result.png" alt="https://asset.droidyue.com/image/2019_11/catimg_result.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Android 中如何确定 App(Activity) 的启动者]]></title>
    <link href="https://droidyue.com/blog/2019/12/01/android-uid-process-name/"/>
    <updated>2019-12-01T21:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/01/android-uid-process-name</id>
    <content type="html"><![CDATA[<p>最近在帮忙定位一个问题，涉及到某个应用自动启动了，为了确定是谁调用的，使用如下的日志进行查看（注：为了简单考虑，下面的启动者为launcher）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>pre_release|✔<span class="o">)</span> % adb logcat | grep -E <span class="s2">&quot;ActivityManager: START&quot;</span> --color<span class="o">=</span>always
</span><span class='line'>I ActivityManager: START u0 <span class="o">{</span><span class="nv">act</span><span class="o">=</span>android.intent.action.MAIN
</span><span class='line'><span class="nv">cat</span><span class="o">=[</span>android.intent.category.HOME<span class="o">]</span> <span class="nv">flg</span><span class="o">=</span>0x10000000 <span class="nv">hwFlg</span><span class="o">=</span>0x10
</span><span class='line'><span class="nv">cmp</span><span class="o">=</span>com.huawei.android.launcher/.unihome.UniHomeLauncher <span class="o">(</span>has extras<span class="o">)}</span> from uid 10070
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>我们看最后看到这个<code>from uid 10070</code>，嗯，基本定位到了是这个uid的应用启动了。</p>

<h2>确定 uid 10070 是哪个 App</h2>

<p>确定uid不能说明问题，我们至少需要确定是哪个应用，我们尝试使用下面的命令过滤进程有关数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell ps | grep 10070
</span><span class='line'>没有任何数据输出
</span></code></pre></td></tr></table></div></figure>


<p>然而一无所获。</p>

<p>当然前面说了，示例的启动者是launcher，那我们过滤一下launcher</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell ps | grep launcher
</span><span class='line'>u0_a70        2207   620 4979992 156312 0                   0 S com.huawei.android.launcher
</span></code></pre></td></tr></table></div></figure>


<p>我们发现了<code>u0_a70</code>和<code>10070</code>貌似有一些关联（至少都含有70）</p>

<p>于是我们使用下面的命令确定id</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell id u0_a70
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>10070<span class="o">(</span>u0_a70<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>10070<span class="o">(</span>u0_a70<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>10070<span class="o">(</span>u0_a70<span class="o">)</span>, <span class="nv">context</span><span class="o">=</span>u:r:shell:s0
</span></code></pre></td></tr></table></div></figure>


<p>果然，<code>u0_a70</code>和<code>10070</code> 是有关联的</p>

<h2>u0_a70 的含义</h2>

<ul>
<li>u0  默认的手机第一个用户（可以通过设置里面的多用户新增和切换）</li>
<li>a 代表app</li>
<li>70 代表着第70个应用</li>
</ul>


<h2>转换公式</h2>

<p>简单而言，对应的公式是这样</p>

<blockquote><p>u0_a70 = &ldquo;u0_&rdquo; + &ldquo;a&rdquo; + (uid(这里是10070) &ndash; FIRST_APPLICATION_UID(固定值10000))</p></blockquote>

<p>具体复杂的转换，请参考这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Generate a text representation of the uid, breaking out its individual</span>
</span><span class='line'><span class="cm">     * components -- user, app, isolated, etc.</span>
</span><span class='line'><span class="cm">     * @hide</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">formatUid</span><span class="o">(</span><span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">uid</span> <span class="o">&lt;</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APPLICATION_UID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">uid</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;u&#39;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">getUserId</span><span class="o">(</span><span class="n">uid</span><span class="o">));</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">appId</span> <span class="o">=</span> <span class="n">getAppId</span><span class="o">(</span><span class="n">uid</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isIsolated</span><span class="o">(</span><span class="n">appId</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">appId</span> <span class="o">&gt;</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_ISOLATED_UID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;i&#39;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span> <span class="o">-</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_ISOLATED_UID</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;ai&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span> <span class="o">-</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APP_ZYGOTE_ISOLATED_UID</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">appId</span> <span class="o">&gt;=</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APPLICATION_UID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;a&#39;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span> <span class="o">-</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APPLICATION_UID</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;s&#39;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>部分常量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Defines the start of a range of UIDs (and GIDs), going from this</span>
</span><span class='line'><span class="cm">     * number to {@link #LAST_APPLICATION_UID} that are reserved for assigning</span>
</span><span class='line'><span class="cm">     * to applications.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FIRST_APPLICATION_UID</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Last of application-specific UIDs starting at</span>
</span><span class='line'><span class="cm">     * {@link #FIRST_APPLICATION_UID}.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">LAST_APPLICATION_UID</span> <span class="o">=</span> <span class="mi">19999</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * First uid used for fully isolated sandboxed processes (with no permissions of their own)</span>
</span><span class='line'><span class="cm">     * @hide</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@UnsupportedAppUsage</span>
</span><span class='line'>    <span class="nd">@TestApi</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FIRST_ISOLATED_UID</span> <span class="o">=</span> <span class="mi">99000</span><span class="o">;</span>
</span><span class='line'>     <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * First uid used for fully isolated sandboxed processes spawned from an app zygote</span>
</span><span class='line'><span class="cm">     * @hide</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@TestApi</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FIRST_APP_ZYGOTE_ISOLATED_UID</span> <span class="o">=</span> <span class="mi">90000</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上。</p>

<h2>References</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Process.java">https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Process.java</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/UserHandle.java">https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/UserHandle.java</a></li>
<li><a href="https://stackoverflow.com/questions/17054996/compare-uid-from-android-packagemanager-to-uid-from-ls-l">https://stackoverflow.com/questions/17054996/compare-uid-from-android-packagemanager-to-uid-from-ls-l</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这可能是最好的 Android/Kotlin日志输出方法]]></title>
    <link href="https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin/"/>
    <updated>2019-11-24T18:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin</id>
    <content type="html"><![CDATA[<p>在编程调试和定位问题的时候，日志是一个最常用的工具。比如输出一些信息，确定执行轨迹。今天我们这里简单聊一聊打印日志的一些分析。</p>

<p>通常，我们进行日志输出的时候都会限定在debug包下执行，对于非debug包，我们就不输出日志。那么如果是非debug，不同的日志输出方式可能存在一定的性能问题，本文将通过几个版本来对比着方面的差异。</p>

<!--more-->


<h2>原始版</h2>

<p>这可能是最原始的版本打印日志了，判断是否是debug，然后决定是否输出日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">debugLog</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s">&quot;debugLog&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testDebugLog</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugLog</span><span class="p">(</span><span class="s">&quot;getProperties &quot;</span> <span class="p">+</span> <span class="n">getProperties</span><span class="p">()?.</span><span class="n">joinToString</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的问题</p>

<ul>
<li><code>testDebugLog</code> 需要执行<code>getProperties()</code>，这一步的性能不可预知</li>
<li><code>testDebugLog</code> 内部存在字符串拼接</li>
<li>如果拼接内容复杂，比如一个庞大的Object，会造成一定的开销</li>
<li>综上所述，该实现如果在<code>非Debug条件下</code>存在一定的运行时开销</li>
</ul>


<h2>不拼接的版本</h2>

<p>既然拼接会导致一些问题，那么下面的版本采用(调用处)不拼接的形式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">debugMessage</span><span class="p">(</span><span class="n">vararg</span> <span class="n">args</span><span class="p">:</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s">&quot;debugMessage&quot;</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">joinToString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testDebugMessage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;getProperties&quot;</span><span class="p">,</span> <span class="n">getProperties</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>仍然需要执行 <code>getProperties()</code>，这一步的性能不可预知</strong></li>
<li>上面的代码使用了可变参数的形式处理message信息</li>
<li>而可变参数内部实际采用了数组的形式，也就是上面的代码会在运行时生成一个数组，一个元素是<code>getProperties</code>,另一个元素是<code>getProperties()</code>的内容</li>
<li>这个版本相对第一个版本要好一些（以极端情况看），但是<code>在非Debug条件下</code>仍然存在一定的运行时开销，不完美。</li>
</ul>


<h2>相对最完美的版本</h2>

<p>这个版本是相对最好的实现，规避了非Debug环境下的字符串拼接和具体求值的操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="nf">smartMessage</span><span class="p">(</span><span class="n">lazyMessage</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s">&quot;smartMessage&quot;</span><span class="p">,</span> <span class="n">lazyMessage</span><span class="p">().</span><span class="n">toString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testSmartMessage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">smartMessage</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;getProperties &quot;</span> <span class="p">+</span> <span class="n">getProperties</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面使用了Lambda表达式来生成message信息</li>
</ul>


<h3>如何巧妙地规避不必要的开销</h3>

<p>当我们反编译Kotlin 代码 到 Java代码时，一切就清晰了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testSmartMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$smartMessage</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">BuildConfig</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">String</span> <span class="n">var3</span> <span class="o">=</span> <span class="s">&quot;smartMessage&quot;</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="n">String</span> <span class="n">var4</span> <span class="o">=</span> <span class="s">&quot;getProperties &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
</span><span class='line'>         <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">var3</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">var4</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>之前的Lambda 由于采用了 inline 处理 会把<code>smartMessage</code> 提取到调用处<code>testSmartMessage</code></li>
<li>上面的信息，都是确保了在<code>BuildConfig.DEBUG</code>成立时才执行，否则不执行</li>
<li>上面的做法，利用了Kotlin的特性，就运行时可能存在的开销一下就移除了。</li>
</ul>


<h2>注意</h2>

<ul>
<li>smartMessage 建议只在 Kotlin 中调用，否则会生成实例，因为无法inline处理</li>
</ul>


<h2>相关阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2014/08/30/java-details-string-concatenation/">字符串拼接</a></li>
<li><a href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/">Kotlin 中的 Lambda 与 Inline</a></li>
<li><a href="https://droidyue.com/blog/2015/11/01/thinking-about-android-log/">关于Android Log的一些思考</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">如何反编译 Kotlin 代码</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多Kotlin文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简简单单对比encodeURI与encodeURIComponent]]></title>
    <link href="https://droidyue.com/blog/2019/11/17/encodeuri-vs-encodeuricomponent/"/>
    <updated>2019-11-17T21:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/11/17/encodeuri-vs-encodeuricomponent</id>
    <content type="html"><![CDATA[<p>encodeURI和encodeURIComponent 是两个很相近的方法，用来encode URI。但是他们之间也存在着细微的差异，如果不能很好的理解这个差异，可能会导致一些不必要的麻烦。本文将尝试用最简单的形式展示这个差异。</p>

<!--more-->


<h2>encodeURI</h2>

<ul>
<li>encode所有的字符，除了下面的字符</li>
</ul>


<blockquote><p>Not Escaped:</p>

<p> A-Z a-z 0-9 ; , / ? : @ &amp; = + $ &ndash; _ . ! ~ * &lsquo; ( ) #</p></blockquote>

<h2>encodeURIComponent</h2>

<ul>
<li>encode所有的字符，除了下面的字符</li>
</ul>


<blockquote><p>Not Escaped:</p>

<p> A-Z a-z 0-9 &ndash; _ . ! ~ * &lsquo; ( )</p></blockquote>

<h2>表现差异</h2>

<p>encodeURIComponent encode的字符多于 encodeURI，即如下字符</p>

<blockquote><p>, / ? : @ &amp; = + $ #</p></blockquote>

<h2>使用场景差异</h2>

<h3>当encode内容作为 URI 的参数值时，使用encodeURIComponent</h3>

<p>比如下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">linkOne</span> <span class="o">=</span> <span class="s2">&quot;https://droidyue.com/q=&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;安卓&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容  https://droidyue.com/q=%E5%AE%89%E5%8D%93</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">deepLink</span> <span class="o">=</span> <span class="s2">&quot;droidyue://webview?url=&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=%E5%AE%89%E5%8D%93&amp;from=direct&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//encode后的内容  droidyue://webview?url=https%3A%2F%2Fdroidyue.com%2F%3Fq%3D%25E5%25AE%2589%25E5%258D%2593%26from%3Ddirect</span>
</span></code></pre></td></tr></table></div></figure>


<h3>当encode的内容是独立的URI，不作为其他URI附属时，使用encodeURI</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">linkTwo</span> <span class="o">=</span> <span class="nb">encodeURI</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=安卓&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容 https://droidyue.com/?q=%E5%AE%89%E5%8D%93</span>
</span></code></pre></td></tr></table></div></figure>


<h2>错用会怎样</h2>

<h3>该用encodeURI,却使用了 encodeURIComponent</h3>

<ul>
<li>导致连接无法被识别加载</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=安卓&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容 https%3A%2F%2Fdroidyue.com%2F%3Fq%3D%E5%AE%89%E5%8D%93</span>
</span></code></pre></td></tr></table></div></figure>


<h3>该用encodeURIComponent 却使用了 encodeURI</h3>

<ul>
<li>导致参数丢失</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;droidyue://webview?url=&quot;</span> <span class="o">+</span> <span class="nb">encodeURI</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=%E5%AE%89%E5%8D%93&amp;from=direct&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容 droidyue://webview?url=https://droidyue.com/?q=%25E5%25AE%2589%25E5%258D%2593&amp;from=direct</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上<code>from=direct</code>本属于<code>https://droidyue.com/?q=%E5%AE%89%E5%8D%93&amp;from=direct</code>，但是错误的encode后，反而属于了<code>droidyue://webview?url=your_url&amp;from=direct</code>。</p>

<p>以上，希望有所帮助。</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent</a></li>
<li><a href="https://dev.to/wanoo21/difference-between-encodeuri-and-encodeuricomponent-j3j">https://dev.to/wanoo21/difference-between-encodeuri-and-encodeuricomponent-j3j</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GapWorker导致RecyclerView视频播放声音残留问题]]></title>
    <link href="https://droidyue.com/blog/2019/11/11/gap-worker-issue/"/>
    <updated>2019-11-11T20:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/11/11/gap-worker-issue</id>
    <content type="html"><![CDATA[<p>场景描述</p>

<ul>
<li>App 有两个tab，每一个都是Fragment,以FragmentA和FragmentB 代称.</li>
<li>切到FragmentA 视频播放（在RecyclerViewA 内部），然后切到FragmentB 视频暂停.</li>
<li>就在此刻，滑动FragmentB 的recyclerView B ，来自FragmentA的视频播放出声音，而且声音是下一条视频的声音。</li>
</ul>


<!--more-->


<p>这确实是一个非常奇怪的问题，不滑动不会出现视频播放声音，必须滑动一下才能出现声音。</p>

<h2>解决思路</h2>

<p>  1.分析日志，查找播放业务相关的代码<br/>
  2.增加logStackTrace(&ldquo;xxx&rdquo;)用来打印出调用的栈信息</p>

<h2>辅助方法</h2>

<p>该方法用来查看调用的层级关系，实现原理很简单，就是生成一个Throwable，然后打印stacktrace。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">logStackTrace</span><span class="o">(</span><span class="nl">tag:</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">BuildConfig</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;logStackTrace $tag&quot;</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">(</span><span class="n">tag</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题日志</h2>

<p>于是我们得到了如下的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Throwable</span><span class="o">:</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">commonsdk</span><span class="o">.</span><span class="na">utils</span><span class="o">.</span><span class="na">ExtensionKt</span><span class="o">.</span><span class="na">logStackTrace</span><span class="o">(</span><span class="n">Extension</span><span class="o">.</span><span class="na">kt</span><span class="o">:</span><span class="mi">99</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">video</span><span class="o">.</span><span class="na">DiscoveryVideoPlayer</span><span class="o">.</span><span class="na">setUp</span><span class="o">(</span><span class="n">DiscoveryVideoPlayer</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">786</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">shuyu</span><span class="o">.</span><span class="na">gsyvideoplayer</span><span class="o">.</span><span class="na">video</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">GSYVideoView</span><span class="o">.</span><span class="na">setUp</span><span class="o">(</span><span class="n">GSYVideoView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">446</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">shuyu</span><span class="o">.</span><span class="na">gsyvideoplayer</span><span class="o">.</span><span class="na">video</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">GSYVideoControlView</span><span class="o">.</span><span class="na">setUp</span><span class="o">(</span><span class="n">GSYVideoControlView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">541</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">ui</span><span class="o">.</span><span class="na">adapter</span><span class="o">.</span><span class="na">VideoFeedAdapter</span><span class="o">.</span><span class="na">initVideo</span><span class="o">(</span><span class="n">VideoFeedAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">211</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">ui</span><span class="o">.</span><span class="na">adapter</span><span class="o">.</span><span class="na">VideoFeedAdapter</span><span class="o">.</span><span class="na">onBindViewHolder</span><span class="o">(</span><span class="n">VideoFeedAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">127</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">ui</span><span class="o">.</span><span class="na">adapter</span><span class="o">.</span><span class="na">VideoFeedAdapter</span><span class="o">.</span><span class="na">onBindViewHolder</span><span class="o">(</span><span class="n">VideoFeedAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">34</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Adapter</span><span class="o">.</span><span class="na">onBindViewHolder</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6673</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Adapter</span><span class="o">.</span><span class="na">bindViewHolder</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6714</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Recycler</span><span class="o">.</span><span class="na">tryBindViewHolderByDeadline</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5647</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Recycler</span><span class="o">.</span><span class="na">tryGetViewHolderForPositionByDeadline</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5913</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">prefetchPositionWithDeadline</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">285</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">flushTaskWithDeadline</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">342</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">flushTasksWithDeadline</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">358</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">prefetch</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">365</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">396</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">891</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">207</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">7470</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RuntimeInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">RuntimeInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">524</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">958</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题症结</h2>

<p>问题的症结就在GapWorker调用导致了RecyclerView的item预加载处理。</p>

<h2>解决方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">yourLayoutManager</span><span class="o">.</span><span class="na">setItemPrefetchEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>为什么会这样</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sets whether the LayoutManager should be queried for views outside of</span>
</span><span class='line'><span class="cm">     * its viewport while the UI thread is idle between frames.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;If enabled, the LayoutManager will be queried for items to inflate/bind in between</span>
</span><span class='line'><span class="cm">     * view system traversals on devices running API 21 or greater. Default value is true.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;On platforms API level 21 and higher, the UI thread is idle between passing a frame</span>
</span><span class='line'><span class="cm">     * to RenderThread and the starting up its next frame at the next VSync pulse. By</span>
</span><span class='line'><span class="cm">     * prefetching out of window views in this time period, delays from inflation and view</span>
</span><span class='line'><span class="cm">     * binding are much less likely to cause jank and stuttering during scrolls and flings.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;While prefetch is enabled, it will have the side effect of expanding the effective</span>
</span><span class='line'><span class="cm">     * size of the View cache to hold prefetched views.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param enabled &lt;code&gt;True&lt;/code&gt; if items should be prefetched in between traversals.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @see #isItemPrefetchEnabled()</span>
</span><span class='line'><span class="cm">     */</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述是<code>setItemPrefetchEnabled</code>的注释，item prefetch是一种用来减少滑动时卡顿的一种预加载方式。这种对于普通的RecyclerView的item没有问题，但是对于视频有声音的，就显得问题明显了。所以这里的解决方法就是关闭这个预取的设置。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在终端使用脚本查看网站 SSL 证书信息]]></title>
    <link href="https://droidyue.com/blog/2019/10/27/view-ssl-certificate-in-terminal/"/>
    <updated>2019-10-27T18:23:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/27/view-ssl-certificate-in-terminal</id>
    <content type="html"><![CDATA[<p>之前遇到过一次赛门铁克很久的证书被Chrome弃用的问题，涉及到了查看证书。当然第一个大家会想到的是在浏览器中查看，但是总是感觉不够极客。后来摸索找到了终端查看网站证书的方法</p>

<!--more-->


<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> | openssl s_client -showcerts -servername <span class="nv">$1</span> -connect <span class="nv">$2</span>:443 2&gt;/dev/null | openssl x509 -inform pem -noout -text
</span></code></pre></td></tr></table></div></figure>


<p>将上面的文件保存成<code>checkSSLCertificate.sh</code>并增加执行权限<code>chmod a+x checkSSLCertificate.sh</code></p>

<h2>使用方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>checkSSLCertificate.sh domain server_ip
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>domain 域名 比如droidyue.com</li>
<li>server_ip 服务器端ip，一个域名可以对应多个ip,可以使用ping命令获取域名对应的服务器ip</li>
</ul>


<h2>示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MacBook-Pro-7:~/Documents/OneDrive/scripts<span class="o">(</span>:|✔<span class="o">)</span> %checkSSLCertificate.sh droidyue.com 104.27.129.205
</span><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 <span class="o">(</span>0x2<span class="o">)</span>
</span><span class='line'>        Serial Number:
</span><span class='line'>            05:f6:c5:0d:86:17:c1:6c:cb:a3:6c:01:85:b7:ff:a0
</span><span class='line'>    Signature Algorithm: ecdsa-with-SHA256
</span><span class='line'>        Issuer: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>CA, <span class="nv">L</span><span class="o">=</span>San Francisco, <span class="nv">O</span><span class="o">=</span>CloudFlare, Inc., <span class="nv">CN</span><span class="o">=</span>CloudFlare Inc ECC CA-2
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Oct  2 00:00:00 2018 GMT
</span><span class='line'>            Not After : Oct  2 12:00:00 2019 GMT
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>CA, <span class="nv">L</span><span class="o">=</span>San Francisco, <span class="nv">O</span><span class="o">=</span>CloudFlare, Inc., <span class="nv">CN</span><span class="o">=</span>sni.cloudflaressl.com
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: id-ecPublicKey
</span><span class='line'>                Public-Key: <span class="o">(</span>256 bit<span class="o">)</span>
</span><span class='line'>                pub:
</span><span class='line'>                    04:75:31:b0:0f:40:66:72:4f:b2:d3:d3:ab:9a:eb:
</span><span class='line'>                    b8:70:f3:6e:73:ed:56:51:39:7f:49:d8:ad:c8:4c:
</span><span class='line'>                    cb:12:16:67:7d:09:c5:51:68:f5:12:ac:89:cc:ec:
</span><span class='line'>                    f4:b0:1c:4e:09:1c:01:2e:6b:7d:01:0c:f5:0c:d5:
</span><span class='line'>                    0c:7e:7d:09:53
</span><span class='line'>                ASN1 OID: prime256v1
</span><span class='line'>                NIST CURVE: P-256
</span><span class='line'>        X509v3 extensions:
</span><span class='line'>            X509v3 Authority Key Identifier:
</span><span class='line'>                keyid:3E:74:2D:1F:CF:45:75:04:7E:3F:C0:A2:87:3E:4C:43:83:51:13:C6
</span><span class='line'>
</span><span class='line'>            X509v3 Subject Key Identifier:
</span><span class='line'>                FE:75:3B:AF:CD:5F:46:26:4F:B1:A1:F0:3A:4C:C3:82:D1:FF:AF:F7
</span><span class='line'>            X509v3 Subject Alternative Name:
</span><span class='line'>                DNS:sni.cloudflaressl.com, DNS:droidyue.com, DNS:*.droidyue.com
</span><span class='line'>            X509v3 Key Usage: critical
</span><span class='line'>                Digital Signature
</span><span class='line'>            X509v3 Extended Key Usage:
</span><span class='line'>                TLS Web Server Authentication, TLS Web Client Authentication
</span><span class='line'>            X509v3 CRL Distribution Points:
</span><span class='line'>
</span><span class='line'>                Full Name:
</span><span class='line'>                  URI:http://crl3.digicert.com/CloudFlareIncECCCA2.crl
</span><span class='line'>
</span><span class='line'>                Full Name:
</span><span class='line'>                  URI:http://crl4.digicert.com/CloudFlareIncECCCA2.crl
</span><span class='line'>
</span><span class='line'>            X509v3 Certificate Policies:
</span><span class='line'>                Policy: 2.16.840.1.114412.1.1
</span><span class='line'>                  CPS: https://www.digicert.com/CPS
</span><span class='line'>                Policy: 2.23.140.1.2.2
</span><span class='line'>
</span><span class='line'>            Authority Information Access:
</span><span class='line'>                OCSP - URI:http://ocsp.digicert.com
</span><span class='line'>                CA Issuers - URI:http://cacerts.digicert.com/CloudFlareIncECCCA-2.crt
</span><span class='line'>
</span><span class='line'>            X509v3 Basic Constraints: critical
</span><span class='line'>                CA:FALSE
</span><span class='line'>            1.3.6.1.4.1.11129.2.4.2:
</span><span class='line'>                ......w.......X......gp
</span><span class='line'>.....f4<span class="s2">&quot;.......H0F.!..B.#....3.A.s%1...;...n..-.U~T?m.!.....\V....^.N..M..bt..S......__..w.t~..1.3..!..%OBp...^B ..75y..{.V...f4&quot;</span>.......H0F.!........-<span class="err">&#39;</span>@.<span class="nv">$.</span>o......x.F.I.0F.....!....J..m&lt;.|...q.t2c..L...^.T.?.L.
</span><span class='line'>    Signature Algorithm: ecdsa-with-SHA256
</span><span class='line'>         30:46:02:21:00:cf:d8:25:3e:a5:2f:cd:dc:1a:07:11:eb:f0:
</span><span class='line'>         53:e1:fb:42:53:5b:1f:2f:4b:e5:02:5a:c3:76:bd:23:78:68:
</span><span class='line'>         cb:02:21:00:8c:9d:36:2e:c0:3b:af:93:ea:8b:e3:29:54:25:
</span><span class='line'>         4f:30:04:af:a0:be:bd:71:ab:64:5c:f4:93:5d:bd:84:2c:5a
</span></code></pre></td></tr></table></div></figure>


<p>使用终端一时爽，一直使用一直爽。</p>

<p>以上。</p>

<p>点击<a href="https://droidyue.com/blog/categories/jiao-ben/">更多脚本</a> 了解更多脚本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android WebView 诊断与排查问题的方法和技巧]]></title>
    <link href="https://droidyue.com/blog/2019/10/20/how-to-diagnose-webview-in-android/"/>
    <updated>2019-10-20T21:13:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/20/how-to-diagnose-webview-in-android</id>
    <content type="html"><![CDATA[<p>WebView，是安卓中很重要的一个组件，我们的应用中集成WebView后，可能会遇到各种各样的问题，这里简单介绍一些Android WebView 诊断与排查问题的方法，希望对于大家有这方面的问题的朋友有所帮助。</p>

<!--more-->


<h2>开启DiagnosableWebViewClient日志输出</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.droidyue.webview.webviewclient</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">SslError</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">webkit</span><span class="p">.*</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">debugMessage</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">webview</span><span class="p">.</span><span class="n">ext</span><span class="p">.</span><span class="n">toSimpleString</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 诊断（错误信息）的WebViewClient,会以日志输出形式输出错误信息，便于发现网页的问题</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nc">DiagnosableWebViewClient</span> <span class="p">:</span> <span class="n">WebViewClient</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">errorCode</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">description</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span> <span class="n">failingUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">errorCode</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">failingUrl</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedError&quot;</span><span class="p">,</span> <span class="s">&quot;errorCode&quot;</span><span class="p">,</span> <span class="n">errorCode</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;failingUrl&quot;</span><span class="p">,</span> <span class="n">failingUrl</span><span class="p">,</span> <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">request</span><span class="p">:</span> <span class="n">WebResourceRequest</span><span class="p">?,</span> <span class="n">error</span><span class="p">:</span> <span class="n">WebResourceError</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedError&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">,</span> <span class="n">request</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span> <span class="s">&quot;error&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSafeBrowsingHit</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">request</span><span class="p">:</span> <span class="n">WebResourceRequest</span><span class="p">?,</span> <span class="n">threatType</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">callback</span><span class="p">:</span> <span class="n">SafeBrowsingResponse</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onSafeBrowsingHit</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">threatType</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onSafeBrowsingHit&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">,</span> <span class="n">request</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span> <span class="s">&quot;threatType&quot;</span><span class="p">,</span> <span class="n">threatType</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedHttpError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">request</span><span class="p">:</span> <span class="n">WebResourceRequest</span><span class="p">?,</span> <span class="n">errorResponse</span><span class="p">:</span> <span class="n">WebResourceResponse</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedHttpError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">errorResponse</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedHttpError&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="s">&quot;errorResponse&quot;</span><span class="p">,</span> <span class="n">errorResponse</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedSslError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">handler</span><span class="p">:</span> <span class="n">SslErrorHandler</span><span class="p">?,</span> <span class="n">error</span><span class="p">:</span> <span class="n">SslError</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedSslError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">handler</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedSslError&quot;</span><span class="p">,</span> <span class="s">&quot;error&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>举个例子</h3>

<p>WebView页面出现了白屏，不展示任何内容，如下图</p>

<p><img src="https://asset.droidyue.com/image/2019_09/hybrid_app_white_issue.png" alt="https://asset.droidyue.com/image/2019_09/hybrid_app_white_issue.png" /></p>

<p>利用上面支持的内容，我们查看错误输出日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D debugMessage: ConcreteWebViewClient;onReceivedSslError error primary error: 3 certificate: Issued to: <span class="nv">CN</span><span class="o">=</span>sni.cloudflaressl.com,O<span class="o">=</span>Cloudflare<span class="se">\,</span> Inc.,L<span class="o">=</span>San Francisco,ST<span class="o">=</span>CA,C<span class="o">=</span>US;
</span><span class='line'>D debugMessage: Issued by: <span class="nv">C</span><span class="o">=</span>NZ,ST<span class="o">=</span>Auckland,L<span class="o">=</span>Auckland,O<span class="o">=</span>XK72 Ltd,OU<span class="o">=</span>https://charlesproxy.com/ssl,CN<span class="o">=</span>Charles Proxy CA <span class="o">(</span>4 Sep 2018<span class="se">\,</span> bogon<span class="o">)</span>;
</span><span class='line'>D debugMessage:  on URL: https://droidyue.com/ webview.info <span class="nv">url</span><span class="o">=</span>https://droidyue.com/;originalUrl<span class="o">=</span>null
</span></code></pre></td></tr></table></div></figure>


<p>通过查找源码(SslError.java)我们了解到</p>

<ul>
<li>errorCode 为 3，代表证书不信任。</li>
</ul>


<p>这其中的缘由是</p>

<ul>
<li>我们在设备上安装的charles证书，属于用户添加的证书</li>
<li>出于应用安全的目的，Android 7及之后默认不信任用户添加的证书(Android 7 之前是默认信任用户添加的证书)</li>
<li>当我们将App的编译目标提到24及其以上，系统就会激活这一安全限制。</li>
</ul>


<p>所以，我们按照这篇文章<a href="https://droidyue.com/blog/2019/01/13/resolve-charles-unknow-indicator-on-android-phones/">解决Android手机连接Charles Unknown问题</a>的方案，允许App在debug版本下信任用户证书就可以解决问题了。</p>

<h2>Console日志查看</h2>

<p>比如，我们有这样一段Javascript代码处理console输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;console.debug&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;console.log&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">&quot;console.info&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;console.warn&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;console.error&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb logcat | grep <span class="s2">&quot;chromium&quot;</span> --line-buffered --color<span class="o">=</span>always | grep CONSOLE --color<span class="o">=</span>always
</span></code></pre></td></tr></table></div></figure>


<p>
可以过滤出WebView CONSOLE的日志输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>2<span class="o">)]</span> <span class="s2">&quot;console.debug&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>2<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>3<span class="o">)]</span> <span class="s2">&quot;console.log&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>3<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>4<span class="o">)]</span> <span class="s2">&quot;console.info&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>4<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>5<span class="o">)]</span> <span class="s2">&quot;console.warn&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>5<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>6<span class="o">)]</span> <span class="s2">&quot;console.error&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>6<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样也有一个不足，就是没有打印出Console的消息级别(都展示成了INFO:CONSOLE)。</p>

<p>如果想要解决上面的不足或者自定义日志输出关键字的话，可以重写实现WebChromeClient的<code>onConsoleMessage</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.droidyue.webview.chromeclient</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">webkit</span><span class="p">.</span><span class="n">ConsoleMessage</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">webkit</span><span class="p">.</span><span class="n">WebChromeClient</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">debugMessage</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">webview</span><span class="p">.</span><span class="n">ext</span><span class="p">.</span><span class="n">toSimpleString</span>
</span><span class='line'>
</span><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nc">DiagnosableChromeClient</span><span class="p">:</span> <span class="n">WebChromeClient</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onConsoleMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span> <span class="n">lineNumber</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">sourceID</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//不需要调用super方法</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onConsoleMessage&quot;</span><span class="p">,</span> <span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="s">&quot;lineNumber&quot;</span><span class="p">,</span> <span class="n">lineNumber</span><span class="p">,</span> <span class="s">&quot;sourceID&quot;</span><span class="p">,</span> <span class="n">sourceID</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onConsoleMessage</span><span class="p">(</span><span class="n">consoleMessage</span><span class="p">:</span> <span class="n">ConsoleMessage</span><span class="p">?):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onConsoleMessage&quot;</span><span class="p">,</span> <span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="n">consoleMessage</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>        <span class="c1">//返回true，不再需要webview内部处理</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>TIP;message<span class="o">=</span>console.debug;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>1
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>LOG;message<span class="o">=</span>console.log;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>2
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>LOG;message<span class="o">=</span>console.info;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>3
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>WARNING;message<span class="o">=</span>console.warn;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>4
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>ERROR;message<span class="o">=</span>console.error;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>5
</span></code></pre></td></tr></table></div></figure>


<h2>开启 WebView 远程调试</h2>

<p>从Android Kitkat(4.4)开始，WebView 支持与Chrome 连接执行远程调试。</p>

<p>开启很简单，如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="n">WebView</span><span class="p">.</span><span class="n">enableRemoteDebugging</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">Build</span><span class="p">.</span><span class="n">VERSION</span><span class="p">.</span><span class="n">SDK_INT</span> <span class="p">&gt;=</span> <span class="n">Build</span><span class="p">.</span><span class="n">VERSION_CODES</span><span class="p">.</span><span class="n">KITKAT</span> <span class="p">&amp;&amp;</span> <span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">WebView</span><span class="p">.</span><span class="n">setWebContentsDebuggingEnabled</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但需要注意两点</p>

<ul>
<li>一定要限定运行设备大于等于4.4系统</li>
<li>强烈建议限定在Debug编译(或等同条件)包下开启，不建议Release包也启用该功能</li>
</ul>


<p>配置完成后，启动App，打开Chrome，输入<code>chrome://inspect</code>
<img src="https://asset.droidyue.com/image/2019_09/webview-debugging.png" alt="https://asset.droidyue.com/image/2019_09/webview-debugging.png" /></p>

<p>可以调试的功能有</p>

<ul>
<li>审查元素</li>
<li>执行Javascript</li>
<li>查看网页资源</li>
<li>进行性能分析</li>
<li>其他功能</li>
</ul>


<p>具体内容可以访问<a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews">https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews</a>了解。</p>

<h2>推荐阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/categories/webview/">WebView分类文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用脚本批量替换文本内容]]></title>
    <link href="https://droidyue.com/blog/2019/10/13/replace-text-in-multiple-files-using-shell-script/"/>
    <updated>2019-10-13T19:07:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/13/replace-text-in-multiple-files-using-shell-script</id>
    <content type="html"><![CDATA[<p>很多时候，我们需要进行多个文件的查找并替换，虽然IDE有这样的可视化功能，但是偏爱终端的人还是想要尝试用脚本实现一把。如下是一个简单的脚本来实现多文件的查找替换处理。</p>

<!--more-->


<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># $1 search_keyword</span>
</span><span class='line'><span class="c"># $2 replace_original</span>
</span><span class='line'><span class="c"># $3 replace_destination</span>
</span><span class='line'><span class="c"># $4 search file type</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>find ./ -type f -name <span class="s2">&quot;*.$4&quot;</span> -exec grep -l <span class="s2">&quot;$1&quot;</span> <span class="o">{}</span> <span class="se">\;</span> | xargs sed -i <span class="s2">&quot;&quot;</span> -e <span class="s2">&quot;s/$2/$3/g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>内容解析</h3>

<ul>
<li>find 查找文件命令使用</li>
<li>-name 限定文件名</li>
<li>-type 限定文件类型，f为常用文件</li>
<li>-exec 执行相关的命令，这里是用来查找关键字</li>
<li>sed 用来执行将源文字替换为目标文字</li>
</ul>


<p>我们将上述脚本保存为<code>replaceText.sh</code>。</p>

<h2>执行脚本</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  octopress git:<span class="o">(</span>master<span class="o">)</span> replaceText.sh <span class="s2">&quot;FD&quot;</span> <span class="s2">&quot;FD&quot;</span> <span class="s2">&quot;文件描述符&quot;</span> <span class="s2">&quot;markdown&quot;</span>
</span><span class='line'>➜  octopress git:<span class="o">(</span>master<span class="o">)</span> ✗ git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>
</span><span class='line'>Changes not staged <span class="k">for </span>commit:
</span><span class='line'>  <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class='line'>  <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2014-02-16-fix-no-sound-issue-on-mac.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2014-07-06-my-plan-for-the-left-half-of-2014.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2019-06-02-file-descriptor-explained.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2019-06-09-will-unclosed-stream-objects-cause-memory-leaks.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/buy/index.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/fuli/index.markdown
</span></code></pre></td></tr></table></div></figure>


<p>这样一个很简单快速的功能就实现了。</p>

<p>注：该脚本未在Linux发行版验证，可能有涉及到sed的简单修改。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个小技巧提升 OkHttp 请求稳定性]]></title>
    <link href="https://droidyue.com/blog/2019/10/07/okhttp-client-intercept-safe-guard-nullpointer/"/>
    <updated>2019-10-07T19:56:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/07/okhttp-client-intercept-safe-guard-nullpointer</id>
    <content type="html"><![CDATA[<p>OkHttp是可以说是Android开发中，每个项目都必需依赖的网络库，我们可以很便捷高效的处理网络请求，极大的提升了编码效率。但是有时候，我们使用OkHttp也会遇到这样的问题</p>

<h2>崩溃的stacktrace</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> E AndroidRuntime: FATAL EXCEPTION: OkHttp Dispatcher
</span><span class='line'> E AndroidRuntime: Process: com.example.okhttpexceptionsample, PID: 13564
</span><span class='line'> E AndroidRuntime: java.lang.NullPointerException: blablabla
</span><span class='line'> E AndroidRuntime:    at com.example.okhttpexceptionsample.MainActivity<span class="nv">$createNPEInterceptor$1</span>.intercept<span class="o">(</span>MainActivity.kt:61<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:112<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:87<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.RealCall.getResponseWithInterceptorChain<span class="o">(</span>RealCall.kt:184<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.RealCall<span class="nv">$AsyncCall</span>.run<span class="o">(</span>RealCall.kt:136<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="o">(</span>ThreadPoolExecutor.java:1167<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at java.util.concurrent.ThreadPoolExecutor<span class="nv">$Worker</span>.run<span class="o">(</span>ThreadPoolExecutor.java:641<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at java.lang.Thread.run<span class="o">(</span>Thread.java:784<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>为什么会崩溃</h2>

<p>从上面的stacktrace，我们可以分析到，发生了NullPointerException。发生了崩溃。</p>

<p>等等，我记得OkHttp有处理异常的情况呢。</p>

<p>嗯，确实，OkHttp有处理异常的情况，比如发生异常会调用<code>onFailure</code>。比如下面的Callback的内容介绍。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">interface</span> <span class="n">Callback</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Called when the request could not be executed due to cancellation, a connectivity problem or</span>
</span><span class='line'><span class="cm">   * timeout. Because networks can fail during an exchange, it is possible that the remote server</span>
</span><span class='line'><span class="cm">   * accepted the request before the failure.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span> <span class="n">IOException</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Called when the HTTP response was successfully returned by the remote server. The callback may</span>
</span><span class='line'><span class="cm">   * proceed to read the response body with [Response.body]. The response is still live until its</span>
</span><span class='line'><span class="cm">   * response body is [closed][ResponseBody]. The recipient of the callback may consume the response</span>
</span><span class='line'><span class="cm">   * body on another thread.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Note that transport-layer success (receiving a HTTP response code, headers and body) does not</span>
</span><span class='line'><span class="cm">   * necessarily indicate application-layer success: `response` may still indicate an unhappy HTTP</span>
</span><span class='line'><span class="cm">   * response code like 404 or 500.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">@Throws</span><span class="p">(</span><span class="n">IOException</span><span class="p">::</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">onResponse</span><span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，</p>

<ul>
<li>OkHttp只处理了IOException的情况，</li>
<li>NullPointerException不是IOException的子类</li>
</ul>


<p>所以没有被处理,发生了崩溃。</p>

<p>那么有没有办法解决，让这种崩溃不发生，对用户不进行干扰呢？其实是可以的。</p>

<h2>使用Interceptor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.okhttpexceptionsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">okhttp3</span><span class="p">.</span><span class="n">Interceptor</span>
</span><span class='line'><span class="n">import</span> <span class="n">okhttp3</span><span class="p">.</span><span class="n">Response</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">IOException</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 对于Interceptor的intercept中可能出现的Throwable包裹成IOExceptionWrapper，转成网络请求失败，而不是应用崩溃</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SafeGuardInterceptor</span> <span class="p">:</span> <span class="n">Interceptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">intercept</span><span class="p">(</span><span class="n">chain</span><span class="p">:</span> <span class="n">Interceptor</span><span class="p">.</span><span class="n">Chain</span><span class="p">):</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">chain</span><span class="p">.</span><span class="n">proceed</span><span class="p">(</span><span class="n">chain</span><span class="p">.</span><span class="n">request</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="nf">IOExceptionWrapper</span><span class="p">(</span><span class="s">&quot;SafeGuarded when requesting ${chain.request().url}&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 将chain.proceed处理中发生的Throwable包装成IOExceptionWrapper</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nf">IOExceptionWrapper</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span> <span class="n">cause</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">?)</span> <span class="p">:</span> <span class="n">IOException</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">cause</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，我们将任何<code>Throwable</code>的转成<code>IOExceptionWrapper</code>（伪装成IOException），然后添加到OkHttpClient中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">createOKHttpClient</span><span class="p">():</span> <span class="n">OkHttpClient</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">OkHttpClient</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">addInterceptor</span><span class="p">(</span><span class="n">SafeGuardInterceptor</span><span class="p">())</span>
</span><span class='line'>            <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们再次执行有NPE的代码，日志就发生了改变(不再是崩溃的日志，而是异常的日志)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  W System.err: com.example.okhttpexceptionsample.IOExceptionWrapper: <span class="nv">SafeGuarded</span><span class="o">=</span>blablabla
</span><span class='line'>  W System.err:   at com.example.okhttpexceptionsample.SafeGuardInterceptor.intercept<span class="o">(</span>SafeGuardInterceptor.kt:12<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:112<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:87<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.RealCall.getResponseWithInterceptorChain<span class="o">(</span>RealCall.kt:184<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.RealCall<span class="nv">$AsyncCall</span>.run<span class="o">(</span>RealCall.kt:136<span class="o">)</span>
</span><span class='line'>  W System.err:   at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="o">(</span>ThreadPoolExecutor.java:1167<span class="o">)</span>
</span><span class='line'>  W System.err:   at java.util.concurrent.ThreadPoolExecutor<span class="nv">$Worker</span>.run<span class="o">(</span>ThreadPoolExecutor.java:641<span class="o">)</span>
</span><span class='line'>  W System.err:   at java.lang.Thread.run<span class="o">(</span>Thread.java:784<span class="o">)</span>
</span><span class='line'>  W System.err: Caused by: java.lang.NullPointerException: blablabla
</span><span class='line'>  W System.err:   at com.example.okhttpexceptionsample.MainActivity<span class="nv">$createNPEInterceptor$1</span>.intercept<span class="o">(</span>MainActivity.kt:61<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:112<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:87<span class="o">)</span>
</span><span class='line'>  W System.err:   at com.example.okhttpexceptionsample.SafeGuardInterceptor.intercept<span class="o">(</span>SafeGuardInterceptor.kt:10<span class="o">)</span>
</span><span class='line'>  W System.err:   ... 7 more
</span></code></pre></td></tr></table></div></figure>


<p>上述需要注意两点</p>

<ul>
<li>添加的是Interceptor,而不是NetworkInterceptor</li>
<li>顺序很重要,一定要放在第一个位置</li>
</ul>


<h2>这么做有什么问题</h2>

<p>这么做，当然可以明显增强请求的稳定性和应用的崩溃率。但是是不是也有一些问题呢？比如</p>

<ul>
<li>将问题情况吞掉，不利于发现问题呢</li>
</ul>


<p>是的，确实可能存在上述的问题，但是我们可以利用下面的方式减轻或者解决问题</p>

<ul>
<li>只针对release情况应用SafeGuardInterceptor,这样便于debug情况下更容易发现</li>
<li>针对不同的build variants进行配置，便于尽可能的小范围发现问题</li>
<li>实行更加智能的动态开启策略。</li>
</ul>


<p>在软件工程中，很多决定都是trade-off的体现，具体的实施方案大家可以自行平衡选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据包名查找 jar 包文件]]></title>
    <link href="https://droidyue.com/blog/2019/09/22/find-jar-file-by-package-name/"/>
    <updated>2019-09-22T21:19:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/22/find-jar-file-by-package-name</id>
    <content type="html"><![CDATA[<p>很多时候，我们需要根据包名来查找一些依赖所在的jar包，比如我们想要查找<code>com.alipay</code>这个包及其文件所在的jar包。</p>

<p>最笨拙的办法可能是这样</p>

<ul>
<li>一个一个jar包查找，再利用一些工具来验证。</li>
</ul>


<p>其实，大可不必，我们需要简单实用如下的脚本就能解决这个问题。</p>

<!--more-->


<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;find&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># extract arguements from command line</span>
</span><span class='line'><span class="n">dirToSearch</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">packageName</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;dirToSearch=</span><span class="si">#{</span><span class="n">dirToSearch</span><span class="si">}</span><span class="s2">;packageName=</span><span class="si">#{</span><span class="n">packageName</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Find</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">dirToSearch</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot;.jar&quot;</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Checking </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1">#as jar tf shows the package information like the file path style</span>
</span><span class='line'>    <span class="c1"># we need to map all the dots(.) to slashes(/)</span>
</span><span class='line'>    <span class="n">contains</span> <span class="o">=</span> <span class="sb">`jar tf </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="sb">`</span><span class="o">.</span><span class="n">include?</span> <span class="n">packageName</span><span class="o">.</span><span class="n">gsub</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">contains</span>
</span><span class='line'>      <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;The jar files containing </span><span class="si">#{</span><span class="n">packageName</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">results</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的脚本利用了</p>

<ul>
<li>遍历查找jar文件</li>
<li>利用<code>jar tf</code>命令读取出jar包中的文件列表</li>
<li>执行字符串包含来实行检查</li>
</ul>


<h2>脚本执行</h2>

<p>将上面的内容保存成文件<code>findJarByPackageName.rb</code>，如下执行即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby findJarByPackageName.rb . <span class="s2">&quot;com.alipay&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">dirToSearch</span><span class="o">=</span>.;packageName<span class="o">=</span>com.alipay
</span><span class='line'>Checking ./0.jar
</span><span class='line'>Checking ./HwPush_SDK.jar
</span><span class='line'>Checking ./MiPush_SDK_Client_3_0_3.jar
</span><span class='line'>Checking ./alipaySdk-20180601.jar
</span><span class='line'>Checking ./classes.jar
</span><span class='line'>Checking ./full.jar
</span><span class='line'>Checking ./gradle-wrapper.jar
</span><span class='line'>Checking ./huawei-pps-channel-sdk.jar
</span><span class='line'>Checking ./mqtt-client-java1.4-uber-1.14.jar
</span><span class='line'>Checking ./mta-sdk-1.6.2.jar
</span><span class='line'>Checking ./open_sdk_r5788.jar
</span><span class='line'>Checking ./pinyin4j-2.5.0.jar
</span><span class='line'>Checking ./res.jar
</span><span class='line'>Checking ./tbs_sdk_thirdapp_v3.6.0.1249_43610_sharewithdownload_withoutGame_obfs_20180608_114954.jar
</span><span class='line'>Checking ./zxing.jar
</span><span class='line'>The jar files containing com.alipay
</span><span class='line'>./alipaySdk-20180601.jar
</span></code></pre></td></tr></table></div></figure>


<h2>更多推荐</h2>

<ul>
<li><a href="https://github.com/androidyue/DroidScripts">https://github.com/androidyue/DroidScripts</a></li>
<li><a href="https://droidyue.com/blog/categories/jiao-ben/">其他脚本</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
