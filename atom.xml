<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2019-09-15T20:57:55+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决 grep 的多次管道过滤问题]]></title>
    <link href="https://droidyue.com/blog/2019/09/15/fix-grep-multiple-filter-issue-cache-size/"/>
    <updated>2019-09-15T20:50:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/15/fix-grep-multiple-filter-issue-cache-size</id>
    <content type="html"><![CDATA[<p>在日常的开发过程中，我们利用<code>grep</code>可以方便快捷的查找感兴趣的日志内容，极大地提升了开发和排错效率。但是有时候，我们也会遇到一些问题，比如。</p>

<!--more-->


<ol>
<li><code>crazy.log</code> 是某个进程不断输出日志的文件</li>
<li>我们使用<code>tail -f crazy.log</code>来检测日志的产生</li>
<li>我们在前面的基础上利用管道增加一层过滤筛选感兴趣的内容。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f crazy.log | grep Hello
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>那么当我们再次增加一个过滤是，却没有内容（立即）产生了</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  /tmp tail -f crazy.log | grep Hello | grep Time
</span></code></pre></td></tr></table></div></figure>


<h2>如何解决</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f crazy.log | grep --line-buffered Hello | grep Time
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span></code></pre></td></tr></table></div></figure>


<p>如上，我们使用grep的选项<code>--line-buffered</code>即可。</p>

<h2>line-buffered 是什么</h2>

<blockquote><pre><code>--line-buffered
         Force output to be line buffered.  By default, output is line buffered when standard output is
         a terminal and block buffered otherwise.
</code></pre></blockquote>

<p>上面的意思是</p>

<ul>
<li>强制输出结果使用行缓冲</li>
<li>默认情况下，如果标准输入时终端，则使用line bufferred</li>
<li>否则，使用块缓冲，（默认的大小为4096 bytes，因系统和配置而异）</li>
</ul>


<p>所以，这也就解释了为什么双重grep过滤没有内容，因为没有达到块缓冲限制。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JvmMultifile 注解在 Kotlin 中的应用]]></title>
    <link href="https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin/"/>
    <updated>2019-09-08T20:43:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin</id>
    <content type="html"><![CDATA[<p>接触过Kotlin之后，我们会利用其扩展方法特性创建很多便捷的方法来实现更好更快的编码。比如我们对于RxJava进行一些简单的扩展方法实现。</p>

<!--more-->


<p>下面的这段代码实现一个将任意的对象转成Single实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Single</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//fileName:SingleExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to change T instance into Single&lt;T&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">T</span><span class="p">.</span><span class="n">toSingle</span><span class="p">():</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Single</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来的代码，实现将任意类型的List转成Observable实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Observable</span>
</span><span class='line'><span class="c1">//fileName:ObservableExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to convert List&lt;T&gt; instance to Observable&lt;List&lt;T&gt;&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">toObservable</span><span class="p">():</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">fromArray</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>针对上面的代码，我们使用时会是下面的样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">//the old way</span>
</span><span class='line'><span class="n">SingleExtKt</span><span class="o">.</span><span class="na">toSingle</span><span class="o">(</span><span class="s">&quot;Kotlin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ObservableExtKt</span><span class="o">.</span><span class="na">toObservable</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;Kotlinc&quot;</span><span class="o">,</span> <span class="s">&quot;Developer&quot;</span><span class="o">,</span> <span class="s">&quot;Friends&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>能不能将上面两个类合成一个呢</h2>

<p>有时候，我们可能处于这样的考虑，比如SingleExt与ObservableExt里面的扩展方法都是和RxJava有关，可不可以同一称为RxUtil呢，这样使用起来也很方面。</p>

<p>答案是，可以的，就是利用@file:JvmName和@file:JvmMultifileClass就可以实现。</p>

<p>实现代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;RxUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmMultifileClass</span>
</span><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Single</span>
</span><span class='line'><span class="c1">//fileName:SingleExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to change T instance into Single&lt;T&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">T</span><span class="p">.</span><span class="n">toSingle</span><span class="p">():</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Single</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;RxUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmMultifileClass</span>
</span><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Observable</span>
</span><span class='line'><span class="c1">//fileName:ObservableExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to convert List&lt;T&gt; instance to Observable&lt;List&lt;T&gt;&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">toObservable</span><span class="p">():</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">fromArray</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改后，就可以在Java中完全使用<code>RxUtil</code>调用了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//a much better way using @file:JvmMultifileClass</span>
</span><span class='line'><span class="n">RxUtil</span><span class="p">.</span><span class="n">toSingle</span><span class="p">(</span><span class="s">&quot;Kotlin&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">RxUtil</span><span class="p">.</span><span class="n">toObservable</span><span class="p">(</span><span class="n">Arrays</span><span class="p">.</span><span class="n">asList</span><span class="p">(</span><span class="s">&quot;Kotlinc&quot;</span><span class="p">,</span> <span class="s">&quot;Developer&quot;</span><span class="p">,</span> <span class="s">&quot;Friends&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>内部机制</h2>

<p>确实有一些神奇，简简单单的增加几个注解，就能实现。但是这样远远还不够，我们需要了解它是如何工作的。</p>

<p>查找对应的类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;*.class&quot;</span>
</span><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil.class
</span><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__ObservableExtKt.class
</span><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__SingleExtKt.class
</span></code></pre></td></tr></table></div></figure>


<p>使用javap工具拆解分析RxUtil.class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil.class
</span><span class='line'>public final class com.example.jvmannotationsample.RxUtil <span class="o">{</span>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Observable&lt;java.util.List&lt;T&gt;&gt; toObservable<span class="o">(</span>java.util.List&lt;? extends T&gt;<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: invokestatic  <span class="c">#12                 // Method com/example/jvmannotationsample/RxUtil__ObservableExtKt.toObservable:(Ljava/util/List;)Lio/reactivex/Observable;</span>
</span><span class='line'>       4: areturn
</span><span class='line'>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Single&lt;T&gt; toSingle<span class="o">(</span>T<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: invokestatic  <span class="c">#21                 // Method com/example/jvmannotationsample/RxUtil__SingleExtKt.toSingle:(Ljava/lang/Object;)Lio/reactivex/Single;</span>
</span><span class='line'>       4: areturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，我们可以看到</p>

<ul>
<li>toObservable方法内部实际上是调用了<code>RxUtil__ObservableExtKt.toObservable</code></li>
<li>toSingle 方法内部实际上是调用了<code>RxUtil__SingleExtKt.toSingle</code></li>
</ul>


<p>下面是对两个具体实现类的分析。</p>

<p>使用javap工具拆解分析RxUtil__ObservableExtKt.class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__ObservableExtKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;ObservableExt.kt&quot;</span>
</span><span class='line'>final class com.example.jvmannotationsample.RxUtil__ObservableExtKt <span class="o">{</span>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Observable&lt;java.util.List&lt;T&gt;&gt; toObservable<span class="o">(</span>java.util.List&lt;? extends T&gt;<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: ldc           <span class="c">#10                 // String $this$toObservable</span>
</span><span class='line'>       3: invokestatic  <span class="c">#16                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       6: iconst_1
</span><span class='line'>       7: anewarray     <span class="c">#18                 // class java/util/List</span>
</span><span class='line'>      10: dup
</span><span class='line'>      11: iconst_0
</span><span class='line'>      12: aload_0
</span><span class='line'>      13: aastore
</span><span class='line'>      14: invokestatic  <span class="c">#24                 // Method io/reactivex/Observable.fromArray:([Ljava/lang/Object;)Lio/reactivex/Observable;</span>
</span><span class='line'>      17: dup
</span><span class='line'>      18: ldc           <span class="c">#26                 // String Observable.fromArray(this)</span>
</span><span class='line'>      20: invokestatic  <span class="c">#29                 // Method kotlin/jvm/internal/Intrinsics.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>      23: areturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用javap工具拆解分析RxUtil__SingleExtKt.class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__SingleExtKt
</span><span class='line'>Warning: Binary file ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__SingleExtKt contains com.example.jvmannotationsample.RxUtil__SingleExtKt
</span><span class='line'>Compiled from <span class="s2">&quot;SingleExt.kt&quot;</span>
</span><span class='line'>final class com.example.jvmannotationsample.RxUtil__SingleExtKt <span class="o">{</span>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Single&lt;T&gt; toSingle<span class="o">(</span>T<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: ldc           <span class="c">#10                 // String $this$toSingle</span>
</span><span class='line'>       3: invokestatic  <span class="c">#16                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       6: aload_0
</span><span class='line'>       7: invokestatic  <span class="c">#21                 // Method io/reactivex/Single.just:(Ljava/lang/Object;)Lio/reactivex/Single;</span>
</span><span class='line'>      10: dup
</span><span class='line'>      11: ldc           <span class="c">#23                 // String Single.just(this)</span>
</span><span class='line'>      13: invokestatic  <span class="c">#26                 // Method kotlin/jvm/internal/Intrinsics.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>      16: areturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>相关Kotlin内容推荐</h3>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">如何研究Kotlin</a></li>
<li><a href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/">JvmName注解</a></li>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">kotlin编译器调校</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">Kotlin更多文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JvmName 注解在 Kotlin 中的应用]]></title>
    <link href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/"/>
    <updated>2019-09-01T20:45:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin</id>
    <content type="html"><![CDATA[<p>JvmName注解是Kotlin提供的一个可以变更编译器输出的注解，这里简单的介绍一下其使用规则。</p>

<h2>应用在文件上</h2>

<h3>未应用@JvmName</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">Uri</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">toUri</span><span class="p">():</span> <span class="n">Uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>当我们在Java中调用上面的toUri方法时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringExtKt</span><span class="o">.</span><span class="na">toUri</span><span class="o">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的 class 文件名称为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/StringExtKt.class
</span></code></pre></td></tr></table></div></figure>


<h3>应用@JvmName</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;StringUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">Uri</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">toUri</span><span class="p">():</span> <span class="n">Uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringUtil</span><span class="o">.</span><span class="na">toUri</span><span class="o">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的 class 文件名为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/StringUtil.class
</span></code></pre></td></tr></table></div></figure>


<h2>作用在方法上</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample.jvm_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">@JvmName</span><span class="p">(</span><span class="s">&quot;isOK&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">isValid</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的对应的class 文件，我们可以看到方法名称已经修改了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/OnMethodSampleKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;OnMethodSample.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.OnMethodSampleKt <span class="o">{</span>
</span><span class='line'>  public static final boolean isOK<span class="o">(</span>java.lang.String<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: ldc           <span class="c">#11                 // String $this$isValid</span>
</span><span class='line'>       3: invokestatic  <span class="c">#17                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       6: aload_0
</span><span class='line'>       7: checkcast     <span class="c">#19                 // class java/lang/CharSequence</span>
</span><span class='line'>      10: astore_1
</span><span class='line'>      11: iconst_0
</span><span class='line'>      12: istore_2
</span><span class='line'>      13: aload_1
</span><span class='line'>      14: invokeinterface <span class="c">#23,  1           // InterfaceMethod java/lang/CharSequence.length:()I</span>
</span><span class='line'>      19: ifle          26
</span><span class='line'>      22: iconst_1
</span><span class='line'>      23: goto          27
</span><span class='line'>      26: iconst_0
</span><span class='line'>      27: ireturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，我们在Java代码中，可以这样调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testJvmNameOnMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">OnMethodSampleKt</span><span class="o">.</span><span class="na">isOK</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，我们在Kotlin代码中，还是只能使用<code>isValid</code>而不是<code>isOK</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testJvmNameOnMethod</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;&quot;</span><span class="p">.</span><span class="n">isValid</span><span class="p">()</span>
</span><span class='line'><span class="c1">//    &quot;&quot;.isOK() unresolved reference</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题就奇怪了，生成的class里面的方法是<code>isOK</code>，怎么还能调用<code>isValid</code>呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/KotlinPlaygroundKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;KotlinPlayground.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.KotlinPlaygroundKt <span class="o">{</span>
</span><span class='line'>  public static final void testJvmNameOnMethod<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: ldc           <span class="c">#8                  // String</span>
</span><span class='line'>       2: invokestatic  <span class="c">#14                 // Method com/example/jvmannotationsample/jvm_name/OnMethodSampleKt.isOK:(Ljava/lang/String;)Z</span>
</span><span class='line'>       5: pop
</span><span class='line'>       6: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，Kotlin编译器将<code>isValid</code>在字节码层面又替换成了<code>isOK</code>。</p>

<p>关于@JvmName作用到方法上，比较好的例子(来自Kotlin官网)是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/JVMAnnotationSample/app/src/main/java/com/example/jvmannotationsample/jvm_name/GenericList.kt: <span class="o">(</span>3, 1<span class="o">)</span>: Platform declaration clash: The following declarations have the same JVM signature <span class="o">(</span>filterValid<span class="o">(</span>Ljava/util/List;<span class="o">)</span>Ljava/util/List;<span class="o">)</span>:
</span><span class='line'>    fun List&lt;Int&gt;.filterValid<span class="o">()</span>: List&lt;Int&gt; defined in com.example.jvmannotationsample.jvm_name in file GenericList.kt
</span><span class='line'>    fun List&lt;String&gt;.filterValid<span class="o">()</span>: List&lt;String&gt; defined in com.example.jvmannotationsample.jvm_name in file GenericList.kt
</span></code></pre></td></tr></table></div></figure>


<p>上面的两个方法声明会导致Kotlin编译出错，因为</p>

<p>由于JVM对于泛型采取了类型擦除，<code>List&lt;Int&gt;.filterValid()</code>和<code>List&lt;String&gt;.filterValid()</code>实际上对应的都是<code>List.filterValid()</code></p>

<p>所以，对应的解决方法</p>

<ul>
<li> 修改两个的方法名称，比如<code>List&lt;String&gt;.filterValid()</code>修改成<code>List&lt;String&gt;.filterValidString()</code>等</li>
<li> 第二种就是使用@JvmName达到第一种方法的效果</li>
</ul>


<p>具体修改如下所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample.jvm_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">@JvmName</span><span class="p">(</span><span class="s">&quot;filterValidString&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@JvmName</span><span class="p">(</span><span class="s">&quot;filterValidInt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>作用在属性上</h2>

<p>除此之外，@JvmName还可以作用在属性上。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample.jvm_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">@get</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;x&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@set</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;changeX&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">23</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中对应的调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testJvmNameOnProperty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OnPropertiesSampleKt</span><span class="o">.</span><span class="na">changeX</span><span class="o">(</span><span class="mi">111</span><span class="o">);</span>
</span><span class='line'>        <span class="n">OnPropertiesSampleKt</span><span class="o">.</span><span class="na">x</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Kotlin中对应的调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testJvmNameOnProperty</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="p">=</span> <span class="m">1111</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和作用在方法上一样，其实现原理一致，具体如下面的反编译代码可见一斑。</p>

<p>Java调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/OnPropertiesSampleKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;OnPropertiesSample.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.OnPropertiesSampleKt <span class="o">{</span>
</span><span class='line'>  public static final int x<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: getstatic     <span class="c">#11                 // Field x:I</span>
</span><span class='line'>       3: ireturn
</span><span class='line'>
</span><span class='line'>  public static final void changeX<span class="o">(</span>int<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: iload_0
</span><span class='line'>       1: putstatic     <span class="c">#11                 // Field x:I</span>
</span><span class='line'>       4: <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="k">  </span>static <span class="o">{}</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: bipush        23
</span><span class='line'>       2: putstatic     <span class="c">#11                 // Field x:I</span>
</span><span class='line'>       5: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlin调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/KotlinPlaygroundKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;KotlinPlayground.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.KotlinPlaygroundKt <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  public static final void testJvmNameOnProperty<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: sipush        1111
</span><span class='line'>       3: invokestatic  <span class="c">#36                 // Method com/example/jvmannotationsample/jvm_name/OnPropertiesSampleKt.changeX:(I)V</span>
</span><span class='line'>       6: invokestatic  <span class="c">#40                 // Method com/example/jvmannotationsample/jvm_name/OnPropertiesSampleKt.x:()I</span>
</span><span class='line'>       9: pop
</span><span class='line'>      10: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>相关文章</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多优质Kotlin文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contract，开发者和 Kotlin 编译器之间的契约]]></title>
    <link href="https://droidyue.com/blog/2019/08/25/kotlin-contract-between-developers-and-the-compiler/"/>
    <updated>2019-08-25T16:09:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/25/kotlin-contract-between-developers-and-the-compiler</id>
    <content type="html"><![CDATA[<p>相比 Java，使用 Kotlin 编程的时候，我们和kotlin编译器的交互行为会更多一些，比如我们可以通过<code>inline</code>来控制字节码的输出结果，使用注解也可以修改编译输出的class文件。</p>

<p>这里介绍一个和kotlin编译器更加好玩的特性，contract。可以理解成中文里面的契约。</p>

<!--more-->


<h2>不够智能的 Kotlin 编译器</h2>

<p>Kotlin编译器向来是比较智能的，比如做类型推断和<code>smart cast</code>等。但是有些时候，显得不是那么智能，比如下面的这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">News</span><span class="p">(</span><span class="k">val</span> <span class="n">publisherId</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="k">val</span> <span class="n">title</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//检查标题是否合法，如果title为null或者内容为空返回false</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">isTitleValid</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">title</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsTitleValid</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">isTitleValid</span><span class="p">())</span> <span class="p">{</span>   
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span> <span class="c1">//编译失败 并报错  //Only safe (?.) or non-null asserted (!!.) calls </span>
</span><span class='line'>        <span class="c1">//are allowed on a nullable receiver of type News?</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码会让我们觉得Kotlin编译器很不智能，甚至是有些笨拙。</p>

<ul>
<li><code>news.isTitleValid()</code>返回true，我们可以推测出<code>news.title</code>不为null，也能推断出news不为null</li>
<li>但是即使这样，我们使用<code>news.title</code>会导致编译报错 <code>Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type News?</code></li>
<li>所以，想要编译通过，我们要么继续使用<code>news?.title</code>或者是<code>news!!.title</code>，但无论哪一种都不够优雅</li>
</ul>


<p>所以不争的结论就是，Kotlin编译器在<code>if</code>语句内部无法推断<code>news</code>是非null的。</p>

<h3>为什么 Kotlin编译器不能推断出来呢</h3>

<p>可能有人会想，我觉得挺简单的啊，应该可以推断出来吧。</p>

<p>是的，如果仅仅以例子中如此简单的实现，大家都会觉得可以推断出来</p>

<p>但是</p>

<ul>
<li>现实中的实践代码往往会比上面的复杂，比如涉及到多个调用和更加复杂的方法体实现等等</li>
<li>纵使可以做到，编译器也需要花费资源和时间来分析上下文，这其中随着层级加深，资源消耗和编译耗时也会增加。</li>
</ul>


<p>所以，不能推断也是有对应的考虑的。</p>

<h2>契约是什么</h2>

<p>所以我们面临的现实情况是</p>

<ul>
<li>作为开发者，我们了解较多的情况，比如<code>News?.isTitleValid</code>返回true，代表News实例不为null</li>
<li>而编译器，由于上面的原因或者其他原因，不知道足够的信息，无法做到和开发者一样做相同的推断</li>
</ul>


<p>于是，开发者和编译器之间可以建立一个这样的契约</p>

<ul>
<li>开发者将关于方法的额外信息提供给编译器，还是以<code>News?.isTitleValid</code>返回true，代表News实例不为null为例</li>
<li>编译器在编译的时候，发现<code>News?.isTitleValid</code>为true后，按照开发者预期，转换成非空的News实例，让开发者可以直接调用</li>
</ul>


<p>而 Kotlin 从1.3版本引入了Contract(契约)，用来解决我们刚刚提到的问题。</p>

<h2>应用契约</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">isTitleValid</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//contract 开始</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@isTitleValid</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//contract 结束</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">title</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsTitleValid</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">?.</span><span class="n">isTitleValid</span><span class="p">()</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于上面代码的一些简单解释</p>

<ul>
<li>contract 采用DSL方式声明</li>
<li><code>returns(true) implies (this@isTitleValid is News)</code> 代表如果方法返回(returns) true，表明(implies) <code>this@isTitleValid</code> 是News实例，而不是News?的实例，即<code>this@isTitleValid</code>为非null</li>
<li>声明使用Contract的方法和其被调用的方法都需要使用<code>@ExperimentalContracts</code>（后面章节会提到）</li>
</ul>


<h2>其他的契约实现</h2>

<p>上面的契约为<code>returns(true) implies</code>，除此之外，还有</p>

<ul>
<li>returns(false) implies</li>
<li>returns(null) implies</li>
<li>returns implies</li>
<li>returnsNotNull implies</li>
<li>callsInPlace</li>
</ul>


<h3>returns(false) implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">isFake</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@isFake</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="k">this</span><span class="p">.</span><span class="n">publisherId</span> <span class="p">==</span> <span class="m">1980</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsIsFake</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">isFake</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">?.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当方法<code>News?.isFake</code>返回false，则表明<code>this@isFake</code>是<code>News</code>实例，非null</li>
</ul>


<h3>return(null) implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">copy</span><span class="p">():</span> <span class="n">Any</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@copy</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;EMPTY&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsCopy</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">?.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当方法<code>News?.copy</code>返回null时，<code>this@copy</code>是<code>News</code>实例，非null</li>
</ul>


<h3>returns implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">validate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">()</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@validate</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nf">IllegalStateException</span><span class="p">(</span><span class="s">&quot;null instance&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">publisherId</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nf">IllegalStateException</span><span class="p">(</span><span class="s">&quot;publisherId is less than 0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">title</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nf">IllegalStateException</span><span class="p">(</span><span class="s">&quot;title is empty&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsValidate</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">news</span><span class="p">.</span><span class="n">validate</span><span class="p">()</span>
</span><span class='line'>    <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果方法<code>News?.validate()</code>顺利执行完毕，不抛出异常，则<code>this@validate</code>是<code>News</code>实例，非null</li>
</ul>


<h3>returnsNotNull implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">getTitleHashCode</span><span class="p">():</span> <span class="n">Int</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returnsNotNull</span><span class="p">()</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@getTitleHashCode</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">?.</span><span class="n">title</span><span class="p">?.</span><span class="n">hashCode</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsGetTitleHashCode</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">getTitleHashCode</span><span class="p">()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">?.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果<code>News?.getTitleHashCode()</code>返回为非null，则<code>this@getTitleHashCode</code>是<code>News</code>实例，非null</li>
</ul>


<h2>callsInPlace 原地调用</h2>

<p>callsInPlace(lambda, kind)和之前的契约不同，它让我们有能力告知编译器，lambda在什么时候，什么地方，以及执行次数等信息。</p>

<p>同样，我们继续看这样一段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.androidcontractsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getAppVersion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">appVersion</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">appVersion</span> <span class="p">=</span> <span class="m">50</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//安全运行runFunction,捕获异常</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="nf">safeRun</span><span class="p">(</span><span class="n">runFunction</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">runFunction</span><span class="p">.</span><span class="n">invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们执行编译的时候，会得到这样的错误信息<code>Captured values initialization is forbidden due to possible reassignment</code></p>

<p>因为上面的代码，也存在这里开发者知道一些信息，而编译器不知道的情况</p>

<h3>对于编译器来说</h3>

<ul>
<li>无法确定<code>runFunction</code>实参是否会执行</li>
<li>无法确定<code>runFunction</code>实参是否只执行一次还是多次(val赋值多次会出错)</li>
<li>无法确定<code>runFunction</code>实参执行时，是否getappVersion已经执行完毕</li>
</ul>


<h3>可能的结果</h3>

<ul>
<li><code>runFunction</code>没有执行，<code>appVersion</code>处于未初始化状态</li>
<li><code>runFunction</code>执行多次，<code>appVersion</code>被多次赋值，对于val是禁止的。</li>
</ul>


<h3>改进方案</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">import</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">contracts</span><span class="p">.</span><span class="n">ExperimentalContracts</span>
</span><span class='line'><span class="n">import</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">contracts</span><span class="p">.</span><span class="n">InvocationKind</span>
</span><span class='line'><span class="n">import</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">contracts</span><span class="p">.</span><span class="n">contract</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">getAppVersion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">appVersion</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">appVersion</span> <span class="p">=</span> <span class="m">50</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">safeRun</span><span class="p">(</span><span class="n">runFunction</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//使用EXACTLY_ONCE</span>
</span><span class='line'>        <span class="n">callsInPlace</span><span class="p">(</span><span class="n">runFunction</span><span class="p">,</span> <span class="n">InvocationKind</span><span class="p">.</span><span class="n">EXACTLY_ONCE</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">runFunction</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过契约上面的代码实现了</p>

<ul>
<li><code>safeRun</code>会在<code>getAppVersion</code>执行的过程中执行，不会等到<code>getAppVersion</code>执行完毕后执行</li>
<li><code>safeRun</code>会确保<code>runFunction</code>只会执行一次，不会多次执行</li>
</ul>


<p>注意：官方说使用callsInPlace作用的方法必须inline(A function declaring the callsInPlace effect must be inline.)。但是经过验证不inline也没有问题，只是对应的实现方式不同。</p>

<p>除此之外，上面提到的InvocationKind 有这样几个变量</p>

<ul>
<li>AT_MOST_ONCE 做多调用一次</li>
<li>EXACTLY_ONCE 只调用一次</li>
<li>AT_LEAST_ONCE 最少执行一次</li>
<li>UNKNOWN (the default). 未知，默认值</li>
</ul>


<h2>应用Contract的问题</h2>

<p>由于目前Contract还处于实验阶段，需要使用相关的注解来表明开发者明确这一特性（以后可能修改，并自愿承担相应的变动和后果）。</p>

<p>目前我们可以使用<code>UseExperimental</code>和<code>ExperimentalContracts</code>两种注解，以下为具体的使用示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@UseExperimental</span><span class="p">(</span><span class="n">ExperimentalContracts</span><span class="p">::</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">?.</span><span class="n">isOK</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span><span class="p">(</span><span class="k">this</span><span class="n">@isOK</span> <span class="k">is</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">?.</span><span class="n">isGood</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span><span class="p">(</span><span class="k">this</span><span class="n">@isGood</span> <span class="k">is</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>非 Android项目</h3>

<p>对于非 Android项目，会有另外一个非注解的方式，那就是为模块增加编译选项。如下图。
<img src="https://asset.droidyue.com/image/2019_07/kotlin_contract_compiler_option.png" alt="https://asset.droidyue.com/image/2019_07/kotlin_contract_compiler_option.png" /></p>

<p>当然，你也可以在模块的配置文件，增加<code>-Xuse-experimental=kotlin.contracts.ExperimentalContracts</code>到<code>compilerSettings</code>的<code>additionalArguments</code>中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">module</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;JAVA_MODULE&quot;</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;4&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">component</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;FacetManager&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">facet</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;kotlin-language&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Kotlin&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">configuration</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;3&quot;</span> <span class="n">platform</span><span class="o">=</span><span class="s">&quot;JVM 1.8&quot;</span> <span class="n">useProjectSettings</span><span class="o">=</span><span class="s">&quot;false&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">compilerSettings</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;additionalArguments&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;-version -Xuse-experimental=kotlin.contracts.ExperimentalContracts&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">compilerSettings</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">compilerArguments</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;jvmTarget&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;1.8&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;languageVersion&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;1.3&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;apiVersion&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;1.3&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">compilerArguments</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">configuration</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">facet</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">component</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">component</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;NewModuleRootManager&quot;</span> <span class="n">inherit</span><span class="o">-</span><span class="n">compiler</span><span class="o">-</span><span class="n">output</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">exclude</span><span class="o">-</span><span class="n">output</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">url</span><span class="o">=</span><span class="s">&quot;file://$MODULE_DIR$&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">sourceFolder</span> <span class="n">url</span><span class="o">=</span><span class="s">&quot;file://$MODULE_DIR$/src&quot;</span> <span class="n">isTestSource</span><span class="o">=</span><span class="s">&quot;false&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">orderEntry</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;inheritedJdk&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">orderEntry</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;sourceFolder&quot;</span> <span class="n">forTests</span><span class="o">=</span><span class="s">&quot;false&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">orderEntry</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;library&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;KotlinJavaRuntime&quot;</span> <span class="n">level</span><span class="o">=</span><span class="s">&quot;project&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">component</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">module</span>
</span></code></pre></td></tr></table></div></figure>


<h2>当方法行为与契约不符</h2>

<ul>
<li>这种情况是可能且容易出现的，因为Contract并没有校验机制处理。</li>
<li>当这种情况出现，就意味着我们向编译器提供了虚假的辅助信息</li>
<li>一旦问题出现，对应的结果结果就是导致应用运行时崩溃。</li>
</ul>


<p>比如下面的例子，我们的方法与契约不符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">validateByMistake</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="n">news</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testValidateByMistake</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">validateByMistake</span><span class="p">(</span><span class="n">news</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然随之而来的就是运行时的崩溃</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java.lang.NullPointerException: Attempt to invoke virtual method <span class="s1">&#39;java.lang.String com.example.androidcontractsample.News.getTitle()&#39;</span> on a null object reference
</span><span class='line'> at com.example.androidcontractsample.NewsKt.testValidateByMistake<span class="o">(</span>News.kt:91<span class="o">)</span>
</span><span class='line'> at com.example.androidcontractsample.MainActivity.onCreate<span class="o">(</span>MainActivity.kt:13<span class="o">)</span>
</span><span class='line'> at android.app.Activity.performCreate<span class="o">(</span>Activity.java:7698<span class="o">)</span>
</span><span class='line'> at android.app.Activity.performCreate<span class="o">(</span>Activity.java:7687<span class="o">)</span>
</span><span class='line'> at android.app.Instrumentation.callActivityOnCreate<span class="o">(</span>Instrumentation.java:1299<span class="o">)</span>
</span><span class='line'> at android.app.ActivityThread.performLaunchActivity<span class="o">(</span>ActivityThread.java:3096<span class="o">)</span>
</span><span class='line'> ... 11 more
</span></code></pre></td></tr></table></div></figure>


<p>所以作为开发者，我们需要小心谨慎避免犯这种错误。</p>

<h2>注意事项</h2>

<ul>
<li>Contract 自1.3才引入，而且是实验性的功能,未来的实现方式可能会有变动</li>
<li>Contract 目前只适用于top-level的方法，否则将会编译失败</li>
</ul>


<h2>Contract 如今还是实验功能，用还是不用</h2>

<ul>
<li>是的，正如前面提到的Contract属于实验阶段，后期的规划，可能是作为正式功能引入还是变更实施方案，还是相对未知的。</li>
<li>但是仅以个人的观点来看，还是推荐使用的。因为我觉得有些技术不需要等到稳定或者正式阶段就可以应用。</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://www.kotlindevelopment.com/help-yourself-and-the-compiler-with-contracts/">https://www.kotlindevelopment.com/help-yourself-and-the-compiler-with-contracts/</a></li>
<li><a href="https://ncorti.com/blog/discovering-kotlin-contracts">https://ncorti.com/blog/discovering-kotlin-contracts</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单几招提速 Kotlin kapt编译]]></title>
    <link href="https://droidyue.com/blog/2019/08/18/faster-kapt/"/>
    <updated>2019-08-18T10:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/18/faster-kapt</id>
    <content type="html"><![CDATA[<p>应用Kotlin之后，涉及到注解的注解处理器依赖也会由<code>annotationProcessor</code>替换成<code>kapt</code>，和最初应用Kotlin一样，总会让人一种感觉，一番应用Kotlin和Kapt之后，编译耗时更长了，不过好在Kotlin和Google 在这一方面做了很多的优化和改进，本文将简单介绍一些配置，来实现项目编译关于kapt这方面的加速。</p>

<!--more-->


<h2>开启Gradle 构建缓存支持(Gradle build cache support)</h2>

<p>默认情况下，kapt注解处理任务并没有利用开启gradle的构建缓存，需要我们手动增加配置开启</p>

<p>开启方式：在项目的app module下的 build.gradle 文件增加如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kapt</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">useBuildCache</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意：</p>

<ul>
<li><code>kapt</code>配置和<code>android</code>配置同一层级。</li>
<li>该特性支持从Kotlin 1.2.20开始。</li>
<li>上述配置生效需Gradle为4.3及以上，且开启build-cache。（增加&mdash;build-cache 选项或在gradle.properties文件添加<code>org.gradle.caching=true</code>）</li>
</ul>


<h2>并行执行kapt任务</h2>

<p>为了加快构建速度，我们可以利用<code>Gradle worker API</code>实现并行执行kapt任务。</p>

<p>开启方式，在<code>gradle.properties</code>文件中增加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kapt.use.worker.api<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：</p>

<ul>
<li><code>Gradle worker API</code>需依赖<code>Gradle</code>4.10.3及以上。</li>
<li>该特性支持自Kotlin 1.2.60</li>
<li>启用并行执行，会引发更高的内存占用</li>
</ul>


<h2>启用kapt编译规避</h2>

<p>除此之外，我们可以利用<code>Gradle compile avoidance</code>（编译规避）来避免执行注解处理。</p>

<p>注解处理被略过的场景有</p>

<ul>
<li>项目的源文件没有改变</li>
<li>依赖的改变是ABI(Application Binary Interface)兼容的，比如仅仅修改某个方法的方法体。</li>
</ul>


<p>开启方式：</p>

<ul>
<li>对于注解依赖需要使用<code>kapt</code>显式声明</li>
<li>在<code>gradle.properties</code>文件中增加<code>kapt.include.compile.classpath=false</code></li>
</ul>


<p>注意：</p>

<ul>
<li>该特性需 Kotlin 1.3.20 及以上</li>
</ul>


<h2>增量注解处理</h2>

<p>Kotlin 自1.3.30引入了一个实验功能，即支持注解增量处理。</p>

<p>开启需要很简单，在<code>gradle.properties</code>中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kapt.incremental.apt<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是还需要有一个前提，就是开启Gradle的增量编译（Kotlin 1.1.1已默认开启）。</p>

<p>除此之外，关键的因素还是需要开依赖的注解处理器是否支持增量处理。</p>

<h3>如何查看注解处理器是否支持增量编译</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew aDeb -Pkapt.verbose<span class="o">=</span><span class="nb">true</span> | grep KAPT
</span><span class='line'>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Incremental KAPT support is disabled. Processors that are not incremental:
</span><span class='line'>  com.bumptech.glide.annotation.compiler.GlideAnnotationProcessor,
</span><span class='line'>  dagger.internal.codegen.ComponentProcessor,
</span><span class='line'>  android.arch.lifecycle.LifecycleProcessor.
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Incremental KAPT support is disabled. Processors that are not incremental:
</span><span class='line'>  butterknife.compiler.ButterKnifeProcessor,
</span><span class='line'>  com.alibaba.android.arouter.compiler.processor.AutowiredProcessor,
</span><span class='line'>  com.alibaba.android.arouter.compiler.processor.InterceptorProcessor,
</span><span class='line'>  com.alibaba.android.arouter.compiler.processor.RouteProcessor,
</span><span class='line'>  dagger.internal.codegen.ComponentProcessor,
</span><span class='line'>  com.google.auto.service.processor.AutoServiceProcessor.
</span></code></pre></td></tr></table></div></figure>


<h3>更新依赖至最新版</h3>

<p>上面我们看到了<code>glide</code>,<code>butterknife</code>等依赖，我们都可以通过将这些依赖更新到最新版来解决</p>

<ul>
<li>Glide在v4.9.0版本增加了增量处理支持，对应的github commit为 <a href="https://github.com/bumptech/glide/commit/a16a1baa140c9b87b9a68a2a3b91047fd60ba5d8">https://github.com/bumptech/glide/commit/a16a1baa140c9b87b9a68a2a3b91047fd60ba5d8</a></li>
<li>google/auto 也在较早的时候进行了支持，对应的github commit为 <a href="https://github.com/google/auto/commit/a5673d06f687e1354f1f069cce36136538cf532c">https://github.com/google/auto/commit/a5673d06f687e1354f1f069cce36136538cf532c</a></li>
</ul>


<h3>更新加手动配置</h3>

<p>以Dagger为例，除了更新到最新版之外，还需要增加如下的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">javaCompileOptions</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">annotationProcessorOptions</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">arguments</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="s">&quot;dagger.gradle.incremental&quot;</span><span class="o">:</span> <span class="s">&quot;true&quot;</span><span class="o">]</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考链接<a href="https://github.com/google/dagger/issues/1120">https://github.com/google/dagger/issues/1120</a></p>

<h2>Troubleshooting</h2>

<ul>
<li>如果启用上面的方案导致问题，可以找到对应的配置，关闭该特性。</li>
</ul>


<h2>最后的建议</h2>

<ul>
<li>积极保持依赖为最新(稳定)版，否则时间越长升级成本越大。</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/reference/kapt.html">https://kotlinlang.org/docs/reference/kapt.html</a></li>
<li><a href="https://medium.com/avast-engineering/making-incremental-kapt-work-speed-up-your-kotlin-projects-539db1a771cf">https://medium.com/avast-engineering/making-incremental-kapt-work-speed-up-your-kotlin-projects-539db1a771cf</a></li>
</ul>


<h2>相关内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
<li><a href="https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation/">关于应用Kotlin后的编译速度问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin编译与Intrinsics检查]]></title>
    <link href="https://droidyue.com/blog/2019/08/11/kotlin-compiler-intrinsics/"/>
    <updated>2019-08-11T20:31:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/11/kotlin-compiler-intrinsics</id>
    <content type="html"><![CDATA[<p>在很早的时候，小黑屋就介绍过如何研究Kotlin，其中涉及到了查看字节码和反编译成Java代码的方式，相信很多人研究过的人，都会或多或少遇到过<code>Intrinsics.checkParameterIsNotNull</code>这样或者类似的代码。</p>

<!--more-->


<p>首先，我们先看一下这段简单的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">dumpStringMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;dumpStringMessage=$message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照我们之前的方法，反编译成Java代码就是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">dumpStringMessage</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="s">&quot;message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var1</span> <span class="o">=</span> <span class="s">&quot;dumpStringMessage=&quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译后，我们可以看到代码中有这样的一行代码<code>Intrinsics.checkParameterIsNotNull(message, "message");</code></p>

<h2>Intrinsics 是什么</h2>

<ul>
<li>Intrinsics是Kotlin内部的一个类</li>
<li>包含了检查参数是否为null的<code>checkParameterIsNotNull</code></li>
<li>包含了表达式结果是否为null的<code>checkExpressionValueIsNotNull</code></li>
<li>包含了检测lateinit是否初始化的<code>throwUninitializedPropertyAccessException</code></li>
<li>包含了开发者强制非空!!出现空指针时抛出<code>throwNpe</code>的方法</li>
<li>判断对象相等的方法<code>areEqual</code></li>
<li>其他的一些处理数据异常的方法和辅助方法</li>
</ul>


<p>所以上面代码中的<code>Intrinsics.checkParameterIsNotNull(message, "message");</code>是为了检测参数message是否为null进行的判断。</p>

<h2>为什么会有Intrinsics等判断代码呢</h2>

<p>不是说 Kotlin 是空指针安全，有可空(Any?)和不可空(Any)的类型么，我上面的代码声明的是<code>message: String</code>又不是<code>message: String?</code>,为什么还要多此一举呢？</p>

<p>是的，你的这句话基本上没有毛病，但是有一个前提，那就是空指针和两种类型的特性，目前只在纯kotlin中生效，一旦涉及到和Java交互时，就不灵了。</p>

<p>比如我们在Java代码中这样调用，不会产生任何编译的问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">StringExtKt</span><span class="o">.</span><span class="na">dumpStringMessage</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是当我们运行时，就会报出这样的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Exception in thread <span class="s2">&quot;main&quot;</span> java.lang.IllegalArgumentException: Parameter specified as non-null is null: method StringExtKt.dumpStringMessage, parameter message
</span><span class='line'>  at StringExtKt.dumpStringMessage<span class="o">(</span>StringExt.kt<span class="o">)</span>
</span><span class='line'>  at JavaTest.test<span class="o">(</span>JavaTest.java:5<span class="o">)</span>
</span><span class='line'>  at MainKt.main<span class="o">(</span>Main.kt:3<span class="o">)</span>
</span><span class='line'>  at MainKt.main<span class="o">(</span>Main.kt<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Process finished with <span class="nb">exit </span>code 1
</span></code></pre></td></tr></table></div></figure>


<p>所以考虑到方法被Java调用的情况，Kotlin会默认的增加<code>checkParameterIsNotNull</code>校验。</p>

<h2>Intrinsics.checkParameterIsNotNull 一直都有么？</h2>

<p>不过好在Kotlin编译器还是足够聪明的，对于不能被Java直接调用的方法，就不会增加相关处理。</p>

<p>比如标记为private的方法，通常情况下，不会被java调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">innerDumpStringMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;innerDumpStringMessage=$message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译成的如下代码，就没有<code>Intrinsics.checkParameterIsNotNull</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">innerDumpStringMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var1</span> <span class="o">=</span> <span class="s">&quot;innerDumpStringMessage=&quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var1</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Intrinsics.checkParameterIsNotNull 的好处</h2>

<h3>定位排查问题快捷</h3>

<p>上面代码的好处之一就是对于代码混淆之后，可以相对更加方便的定位问题。</p>

<p>比如这段代码，经过混淆之后，运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaMethod</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">callKotlin</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">KotlinCodeKt</span><span class="o">.</span><span class="na">dumpMessage</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到如下的崩溃日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">RuntimeException</span><span class="o">:</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">start</span> <span class="n">activity</span> <span class="n">ComponentInfo</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">}:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalArgumentException</span><span class="o">:</span> <span class="n">Parameter</span> <span class="n">specified</span> <span class="n">as</span> <span class="n">non</span><span class="o">-</span><span class="kc">null</span> <span class="n">is</span> <span class="kc">null</span><span class="o">:</span> <span class="n">method</span> <span class="n">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">parameter</span> <span class="n">message</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2927</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">handleLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2988</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.-</span><span class="n">wrap14</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="n">$H</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1631</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">154</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6682</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1520</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1410</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalArgumentException</span><span class="o">:</span> <span class="n">Parameter</span> <span class="n">specified</span> <span class="n">as</span> <span class="n">non</span><span class="o">-</span><span class="kc">null</span> <span class="n">is</span> <span class="kc">null</span><span class="o">:</span> <span class="n">method</span> <span class="n">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">parameter</span> <span class="n">message</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6942</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1126</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2880</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="o">...</span> <span class="mi">9</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们可以清晰的看到出问题的参数名称，定位出问题的位置。</p>

<h2>其他好处</h2>

<ul>
<li>对于先决条件（参数和状态）提前判断可以避免很多不必要的资源消耗。</li>
<li>避免不必要的状态产生</li>
</ul>


<h2>Intrinsics的问题</h2>

<p>刚才我们提到了Intrinsics可以辅助混淆情况下定位排查问题，但是同时也带来了一个问题，那就是</p>

<ul>
<li>为混淆之后逆向工程提供了更多的帮助。</li>
</ul>


<p>除此之外，还有人担心Intrinsics是不是存在这样的问题</p>

<ul>
<li>Intrinsics调用和返回带来进栈出栈操作，而Intrinsics为java实现，无法在编译时inline，会不会有性能问题</li>
</ul>


<p>对于性能的担忧可以说是有些过于杞人忧天了，不过还在好在Kotlin提供了方法来消除这种不必要的过虑。当然也能解决逆向混淆的问题。</p>

<h2>编译时去除Intrinsics检查</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">Xno</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">assertions</span>      <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">generate</span> <span class="n">not</span><span class="o">-</span><span class="kc">null</span> <span class="n">assertions</span> <span class="n">on</span> <span class="n">parameters</span> <span class="n">of</span> <span class="n">methods</span> <span class="n">accessible</span> <span class="n">from</span> <span class="n">Java</span>
</span><span class='line'><span class="o">-</span><span class="n">Xno</span><span class="o">-</span><span class="n">receiver</span><span class="o">-</span><span class="n">assertions</span>   <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">generate</span> <span class="n">not</span><span class="o">-</span><span class="kc">null</span> <span class="n">assertion</span> <span class="k">for</span> <span class="n">extension</span> <span class="n">receiver</span> <span class="n">arguments</span> <span class="n">of</span> <span class="n">platform</span> <span class="n">types</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体的实施方法，可以参考另一篇文章<a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">为 Kotlin 项目设置编译选项</a></p>

<h2>其他Intrinsics出现的场景</h2>

<h3>checkExpressionValueIsNotNull</h3>

<p>当Kotlin 调用 Java 获取表达式结果后需要进行操作时，会增加<code>Intrinsics.checkExpressionValueIsNotNull</code>校验</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Intrinsics.checkExpressionValueIsNotNull(var10000, &quot;JavaUtil.getBook()&quot;);</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">test1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">book</span><span class="p">:</span> <span class="n">Book</span> <span class="p">=</span> <span class="n">JavaUtil</span><span class="p">.</span><span class="n">getBook</span><span class="p">()</span>
</span><span class='line'>    <span class="n">book</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Intrinsics.throwNpe</h3>

<p>当使用<code>!!</code>非空断言时，会有校验非空断言结果的检查，如果有问题，则抛出NPE.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * if (message == null) {</span>
</span><span class='line'><span class="cm">       Intrinsics.throwNpe();</span>
</span><span class='line'><span class="cm">   }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">test2</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">message</span><span class="p">!!.</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>throwUninitializedPropertyAccessException</h3>

<p>当尝试访问一个lateinit的属性时，会增加是否初始化的判断，如果有问题，会抛出异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Movie</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="c1">//Intrinsics.throwUninitializedPropertyAccessException(&quot;name&quot;);</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dump</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是关于Kotlin编译与 Intrinsics 检查的内容。Enjoy.</p>

<h2>相关文章推荐阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">为 Kotlin 项目设置编译选项</a></li>
<li><a href="https://droidyue.com/blog/2019/07/14/search-bytecode-script-to-study-kotlin-better/">一个查找字节码更好研究Kotlin的脚本</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">其他Kotlin优质文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin编译调校之WarningsAsErrors]]></title>
    <link href="https://droidyue.com/blog/2019/08/03/kotlinc-config-warnings-as-errors/"/>
    <updated>2019-08-03T14:21:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/03/kotlinc-config-warnings-as-errors</id>
    <content type="html"><![CDATA[<p>这之前的文章中，我们介绍过如果通过Kotlin编译器参数实现将所有的warnings按照errors对待，主要的实现方法是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>//Code to be added
</span><span class='line'>kotlinOptions <span class="o">{</span>
</span><span class='line'>    <span class="nv">allWarningsAsErrors</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>那么问题可能就会被提出来，开启这一选项有什么好处呢，毕竟我需要修改很多文件。</p>

<p>通常情况下，开启后的作用，我们可以归纳为如下</p>

<ul>
<li>发现更多的潜在问题和崩溃</li>
<li>减少不必要的代码（变量，参数）</li>
<li>发现不好的编码实践</li>
<li>发现更多的API弃用问题</li>
<li>最终增加代码的健壮性和优雅程度</li>
</ul>


<p>如下，我们会通过一些实践来说明一些问题</p>

<h2>Nothing to Inline（作用不大的内联）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;NOTHING_TO_INLINE&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="n">String</span><span class="p">?.</span><span class="n">isNotNullNorEmpty</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Expected performance impact of inlining </span>
</span><span class='line'>    <span class="c1">// &#39;public inline fun String?.isNotNullNorEmpty(): Boolean </span>
</span><span class='line'>    <span class="c1">// defined in com.example.warningsaserrorscases in file NothingToInlineWarnings.kt&#39;</span>
</span><span class='line'>    <span class="c1">// is insignificant. </span>
</span><span class='line'>    <span class="c1">// Inlining works best for functions with parameters of functional types</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Kotlin的inline关键字会将对应的方法内联到调用者的方法体，减少进栈出栈操作</li>
<li>inline最好的场景是处理函数类型参数，比如lambda</li>
<li>刻意的inline可能导致方法体膨胀，增大class文件大小。</li>
<li>处理这种警告，建议是去除inline关键字</li>
<li>如果执意inline时，使用<code>@Suppress("NOTHING_TO_INLINE")</code>压制编译器警告</li>
</ul>


<h2>INACCESSIBLE_TYPE(不可访问的类型)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">RequestManager</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RequestManager</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TimelineRequest</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="n">from</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TimelineRequest</span> <span class="nf">getTimelineRequest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">TimelineRequest</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testInaccessibleType</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Type RequestManager.TimelineRequest! is inaccessible in this context</span>
</span><span class='line'>    <span class="c1">// due to: private open class TimelineRequest defined</span>
</span><span class='line'>    <span class="c1">// in com.example.warningsaserrorscases.RequestManager</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;INACCESSIBLE_TYPE&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">RequestManager</span><span class="p">.</span><span class="n">sInstance</span><span class="p">.</span><span class="n">timelineRequest</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上述的<code>testInaccessibleType</code>无法访问<code>TimelineRequest</code>的属性和方法</li>
<li>具体的解决办法，可以是设置<code>TimelineRequest</code>为public，而非private</li>
<li>必要时可以使用<code>@Suppress("INACCESSIBLE_TYPE")</code>压制警告</li>
</ul>


<h2>UNCHECKED_CAST(未检查的类型转换)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Unchecked cast: Any to T</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNCHECKED_CAST&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面<code>this as? T</code>属于未检查的类型转换，可能在运行时抛出转换异常</li>
<li>不推荐使用<code>@Suppress("UNCHECKED_CAST")</code>压制警告</li>
<li>推荐使用reified方式处理</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//a better way</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>WHEN_ENUM_CAN_BE_NULL_IN_JAVA(Enum 可能为null)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testEnum1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Enum argument can be null in Java, but exhaustive when contains no null branch</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">SeasonUtil</span><span class="p">.</span><span class="n">getCurrentSeason</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SPRING</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Spring&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SUMMER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Summer&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">FALL</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Fall&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">WINTER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Winter&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">//else -&gt; println(&quot;unknown&quot;)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testEnum2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Enum argument can be null in Java, but exhaustive when contains no null branch</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;WHEN_ENUM_CAN_BE_NULL_IN_JAVA&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">SeasonUtil</span><span class="p">.</span><span class="n">getCurrentSeason</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SPRING</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Spring&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SUMMER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Summer&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">FALL</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Fall&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">WINTER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Winter&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上述的<code>SeasonUtil.getCurrentSeason()</code>可能为null</li>
<li>建议增加<code>else -&gt; println("unknown")</code>处理when的缺省情况</li>
<li>不建议使用<code>@Suppress("WHEN_ENUM_CAN_BE_NULL_IN_JAVA")</code>压制警告</li>
</ul>


<h2>PARAMETER_NAME_CHANGED_ON_OVERRIDE(方法重写修改参数名)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">interface</span> <span class="n">OnViewClickedListener</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onViewClicked</span><span class="p">(</span><span class="n">viewId</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testParameterNameChangedOnOverride</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The corresponding parameter in the supertype &#39;OnViewClickedListener&#39;</span>
</span><span class='line'>    <span class="c1">// is named &#39;viewId&#39;.</span>
</span><span class='line'>    <span class="c1">// This may cause problems when calling this function with named arguments.</span>
</span><span class='line'>    <span class="n">object</span> <span class="p">:</span> <span class="n">OnViewClickedListener</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onViewClicked</span><span class="p">(</span><span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;PARAMETER_NAME_CHANGED_ON_OVERRIDE&quot;</span><span class="p">)</span> <span class="n">id</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;onViewClicked id=$id&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>出问题的情况是当我们使用具名变量指定参数值时，可能出问题。</li>
<li>建议方法参数与源方法保持一致。</li>
<li>不建议压制警告</li>
</ul>


<h2>Name shadowing（命名遮挡）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testNameShadowing</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">run</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Name shadowed: message</span>
</span><span class='line'>        <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;NAME_SHADOWING&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当run方法后面的lambda中的message与<code>testNameShadowing</code>的message命名一致时，就发生了所谓的Name shadowing（命名遮挡）</li>
<li>Name shadowing很容易导致问题，且排查起来不易察觉。</li>
<li>建议主动通过命名差异来解决这个问题</li>
<li>不建议压制警告</li>
</ul>


<h2>Uncessary cases (不必要的编码场景)</h2>

<h3>UNNECESSARY_SAFE_CALL(不必要的安全调用)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUnnecessarySafeCall</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNNECESSARY_SAFE_CALL&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">?.</span><span class="n">toIntOrNull</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上述的安全调用其实是显得多余，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>另外安全调用会增加if条件检查</li>
<li>建议主动移不必要的安全调用</li>
<li>不建议压制警告</li>
</ul>


<h3>SENSELESS_COMPARISON(无意义的比较)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testSenselessComparison</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Condition &#39;message != null&#39; is always &#39;true&#39;</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;SENSELESS_COMPARISON&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">message</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>和前面的例子一样，这种检查是多余的，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>建议主动移除无意义的比较</li>
<li>不建议压制警告</li>
</ul>


<h3>UNNECESSARY_NOT_NULL_ASSERTION（不需要的非空断言）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUncessaryNotNullAssertion</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Unnecessary non-null assertion (!!) on a non-null receiver</span>
</span><span class='line'>    <span class="c1">// of type String</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNNECESSARY_NOT_NULL_ASSERTION&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">!!.</span><span class="n">toIntOrNull</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这种断言是多余的，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>建议主动移除不需要的非空断言</li>
<li>不建议压制警告</li>
</ul>


<h3>USELESS_IS_CHECK(没有用的实例类型检查)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUselessIsCheck</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Check for instance is always &#39;true&#39;</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;USELESS_IS_CHECK&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">message</span> <span class="k">is</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>没有意义的类型检查，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>建议主动移除不必要的检查</li>
<li>不建议压制警告</li>
</ul>


<h3>VARIABLE_WITH_REDUNDANT_INITIALIZER(变量初始化多余)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testVariableWithRedundantInitializer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Variable &#39;message&#39; initializer is redundant</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;VARIABLE_WITH_REDUNDANT_INITIALIZER&quot;</span><span class="p">)</span> <span class="k">var</span> <span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">message</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">().</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>建议手动移除多余的初始化</li>
<li>不建议压制警告</li>
</ul>


<h2>Deprecation (方法弃用)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testGetDrawable</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;DEPRECATION&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">resources</span><span class="p">.</span><span class="n">getDrawable</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">mipmap</span><span class="p">.</span><span class="n">ic_launcher</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>建议的方法是寻找替代弃用方法的其他方法，以getDrawable为例，我们可以使用</p>

<ul>
<li><code>ContextCompat.getDrawable(getActivity(), R.drawable.name);</code></li>
<li><code>ResourcesCompat.getDrawable(getResources(), R.drawable.name, null);</code></li>
<li><code>ResourcesCompat.getDrawable(getResources(), R.drawable.name, anotherTheme);</code></li>
<li>必要时可以选择压制警告</li>
</ul>


<h2>unsued cases(开发者编码没有用到的情况)</h2>

<h3>Parameter &lsquo;extra&rsquo; is never used(参数没有使用)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">showMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">extra</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决方法</p>

<ul>
<li>移除extra参数</li>
<li>方法中使用extra参数</li>
<li>使用<code>@Suppress("UNUSED_PARAMETER")</code>压制警告</li>
</ul>


<h3>Parameter &lsquo;index&rsquo; is never used, could be renamed to _（匿名参数没有使用，可以使用占位符）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">forEachList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">).</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">s</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将<code>index</code>改成占位符<code>_</code></li>
<li>使用<code>@Suppress("UNUSED_ANONYMOUS_PARAMETER")</code>压制警告</li>
</ul>


<h2>Variable &lsquo;currentTimeStamp&rsquo; is never used(变量未使用)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">unusedVariable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNUSED_VARIABLE&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="n">currentTimeStamp</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;unusedVariable&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除变量</li>
<li>使用@Suppress压制警告</li>
</ul>


<h2>The expression is unused(表达式未使用)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">test</span><span class="p">(</span><span class="n">status</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span> <span class="p">-&gt;</span> <span class="s">&quot;First&quot;</span>
</span><span class='line'>        <span class="m">2</span> <span class="p">-&gt;</span> <span class="s">&quot;Second&quot;</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">&quot;Else&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除不用的表达式</li>
<li>使用<code>Suppress</code>压制警告</li>
</ul>


<h2>UNUSED_VALUE &amp;&amp; ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE (未使用的值，赋值后未使用的变量)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUnusedValue</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The value &#39;&quot;Hello&quot;&#39; assigned to &#39;var message: String?</span>
</span><span class='line'>    <span class="c1">// defined in com.example.warningsaserrorscases.test&#39; is never used</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE&quot;</span><span class="p">)</span> <span class="k">var</span> <span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNUSED_VALUE&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除不用变量</li>
<li>使用<code>Suppress</code>压制警告</li>
</ul>


<h2>关于@Suppress</h2>

<ul>
<li>不建议滥用，因优先考虑其他的更好的解决问题的方式</li>
<li>及时使用一定要限定最小作用范围，通常的选择范围尽量限制在变量(variable)，参数(parameter)或者语句(statement)上。</li>
<li>上面代码中出现了很多<code>@Suppress</code>主要目的是显示警告的名称，而不是提倡大家使用压制的方式处理警告。</li>
</ul>


<p>以上。</p>

<h2>相关文章</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">为 Kotlin 项目设置编译选项</a></li>
<li><a href="https://droidyue.com/blog/2019/07/28/kotlin-reified-generics/">使用Kotlin Reified 让泛型更简单安全</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多Kotlin优质内容</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Kotlin reified 让泛型更简单安全]]></title>
    <link href="https://droidyue.com/blog/2019/07/28/kotlin-reified-generics/"/>
    <updated>2019-07-28T18:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/28/kotlin-reified-generics</id>
    <content type="html"><![CDATA[<p>我们在编程中，出于复用和高效的目的，我们使用到了泛型。但是泛型在JVM底层采取了类型擦除的实现机制，Kotlin也是这样。然后这也带来了一些问题和对应的解决方案。这里我们介绍一个reified用法，来实现更好的处理泛型。</p>

<!--more-->


<h2>类型擦除</h2>

<p>如下面的代码，在编译成class文件后，就采用了类型擦除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTypeErasure</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>list实例真实的保存是多个<code>Object</code></li>
<li><code>list.add("123")</code>实际上是<code>"123"</code>作为<code>Object</code>存入集合中</li>
<li><code>System.out.println(list.get(0));</code>是从<code>list</code>实例中读取出来<code>Object</code>然后转换成<code>String</code>才能使用的</li>
</ul>


<p>辅助证明的字节码内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestTypeErasure.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTypeErasure</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//省略部分代码</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Field list:Ljava/util/List;</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// String 123</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">6</span><span class="o">,</span>  <span class="mi">2</span>            <span class="c1">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Field list:Ljava/util/List;</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">8</span><span class="o">,</span>  <span class="mi">2</span>            <span class="c1">// InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span>
</span><span class='line'>      <span class="mi">25</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// class java/lang/String</span>
</span><span class='line'>      <span class="mi">28</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中</p>

<ul>
<li>第6行对应的<code>6: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</code> 对应添加元素参数的类型为<code>Object</code></li>
<li>第20行对应的<code>20: invokeinterface #8,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</code> 对应的获取元素的返回类型为<code>Object</code></li>
<li>第25行为进行类型转换操作</li>
</ul>


<h2>类型擦除带来的问题</h2>

<h3>安全问题:未检查的异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//unchecked cast</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Int</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的代码会导致编译器警告<code>unchecked cast</code></li>
<li>上面的代码由于在转换类型时，没有进行检查，所以有可能会导致运行时崩溃</li>
</ul>


<p>当我们执行这样的代码时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testCast</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="m">1.</span><span class="n">toType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>会得到<code>java.lang.Integer cannot be cast to java.lang.String</code>的类型错误。</p>

<h3>显式传递Class</h3>

<p>针对前面的问题，我们最常用的办法就是显式传递class信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//need pass class explicitly</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">(</span><span class="n">clazz</span><span class="p">:</span> <span class="n">Class</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;):</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="n">clazz</span><span class="p">.</span><span class="n">isInstance</span><span class="p">(</span><span class="k">this</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是显式传递Class信息也会感觉有一些问题，尤其是下面这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">clazz</span><span class="p">:</span> <span class="n">Class</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Long</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Long</span><span class="p">)</span>
</span><span class='line'>        <span class="n">String</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Char</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Char</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Int</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的代码（传value值和clazz）我们会感觉到明显的有一些笨拙，不够智能。</li>
<li>但是这也是基于Java的类型擦除机制导致无法再运行时得到<code>T</code>的类型信息，无法改进（至少在Java中）</li>
</ul>


<h3>可能导致更多方法的产生</h3>

<p>同时，由于上面的显式传递Class信息比较麻烦和崩溃，我们有时候会增加更多的方法，比如下面的这样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Bundle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Bundle.putInt key=$key;value=$value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Long</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putString</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的<code>putInt</code>,<code>putLong</code>,<code>putString</code>和<code>putChar</code>没有泛型引入</li>
<li>我们没有排除显式传递Class参数之外的优雅实现，比如我们只提供一个叫做<code>put(key: String,value: T)</code></li>
</ul>


<h2>reified 方式</h2>

<p>不过，好在Kotlin有一个对应的解决方案，这就是我们今天文章标题提到的reified（中文意思：具体化）</p>

<p>使用reified很简单，主要分为两步</p>

<ul>
<li>在泛型类型前面增加<code>reified</code></li>
<li>在方法前面增加<code>inline</code>（必需的）</li>
</ul>


<p>接下来我们使用reified改进之前的方法</p>

<h3>类型转换改进后的代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//much better way using reified</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">asType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法传参不需要多余传递参数类型信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Long</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">String</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Char</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Int</span><span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>reified实现原理</h2>

<p>不是说，泛型是使用了类型擦除么，为什么运行时能得到<code>T</code>的类型信息呢？</p>

<p>是的，采用类型擦除没有错，至于能在运行时得到<code>T</code>的类型信息是如何做到的，就需要了解<code>reified</code>的内部机制了。</p>

<p>其原理为</p>

<ul>
<li>Kotlin编译器会将reified方法<code>asType</code>内联(inline)到调用的地方(call-site)</li>
<li>方法被内联到调用的地方后，泛型T会被替换成具体的类型</li>
</ul>


<p>所以 <strong>reified 使得泛型的方法假装在运行时能够获取泛型的类信息</strong></p>

<p>为了便于理解，我们举个例子，如下是我们的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testCast2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="m">1.</span><span class="n">asType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的反编译后的java代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testCast2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">$this$asType$iv</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$asType</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var10000</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)(</span><span class="n">$this$asType$iv</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">?</span> <span class="n">$this$asType$iv</span> <span class="o">:</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var3</span><span class="o">;</span>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 后续的代码对应的Kotlin代码(也包含了部分call-site的逻辑，比如substring)</span>
</span><span class='line'><span class="cm">   return if (this is T) {</span>
</span><span class='line'><span class="cm">        this</span>
</span><span class='line'><span class="cm">      } else {</span>
</span><span class='line'><span class="cm">        null</span>
</span><span class='line'><span class="cm">      }</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//inline和reified替换开始</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">((</span><span class="n">String</span><span class="o">)(</span><span class="n">$this$asType$iv</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">?</span> <span class="n">$this$asType$iv</span> <span class="o">:</span> <span class="kc">null</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var3</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">byte</span> <span class="n">var4</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(</span><span class="n">var3</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">TypeCastException</span><span class="o">(</span><span class="s">&quot;null cannot be cast to non-null type java.lang.String&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="n">var3</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">var4</span><span class="o">);</span>
</span><span class='line'>         <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkExpressionValueIsNotNull</span><span class="o">(</span><span class="n">var10000</span><span class="o">,</span> <span class="s">&quot;(this as java.lang.String).substring(startIndex)&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//inline和reified替换结束</span>
</span><span class='line'>      <span class="n">var3</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>      <span class="n">$i$f$asType</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var3</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>all in(lined)?</h2>

<p>既然是inline，应该是把被inline的方法全部提取到调用处(call-site)吧？</p>

<ul>
<li>是的，通常是这样，不过reified可能有一些差异</li>
<li>reified方法并不会完全inline所有的方法实现，而是更加智能一些的类型匹配中断提取。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusLong</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">1000L</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusChar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusInt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次贴一些Bundle.plus实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Long</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">String</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Char</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Int</span><span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的when表达式的类型检查次序依次为</p>

<ul>
<li>Long</li>
<li>String</li>
<li>Char</li>
<li>Int</li>
</ul>


<p>反编译后的方法如下(类型不同，提取的方法体也不同)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusLong</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="mi">1000L</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//第一个就是Long类型，无需包含后面的检查代码</span>
</span><span class='line'>      <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="s">&quot;World&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//不是Long类型，需要继续匹配，找到String类型，终止inline后续代码</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusChar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="sc">&#39;h&#39;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//不是Long类型，需要继续匹配，</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//不是String类型，需要继续匹配，</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="c1">//找到String类型，终止inline后续代码</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putChar</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusInt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//最差的一种情况，inline全部的方法体实现</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Character</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putChar</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">Character</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是关于reified的内容，其实在Kotlin中有很多的特性是依赖于编译器的工作来实现的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Kotlin 项目设置编译选项]]></title>
    <link href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/"/>
    <updated>2019-07-21T20:15:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options</id>
    <content type="html"><![CDATA[<p>经常用终端的人都知道，终端命令有很多选项可以指定，这里我们以相关的<code>kotlinc</code>为例，我们可以在终端这样指定选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kotlinc -Werror ./app/src/main/java/com/example/compileroptionssample/Simple.kt
</span><span class='line'>error: warnings found and -Werror specified
</span><span class='line'>app/src/main/java/com/example/compileroptionssample/Simple.kt:4:19: warning: unnecessary safe call on a non-null receiver of <span class="nb">type </span>String
</span><span class='line'>    println<span class="o">(</span>string?.toString<span class="o">())</span>
</span><span class='line'>                  ^
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>上面的代码</p>

<ul>
<li>我们指定了-Werror 意思是当编译器遇到了警告时当做错误抛出，中断执行。</li>
<li>上面的命令执行中断，不会导致class文件生成</li>
</ul>


<h2>编译选项有哪些</h2>

<p>Kotlin的编译选项分为标准选项和高级选项</p>

<p>如下是一些标准选项的内容(使用<code>kotlinc -help</code>获取)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kotlinc -help
</span><span class='line'>Usage: kotlinc-jvm &lt;options&gt; &lt;<span class="nb">source </span>files&gt;
</span><span class='line'>where possible options include:
</span><span class='line'>  -classpath <span class="o">(</span>-cp<span class="o">)</span> &lt;path&gt;    Paths where to find user class files
</span><span class='line'>  -d &lt;directory|jar&gt;         Destination <span class="k">for </span>generated class files
</span><span class='line'>  -include-runtime           Include Kotlin runtime in to resulting .jar
</span><span class='line'>  -java-parameters           Generate metadata <span class="k">for </span>Java 1.8 reflection on method parameters
</span><span class='line'>  -jdk-home &lt;path&gt;           Path to JDK home directory to include into classpath, <span class="k">if </span>differs from default JAVA_HOME
</span><span class='line'>  -jvm-target &lt;version&gt;      Target version of the generated JVM bytecode <span class="o">(</span>1.6 or 1.8<span class="o">)</span>, default is 1.6
</span><span class='line'>  -module-name &lt;name&gt;        Name of the generated .kotlin_module file
</span><span class='line'>  -no-jdk                    Don<span class="s1">&#39;t include Java runtime into classpath</span>
</span><span class='line'><span class="s1">  -no-reflect                Don&#39;</span>t include kotlin-reflect.jar into classpath
</span><span class='line'>  -no-stdlib                 Don<span class="err">&#39;</span>t include kotlin-stdlib.jar or kotlin-reflect.jar into classpath
</span><span class='line'>  -script                    Evaluate the script file
</span><span class='line'>  -script-templates &lt;fully qualified class name<span class="o">[</span>,<span class="o">]</span>&gt;
</span><span class='line'>                             Script definition template classes
</span><span class='line'>  -Werror                    Report an error <span class="k">if </span>there are any warnings
</span><span class='line'>  -api-version &lt;version&gt;     Allow to use declarations only from the specified version of bundled libraries
</span><span class='line'>  -X                         Print a synopsis of advanced options
</span><span class='line'>  -help <span class="o">(</span>-h<span class="o">)</span>                 Print a synopsis of standard options
</span><span class='line'>  -kotlin-home &lt;path&gt;        Path to Kotlin compiler home directory, used <span class="k">for </span>runtime libraries discovery
</span><span class='line'>  -language-version &lt;version&gt; Provide <span class="nb">source </span>compatibility with specified language version
</span><span class='line'>  -P plugin:&lt;pluginId&gt;:&lt;optionName&gt;<span class="o">=</span>&lt;value&gt;
</span><span class='line'>                             Pass an option to a plugin
</span><span class='line'>  -progressive               Enable progressive compiler mode.
</span><span class='line'>                             In this mode, deprecations and bug fixes <span class="k">for </span>unstable code take effect immediately,
</span><span class='line'>                             instead of going through a graceful migration cycle.
</span><span class='line'>                             Code written in the progressive mode is backward compatible; however, code written in
</span><span class='line'>                             non-progressive mode may cause compilation errors in the progressive mode.
</span><span class='line'>  -nowarn                    Generate no warnings
</span><span class='line'>  -verbose                   Enable verbose logging output
</span><span class='line'>  -version                   Display compiler version
</span><span class='line'>  @&lt;argfile&gt;                 Expand compiler arguments from the given file, containing one argument or file path per line
</span></code></pre></td></tr></table></div></figure>


<p>如下是更加高级的选项(使用<code>kotlinc -X</code>获取)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> kotlinc -X
</span><span class='line'>Usage: kotlinc-jvm &lt;options&gt; &lt;<span class="nb">source </span>files&gt;
</span><span class='line'>where advanced options include:
</span><span class='line'>  -Xadd-compiler-builtins    Add definitions of built-in declarations to the compilation classpath <span class="o">(</span>useful with -no-stdlib<span class="o">)</span>
</span><span class='line'>  -Xadd-modules<span class="o">=</span>&lt;module<span class="o">[</span>,<span class="o">]</span>&gt;  Root modules to resolve in addition to the initial modules,
</span><span class='line'>                             or all modules on the module path <span class="k">if</span> &lt;module&gt; is ALL-MODULE-PATH
</span><span class='line'>  -Xassertions<span class="o">={</span>always-enable|always-disable|jvm|legacy<span class="o">}</span>
</span><span class='line'>                             Assert calls behaviour
</span><span class='line'>                             -Xassertions<span class="o">=</span>always-enable:  <span class="nb">enable</span>, ignore jvm assertion settings;
</span><span class='line'>                             -Xassertions<span class="o">=</span>always-disable: disable, ignore jvm assertion settings;
</span><span class='line'>                             -Xassertions<span class="o">=</span>jvm:            <span class="nb">enable</span>, depend on jvm assertion settings;
</span><span class='line'>                             -Xassertions<span class="o">=</span>legacy:         calculate condition on each call, check depends on jvm assertion settings in the kotlin package;
</span><span class='line'>                             default: legacy
</span><span class='line'>  -Xbuild-file<span class="o">=</span>&lt;path&gt;        Path to the .xml build file to compile
</span><span class='line'>  -Xcompile-java             Reuse javac analysis and compile Java <span class="nb">source </span>files
</span><span class='line'>  -Xnormalize-constructor-calls<span class="o">={</span>disable|enable<span class="o">}</span>
</span><span class='line'>                             Normalize constructor calls <span class="o">(</span>disable: don<span class="s1">&#39;t normalize; enable: normalize),</span>
</span><span class='line'><span class="s1">                             default is &#39;</span>disable<span class="s1">&#39; in language version 1.2 and below,</span>
</span><span class='line'><span class="s1">                             &#39;</span><span class="nb">enable</span><span class="s1">&#39; since language version 1.3</span>
</span><span class='line'><span class="s1">  -Xdump-declarations-to=&lt;path&gt; Path to JSON file to dump Java to Kotlin declaration mappings</span>
</span><span class='line'><span class="s1">  -Xdisable-default-scripting-plugin</span>
</span><span class='line'><span class="s1">                             Do not enable scripting plugin by default</span>
</span><span class='line'><span class="s1">  -Xdisable-standard-script  Disable standard kotlin script support</span>
</span><span class='line'><span class="s1">  -Xfriend-paths=&lt;path&gt;      Paths to output directories for friend modules (whose internals should be visible)</span>
</span><span class='line'><span class="s1">  -Xmultifile-parts-inherit  Compile multifile classes as a hierarchy of parts and facade</span>
</span><span class='line'><span class="s1">  -Xmodule-path=&lt;path&gt;       Paths where to find Java 9+ modules</span>
</span><span class='line'><span class="s1">  -Xjavac-arguments=&lt;option[,]&gt; Java compiler arguments</span>
</span><span class='line'><span class="s1">  -Xjsr305={ignore/strict/warn}|under-migration:{ignore/strict/warn}|@&lt;fq.name&gt;:{ignore/strict/warn}</span>
</span><span class='line'><span class="s1">                             Specify behavior for JSR-305 nullability annotations:</span>
</span><span class='line'><span class="s1">                             -Xjsr305={ignore/strict/warn}                   globally (all non-@UnderMigration annotations)</span>
</span><span class='line'><span class="s1">                             -Xjsr305=under-migration:{ignore/strict/warn}   all @UnderMigration annotations</span>
</span><span class='line'><span class="s1">                             -Xjsr305=@&lt;fq.name&gt;:{ignore/strict/warn}        annotation with the given fully qualified class name</span>
</span><span class='line'><span class="s1">                             Modes:</span>
</span><span class='line'><span class="s1">                               * ignore</span>
</span><span class='line'><span class="s1">                               * strict (experimental; treat as other supported nullability annotations)</span>
</span><span class='line'><span class="s1">                               * warn (report a warning)</span>
</span><span class='line'><span class="s1">  -Xjvm-default={disable|enable|compatibility}</span>
</span><span class='line'><span class="s1">                             Allow to use &#39;</span>@JvmDefault<span class="s1">&#39; annotation for JVM default method support.</span>
</span><span class='line'><span class="s1">                             -Xjvm-default=disable         Prohibit usages of @JvmDefault</span>
</span><span class='line'><span class="s1">                             -Xjvm-default=enable          Allow usages of @JvmDefault; only generate the default method</span>
</span><span class='line'><span class="s1">                                                           in the interface (annotating an existing method can break binary compatibility)</span>
</span><span class='line'><span class="s1">                             -Xjvm-default=compatibility   Allow usages of @JvmDefault; generate a compatibility accessor</span>
</span><span class='line'><span class="s1">                                                           in the &#39;</span>DefaultImpls<span class="s1">&#39; class in addition to the interface method</span>
</span><span class='line'><span class="s1">  -Xload-builtins-from-dependencies</span>
</span><span class='line'><span class="s1">                             Load definitions of built-in declarations from module dependencies, instead of from the compiler</span>
</span><span class='line'><span class="s1">  -Xno-call-assertions       Don&#39;</span>t generate not-null assertions <span class="k">for </span>arguments of platform types
</span><span class='line'>  -Xno-exception-on-explicit-equals-for-boxed-null
</span><span class='line'>                             Do not throw NPE on explicit <span class="s1">&#39;equals&#39;</span> call <span class="k">for </span>null receiver of platform boxed primitive <span class="nb">type</span>
</span><span class='line'>  -Xno-optimize              Disable optimizations
</span><span class='line'>  -Xno-param-assertions      Don<span class="s1">&#39;t generate not-null assertions on parameters of methods accessible from Java</span>
</span><span class='line'><span class="s1">  -Xno-receiver-assertions   Don&#39;</span>t generate not-null assertion <span class="k">for </span>extension receiver arguments of platform types
</span><span class='line'>  -Xsanitize-parentheses     Transform <span class="s1">&#39;(&#39;</span> and <span class="s1">&#39;)&#39;</span> in method names to some other character sequence.
</span><span class='line'>                             This mode can BREAK BINARY COMPATIBILITY and is only supposed to be used as a workaround
</span><span class='line'>                             of an issue in the ASM bytecode framework. See KT-29475 <span class="k">for </span>more details
</span><span class='line'>  -Xscript-resolver-environment<span class="o">=</span>&lt;<span class="nv">key</span><span class="o">=</span>value<span class="o">[</span>,<span class="o">]</span>&gt;
</span><span class='line'>                             Script resolver environment in key-value pairs <span class="o">(</span>the value could be quoted and escaped<span class="o">)</span>
</span><span class='line'>  -Xsingle-module            Combine modules <span class="k">for </span><span class="nb">source </span>files and binary dependencies into a single module
</span><span class='line'>  -Xskip-runtime-version-check Allow Kotlin runtime libraries of incompatible versions in the classpath
</span><span class='line'>  -Xstrict-java-nullability-assertions
</span><span class='line'>                             Generate nullability assertions <span class="k">for </span>non-null Java expressions
</span><span class='line'>  -Xgenerate-strict-metadata-version
</span><span class='line'>                             Generate metadata with strict version semantics <span class="o">(</span>see kdoc on Metadata.extraInt<span class="o">)</span>
</span><span class='line'>  -Xsupport-compatqual-checker-framework-annotations<span class="o">=</span><span class="nb">enable</span>|disable
</span><span class='line'>                             Specify behavior <span class="k">for </span>Checker Framework compatqual annotations <span class="o">(</span>NullableDecl/NonNullDecl<span class="o">)</span>.
</span><span class='line'>                             Default value is <span class="s1">&#39;enable&#39;</span>
</span><span class='line'>  -Xuse-ir                   Use the IR backend
</span><span class='line'>  -Xuse-javac                Use javac <span class="k">for </span>Java <span class="nb">source </span>and class files analysis
</span><span class='line'>  -Xuse-old-class-files-reading Use old class files reading implementation. This may slow down the build and cause problems with Groovy interop.
</span><span class='line'>                             Should be used in <span class="k">case </span>of problems with the new implementation
</span><span class='line'>  -Xuse-type-table           Use <span class="nb">type </span>table in metadata serialization
</span><span class='line'>  -Xallow-kotlin-package     Allow compiling code in package <span class="s1">&#39;kotlin&#39;</span> and allow not requiring kotlin.stdlib in module-info
</span><span class='line'>  -Xallow-result-return-type Allow compiling code when <span class="sb">`</span>kotlin.Result<span class="sb">`</span> is used as a <span class="k">return </span><span class="nb">type</span>
</span><span class='line'>  -Xcommon-sources<span class="o">=</span>&lt;path&gt;    Sources of the common module that need to be compiled together with this module in the multi-platform mode.
</span><span class='line'>                             Should be a subset of sources passed as free arguments
</span><span class='line'>  -Xcoroutines<span class="o">={</span><span class="nb">enable</span>|warn|error<span class="o">}</span>
</span><span class='line'>                             Enable coroutines or report warnings or errors on declarations and use sites of <span class="s1">&#39;suspend&#39;</span> modifier
</span><span class='line'>  -Xdisable-phases           Disable backend phases
</span><span class='line'>  -Xdump-perf<span class="o">=</span>&lt;path&gt;         Dump detailed performance statistics to the specified file
</span><span class='line'>  -Xeffect-system            Enable experimental language feature: effect system
</span><span class='line'>  -Xexperimental<span class="o">=</span>&lt;fq.name&gt;   Enable and propagate usages of experimental API <span class="k">for </span>marker annotation with the given fully qualified name
</span><span class='line'>  -Xintellij-plugin-root<span class="o">=</span>&lt;path&gt; Path to the kotlin-compiler.jar or directory where IntelliJ configuration files can be found
</span><span class='line'>  -Xlegacy-smart-cast-after-try Allow var smart casts despite assignment in try block
</span><span class='line'>  -Xlist-phases              List backend phases
</span><span class='line'>  -Xmetadata-version         Change metadata version of the generated binary files
</span><span class='line'>  -Xmulti-platform           Enable experimental language support <span class="k">for </span>multi-platform projects
</span><span class='line'>  -Xnew-inference            Enable new experimental generic <span class="nb">type </span>inference algorithm
</span><span class='line'>  -Xno-check-actual          Do not check presence of <span class="s1">&#39;actual&#39;</span> modifier in multi-platform projects
</span><span class='line'>  -Xno-inline                Disable method inlining
</span><span class='line'>  -Xphases-to-dump           Dump backend state both before and after these phases
</span><span class='line'>  -Xphases-to-dump-after     Dump backend state after these phases
</span><span class='line'>  -Xphases-to-dump-before    Dump backend state before these phases
</span><span class='line'>  -Xplugin<span class="o">=</span>&lt;path&gt;            Load plugins from the given classpath
</span><span class='line'>  -Xprofile-phases           Profile backend phases
</span><span class='line'>  -Xproper-ieee754-comparisons Generate proper IEEE 754 comparisons in all cases <span class="k">if </span>values are statically known to be of primitive numeric types
</span><span class='line'>  -Xread-deserialized-contracts Enable reading of contracts from metadata
</span><span class='line'>  -Xreport-output-files      Report <span class="nb">source </span>to output files mapping
</span><span class='line'>  -Xreport-perf              Report detailed performance statistics
</span><span class='line'>  -Xskip-metadata-version-check Load classes with bad metadata version anyway <span class="o">(</span>incl. pre-release classes<span class="o">)</span>
</span><span class='line'>  -Xuse-experimental<span class="o">=</span>&lt;fq.name&gt; Enable, but don<span class="err">&#39;</span>t propagate usages of experimental API <span class="k">for </span>marker annotation with the given fully qualified name
</span><span class='line'>  -Xverbose-phases           Be verbose <span class="k">while </span>performing these backend phases
</span><span class='line'>
</span><span class='line'>Advanced options are non-standard and may be changed or removed without any notice.
</span></code></pre></td></tr></table></div></figure>


<h2>编译选项有什么用</h2>

<p>编译选项通常有以下这样的作用，不完全列举</p>

<ul>
<li>开启或关闭某些feature等行为（比如coroutine, 新的类型推断算法等）</li>
<li>控制或设置编译器需要的参数(比如-jvm-target设置class的目标平台)</li>
<li>控制编译器的输出（比如method inline,-Xno-param-assertions对参数进行断言处理）</li>
</ul>


<h2>如何开启设置</h2>

<p>以Android项目为例，增加<code>kotlinOptions</code>配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="mi">28</span>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">applicationId</span> <span class="s2">&quot;com.example.compileroptionssample&quot;</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="mi">15</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="mi">28</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s2">&quot;1.0&quot;</span>
</span><span class='line'>        <span class="n">testInstrumentationRunner</span> <span class="s2">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="kc">false</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">&#39;proguard-android-optimize.txt&#39;</span><span class="o">),</span> <span class="s1">&#39;proguard-rules.pro&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">debug</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Code to be added</span>
</span><span class='line'>    <span class="n">kotlinOptions</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">allWarningsAsErrors</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>更加复杂的参数传递</h2>

<p>默认情况下，gradle中只有四个字段处理编译选项</p>

<ul>
<li>allWarningsAsErrors  将所有的警告当做错误处理，默认值为false</li>
<li>suppressWarnings    压制所有的警告，默认值为false</li>
<li>verbose  打印更多的信息，默认值为false</li>
<li>freeCompilerArgs  附加的编译器选项列表,默认值为[]</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">kotlinOptions</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">allWarningsAsErrors</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="n">freeCompilerArgs</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;-Xno-param-assertions&#39;</span><span class="o">,</span> <span class="s1">&#39;-Xmultifile-parts-inherit&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于上述配置的验证，大家可以对比如下的代码的编译输出验证<code>-Xno-param-assertions</code>选项的作用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.compileroptionssample</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">dump</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何按照Variant进行配置</h2>

<p>那我能不能这样呢？</p>

<ul>
<li>仅仅在Release编译下设置某个编译选项</li>
<li>其他非Release编译不设置这个编译选项</li>
</ul>


<p>答案是可以的，按照下面的方式就行了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//only add kotlinOptions for the releaseKotlin build task</span>
</span><span class='line'><span class="n">tasks</span><span class="o">.</span><span class="na">withType</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">jetbrains</span><span class="o">.</span><span class="na">kotlin</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">tasks</span><span class="o">.</span><span class="na">KotlinCompile</span><span class="o">).</span><span class="na">all</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;compileReleaseKotlin&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">kotlinOptions</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">allWarningsAsErrors</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">println</span><span class="o">(</span><span class="s">&quot;Add kotlin options when task=&quot;</span> <span class="o">+</span> <span class="n">task</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span><span class="o">(</span><span class="s">&quot;Do not add kotlin options when task=&quot;</span> <span class="o">+</span> <span class="n">task</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码</p>

<ul>
<li>所在文件为模块目录，比如app/build.gradle</li>
<li>上述代码与<code>android</code>同级别</li>
</ul>


<p>利用Kotlin编译选项我们可以做一些很好玩的事情，后续会输出更多这方面的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个查找字节码更好研究Kotlin的脚本]]></title>
    <link href="https://droidyue.com/blog/2019/07/14/search-bytecode-script-to-study-kotlin-better/"/>
    <updated>2019-07-14T21:10:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/14/search-bytecode-script-to-study-kotlin-better</id>
    <content type="html"><![CDATA[<p>众所周知，Kotlin通过语法糖的形式实现了很多便捷和高效的方法，因此研究Kotlin代码通常是需要研究字节码或者反编译后的java文件。</p>

<p>比如这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fun String.toConsole<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    println<span class="o">(</span>this<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Kotlin的编译器会在字节码中自动地增加这样一行代码<code>Intrinsics.checkParameterIsNotNull</code>来做一些预检查的操作。</p>

<h2>痛点</h2>

<p>那么问题来了，如果我们想找出所有的关于<code>Intrinsics</code>相关的自动加入内容，该怎么办，不能一个一个文件去反编译查看吧，因为这样</p>

<ul>
<li>没有目标性，无法明确预知那个文件会生成这种代码</li>
<li>不具有自动化可重复性，需要依赖于人为行为</li>
</ul>


<p>那么，我们查看class文件类进行内容匹配是否包含<code>Intrinsics</code>呢，其实也不太好，因为一个class文件的内容是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cat</span> <span class="n">StringExtKt</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="err">����</span><span class="mi">43</span>
</span><span class='line'>      <span class="n">StringExtKtjava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span>  <span class="n">toConsole</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span><span class="err">#</span><span class="n">Lorg</span><span class="o">/</span><span class="n">jetbrains</span><span class="o">/</span><span class="n">annotations</span><span class="o">/</span><span class="n">NotNull</span><span class="o">;</span><span class="n">$this$toConsokotlin</span><span class="o">/</span><span class="n">jvm</span><span class="o">/</span><span class="n">internal</span><span class="o">/</span><span class="n">Intrinsics</span>
</span><span class='line'><span class="n">checkParameterIsNotNull</span><span class="err">&#39;</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">SystemoutLjava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>                                          <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStreamprintln</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span><span class="n">Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;</span><span class="n">mvbvkd1</span><span class="s">&quot;��</span>
</span><span class='line'>
</span><span class='line'><span class="s">��</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s">��</span>
</span><span class='line'><span class="s">��0*0¨d2BytecodeSample</span>
</span><span class='line'><span class="s">                      StringExt.ktCodeLineNumberTableLocalVariableTable$RuntimeInvisibleParameterAnnotations</span>
</span><span class='line'><span class="s">SourceFileSourceDebugExtensionRuntimeVisibleAnnotations1,&gt;*    �&lt;�*�-</span>
</span><span class='line'><span class="s">.</span>
</span><span class='line'><span class="s">/0+1QSMAP</span>
</span><span class='line'><span class="s">StringExt.kt</span>
</span><span class='line'><span class="s">Kotlin</span>
</span><span class='line'><span class="s">*S Kotlin</span>
</span><span class='line'><span class="s">*F</span>
</span><span class='line'><span class="s">+ 1 StringExt.kt</span>
</span><span class='line'><span class="s">StringExtKt</span>
</span><span class='line'><span class="s">*L</span>
</span><span class='line'><span class="s">1#1,3:1</span>
</span><span class='line'><span class="s">*E</span>
</span><span class='line'><span class="s">2@[III ![II&quot;</span><span class="n">I</span><span class="err">#</span><span class="n">$I</span><span class="o">%&amp;[</span><span class="n">s</span><span class="err">&#39;</span><span class="o">([</span><span class="n">ss</span><span class="o">)</span><span class="n">s</span><span class="o">)</span><span class="n">s</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>一段很错乱的内容，这样不利于我们更好的分析问题。因为相比较而言，我们有更加好的方法来处理。</p>

<p>基于上面的痛点，自己动手写了一个简单的ruby脚本，来解决问题。</p>

<h2>实现思路</h2>

<ul>
<li>遍历指定路径下的class文件</li>
<li>将对应的class文件使用<code>javap</code>反编译</li>
<li>使用上面反编译的结果，查看是否包含待查询的关键字</li>
<li>如果上述结果匹配到，将反编译内容和文件路径输出到结果文件中</li>
</ul>


<h2>代码(Talk is cheap)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;find&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;colorize&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;fileutils&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># extract arguements from command line</span>
</span><span class='line'><span class="n">dirToSearch</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">keywordToSearch</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="n">matchedResultFile</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;dirToSearch=</span><span class="si">#{</span><span class="n">dirToSearch</span><span class="si">}</span><span class="s2">;keywordToSearch=</span><span class="si">#{</span><span class="n">keywordToSearch</span><span class="si">}</span><span class="s2">, matchedResultFile=</span><span class="si">#{</span><span class="n">matchedResultFile</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Eagerly create the result file so that user could use tools like `tail -f ` to observer the result</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">touch</span><span class="p">(</span><span class="n">matchedResultFile</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;result will be outputted to </span><span class="si">#{</span><span class="n">matchedResultFile</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Helper method to append content(each line) to the file</span>
</span><span class='line'><span class="k">def</span> <span class="nf">appendLineContentToFile</span><span class="p">(</span><span class="n">lineContent</span><span class="p">,</span> <span class="n">filePath</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filePath</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>     <span class="n">file</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lineContent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># write matched class file path along with bytecode content to the output file.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">writeResultInformation</span><span class="p">(</span><span class="n">classFilePath</span><span class="p">,</span> <span class="n">byteCodeContent</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="n">classFilePath</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># leave blank lines</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="n">byteCodeContent</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># leave blank lines</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Find</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">dirToSearch</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot;.class&quot;</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;checking </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">byteCodeContent</span> <span class="o">=</span> <span class="sb">`javap -c </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>  <span class="n">contains</span> <span class="o">=</span> <span class="n">byteCodeContent</span><span class="o">.</span><span class="n">include?</span> <span class="n">keywordToSearch</span>
</span><span class='line'>  <span class="n">resultMessage</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">contains</span>
</span><span class='line'>      <span class="n">resultMessage</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2"> contains </span><span class="si">#{</span><span class="n">keywordToSearch</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">green</span>
</span><span class='line'>      <span class="n">writeResultInformation</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">byteCodeContent</span><span class="p">,</span> <span class="n">matchedResultFile</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">resultMessage</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2"> does NOT contains </span><span class="si">#{</span><span class="n">keywordToSearch</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">red</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">resultMessage</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>执行命令</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby searchBytecode.rb ./ <span class="s2">&quot;Intrinsics&quot;</span> /tmp/result.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>searchBytecode.rb 是上述的脚本文件名称</li>
<li>./ 第一个参数，为待查找的目录</li>
<li>&ldquo;Intrinsics&rdquo; 第二个参数，为查询关键字</li>
<li>/tmp/result.txt  第三个参数，为结果输出文件</li>
</ul>


<h2>执行日志</h2>

<p>为了更好的表达应用正在执行，执行时会有日志输出。
<img src="https://asset.droidyue.com/image/2019_07/search_bytecode_logs.jpg" alt="https://asset.droidyue.com/image/2019_07/search_bytecode_logs.jpg" /></p>

<p>其中</p>

<ul>
<li>正常的日志会以白色颜色输出</li>
<li>不匹配的内容会以红颜色输出</li>
<li>匹配的内容会以绿颜色输出</li>
</ul>


<h2>结果文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">cat</span> <span class="n">sample_intrinsics</span><span class="o">.</span><span class="na">txt</span>
</span><span class='line'>
</span><span class='line'><span class="o">./</span><span class="n">out</span><span class="o">/</span><span class="n">production</span><span class="o">/</span><span class="n">BytecodeSample</span><span class="o">/</span><span class="n">MainKt</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;Main.kt&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">MainKt</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// String Hello</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">17</span>                 <span class="c1">// Method StringExtKt.toConsole:(Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">23</span>                 <span class="c1">// Method IntExtKt.increase:(I)I</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">25</span>                 <span class="c1">// class Book</span>
</span><span class='line'>      <span class="mi">13</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">28</span>                 <span class="c1">// Method Book.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">32</span>                 <span class="c1">// Field Book.name:Ljava/lang/String;</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="n">ifnonnull</span>     <span class="mi">27</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">37</span>                 <span class="c1">// Method kotlin/jvm/internal/Intrinsics.throwNpe:()V</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">43</span>                 <span class="c1">// Method java/lang/String.toString:()Ljava/lang/String;</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method main:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">./</span><span class="n">out</span><span class="o">/</span><span class="n">production</span><span class="o">/</span><span class="n">BytecodeSample</span><span class="o">/</span><span class="n">StringExtKt</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;StringExt.kt&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">StringExtKt</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">toConsole</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// String $this$toConsole</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">15</span>                 <span class="c1">// Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">istore_1</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">21</span>                 <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">27</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题排查</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in <span class="sb">`</span>require<span class="s1">&#39;: cannot load such file -- colorize (LoadError)</span>
</span><span class='line'><span class="s1"> from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&#39;</span>
</span><span class='line'>  from /Users/androidyue/Documents/OneDrive/scripts//searchBytecode.rb:3:in <span class="sb">`</span>&lt;main&gt;<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需手动安装ruby gems依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  gem install colorize
</span><span class='line'>YAML safe loading is not available. Please upgrade psych to a version that supports safe loading <span class="o">(</span>&gt;<span class="o">=</span> 2.0<span class="o">)</span>.
</span><span class='line'>Fetching: colorize-0.8.1.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Successfully installed colorize-0.8.1
</span><span class='line'>Parsing documentation <span class="k">for </span>colorize-0.8.1
</span><span class='line'>Installing ri documentation <span class="k">for </span>colorize-0.8.1
</span><span class='line'>1 gem installed
</span></code></pre></td></tr></table></div></figure>


<p>再次执行即可。</p>

<h2>执行优化</h2>

<ul>
<li>具体的执行时间可能会随着工程的复杂而不同。</li>
<li>建议筛选更加精细的目录，避免不必要的查询和操作</li>
<li>可以同时使用<code>tail -f</code>筛选匹配结果。</li>
</ul>


<p>脚本github地址:<a href="https://github.com/androidyue/DroidScripts/blob/master/ruby/searchBytecode.rb">https://github.com/androidyue/DroidScripts/blob/master/ruby/searchBytecode.rb</a></p>

<p>以上。</p>

<h2>相关内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复应用无法通过App Store升级的问题]]></title>
    <link href="https://droidyue.com/blog/2019/06/30/fix-app-store-show-previous-apple-id/"/>
    <updated>2019-06-30T20:20:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/06/30/fix-app-store-show-previous-apple-id</id>
    <content type="html"><![CDATA[<p>之前遇到过这样的问题</p>

<ul>
<li>从微信官网下载微信Mac版安装</li>
<li>后来App Store提示有新的微信更新</li>
<li>但是每次打开都是这样的画面，提示上一个账户（主动更换过账户）的信息</li>
<li>而且上一个账户基本弃用，但是也无法使用当前账户更新</li>
</ul>


<!--more-->


<p><img src="https://asset.droidyue.com/image/2019_02/macos-mojave-app-store-free-app-create-apple-id.jpg" alt="https://asset.droidyue.com/image/2019_02/macos-mojave-app-store-free-app-create-apple-id.jpg" /></p>

<h2>尝试解决</h2>

<ul>
<li>从Finder中切换到 Applications 删除Wechat 也不行</li>
</ul>


<h2>真正解决</h2>

<p>  1.点击左上角菜单 进入 About this Mac（关于本台Mac） <br/>
  2.切换到 Storage(存储) <br/>
  3.点击Manage(管理)  <br/>
  4.切换到Applications(应用程序) 删除对应的Wechat安装包即可。</p>

<p>如图
<img src="https://asset.droidyue.com/image/2019_02/remove_apps.png" alt="https://asset.droidyue.com/image/2019_02/remove_apps.png" /></p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[未关闭的文件流会引起内存泄露么？]]></title>
    <link href="https://droidyue.com/blog/2019/06/09/will-unclosed-stream-objects-cause-memory-leaks/"/>
    <updated>2019-06-09T22:06:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/06/09/will-unclosed-stream-objects-cause-memory-leaks</id>
    <content type="html"><![CDATA[<p>最近接触了一些面试者，在面试过程中有涉及到内存泄露的问题，其中有不少人回答说，如果文件打开后，没有关闭会导致内存泄露。当被继续追问，为什么会导致内存泄露时，大部分人都没有回答出来。</p>

<p>本文将具体讲一讲 文件(流)未关闭与内存泄露的关系。</p>

<!--more-->


<h2>什么是内存泄露</h2>

<ul>
<li>定义：当生命周期长的实例<code>L</code> <strong>不合理</strong>地持有一个生命周期短的实例<code>S</code>，导致<code>S</code>实例无法被正常回收</li>
</ul>


<h3>举例说明</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mAppContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppSettings</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//some other codes</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码可能会发生内存泄露</p>

<ul>
<li>我们调用<code>AppSettings.getInstance.setup()</code>传入一个<code>Activity</code>实例</li>
<li>当上述的<code>Activity</code>退出时，由于被<code>AppSettings</code>中属性<code>mAppContext</code>持有，进而导致内存泄露。</li>
</ul>


<p>为什么上面的情况就会发生内存泄露</p>

<ul>
<li>以 Android 为例，GC 回收对象采用<code>GC Roots</code>强引用可到达机制。</li>
<li><code>Activity</code>实例被<code>AppSettings.sInstance</code>持有</li>
<li><code>AppSettings.sInstance</code>由于是静态，被<code>AppSettings</code>类持有</li>
<li><code>AppSettings</code>类被加载它的类加载器持有</li>
<li>而类加载器就是<code>GC Roots</code>的一种</li>
<li>由于上述关系导致<code>Activity</code>实例无法被回收销毁。</li>
</ul>


<h2>验证是否引起内存泄露</h2>

<p>因此，想要证明未关闭的文件流是否导致内存泄露，需要查看文件流是否是<code>GC Roots</code>强引用可到达。</p>

<p>示例代码1（辅助验证GC 发生）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.streamleakssample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">BufferedReader</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">Reader</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nf">MyBufferedReader</span><span class="p">(</span><span class="err">`</span><span class="k">in</span><span class="err">`</span><span class="p">:</span> <span class="n">Reader</span><span class="p">?)</span> <span class="p">:</span> <span class="n">BufferedReader</span><span class="p">(</span><span class="err">`</span><span class="k">in</span><span class="err">`</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">fun</span> <span class="nf">finalize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;MyBufferedReader get collected&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>示例代码2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.streamleakssample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">os</span><span class="p">.</span><span class="n">Bundle</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">v7</span><span class="p">.</span><span class="n">app</span><span class="p">.</span><span class="n">AppCompatActivity</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">Log</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">View</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">FileInputStream</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">InputStreamReader</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>
</span><span class='line'>        <span class="n">findViewById</span><span class="p">&lt;</span><span class="n">View</span><span class="p">&gt;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">textview</span><span class="p">).</span><span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">testInputStream</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">testInputStream</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//需进入设置手动开启应用权限，未处理运行时权限问题</span>
</span><span class='line'>        <span class="k">val</span> <span class="err">`</span><span class="k">is</span><span class="err">`</span> <span class="p">=</span> <span class="n">FileInputStream</span><span class="p">(</span><span class="s">&quot;/sdcard/a.txt&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">buf</span> <span class="p">=</span> <span class="n">MyBufferedReader</span><span class="p">(</span><span class="n">InputStreamReader</span><span class="p">(</span><span class="err">`</span><span class="k">is</span><span class="err">`</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">line</span> <span class="p">=</span> <span class="n">buf</span><span class="p">.</span><span class="n">readLine</span><span class="p">()</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">sb</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">line</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">).</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">line</span> <span class="p">=</span> <span class="n">buf</span><span class="p">.</span><span class="n">readLine</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">fileAsString</span> <span class="p">=</span> <span class="n">sb</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;MainActivity&quot;</span><span class="p">,</span> <span class="s">&quot;testInputStream.Contents : $fileAsString&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们这样操作</p>

<ol>
<li> 点击textview视图，触发多次<code>testInputStream</code></li>
<li> 过几秒后，我们执行<code>heap dump</code>。</li>
<li> 我们使用 MAT 对上一步的dump文件进行分析(需进行格式转换)</li>
</ol>


<p><img src="https://asset.droidyue.com/image/2019_05/fianalizer_reference_path_to_gc_roots.png" alt="https://asset.droidyue.com/image/2019_05/fianalizer_reference_path_to_gc_roots.png" /></p>

<p>分析上图，我们发现</p>

<ul>
<li>FileInputStream 只被 FinalizerReference 这个类(GC Root)持有</li>
<li>上述持有的原因是，<code>FileInputStream</code>重写了<code>finalize</code>，会被加入到<code>FinalizerReference</code>的析构处理集合</li>
<li>上述引用会随着<code>Finalizer</code>守护线程处理后解除，即<code>FileInputStream</code>实例彻底销毁。</li>
</ul>


<p>所以，我们再来操作一波，验证上面的结论。</p>

<ul>
<li>然后利用工具执行强制GC回收</li>
<li>过几秒后，我们执行<code>heap dump</code>。</li>
<li>我们使用 MAT 对上一步的dump文件进行分析(需进行格式转换)</li>
<li>堆分析文件，查找<code>MyBufferedReader</code>或者<code>FileInputStream</code>或者<code>InputStreamReader</code> 没有发现这些实例，说明已经GC回收</li>
<li>出于谨慎考虑，我们按照包名查找<code>java.io</code>在排除无关实例外，依旧无法找到<code>testInputStream</code>中的实例。再次证明已经被GC回收</li>
</ul>


<p>因而我们可以确定，正常的使用流，不会导致内存泄露的产生。</p>

<p>当然，如果你刻意显式持有Stream实例，那就另当别论了。</p>

<h2>为什么需要关闭流</h2>

<p>首先我们看一张图
<img src="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" alt="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" /></p>

<p>如上图从左至右有三张表</p>

<ul>
<li>file descriptor table 归属于单个进程</li>
<li>global file table(又称open file table) 归属于系统全局</li>
<li>inode table 归属于系统全局</li>
</ul>


<h3>从一次文件打开说起</h3>

<p>当我们尝试打开文件<code>/path/myfile.txt</code></p>

<p>1.从inode table 中查找到对应的文件节点 <br/>
2.根据用户代码的一些参数（比如读写权限等）在open file table 中创建open file 节点 <br/>
3.将上一步的open file节点信息保存，在file descriptor table中创建 file descriptor <br/>
4.返回上一步的file descriptor的索引位置，供应用读写等使用。</p>

<h3>file descriptor 和流有什么关系</h3>

<ul>
<li>当我们这样<code>FileInputStream("/sdcard/a.txt")</code> 会获取一个file descriptor。</li>
<li>出于稳定系统性能和避免因为过多打开文件导致CPU和RAM占用居高的考虑，每个进程都会有可用的file descriptor 限制。</li>
<li>所以如果不释放file descriptor，会导致应用后续依赖file descriptor的行为(socket连接，读写文件等)无法进行，甚至是导致进程崩溃。</li>
<li>当我们调用<code>FileInputStream.close</code>后，会释放掉这个file descriptor。</li>
</ul>


<p>因此到这里我们可以说，不关闭流不是内存泄露问题，是<strong>资源泄露问题</strong>(file descriptor 属于资源)。</p>

<h2>不手动关闭会怎样</h2>

<p>不手动关闭的真的会发生上面的问题么？ 其实也不完全是。</p>

<p>因为对于这些流的处理，源代码中通常会做一个兜底处理。以<code>FileInputStream</code>为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ensures that the &lt;code&gt;close&lt;/code&gt; method of this file input stream is</span>
</span><span class='line'><span class="cm"> * called when there are no more references to it.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @exception  IOException  if an I/O error occurs.</span>
</span><span class='line'><span class="cm"> * @see        java.io.FileInputStream#close()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Android-added: CloseGuard support.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">guard</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">guard</span><span class="o">.</span><span class="na">warnIfOpen</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">fd</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span>  <span class="o">(</span><span class="n">fd</span> <span class="o">!=</span> <span class="n">FileDescriptor</span><span class="o">.</span><span class="na">in</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Android-removed: Obsoleted comment about shared FileDescriptor handling.</span>
</span><span class='line'>        <span class="n">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，在finalize方法中有调用<code>close</code>来释放file descriptor.</p>

<p><strong>但是finalize方法执行速度不确定，不可靠</strong></p>

<p>所以，我们不能依赖于这种形式，还是要手动调用<code>close</code>来释放file descriptor。</p>

<h2>关闭流实践</h2>

<p>Java 7 之后，可以使用try-with-resource方式处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">String</span> <span class="nf">readFirstLineFromFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span>
</span><span class='line'>                   <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlin 可以使用<code>use</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">readFirstLine</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BufferedReader</span><span class="p">(</span><span class="n">FileReader</span><span class="p">(</span><span class="s">&quot;test.file&quot;</span><span class="p">)).</span><span class="n">use</span> <span class="p">{</span> <span class="k">return</span> <span class="n">it</span><span class="p">.</span><span class="n">readLine</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，还有最基础的手动关闭的形式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">readFirstLine</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">FileNotFoundException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;test.file&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/26541513/why-is-it-good-to-close-an-inputstream">https://stackoverflow.com/questions/26541513/why-is-it-good-to-close-an-inputstream</a></li>
<li><a href="https://www.reddit.com/r/learnjava/comments/577769/why_do_you_need_to_close_streams/">https://www.reddit.com/r/learnjava/comments/577769/why_do_you_need_to_close_streams/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读文件描述符]]></title>
    <link href="https://droidyue.com/blog/2019/06/02/file-descriptor-explained/"/>
    <updated>2019-06-02T20:28:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/06/02/file-descriptor-explained</id>
    <content type="html"><![CDATA[<p>最近由于机缘巧合，结合最近工作中遇到的一些问题，深入了解了文件描述符(File Descriptor，简称FD，以下使用 FD 称谓)。预计会有两到三篇关于 FD 的文章陆续出来。首篇也就是这篇，作为基础篇，介绍一些关于通用 FD 的内容知识。</p>

<!--more-->


<h2>概念定义</h2>

<ul>
<li>文件描述符 是 用来访问资源(文件，输入输出设备等)的一种抽象指示符。</li>
<li>文件描述符 是POSIX(Portable Operating System Interface)规范的组成部分</li>
<li>文件描述符 通常是非负整数，C 语言中使用int类型。</li>
</ul>


<h3>FD 具体可以指向什么</h3>

<ul>
<li>文件/目录 files/directories</li>
<li>输入输出源 input/output</li>
<li>管道 pipes</li>
<li>套接字 sockets</li>
<li>其他 Unix 文件类型 other Unix files</li>
</ul>


<h2>系统默认的FDs</h2>

<p>每一个 Unix 进程中，通常会有三个预制的 FD。它们分别是</p>

<ul>
<li>标准输入 Standard input</li>
<li>标准输出 Standard output</li>
<li>标准错误(输出) Standard error</li>
</ul>


<p>其对应的行为是</p>

<ul>
<li>标准输入 用于程序接受数据</li>
<li>标准输出 用于程序输出数据</li>
<li>标准错误 用于程序输出错误或者诊断信息</li>
</ul>


<h2>内部机制</h2>

<h3>三张表</h3>

<p><img src="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" alt="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" /></p>

<p>如上图从左至右有三张表</p>

<ul>
<li>file descriptor table  归属于单个进程</li>
<li>global file table(又称open file table)  归属于系统全局</li>
<li>inode table 归属于系统全局</li>
</ul>


<h3>从一次文件打开说起</h3>

<p>当我们尝试打开文件<code>/path/myfile.txt</code></p>

<p>1.从inode table 中查找到对应的文件节点 <br/>
2.根据用户代码<code>open</code>的一些参数（比如读写权限等）在open file table 中创建open file 节点<br/>
3.将上一步的open file节点信息保存，在file descriptor table中创建 file descriptor<br/>
4.返回上一步的file descriptor的索引位置，供应用读写等使用。</p>

<p>备注：上述图片来自<a href="https://www.computerhope.com/jargon/f/file-descriptor.htm">https://www.computerhope.com/jargon/f/file-descriptor.htm</a></p>

<h2>FD 数量限制</h2>

<p>出于稳定系统性能和避免因为过多打开文件导致CPU和RAM占用居高的考虑，系统都会设置了一个最大可用的 FD 数量。</p>

<p>FD上限值通常不小，一般应用很难达到。</p>

<h3>限制类型</h3>

<ul>
<li>hard limit 由系统管理权限人员设定，是soft limit 可以设置的上限</li>
<li>soft limit 当前用户设置，用来限定进程，通常小于（但不能超过）hard limit值。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#查看soft limit 设置</span>
</span><span class='line'>➜  /tmp <span class="nb">ulimit</span> -nS
</span><span class='line'>4864
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#查看 hard limit 设置</span>
</span><span class='line'>➜  /tmp <span class="nb">ulimit</span> -nH
</span><span class='line'>unlimited
</span></code></pre></td></tr></table></div></figure>


<h2>Questions</h2>

<h3>进程退出与 FD 关系</h3>

<p>因为file descriptor table 存在于 PCB (进程控制块，Process Control Block) 中，进程退出后所有的 FD都需要关闭处理掉。</p>

<p>如下为<a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01_08_02">POSIX文档</a></p>

<blockquote><p>All of the file descriptors, directory streams, conversion descriptors, and message catalog descriptors open in the calling process shall be closed.</p></blockquote>

<h3>同一路径 与 FD 关系</h3>

<ul>
<li>同一文件，多次打开，FD值不同</li>
<li>同一文件，读写模式不同打开，FD值也不同</li>
</ul>


<h3>打开文件过多会怎样</h3>

<ul>
<li><code>open</code>返回值会出现<code>-1</code></li>
<li>通常会导致进程无法进行，甚至是崩溃</li>
</ul>


<h2>示例验证代码</h2>

<p>如下代码可以验证上述问题中的结论</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printStandardFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//input/output/error stream </span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s">%p</span><span class="se">\t\t\t</span><span class="s"> Terminal&#39;s input device</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s">%p</span><span class="se">\t\t\t</span><span class="s"> Terminal&#39;s output device</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">,</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s">%p</span><span class="se">\t\t\t</span><span class="s"> Terminal&#39;s error device</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">,</span> <span class="n">stderr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">printInputFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">afd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/a.txt&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">afd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error occurs %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/a.txt</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">afd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">afd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">afd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printWriteFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/b.txt&quot;</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/b.txt</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">testSamePathDifferentMode</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">readFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/c.txt&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/c.txt read </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">readFd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">readFd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">writeFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/c.txt&quot;</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/c.txt write </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">writeFd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">writeFd</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printPipeFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pipeFds</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pipe</span><span class="p">(</span><span class="n">pipeFds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> Pipe&#39;s read end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pipeFds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">pipeFds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;r&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> Pipe&#39;s write end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pipeFds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">pipeFds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;w&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">tryToReachMaxFDs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">printInputFD</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">scanChars</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">chr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Enter a character: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">chr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Process File Descriptor table</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-----------------------------------------------------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Descriptor</span><span class="se">\t\t</span><span class="s"> Pointer</span><span class="se">\t\t</span><span class="s"> Description</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printStandardFD</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printInputFD</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printWriteFD</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//printPipeFD();</span>
</span><span class='line'>    <span class="c1">//tryToReachMaxFDs();</span>
</span><span class='line'>    <span class="c1">//testSamePathDifferentMode();</span>
</span><span class='line'>    <span class="n">scanChars</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S.很多年不写C代码了。</p>

<h2>References</h2>

<ul>
<li><a href="https://unix.stackexchange.com/questions/430365/what-happens-to-file-descriptors-when-the-process-is-killed">https://unix.stackexchange.com/questions/430365/what-happens-to-file-descriptors-when-the-process-is-killed</a></li>
<li><a href="https://apple.lib.utah.edu/open-file-limits-on-os-x-what-they-are-why-increase-them-and-how-to-increase-them/">https://apple.lib.utah.edu/open-file-limits-on-os-x-what-they-are-why-increase-them-and-how-to-increase-them/</a></li>
<li><a href="http://geekswing.com/geek/quickie-tutorial-ulimit-soft-limits-hard-limits-soft-stack-hard-stack/">http://geekswing.com/geek/quickie-tutorial-ulimit-soft-limits-hard-limits-soft-stack-hard-stack/</a></li>
<li><a href="https://cseweb.ucsd.edu/classes/sp16/cse120-a/applications/ln/lecture15.html">https://cseweb.ucsd.edu/classes/sp16/cse120-a/applications/ln/lecture15.html</a></li>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01_03_01">http://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01_03_01</a></li>
<li><a href="https://www.youtube.com/watch?v=KM5sRWAYqaw">File Descriptors Explained</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈编码中的缩写]]></title>
    <link href="https://droidyue.com/blog/2019/05/26/abbreviation-do-not-make-me-think/"/>
    <updated>2019-05-26T20:51:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/26/abbreviation-do-not-make-me-think</id>
    <content type="html"><![CDATA[<p>目前而言，几乎所有的编程语言都是使用英文来表示，在英文中，使用缩写很普遍，比如URL(Uniform Resource Locator)能够很简单高效地向他人阐述要表达的概念。</p>

<p>然后，在现实的开发过程中，缩写有时候会被滥用，甚至是脱离了其高效传递信息的意思。</p>

<!--more-->


<p>比如以广告跟踪数据为例，如下是部分广告跟踪信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;pm&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/pm.php&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&quot;cm&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/cm.php&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看了上面的协议约定，你应该会这样</p>

<ul>
<li>你应该无法判断pm和cm的明确意思</li>
<li>你<strong>开始思考</strong>，cm是什么缩写，pm是什么缩写。</li>
<li>最终你还是不知道什么意思，便搜找文档或者询问他人。</li>
</ul>


<p>OK，那我们看看如果不用缩写，这样能不能传达信息呢？</p>

<h2>改进版本1</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;impression_tracking_urls&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/pm.php&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&quot;click_tracking_urls&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/cm.php&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>改进版本2</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;tracking_urls&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;impression&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;https://example.com/pm.php&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;click&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;https://example.com/cm.php&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不论是上面的改进版本1还是2，在不依赖文档或他人的情况下，我们应该都可以清晰的分辨出哪些是广告曝光的跟踪连接，哪些是点击后的追踪链接。</p>

<p>看完示例，开始具体清谈一下缩写这个内容。</p>

<h2>什么是不好的缩写</h2>

<ul>
<li>字符过短，让人无法推测其完整形式</li>
<li>存在和通用认知缩写冲突，比如上面的<code>cm</code>和<code>pm</code>可能会被认为是<code>Centimeter(厘米)</code>或<code>post meridiem(下午)</code>对应的缩写。</li>
<li>不遵循缩写规则，对于词组来说，通常是取每个单词首字母；对于一个单词来说，是尽量剔除其元音字符(a,e,i,o,u)，比如MicroSoft其股票代码为<code>MSFT</code></li>
</ul>


<h2>为什么要避免不好的缩写</h2>

<ul>
<li>不好的缩写，表意不明，甚至是产生误解</li>
<li>不好的缩写，需要依赖于文档或者他人</li>
<li>不好的缩写使用，会导致开发者思考，效率变低。</li>
<li>不好的缩写，甚至可能会造成双方的不信任。</li>
</ul>


<h2>为什么会出现不好的缩写</h2>

<p>其实最关键的因素还是人，这主要表现在</p>

<ul>
<li>编码约定随意性</li>
<li>自身的技术约束较低，甚至是拒绝思考更优解。</li>
<li>英语水平限制</li>
</ul>


<h2>如何避免不好的书写</h2>

<p>当然避免的关键还是人的因素，针对上面的症结，需要做如下处理</p>

<ul>
<li>增强自身约束，认真对待，不随意缩写。</li>
<li>保持求索的态度，寻找更优解</li>
<li>学习英语，提升基本功。</li>
</ul>


<p>随意缩写一时爽，后期维护泪千行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[送书啦，Kotlin，Android、Flutter都有！]]></title>
    <link href="https://droidyue.com/blog/2019/05/20/books-gifts/"/>
    <updated>2019-05-20T22:32:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/20/books-gifts</id>
    <content type="html"><![CDATA[<p>最近和华章搞了一个小合作，把最新出的一些关于Android的书拿出来免费送给大家，如下有四本书，涉及了Kotlin，Android ART,埋点和Flutter。</p>

<p>参与方式：很简单，微信扫描或者长按识别书籍下面的抽奖小程序，然后坐等开奖就可以了。</p>

<!--more-->




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/kotlin_hexin_biancheng.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/kotlin_hexin_biancheng.jpeg" style="max-width: 50%;width: 50%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/android_jvm_art.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/shenrulijie_android_java_xuniji.jpeg" style="max-width: 50%;width: 50%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/android_maidian.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/android_quan_maidian_jiejue_fangan.jpeg" style="max-width: 50%;width: 50%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/flutter_jishu_rumen.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/flutter_jishurumen_yu_shizhan.jpeg" style="max-width: 50%;width: 50%;">
</p>


<p>大家积极参与，如果效果好的话，我会向华章申请更多的赠书。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写地道的 Kotlin 代码]]></title>
    <link href="https://droidyue.com/blog/2019/05/19/do-and-dont-in-kotlin/"/>
    <updated>2019-05-19T21:04:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/19/do-and-dont-in-kotlin</id>
    <content type="html"><![CDATA[<p>Kotlin 以其简洁实用的语法，赢得了很多Java 开发者，尤其是 Android 开发者的喜爱与应用。然而，虽然我们使用 Kotlin 进行编码，可能并没有书写出地道的 Kotlin 代码，亦或者是遵照写Java的思维，用Kotlin的语法 来编码。</p>

<p>本文将通过多出代码示例，分为<code>Do not</code>（不建议）和<code>Do</code>（建议）两部分，分别代表着不太好的实现和推荐的实现方式，来展示地道的 Kotlin 编码方式。</p>

<!--more-->


<h2>进行非null判断</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">dumpBook</span><span class="p">(</span><span class="n">book</span><span class="p">:</span> <span class="n">Book</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">book</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">book</span><span class="p">.</span><span class="n">dumpContent</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">dumpBook1</span><span class="p">(</span><span class="n">book</span><span class="p">:</span> <span class="n">Book</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">book</span><span class="p">?.</span><span class="n">dumpContent</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>进行类型转换并访问一些属性</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// avoid if type checks</span>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testTypeCheck</span><span class="p">(</span><span class="n">any</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">any</span> <span class="k">is</span> <span class="n">Book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">any</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testTypeCheck0</span><span class="p">(</span><span class="n">any</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">any</span> <span class="k">as</span><span class="p">?</span> <span class="n">Book</span><span class="p">)?.</span><span class="n">let</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>避免使用<code>!!</code>非空断言</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNotNullAssertion</span><span class="p">(</span><span class="n">feed</span><span class="p">:</span> <span class="n">Feed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">feed</span><span class="p">.</span><span class="n">feedItemList</span><span class="p">.</span><span class="n">first</span><span class="p">().</span><span class="n">author</span><span class="p">!!.</span><span class="n">title</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNotNullAssertion0</span><span class="p">(</span><span class="n">feed</span><span class="p">:</span> <span class="n">Feed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">feed</span><span class="p">.</span><span class="n">feedItemList</span><span class="p">.</span><span class="n">first</span><span class="p">().</span><span class="n">author</span><span class="p">?.</span><span class="n">title</span> <span class="p">?:</span> <span class="s">&quot;fallback_author_title&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>补充：</p>

<ul>
<li>使用<code>!!</code>断言，一旦断言条件出错，会发生运行时异常。</li>
</ul>


<h2>判断可能为null的boolean值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">comsumeNullableBoolean</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">isOK</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOK</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">isOK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">comsumeNullableBoolean0</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">isOK</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOK</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>利用<code>if-else</code>,<code>when</code>,<code>try-catch</code> 的返回值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testIfElse</span><span class="p">(</span><span class="n">success</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">message</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;恭喜，成功了&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;再接再厉&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testIfElse1</span><span class="p">(</span><span class="n">success</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;恭喜，成功了&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;再接再厉&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testWhen0</span><span class="p">(</span><span class="n">type</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">typeString</span> <span class="p">=</span> <span class="k">when</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span> <span class="p">-&gt;</span> <span class="s">&quot;post&quot;</span>
</span><span class='line'>        <span class="m">2</span> <span class="p">-&gt;</span> <span class="s">&quot;status&quot;</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">&quot;page&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//can&#39;t reassign value to typeString</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getWebContent</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">String</span> <span class="p">=</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testTryCatch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">content</span> <span class="p">=</span> <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">getWebContent</span><span class="p">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">IOException</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//can’t reassign value to content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>善用 <code>apply</code>/<code>also</code>/<code>with</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">composeIntent</span><span class="p">():</span> <span class="n">Intent</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">intent</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">ACTION_VIEW</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="p">.</span><span class="n">data</span> <span class="p">=</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="p">.</span><span class="err">`</span><span class="n">package</span><span class="err">`</span> <span class="p">=</span> <span class="s">&quot;com.android.chrome&quot;</span>
</span><span class='line'>    <span class="n">intent</span><span class="p">.</span><span class="n">addFlags</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">FLAG_ACTIVITY_NEW_TASK</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">intent</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">composeIntent1</span><span class="p">():</span> <span class="n">Intent</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Intent</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">ACTION_VIEW</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span> <span class="p">=</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="err">`</span><span class="n">package</span><span class="err">`</span> <span class="p">=</span> <span class="s">&quot;com.android.chrome&quot;</span>
</span><span class='line'>        <span class="n">addFlags</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">FLAG_ACTIVITY_NEW_TASK</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">Request</span><span class="p">(</span><span class="k">val</span> <span class="n">uri</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="c1">//use also</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">handleRequest</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">)</span> <span class="p">:</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;https&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">handleHttpsRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>           <span class="k">true</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;http&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">handleHttpRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>           <span class="k">true</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">handleRequest1</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;https&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">true</span><span class="p">.</span><span class="n">also</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">handleHttpsRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;http&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">true</span><span class="p">.</span><span class="n">also</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">handleHttpRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Navigator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">turnLeft</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">turnRight</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">forward</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">backward</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//use with</span>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">navigate</span><span class="p">(</span><span class="n">navigator</span><span class="p">:</span> <span class="n">Navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">forward</span><span class="p">()</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">turnRight</span><span class="p">()</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">turnLeft</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">navigate1</span><span class="p">(</span><span class="n">navigator</span><span class="p">:</span> <span class="n">Navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">with</span><span class="p">(</span><span class="n">navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">forward</span><span class="p">()</span>
</span><span class='line'>        <span class="n">turnRight</span><span class="p">()</span>
</span><span class='line'>        <span class="n">backward</span><span class="p">()</span>
</span><span class='line'>        <span class="n">turnLeft</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>直接使用top-level方法，而不是Object里的方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="n">object</span> <span class="n">AppUtil</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">isAppEnabled</span><span class="p">(</span><span class="n">packageName</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="c1">//AppUtil.kt file</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">isAppEnabled</span><span class="p">(</span><span class="n">packageName</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Kotlin的默认参数特性，而不是方法重载</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BadPizza</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">hasCheese</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">hasCheese</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span> <span class="n">hasBacon</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GoodPizza</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">hasCheese</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">hasBacon</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>优先定义并使用扩展方法，而不是Util方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">isStringPhoneNumber</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">isPhoneNumber</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">TODO</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用方法引用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">NewsItem</span><span class="p">(</span><span class="k">val</span> <span class="n">content</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="n">isFake</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">normalLambda</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">arrayOf</span><span class="p">&lt;</span><span class="n">NewsItem</span><span class="p">&gt;().</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isFake</span> <span class="p">}.</span><span class="n">let</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">methodReference</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">arrayOf</span><span class="p">&lt;</span><span class="n">NewsItem</span><span class="p">&gt;().</span><span class="n">filter</span><span class="p">(</span><span class="n">NewsItem</span><span class="p">::</span><span class="n">isFake</span><span class="p">).</span><span class="n">let</span><span class="p">(::</span><span class="n">print</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用inline修饰高阶函数（参数为函数时）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">safeRun</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">block</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="nf">safeRun0</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">block</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>备注：</p>

<ul>
<li>关于inline的问题，可以参考<a href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/">Kotlin 中的 Lambda 与 Inline</a></li>
</ul>


<h2>把函数参数尽可能放到最后</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">delayTask</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span> <span class="n">delayInMillSecond</span><span class="p">:</span> <span class="n">Long</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do </span>
</span><span class='line'><span class="k">fun</span> <span class="nf">delayTask0</span><span class="p">(</span><span class="n">delayInMillSecond</span><span class="p">:</span> <span class="n">Long</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testDelayTasks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delayTask</span><span class="p">({</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;printing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span> <span class="m">5000L</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">delayTask0</span><span class="p">(</span><span class="m">5000L</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;printing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用mapNotNull</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testMapNotNull</span><span class="p">(</span><span class="n">list</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">FeedItem</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">author</span> <span class="p">}.</span><span class="n">filterNotNull</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testMapNotNull0</span><span class="p">(</span><span class="n">list</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">FeedItem</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">mapNotNull</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">author</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>尽可能使用只读集合</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">parseArguments</span><span class="p">(</span><span class="n">arguments</span><span class="p">:</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do some bad things</span>
</span><span class='line'>    <span class="c1">//try to clear if the argument is available to be cleared.</span>
</span><span class='line'>    <span class="p">(</span><span class="n">arguments</span> <span class="k">as</span><span class="p">?</span> <span class="n">HashMap</span><span class="p">)?.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//use read-only collections as much as possible</span>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">useMutableCollections</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">arguments</span> <span class="p">=</span> <span class="n">hashMapOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="n">arguments</span><span class="p">[</span><span class="s">&quot;key&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'>    <span class="n">parseArguments</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do </span>
</span><span class='line'><span class="k">fun</span> <span class="nf">useReadOnlyCollections</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">arguments</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span><span class="s">&quot;key&quot;</span> <span class="n">to</span> <span class="s">&quot;value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parseArguments</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>适宜情况下使用<code>Pair</code>或<code>Triple</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Use Pair or Triple</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">returnValues</span><span class="p">():</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Pair</span><span class="p">(</span><span class="m">404</span><span class="p">,</span> <span class="s">&quot;File Not Found&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">returnTriple</span><span class="p">():</span> <span class="n">Triple</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Triple</span><span class="p">(</span><span class="s">&quot;6时&quot;</span><span class="p">,</span> <span class="s">&quot;6分&quot;</span><span class="p">,</span> <span class="s">&quot;60秒&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用lazy 替代繁琐的延迟初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">Config</span><span class="p">(</span><span class="k">val</span> <span class="n">host</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="n">port</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">loadConfigFromFile</span><span class="p">():</span> <span class="n">Config</span> <span class="p">=</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="n">object</span> <span class="n">ConfigManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">config</span><span class="p">:</span> <span class="n">Config</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getConfig0</span><span class="p">()</span> <span class="p">:</span> <span class="n">Config</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">config</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">config</span> <span class="p">=</span> <span class="n">loadConfigFromFile</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">config</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">object</span> <span class="n">ConfigManager1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">config</span><span class="p">:</span> <span class="n">Config</span> <span class="n">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">loadConfigFromFile</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用lateinit 处理无法再构造函数初始化的变量</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FeedItem</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">author</span><span class="p">:</span> <span class="n">Feed</span><span class="p">.</span><span class="n">Author</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FeedItem0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="n">author</span><span class="p">:</span> <span class="n">Feed</span><span class="p">.</span><span class="n">Author</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>善用Data class的copy方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Car</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="n">engine</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">theEngine</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">engine</span> <span class="p">=</span> <span class="n">theEngine</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">car</span><span class="p">:</span> <span class="n">Car</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">engine</span> <span class="p">=</span> <span class="n">car</span><span class="p">.</span><span class="n">engine</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">Car0</span><span class="p">(</span><span class="k">val</span> <span class="n">engine</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">firstCar</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="s">&quot;Honda&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">secondCar</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="n">firstCar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">thirdCar</span> <span class="p">=</span> <span class="n">Car0</span><span class="p">(</span><span class="s">&quot;Nissan&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">fourthCar</span> <span class="p">=</span> <span class="n">thirdCar</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">fifthCar</span> <span class="p">=</span> <span class="n">thirdCar</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">engine</span> <span class="p">=</span> <span class="s">&quot;Ford&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>针对函数类型和集合使用<code>typealias</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="n">OnValueChangedListener</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onValueChanged</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">typealias</span> <span class="n">OnValueChangedListener0</span> <span class="p">=</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">value</span> <span class="p">:</span> <span class="n">OnValueChangedListener0</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">typealias</span> <span class="n">BookSet</span> <span class="p">=</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">Book</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">bookSet</span> <span class="p">=</span> <span class="n">BookSet</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">add</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&quot;978-0131872486&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用含义更加清晰的<code>substringBefore</code>和<code>substringAfter</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testSubstring</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;user|password&quot;</span>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.user=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.password=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testSubstring0</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;user|password&quot;</span>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.user=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substringBefore</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.password=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substringAfter</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是一些相对更加Kotlin style的代码示例，如有补充，请在下方评论指出。谢谢。</p>

<h2>相关阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/">Kotlin 中的 Lambda 与 inline</a></li>
<li><a href="https://droidyue.com/blog/2018/10/14/dive-into-kotlin-default-arguments-and-jvmoverloads/">有点意思的Kotlin的默认参数与JVMOverloads</a></li>
</ul>


<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/kotlin_hexin_biancheng.png" style="max-width: 100%;width: 100%;">
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 和 Flutter 对于开发者究竟意味着什么？]]></title>
    <link href="https://droidyue.com/blog/2019/05/12/kotlin-vs-flutter/"/>
    <updated>2019-05-12T21:34:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/12/kotlin-vs-flutter</id>
    <content type="html"><![CDATA[<p>本文系CSDN约稿，具体转载事宜请沟通CSDN。</p>

<blockquote><p>作者 : 段建华<br/>
责编 : 唐小引<br/>
出品 : CSDN（ID：CSDNnews）</p></blockquote>

<p>【CSDN 编者按】近些年来，编程语言流行度的变化其实不大，在 TIOBE 编程语言排行榜上，Java、C、C++ 固若金山，也就只有 Python 会攻城略地成为第四。在这 TOP3 之中，Java 以其非常优秀的普适性，可以用于前后端开发，再加上非常成熟的 JVM 虚拟机以及整个 Java 生态，让 Java 这个老大哥常年雄踞 TOP1，在 CSDN 的 Java 相关的文章之中，常有用户留言调侃“Java：你们随便争，反正我 Java 是第一”也可窥见一二。</p>

<p>而从两年前 Google 正式宣布 Kotlin 成为 Android 官方支持的语言开始，对于“Kotlin 即将取代 Java”的讨论便甚嚣尘上从未停歇。彼时，Kotlin 这个诞生于 2011 年的小伙子让已经使用了 Java 多年的 Android 开发者们有了点不可言说的滋味。同时，在过去的数年之间，伴随着 Oracle 与 Google 纷争不止，业界“Oracle 要玩死 Java”之声亦是不绝于耳。</p>

<!--more-->


<p>Java 8 更新，Oracle 将“删除”按钮设置成了高亮</p>

<p>2017 年，面对着 Kotlin 这个 Android 开发新贵，Realm 直接给出了一个预测，就是“到 2018 年底，在 Android 开发领域，Kotlin 将超越 Java，成为开发 Android 应用的第一语言”。</p>

<p>如今，时间上虽然稍晚了几个月，但这份预测却成为了现实。</p>

<p>那么，当今天 Google I/O 大会上，Kotlin 取代 Java 成为 Android App 开发的首选语言之时，对于我们移动开发者而言，究竟意味着什么？同时，当 Flutter 带着一统 App、Web、桌面及嵌入式开发之势而来之时，移动开发者该怎么办？对此，CSDN 特别邀请在国内 Android 圈子中较早研究 Kotlin 的段建华（@技术小黑屋）来解答目前开发者们最为关心的问题：为什么 Google 会越过 Java 让 Kotlin First？</p>

<h2>采用 Kotlin 与 Oracle 版权有关系么？</h2>

<p>其实可能没有关系。</p>

<p>这场起自 2010 年的诉讼案，几经反转，曾一度惊动美国最高法院，从最初的专利和版权侵权到最后聚焦在 Google 是否合理使用了 Java 的 API。但是 Oracle 自始至终都不是在控告 Google 允许开发者使用 Java 来开发应用程序。</p>

<p>而真正让 Kotlin 被 Google 采用的原因其实是 Kotlin 自身的优点，譬如安全、简洁、实用，以及与 Java 可交互良好等特点。除此之外，Kotlin 在相对很早的时候就在国外的知名公司用来开发 Android App，有着不错的氛围和环境，这也为其裂变发展贡献了不小的功劳。</p>

<h2>Kotlin First 对于 Android 开发者究竟意味着什么？</h2>

<p>首先对于 Google 来说，应该意味着更进一步地放弃 Java。这会导致更多的 Android 库出现对应的 Kotlin 实现，甚至可能是只有 Kotlin 版本，Android Studio IDE 也会出现更多的倾向于 Kotlin 的特性和支持等。结果可能会是 App 开发者进一步向 Kotlin 靠拢，而 Java 则相应地被进一步孤立。</p>

<p>其次，对于 Android 开发者来说，当本届 I/O 大会 Google 宣布 Kotlin 作为 Android 首选开发语言那一刻，再次证明我们使用 Kotlin 是正确的。内心都是无比 Exciting，充盈着一种满满的被认可感，而这势必会让更多的 Android 开发者投向 Kotlin 的怀抱。</p>

<p>同时，至关重要的是体现在业务上，对于管理者来说，会有更大的信心和更强的动力去推动团队完成从 Java 到 Kotlin 的转变。</p>

<p>事实上，当前在 Android 研发的招聘中，大部分招聘 JD 都会包含希望求职者具备 Kotlin 编码能力的描述，而面试者的简历也会提到自己学习或者项目应用 Kotlin 等内容。</p>

<p>并且，目前笔者从各种渠道了解到，大部分的公司都已经使用 Kotlin 作为首选开发语言，而且积极效果反馈明显。</p>

<p>看完移动端，我们再看服务端，不同于 Java 在后端的良好表现。尽管就 Kotlin 来说，除了前文所述的优点之外，协程是一大吸引，但 Kotlin 在中后台开发人员中的流行度可能并不会像在 Android 上这么顺利，究其原因，主要还是：</p>

<ul>
<li>缺乏官方权威或大公司背书来提振威望；</li>
<li>相关的框架需要进一步丰富；</li>
</ul>


<p>CSDN 编者注：对于这一点，在 CSDN《2018 &ndash; 2019 中国开发者调查报告》中，拥有十几年移动开发经验的轻芒联合创始人范怀宇对此表示：Java 的 Web 框架经过千锤百炼已经可以支撑足够大的并发，JVM 经过长年优化性能表现也非常出众，而 Java 的各类库、统一的编程模型、丰富的人才储备，可以满足各种场景的诉求。</p>

<p>相应的中文社区和氛围需要增强。</p>

<p>但无论如何，<strong>Kotlin 的确称得上是 Java 程序员近在咫尺的小确幸，你需要做的就是抓住它，不要错过</strong>。</p>

<h2>Google 同推 Flutter 和 Kotlin，那么移动开发者该如何做选择？</h2>

<p>我们再来看 Google 在移动端另一重推的框架，Flutter 自问世伊始便被寄予厚望，从开始的支持 Android 和 iOS 开发到现在的全平台（Mobile、Desktop、Web、Embedded），几近于真正地实现了数年来程序员梦寐以求的“Write once, run anywhere”的愿景。</p>

<p>因此相对而言，Flutter 显得更加有诱惑力，因为它是一个跨平台开发的解决方案，我想这也是大多数人给出的答案。</p>

<p>但是也有很多原因会导致你无法选用 Flutter，如下不完全列举：</p>

<ul>
<li>Flutter 需要使用 Dart 语言，没有第二语言。Dart 令人诟病的方面也不少；</li>
<li>对现有技术投入较多导致沉默成本过大，甚至是难以负担；</li>
<li>保守主义，避免过早地对某项技术投入资源；</li>
<li>领域限制，Flutter 无法满足要求。</li>
</ul>


<p>Kotlin 的被钦定可以解读为 Android 开始逐渐放弃 Java 语言这个开发依赖，而 Flutter 的推出可以被理解成 Google 开始放弃 Android，迎接新操作系统 Google Fuchsia 的准备。</p>

<p>出于综合考虑且必须二选一的情况下，建议你选择 Flutter，但是如果你有兴趣见识一种比 Java 更安全，更简洁，更实用，更优雅的语言的话，我也推荐你学一学 Kotlin。</p>

<p>Flutter 很有前途，但 Kotlin 也会让你欲罢不能，这确实是一件麻烦事。</p>

<h2>基于同时，对于我们所有技术人来说，一个非常头疼且不由得恐慌的问题，那便是如何应对日新月异的技术？</h2>

<p>这可能是越来越多的以工程为主的开发者面临的问题，因为今天有 Kotlin 和 Flutter，明天或许就会冒出来 Gotlin、Hlutter 等新的技术。</p>

<p>日新月异层出不穷，不断追求学习并不现实，反而有可能把自己搞的很累，甚至是产生负面效果。新技术固然可以学习，但是作为技术人，获得完善的素养显得更加意义深远。</p>

<p>笔者认为一个技术人员想要具备完善的素养，需要朝着这些方向努力：</p>

<ul>
<li>夯实基础；</li>
<li>学好英语；</li>
<li>提升学习能力；</li>
<li>坚持总结归纳问题的习惯；</li>
<li>增强分析问题，解决问题的能力。</li>
</ul>


<p>一个技术人员能够走多远，靠的不是会某种技术，而是完善以上高质量的素养。</p>

<h2>Kotlin 相关文章延伸阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation/">关于应用Kotlin后的编译速度问题</a></li>
<li><a href="https://droidyue.com/blog/2017/05/21/my-opinion-of-kotlins-becoming-an-official-language-of-android/">如何看待 Kotlin 成为 Android 官方支持开发语言？</a></li>
<li><a href="https://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/">为什么我要改用Kotlin</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防手抖开源之 Git 钩子]]></title>
    <link href="https://droidyue.com/blog/2019/05/04/git-pre-push-hook/"/>
    <updated>2019-05-04T19:12:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/04/git-pre-push-hook</id>
    <content type="html"><![CDATA[<p>最近“从开源到跑路”的事件逐渐增多，给涉事企业造成了不小的损失。因而相关的防范工作显得愈发重要。</p>

<p>客观而言，人为手动的防范显得原始和笨拙，好在git提供了相关的钩子方法，为我们这里的防范提供了可行性。</p>

<p>这里我们以<code>git push</code> 命令对应的<code>pre-push</code>钩子为例，因为想要开源出去，这个命令通常是必须执行的。</p>

<!--more-->


<h2>编写git pre-hook</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># An example hook script to verify what is about to be pushed.  Called by &quot;git</span>
</span><span class='line'><span class="c"># push&quot; after it has checked the remote status, but before anything has been</span>
</span><span class='line'><span class="c"># pushed.  If this script exits with a non-zero status nothing will be pushed.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This hook is called with the following parameters:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># $1 -- Name of the remote to which the push is being done</span>
</span><span class='line'><span class="c"># $2 -- URL to which the push is being done</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If pushing without using a named remote those arguments will be equal.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Information about the commits which are being pushed is supplied as lines to</span>
</span><span class='line'><span class="c"># the standard input in the form:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   &lt;local ref&gt; &lt;local sha1&gt; &lt;remote ref&gt; &lt;remote sha1&gt;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This sample shows how to prevent push of commits where the log message starts</span>
</span><span class='line'><span class="c"># with &quot;WIP&quot; (work in progress).</span>
</span><span class='line'>
</span><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;git@github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;https://github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">z40</span><span class="o">=</span>0000000000000000000000000000000000000000
</span><span class='line'>
</span><span class='line'><span class="k">while </span><span class="nb">read </span>local_ref local_sha remote_ref remote_sha
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span> <span class="s2">&quot;$local_sha&quot;</span> <span class="o">=</span> <span class="nv">$z40</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>      <span class="c"># Handle delete</span>
</span><span class='line'>      :
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$remote_sha&quot;</span> <span class="o">=</span> <span class="nv">$z40</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'>          <span class="c"># New branch, examine all commits</span>
</span><span class='line'>          <span class="nv">range</span><span class="o">=</span><span class="s2">&quot;$local_sha&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="c"># Update to existing branch, examine new commits</span>
</span><span class='line'>          <span class="nv">range</span><span class="o">=</span><span class="s2">&quot;$remote_sha..$local_sha&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># Check for WIP commit</span>
</span><span class='line'>      <span class="nv">commit</span><span class="o">=</span><span class="sb">`</span>git rev-list -n 1 --grep <span class="s1">&#39;^WIP&#39;</span> <span class="s2">&quot;$range&quot;</span><span class="sb">`</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$commit&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Found WIP commit in $local_ref, not pushing&quot;</span>
</span><span class='line'>          <span class="nb">exit </span>1
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>拦截代码解释</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;git@github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;https://github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的代码</p>

<ul>
<li>拦截git协议的到github远程仓库的push请求</li>
<li>拦截https协议的到github远程仓库的push请求</li>
</ul>


<p>除此之外，我们还可以做什么</p>

<ul>
<li>可以根据自身需要增加<code>git@gitee.com</code>等屏蔽</li>
<li>根据需要，可以判定仓库名称来屏蔽。</li>
<li>编写shell语句，实现更加复杂的拦截处理</li>
</ul>


<p>完整文件地址: <a href="https://asset.droidyue.com/content/pre-push">https://asset.droidyue.com/content/pre-push</a></p>

<h2>针对单个Repo生效</h2>

<p>将上述pre-push 放入项目的<code>.git/hooks/</code>下面即可</p>

<h2>针对全局生效</h2>

<p>git 2.9 开始支持
设置全局git hook路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global core.hooksPath  /Users/yourUserName/.git/hooks
</span></code></pre></td></tr></table></div></figure>


<p>将上述pre-push 放入<code>/Users/yourUserName/.git/hooks</code></p>

<p>支持文件可执行权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod a+x your_pre_push_hook_path
</span></code></pre></td></tr></table></div></figure>


<h2>效果演示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xxx@bogon:/tmp/vim_katana<span class="o">(</span>master|✔<span class="o">)</span> % git push origin master
</span><span class='line'>git@github.com:androidyue/vim_katana.git
</span><span class='line'>github repo refused to push
</span><span class='line'>error: failed to push some refs to <span class="s1">&#39;git@github.com:androidyue/vim_katana.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>效果有多少</h2>

<p>防止恶意开源，并不能。只是理论上稍微提高了一点门槛。</p>

<p>这是因为</p>

<ul>
<li>恶意开源者可能删除这些git钩子</li>
<li>恶意开源者可以使用别的形式公开代码</li>
</ul>


<h2>它能做什么</h2>

<ul>
<li>如题所属，它是自身无意原因或者某些恶意中间环节导致开源的最后一道防线。</li>
</ul>


<p>源码安全无小事，事事需谨慎。</p>

<h2>内容推荐</h2>

<ul>
<li><a href="https://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/">pre-commit钩子实例</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 中的 Lambda 与 inline]]></title>
    <link href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/"/>
    <updated>2019-04-27T19:26:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline</id>
    <content type="html"><![CDATA[<p>在Kotlin中，有很多很酷很实用的特性，比如Lambda和高阶函数，利用这些特性，我们可以更加快速的实现开发，提升效率。</p>

<p>比如我们实现一个捕获Throwable，安全执行部分代码的高阶函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">safeRun</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">t:</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testNormalSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testNormalSafeRun&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>由于Kotlin默认是面向JDK 6，而Java 8 才引入Lambda表达式支持，Kotlin实际上是将Lambda翻译成了匿名内部类的实现形式。所以当我们反编译上面的代码，得到的如下的代码</p>

<p>Lambda被翻译成的class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="kd">extends</span> <span class="n">Lambda</span>
</span><span class='line'><span class="kd">implements</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="cm">/* invalid duplicate definition of identical inner class */</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testNormalSafeRun&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda表达式被调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">InlineSampleKt</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">safeRun</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNormalSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">safeRun</span><span class="o">(</span><span class="n">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的 Lambda 表达式 比较简单，那是因为</p>

<ul>
<li>Lambda 表达式仅仅使用了一次</li>
<li>Lambda 表达式未捕获外部的变量</li>
</ul>


<p>为了更深入的研究，我们尝试一下更加复杂的情况</p>

<ul>
<li>Lambda 表达式会多次调用</li>
<li>Lambda 表达式捕获外部的变量</li>
</ul>


<p>这里我们使用下面的代码，实现一个多次调用捕获外部变量的 Lambda 表达式的调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">toManyLambdaCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">safeRun</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;toManyLambdaCalls currentCount=$i&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的Lambda 表达式 捕获了外部的变量<code>i</code>，同时执行了很多次。</p>

<p>我们反编译上述的代码，得到的类似的Java实现代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">toManyLambdaCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">void</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">safeRun</span><span class="o">((</span><span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;)((</span><span class="n">Function0</span><span class="o">)</span><span class="k">new</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;((</span><span class="kt">int</span><span class="o">)</span><span class="n">i</span><span class="o">){</span>
</span><span class='line'>                <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="kt">int</span> <span class="n">$i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;toManyLambdaCalls currentCount=&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="n">$i</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="o">.</span><span class="n">$i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>                    <span class="kd">super</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}));</span>
</span><span class='line'>            <span class="o">++</span><span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中</p>

<ul>
<li>Lambda 表达式 翻译成的Function0 的实例被创建了近101多次，生成101个Fuction0 实例</li>
<li>由于Lambda 表达式捕获了外部的变量，生成的Fuction0类 接受变量作为参数</li>
</ul>


<p>上述代码存在的性能问题</p>

<ul>
<li>Function0 实例创建过多，而这些实例大多数会很快被回收，造成短时间内GC压力增大</li>
<li>次数过多的方法调用(Function0构造方法和invoke方法)，造成一定的耗时</li>
</ul>


<p>显然，这种实现，我们不能接受的。</p>

<h2>inline</h2>

<p>好在Kotlin提供了，处理上面问题的方法，这就是所谓的inline 关键字。如下，</p>

<ul>
<li>我们使用inline修饰<code>safeRunInlined</code>方法</li>
<li><code>testInlinedSafeRun</code> 中调用 <code>safeRunInlined</code> 方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">safeRunInlined</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">t:</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testInlinedSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">safeRunInlined</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testInlinedSafeRun&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次我们反编译上面的Kotlin代码，得到对应的Java 代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">safeRunInlined</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$safeRunInlined</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var3</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testInlinedSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var0</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testInlinedSafeRun&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var2</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们分析上述代码发现，testInlinedSafeRun 的方法体包含了</p>

<ul>
<li>safeRunInlined 的方法体</li>
<li>Lambda 表达式的内容</li>
</ul>


<p>是的，inline 的作用就是把上面两项的内容，提取到调用处 testInlinedSafeRun 中。通过这种形式，避免了最一开始的类实例生成的问题了。</p>

<h3>When Lambada meets return</h3>

<p>自从了解了 Lambda 可以被inline后，我们貌似可以自由自在地使用它。然而事实或许不是这样，比如我们看一下这段代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">higherOrderFunctionFirst</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;higherOrderFunction.before&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;higherOrderFunction.after&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testLambdaReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionFirst</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testLambdaReturn&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码我们执行预期的输出应该是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">before</span>
</span><span class='line'><span class="n">testLambdaReturn</span>
</span><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">after</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后实际的执行结果却有点事与愿违</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">before</span>
</span><span class='line'><span class="n">testLambdaReturn</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因还是发生了inline，higherOrderFunctionFirst的执行因为<code>runnable</code>中的return，造成了该方法的返回。</p>

<p>解决方法也比较简单，就是不直接使用return，而是使用指定label的return方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testLambdaReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionFirst</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testLambdaReturn&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span><span class="nd">@higherOrderFunctionFirst</span> <span class="c1">//valid</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决了上面的问题，我们还需要带出一个技术概念，就是控制流。</p>

<h2>control flow 控制流</h2>

<p>维基百科中的英文定义</p>

<blockquote><p>In computer science, control flow (or flow of control) is the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated.</p></blockquote>

<p>对应的中文意思是 在计算机科学中，控制流是单个语句（指令，或命令式编程中函数调用）的执行顺序。</p>

<h2>local control flow 本地控制流</h2>

<p>本地控制流和上面的功能描述一致，只是限定了范围为方法内部。比如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testControlFlow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">functionA</span><span class="o">()</span>
</span><span class='line'>    <span class="n">functionB</span><span class="o">()</span>
</span><span class='line'>    <span class="n">functionC</span><span class="o">()</span>
</span><span class='line'>    <span class="c1">//..... other code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果上面的方法遵循本地控制流，则<code>functionA</code>,<code>functionB</code>和<code>functionC</code>依次执行，但是存在违背本地控制流的情况，即非本地控制流(Non local control flow)，常见的有</p>

<ul>
<li>inline 的 Lambda 表达式含有return</li>
<li>上述的<code>functionA</code>，<code>functionB</code>或<code>functionC</code>发生<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">未捕获异常</a></li>
<li>协程也会导致 Non local control flow出现</li>
</ul>


<p>对于Lambda中的return，除了上述的解决方法，还有下面两种解决方法</p>

<h2>noinline</h2>

<ul>
<li>noinline 用来限定 lambda表达式</li>
<li>noinline 强制lambda表达式 不进行inline处理，对应的方式就是翻译成内部类实现。</li>
<li>noinline 需要配合inline使用</li>
</ul>


<p>使用示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">bigHigherOrderFunction</span><span class="o">(</span><span class="nl">firstRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">,</span> <span class="n">noinline</span> <span class="nl">secondRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">,</span> <span class="nl">thirdRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">firstRunnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">secondRunnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">thirdRunnable</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testNoInline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigHigherOrderFunction</span><span class="o">({</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;firstRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;secondRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">//return //not allowed if the lambda is noinlined</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;thirdRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译验证一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">NoinlineSampleKt</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">bigHigherOrderFunction</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">firstRunnable</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">secondRunnable</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">thirdRunnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$bigHigherOrderFunction</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">firstRunnable</span><span class="o">,</span> <span class="s">&quot;firstRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">secondRunnable</span><span class="o">,</span> <span class="s">&quot;secondRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">thirdRunnable</span><span class="o">,</span> <span class="s">&quot;thirdRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">firstRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">secondRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">thirdRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNoInline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function0</span> <span class="n">secondRunnable$iv</span> <span class="o">=</span> <span class="o">(</span><span class="n">Function0</span><span class="o">)</span><span class="kc">null</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$bigHigherOrderFunction</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;firstRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">secondRunnable$iv</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;thirdRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，对于不进行inline处理的 lambda 表达式中 不允许使用return。</p>

<h2>crossinline</h2>

<p>但是我们使用了上面的noinline，可能还是担心一些性能问题，好在这里，还有一个叫做crossinline的东西。</p>

<ul>
<li>crossinline 需要配合inline一起起作用</li>
<li>crossinline 限定的 lambda 不允许使用return，避免了non local control flow问题</li>
</ul>


<p>使用示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//crossinline必须和inline结合使用</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">higherOrderFunctionCrossline</span><span class="o">(</span><span class="n">crossinline</span> <span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testCrossline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionCrossline</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testCrossline&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">//        return  not allowed here</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次反编译验证代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">higherOrderFunctionCrossline</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$higherOrderFunctionCrossline</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testCrossline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$higherOrderFunctionCrossline</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testCrossline&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kotlin inline与 JIT inline的区别</h2>

<p>提到inline，听说过的朋友可能第一个想到的是 JIT 的 inline。JIT inline 是JVM虚拟机提供的运行时的一种优化方式。</p>

<p>来一段代码举例来说</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">add</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当JVM的JIT编译决定将add方法执行inline操作后，testAdd的方法实现会变成类似这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即 将add的方法体实现提取到调用处(testAdd方法中)。inline带来的好处也不言而喻，那就是减少了方法调用产生的进栈和出栈操作，提升运行时的效率。</p>

<p>Kotlin的inline作用和JIT inline大体差不多，稍有一些不同</p>

<ul>
<li>Kotlin的inline发生在编译时，而不是运行时</li>
<li>Kotlin的inline可以明确指定，而jit inline则无法指定发生。</li>
</ul>


<h2>inline 带来的其他问题 can not access private variable</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">val</span> <span class="n">aPrivateValue</span> <span class="o">=</span> <span class="s">&quot;A Private Value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="n">val</span> <span class="n">internalValue</span> <span class="o">=</span> <span class="s">&quot;Internal Value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@PublishedApi</span>
</span><span class='line'><span class="n">internal</span>  <span class="n">val</span> <span class="n">taskId</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">val</span> <span class="n">publicValue</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">publicVariable</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">beToInlinedMethod</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//aPrivateValue //Public-API inline function cannot access non-public-API</span>
</span><span class='line'>    <span class="c1">// &#39;private val aPrivateValue: String&#39; defined in root package in file InlineAccessPrivateMember.kt</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  internalValue  同样也报错上面的错误</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">taskId</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publicValue</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publicVariable</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的beToInlinedMethod 无法访问声明在同一文件中的<code>aPrivateValue</code>和<code>internalValue</code>，因为</p>

<ul>
<li><code>beToInlinedMethod</code>的方法体很有可能被提取到别的模块的方法中</li>
<li>而private 只能在定义的文件中访问</li>
<li>internal 只能限定在同一模块访问</li>
</ul>


<p>解决访问有很多</p>

<ul>
<li>使用上面的public，默认的访问限定符就是public</li>
<li>也可以使用更加推荐的，internal 加上 @PublishedApi 注解的方式。</li>
</ul>


<p>注：反编译代码受工具影响，可能有些微问题，但不影响总体理解。</p>

<h2>涉及与延展内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line/">终端反编译字节码利器 CFR</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/2015/11/28/article-java-8-lambdas-a-peek-under-the-hood/">深入探索Java 8 Lambda表达式</a></li>
<li><a href="https://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly/">你的Java代码对JIT编译友好么？</a></li>
<li><a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://android.jlelse.eu/inline-noinline-crossinline-what-do-they-mean-b13f48e113c2">https://android.jlelse.eu/inline-noinline-crossinline-what-do-they-mean-b13f48e113c2</a></li>
<li><a href="https://stackoverflow.com/questions/38827186/what-is-the-difference-between-crossinline-and-noinline-in-kotlin">https://stackoverflow.com/questions/38827186/what-is-the-difference-between-crossinline-and-noinline-in-kotlin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[货物崇拜编程]]></title>
    <link href="https://droidyue.com/blog/2019/03/24/cargo-cults-programming/"/>
    <updated>2019-03-24T19:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/24/cargo-cults-programming</id>
    <content type="html"><![CDATA[<p>读到这个标题，多数人会有疑惑，什么是货物崇拜编程，其实最根本的问题可能是什么是货物崇拜。想要了解这些就不得不说货物崇拜(Cargo Cults，又译货物运动)的起源</p>

<blockquote><p>第二次世界大战太平洋战争时，美军于塔纳岛建立一临时基地。当时岛上的原住民看见美军于“大铁船”（军舰）内出来，皆觉得十分惊讶；他们也看到，有一些“大铁鸟”（军用飞机）运送穿着美军军服的人及许多物资。这些原住民看见这种情况均感到很惊讶，并觉得这些“大铁船”及“大铁鸟”十分厉害。加上美军也提供部分物资给原住民，而这些物资对原住民来说十分有用，结果这些原住民将美军当作神。</p>

<p>第二次世界大战结束后，美军离开塔纳岛，只留下一些美军军服及一些货物。塔纳岛原住民便认为这些货物具有神奇力量，又相信“神”（美军）他日会回来并带来更多货物，使他们展开一个幸福新时代。但是美军当然再也没有回来塔纳岛，因此这些原住民便自己发展出一套敬拜仪式，崇拜美军军服及货物；表现形式是原住民会穿着美军军服、升起美国国旗，图腾则是木刻的飞机。</p></blockquote>

<!--more-->


<p>货物崇拜编程则是上面的货物崇拜的引申，维基百科对其定义如下</p>

<blockquote><p>货物崇拜编程（Cargo Cult Programming）是一种计算机程序设计中的反模式，其特征为不明就里地、仪式性地使用代码或程序架构。货物崇拜编程通常是程序员既没理解他要解决的bug、也没理解表面上的解决方案的典型表现。</p></blockquote>

<h2>现象</h2>

<ul>
<li>从网络上看到一些 看似有道理却不起作用的内容</li>
<li>为了用设计模式而用设计模式等刻意使用</li>
<li>复制Stack Overflow上的内容，只要运行OK即可</li>
</ul>


<p>这里以代码为例，列举几处违例</p>

<h3>设置变量为null 释放内存</h3>

<p>可能很多人都听过，类似手动设置变量为null，可以释放内存，缓解内存压力。于是就有人奉其为金科玉律，写出了类似下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;message&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">view</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clean</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//解除引用关系，释放内存</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>我们在clean方法中，手动设置view和message为null以期待可以释放内存</li>
<li>由于Java是自动垃圾回收，只要ViewHolder示例不被持有，view就可以释放，<code>view = null</code>显然是画蛇添足</li>
<li>更复杂的情况，message对应的字符串内容回收，还需要考虑<a href="https://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/">字符串常量池</a>的存在。<code>message = null</code>无法释放字符串内容</li>
</ul>


<h3>使用弱引用防止内存泄露</h3>

<p>同样，很多人都听说过 弱引用(WeakReference) ，它可以避免内存泄露，于是写出了下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initWebView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//使用弱引用防止程序webview导致内存泄漏</span>
</span><span class='line'>            <span class="n">webView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebView</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="o">....</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>仅仅听说了弱引用，但是不知道强引用，更不知道他们阻止GC回收的能力</li>
<li>WebView构造方法接收强引用的Context，<code>new WeakReference&lt;Context&gt;(this)</code>试图构造一个Context的弱引用，但是<code>new WeakReference&lt;Context&gt;(this).get()</code>又从构建的弱引用中得出了原始的强引用</li>
<li>上面的代码，只会是事与愿违。</li>
</ul>


<h3>处理SSLError引发安全问题</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceivedSslError</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">SslErrorHandler</span> <span class="n">handler</span><span class="o">,</span> <span class="n">SslError</span> <span class="n">error</span><span class="o">){</span>
</span><span class='line'>  <span class="n">handler</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码是Webview加载遇到SSL证书问题出错时的回调，网上很多人告诉我们，像上面的方式处理就能解决网页加载出错的问题，殊不知这回引发更大的风险漏洞问题。</p>

<h2>货物崇拜的问题</h2>

<ul>
<li>不熟悉内部原理，无法预期会发生什么，这是很危险的</li>
</ul>


<h2>易出现人群</h2>

<ul>
<li>新手或者经验不足的人，对很多东西和技术不熟悉</li>
<li>缺乏思考，思想懒惰的人</li>
</ul>


<h2>如何避免</h2>

<p>如下，简单谈一些我认为能够规避货物崇拜编程的方式与方法</p>

<h3>自身学习和思考，怀疑</h3>

<ul>
<li>这是从内部驱动的解决方法，通过学习，我们可以把对一项技术的掌握从0变为1，进而变成100。在这个过程中，我们自然能规避那些货物崇拜的问题。</li>
<li>保持思考，切忌懒惰，对于技术和代码，我们在会使用的情况下，更要研究和思考并了解其内部的机制和原理。</li>
<li>保持怀疑，科学精神的精髓就是“怀疑”，在既不能证实也不能证伪的情况下那就存疑</li>
</ul>


<h3>结对编程与代码审核</h3>

<ul>
<li>这是外部驱动的解决方法</li>
<li>找一个有经验的人来结对编程，或代码审核，能够在代码上线之前发现潜在的问题并更正。</li>
</ul>


<p>拒绝货物崇拜编程，学习，思考，怀疑。</p>

<h2>References</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B2%A8%E7%89%A9%E5%B4%87%E6%8B%9C">货物崇拜</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B4%A7%E7%89%A9%E5%B4%87%E6%8B%9C%E7%BC%96%E7%A8%8B">货物崇拜编程</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
