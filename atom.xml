<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="http://droidyue.com/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2015-06-16T14:27:13+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[说说依赖注入]]></title>
    <link href="http://droidyue.com/blog/2015/06/13/talk-show-about-dependency-injection/"/>
    <updated>2015-06-13T22:59:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/13/talk-show-about-dependency-injection</id>
    <content type="html"><![CDATA[<p>在面向对象编程中，我们经常处理处理的问题就是解耦，程序的耦合性越低表明这个程序的可读性以及可维护性越高。控制反转(Inversion of Control或IoC)就是常用的面向对象编程的设计原则，使用这个原则我们可以降低耦合性。其中依赖注入是控制反转最常用的实现。</p>

<!--more-->


<h2>什么是依赖</h2>

<p>依赖是程序中常见的现象，比如类Car中用到了GasEnergy类的实例energy，通常的做法就是在Car类中显式地创建GasEnergy类的实例，并赋值给energy。如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Energy</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">class</span> <span class="nc">GasEnergy</span> <span class="kd">implements</span> <span class="n">Energy</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">energy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GasEnergy</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存在问题</h2>

<ul>
<li>类Car承担了多余的责任，负责energy对象的创建，这必然存在了严重的耦合性。举一个现实中的例子，一辆汽车使用哪种能源不是由汽车来决定，而是由汽车制造商（CarMaker）来决定，这是汽车制造商的责任。</li>
<li>可扩展性，假设我们想修改能源为电动力，那么我们必然要修改Car这个类，明显不符合开放闭合原则。</li>
<li>不利于单元测试。</li>
</ul>


<h2>依赖注入</h2>

<p>依赖注入是这样的一种行为，在类Car中不主动创建GasEnergy的对象，而是通过外部传入GasEnergy对象形式来设置依赖。
常用的依赖注入有如下三种方式</p>

<h3>构造器注入</h3>

<p>将需要的依赖作为构造方法的参数传递完成依赖注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">mEnergy</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mEnergy</span> <span class="o">=</span> <span class="n">energy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setter方法注入</h3>

<p>增加setter方法，参数为需要注入的依赖亦可完成依赖注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">mEnergy</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnergy</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mEnergy</span>  <span class="o">=</span> <span class="n">energy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>接口注入</h3>

<p>接口注入，闻其名不言而喻，就是为依赖注入创建一套接口，依赖作为参数传入，通过调用统一的接口完成对具体实现的依赖注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">EnergyConsumerInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnergy</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="kd">implements</span> <span class="n">EnergyConsumerInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">mEnergy</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnergy</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mEnergy</span>  <span class="o">=</span> <span class="n">energy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接口注入和setter方法注入类似，不同的是接口注入使用了统一的方法来完成注入，而setter方法注入的方法名称相对比较随意。</p>

<h2>框架取舍</h2>

<p>依赖注入有很多框架，最有名的就是Guice，当然Spring也支持依赖注入。Guice采用的是运行时读取注解，通过反射的形式生成依赖并进行注入。这种形式不太适合Android移动设备，毕竟这些操作都在运行时处理，对性能要求较高。</p>

<p>Dagger则是Android开发适合的依赖注入库，其同样采用类注解的形式，不同的是它是在编译时生成辅助类，等到在运行时使用生成的辅助类完成依赖注入。</p>

<h3>用还是不用</h3>

<p>其实注入框架用还是不用，是一个问题，如若使用框架，则要求团队每一个人都要遵守说明来编写代码解决依赖注入。而这些框架其实也并非很容易就能上手，学习系数相对复杂，难以掌握，这也是需要考虑的问题。</p>

<p>个人观点为不推荐也不反对使用这些框架，但是觉得有些时候我们寄希望于一个框架，不如平时注意这些问题，人为避免何尝不是对自己的一种基本要求呢？</p>

<h2>依赖查找</h2>

<p>依赖查找和依赖注入一样属于控制反转原则的具体实现，不同于依赖注入的被动接受，依赖查找这是主动请求，在需要的时候通过调用框架提供的方法来获取对象，获取时需要提供相关的配置文件路径、key等信息来确定获取对象的状态。</p>

<h2>书籍推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B004G8P90S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004G8P90S&amp;linkCode=as2&amp;tag=droidyue-23">研磨设计模式</a></li>
<li><a href="http://www.amazon.cn/gp/product/B00INI842W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00INI842W&amp;linkCode=as2&amp;tag=droidyue-23">设计模式之禅</a></li>
<li><a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011FBU34&amp;linkCode=as2&amp;tag=droidyue-23">Head First设计模式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[垃圾回收器如何处理循环引用]]></title>
    <link href="http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references/"/>
    <updated>2015-06-05T23:24:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references</id>
    <content type="html"><![CDATA[<p>垃圾回收是一门编程语言中必不可少的一部分，不论是手动释放内存的C和C++，还是自动回收垃圾的Java和C#等语言。对于Java这样的语言，一般的开发者不强求关心对象回收和内存释放，但是理解垃圾回收对开发工作还是大有裨益的。</p>

<!--more-->


<p>在编程语言中，普遍存在着循环引用这样的问题，垃圾回收器是如何处理循环引用呢，常用的垃圾回收有引用计数和引用对象遍历两种实现，它们各自又是如何处理循环引用呢？本文讲以JVM中的GC为例逐一回答这些问题。</p>

<h2>何为循环引用</h2>

<p>如果有两个或者以上的对象，它们彼此引用，就会造成循环引用。如下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Node</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Node</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'><span class="n">Node</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中，a对象引用了b对象，b对象也引用了a对象，这种情况下a对象和b对象就形成了循环引用。</p>

<h2>引用计数GC处理</h2>

<h3>什么是引用计数</h3>

<p>引用计数是一种垃圾回收的形式，每一个对象都会有一个计数来记录有多少指向它的引用。其引用计数会变换如下面的场景</p>

<ul>
<li>当对象增加一个引用，比如赋值给变量，属性或者传入一个方法，引用计数执行加1运算。</li>
<li>当对象减少一个引用，比如变量离开作用域，属性被赋值为另一个对象引用，属性所在的对象被回收或者之前传入参数的方法返回，引用计数执行减1操作。</li>
<li>当引用计数变为0，代表该对象不被引用，可以标记成垃圾进行回收。</li>
</ul>


<h3>如何处理</h3>

<p>实际上单纯的基于引用计数实现的计数器无法处理循环引用带来的问题。</p>

<p>CPython的垃圾回收就是采用引用计数,采用引用计数的主垃圾回收器会清理垃圾，对于那些因为循环引用无法清理的对象，CPython会不时启动一个辅助的基于引用遍历的垃圾回收器来清理它们。</p>

<h2>引用遍历GC处理</h2>

<h3>什么是引用对象遍历</h3>

<p>垃圾回收器从被称为GC Roots的点开始遍历遍历对象，凡是可以达到的点都会标记为存活，堆中不可到达的对象都会标记成垃圾，然后被清理掉。
GC Roots有哪些</p>

<ul>
<li>类，由系统类加载器加载的类。这些类从不会被卸载，它们可以通过静态属性的方式持有对象的引用。注意，一般情况下由自定义的类加载器加载的类不能成为GC Roots</li>
<li>线程，存活的线程</li>
<li>Java方法<a href="http://droidyue.com/blog/2014/12/07/differences-between-stack-and-heap-in-java/">栈</a>中的局部变量或者参数</li>
<li><a href="http://droidyue.com/blog/2014/12/21/java-runtime-data-areas/">JNI方法栈</a>中的局部变量或者参数</li>
<li>JNI全局引用</li>
<li>用做同步监控的对象</li>
<li>被JVM持有的对象，这些对象由于特殊的目的不被GC回收。这些对象可能是系统的类加载器，一些重要的异常处理类，一些为处理异常预留的对象，以及一些正在执行类加载的自定义的类加载器。但是具体有哪些前面提到的对象依赖于具体的JVM实现。</li>
</ul>


<h3>如何处理</h3>

<p>基于引用对象遍历的垃圾回收器可以处理循环引用，只要是涉及到的对象不能从GC Roots<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">强引用</a>可到达，垃圾回收器都会进行清理来释放内存。</p>

<h2>总结</h2>

<p>基于引用计数的垃圾回收器无法处理循环引用导致的内存泄露问题，但是其在主流的JVM中很少，几乎所有的JVM都是采用引用对象遍历的方法，垃圾回收器都会处理循环引用潜在的问题。</p>

<h2>一本书</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00D2ID4PK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D2ID4PK&amp;linkCode=as2&amp;tag=droidyue-23">深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中HTTP相关的API]]></title>
    <link href="http://droidyue.com/blog/2015/05/30/android-http-clients/"/>
    <updated>2015-05-30T23:09:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/30/android-http-clients</id>
    <content type="html"><![CDATA[<p>Android中大多数应用都会发送和接受HTTP请求，在Android API中主要由两个HTTP请求的相关类，一个是HttpURLConnection，另一个是Apache HTTP Client。这两个类实现的HTTP请求都支持HTTPS协议，基于流的上传和下载，可配置超时时间，IPv6和连接池。</p>

<!--more-->


<h2>Apache HTTP Client</h2>

<p>DefaultHttpClient和同类的AndroidHttpClient都是可扩展的类。它们有大量且灵活的API，适用于网页浏览器开发。同时它们比较稳定并且bug较少。但是繁多的API的现实下，对其改善与保持兼容性不可得兼，明显Android团队的精力已然不在Apache HTTP Client。</p>

<h2>HttpURLConnection</h2>

<p>HttpURLConnection是一个通用，轻量的实现，可以满足大多数的程序进行HTTP请求。这个类虽然一开始比较简陋，但是其主要的几个API使得我们更容易进行稳定改善。</p>

<h3>连接池污染</h3>

<p>在冻酸奶（Android 2.2）之前，HttpURLConnection有着一些烦人的bug。最烦人的就是调用一个可读的InputStream的close方法会污染连接池。我们需要禁用连接池绕开这个问题，如下代码可以禁用连接池。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">disableConnectionReuseIfNecessary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// HTTP connection reuse which was buggy pre-froyo</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">FROYO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;http.keepAlive&quot;</span><span class="o">,</span> <span class="s">&quot;false&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>压缩数据与大小</h3>

<p>从2.3开始，我们默认对返回的响应进行了压缩，HttpURLConnection会自动为发出去的请求加上<code>Accept-Encoding: gzip</code>这个头信息。如果gzip压缩的响应有问题，可以通过下面代码禁用gzip。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">urlConnection</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">&quot;Accept-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;identity&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于HTTP中的Content-Length头信息返回的是压缩后的大小，所以我们不能使用getContentLength()来计算未压缩数据的大小。正确的做法应该是读取HTTP响应中的字节，直到InputStream.read()方法返回为-1.</p>

<h3>HTTPs改进</h3>

<p>从Gingerbread开始，增加了对HTTPs链接的优化。在进行HTTPs请求之前，HttpsURLConnection会尝试使用服务器名字指示(Server Name Indication)，这种技术可以让多个HTTPs主机共享一个IP地址。在HTTPs请求中，HttpsURLConnection也支持压缩和会话标签（Session Tickets）。一旦连接失败，HttpsURLConnection会不使用上面的三个特性进行重试。这样即可以保证在连接时高效率地连接到最新的服务器，也可以在不破坏兼容性的同时连接到旧服务器。</p>

<h3>响应缓存</h3>

<p>从4.0开始，HttpURLConnection引入了响应缓存机制。一旦缓存创建，后续的HTTP请求会按照下面情况处理</p>

<ul>
<li>完全缓存的响应会直接从本地存储中读取，响应很快，不需要网络连接。</li>
<li>有条件的缓存必须由服务端进行freshness验证，比如client发出一个请求，如&#8221;Give me /foo.png if it changed since yesterday&#8221;，然后服务器端要么返回最新的内容，要么返回304未修改的状态。如果内容不变，则不下载。</li>
<li>没有缓存的响应需要服务器处理，然后这些请求被缓存下来。</li>
</ul>


<p>对于低于4.0的版本，我们可以使用反射开启响应的缓存机制</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">enableHttpResponseCache</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">httpCacheSize</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">;</span> <span class="c1">// 10 MiB</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">httpCacheDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">getCacheDir</span><span class="o">(),</span> <span class="s">&quot;http&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;android.net.http.HttpResponseCache&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;install&quot;</span><span class="o">,</span> <span class="n">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">long</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">httpCacheDir</span><span class="o">,</span> <span class="n">httpCacheSize</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">httpResponseCacheNotAvailable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这里还需要服务器端设置HTTP缓存相关的头信息。</p>

<h2>哪家强</h2>

<p>在2.3之前的版本，Apache的HTTP请求响应实现比较稳定，bug也少，所以在那些版本上它的最好。</p>

<p>但是在2.3之后，毫无疑问，HttpURLConnection是最好的。它API精简实用，默认支持压缩，响应缓存等。最重要的这是Android团队重点投入的，而Apache的版本已经被抛弃了。所以还是使用HttpURLConnection吧。</p>

<h2>原文信息</h2>

<ul>
<li><a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">Android’s HTTP Clients</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gmail托管邮箱发邮件认证失败]]></title>
    <link href="http://droidyue.com/blog/2015/05/22/gmail-535-5-dot-7-8-error-authentication-failed/"/>
    <updated>2015-05-22T21:47:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/22/gmail-535-5-dot-7-8-error-authentication-failed</id>
    <content type="html"><![CDATA[<p>Gmail是一款很优秀的邮件工具，我一直使用Gmail来托管公司的邮箱，利用最棒的过滤器进行过滤垃圾邮件。前段时间公司邮箱密码更换，使用了新的密码后导致了只能收邮件不能发邮件，每次发邮件都会提示这样的错误。</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Delivery</span> <span class="n">to</span> <span class="n">the</span> <span class="n">following</span> <span class="n">recipient</span> <span class="n">failed</span> <span class="nl">permanently:</span>
</span><span class='line'>     <span class="n">someone</span><span class="nd">@example.net</span>
</span><span class='line'><span class="n">Technical</span> <span class="n">details</span> <span class="n">of</span> <span class="n">permanent</span> <span class="nl">failure:</span>
</span><span class='line'><span class="n">Google</span> <span class="n">tried</span> <span class="n">to</span> <span class="n">deliver</span> <span class="n">your</span> <span class="n">message</span><span class="o">,</span> <span class="n">but</span> <span class="n">it</span> <span class="n">was</span> <span class="n">rejected</span> <span class="n">by</span> <span class="n">the</span> <span class="n">relay</span> <span class="n">smtp</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">net</span> <span class="n">by</span> <span class="n">smtp</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">net</span><span class="o">.</span> <span class="o">[</span><span class="n">xx</span><span class="o">.</span><span class="na">xx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">xx</span><span class="o">].</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">error</span> <span class="n">that</span> <span class="n">the</span> <span class="n">other</span> <span class="n">server</span> <span class="n">returned</span> <span class="nl">was:</span>
</span><span class='line'><span class="mi">535</span> <span class="mf">5.7</span><span class="o">.</span><span class="mi">8</span> <span class="nl">Error:</span> <span class="n">authentication</span> <span class="nl">failed:</span> <span class="n">authentication</span> <span class="n">failure</span>
</span><span class='line'> <span class="o">(</span><span class="n">SMTP</span> <span class="n">AUTH</span> <span class="n">failed</span> <span class="n">with</span> <span class="n">the</span> <span class="n">remote</span> <span class="n">server</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来Google查找<code>gmail SMTP AUTH failed with the remote server</code>便找到了这篇文章，于是简单整理一下了解决方法。</p>

<h2>如何修复</h2>

<p>  1.进入Gmail中的设置<br/>
  2.选择<strong>Accounts and Import</strong><br/>
  3.找到<strong>Send Mail As</strong>区域，找到刚刚出现错误的邮箱那一项，点击<strong>edit info</strong><br/>
  4.上一步会出现一个弹窗，点击<strong>Next Step</strong><br/>
  5.更新你最新的密码，按实际情况选择TLS，SSL或者不安全连接。然后点击<strong>Save Changes</strong><br/>
  6.尝试发邮件吧，一切都正常了。</p>

<h2>感谢参考文章</h2>

<ul>
<li><a href="http://www.webholism.com/blog/sara/gmail-suddenly-stopped-sending-my-business-emails/">Gmail Suddenly Stopped Sending My Business Emails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAR包未加入APK程序]]></title>
    <link href="http://droidyue.com/blog/2015/05/15/jar-not-in-apk/"/>
    <updated>2015-05-15T20:45:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/15/jar-not-in-apk</id>
    <content type="html"><![CDATA[<p>前段时间打包遇到了一个问题，jar包不能加入到apk包中。从Eclipse中完全可以，一旦放到服务器端进行打包就出现了问题。</p>

<!--more-->


<p>使用<code>ant debug -d</code>得到的信息如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">trouble</span> <span class="nl">processing:</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">bad</span> <span class="kd">class</span> <span class="nc">file</span> <span class="n">magic</span> <span class="o">(</span><span class="n">cafebabe</span><span class="o">)</span> <span class="n">or</span> <span class="n">version</span> <span class="o">(</span><span class="mf">0033.0000</span><span class="o">)</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">parsing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">a</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">processing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">a</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">trouble</span> <span class="nl">processing:</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">bad</span> <span class="kd">class</span> <span class="nc">file</span> <span class="n">magic</span> <span class="o">(</span><span class="n">cafebabe</span><span class="o">)</span> <span class="n">or</span> <span class="n">version</span> <span class="o">(</span><span class="mf">0033.0000</span><span class="o">)</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">parsing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">b</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">processing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">b</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">trouble</span> <span class="nl">processing:</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">bad</span> <span class="kd">class</span> <span class="nc">file</span> <span class="n">magic</span> <span class="o">(</span><span class="n">cafebabe</span><span class="o">)</span> <span class="n">or</span> <span class="n">version</span> <span class="o">(</span><span class="mf">0033.0000</span><span class="o">)</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">parsing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">AdsLoader</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">processing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">AdsLoader</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">trouble</span> <span class="nl">processing:</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="n">bad</span> <span class="kd">class</span> <span class="nc">file</span> <span class="n">magic</span> <span class="o">(</span><span class="n">cafebabe</span><span class="o">)</span> <span class="n">or</span> <span class="n">version</span> <span class="o">(</span><span class="mf">0033.0000</span><span class="o">)</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">parsing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">UrlConfig</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>       <span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">...</span><span class="na">while</span> <span class="n">processing</span> <span class="n">com</span><span class="o">/</span><span class="n">solo</span><span class="o">/</span><span class="n">adsdk</span><span class="o">/</span><span class="n">network</span><span class="o">/</span><span class="n">UrlConfig</span><span class="o">.</span><span class="na">class</span>
</span></code></pre></td></tr></table></div></figure>


<p>相比到这里，原因不言则明，原来是jar包的编译版本比工程编译的版本不一致，真实的情况是前后比后者编译版本高。
经过分析，jar包的编译环境是Java 7， 而工程打包的编译环境是Java 6.</p>

<h2>如何解决</h2>

<p>解决这个问题也简单，不出如下做法</p>

<ul>
<li>更换成Java 6编译出来的jar包</li>
<li>使用java 7 打包工程。</li>
</ul>


<h2>如何得知jar包编译版本</h2>

<h3>解压jar包</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">jar</span> <span class="n">fx</span> <span class="n">android</span><span class="o">-</span><span class="n">support</span><span class="o">-</span><span class="n">v4</span><span class="o">.</span><span class="na">jar</span>
</span></code></pre></td></tr></table></div></figure>


<p>解压后查看当前目录，会多出一个文件夹，这里是名字为android的文件夹。</p>

<h3>查看文件信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">11</span><span class="o">:</span><span class="mi">52</span> <span class="n">$</span> <span class="n">file</span> <span class="n">android</span><span class="o">/</span><span class="n">support</span><span class="o">/</span><span class="n">v4</span><span class="o">/</span><span class="n">net</span><span class="o">/</span><span class="n">ConnectivityManagerCompat</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="n">android</span><span class="o">/</span><span class="n">support</span><span class="o">/</span><span class="n">v4</span><span class="o">/</span><span class="n">net</span><span class="o">/</span><span class="n">ConnectivityManagerCompat</span><span class="o">.</span><span class="na">class</span><span class="o">:</span> <span class="n">compiled</span> <span class="n">Java</span> <span class="kd">class</span> <span class="nc">data</span><span class="o">,</span> <span class="n">version</span> <span class="mf">49.0</span> <span class="o">(</span><span class="n">Java</span> <span class="mf">1.5</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>查找版本</h3>

<p>上面我们得到了<code>version 49.0 (Java 1.5)</code>，有些情况下我们得到的只有<code>version 49.0</code>需要查找下面的列表</p>

<h4>版本映射</h4>

<ul>
<li>45.3 = Java 1.1</li>
<li>46 = Java 1.2</li>
<li>47 = Java 1.3</li>
<li>48 = Java 1.4</li>
<li>49 = Java 5</li>
<li>50 = Java 6</li>
<li>51 = Java 7</li>
<li>52 = Java 8</li>
</ul>


<h3>参考文章</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/3313532/what-version-of-javac-built-my-jar">What version of javac built my jar?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play商店推广那些事]]></title>
    <link href="http://droidyue.com/blog/2015/05/11/google-play-tuiguang/"/>
    <updated>2015-05-11T21:43:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/05/11/google-play-tuiguang</id>
    <content type="html"><![CDATA[<p>Play商店是Android的官方商店，虽然在大陆无法访问，但是这里依旧是重要的版本发布市场，尤其是对于那些国际化的产品。对于拓宽海外市场，付费推广就是一部分不可忽视的措施。而Android付费推广必然就是Play商店推广。本文主要从技术方面讲解，如何统计推广数据，以及在开发过程中遇到的一些疑问和困惑。</p>

<!--more-->


<h2>生成推广链接</h2>

<p>想要进行推广，必须有推广链接。Google提供了生成推广链接的地址<a href="https://developers.google.com/analytics/devguides/collection/android/v2/campaigns#google-play-url-builder">Google Play URL Builder</a>,遗憾的是这个地址被墙了，不过可以使用<a href="http://www.digitangle.co.uk/toolsandresources/google-play-url-builder/#sthash.HLdt4vXJ.dpbs">这个地址</a>，可能稍微慢一点。</p>

<p><img src="http://droidyueimg.qiniudn.com/play_url_builder.png"></p>

<h3>简单描述</h3>

<ul>
<li>Package Name 必填  应用的包名，如com.example.application</li>
<li>Campaign Source 必填 推广的来源，比如google, citysearch, newsletter4</li>
<li>Campaign Medium 选填  推广的媒介，比如cpc, banner, email</li>
<li>Campaign Term   选填 推广的关键字 比如 running+shoes</li>
<li>Campaign Content 选填 推广内容描述</li>
<li>Campaign Name  选填 可以填写 产品名，推广代号或者是推广口号</li>
</ul>


<p>生成的推广地址就是<a href="https://play.google.com/store/apps/details?id=com.mx.browser&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dadlink%26utm_term%3Dandroid%252Bbrowser%26utm_content%3DBest%2520and%2520Fast%2520Browser%26utm_campaign%3Dandroidyue_123">https://play.google.com/store/apps/details?id=com.mx.browser&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dadlink%26utm_term%3Dandroid%252Bbrowser%26utm_content%3DBest%2520and%2520Fast%2520Browser%26utm_campaign%3Dandroidyue_123</a></p>

<h2>推广如何工作的</h2>

<p>有了上面的推广链接，我们有必要了解一下Play商店的推广是如何工作的。</p>

<p>  1.用户从网页或者应用中点击Play商店推广链接跳转到Play商店应用的页面下载。<br/>
  2.应用下载完成并安装后，Google Play商店会发送一个<strong>INSTALL_REFERRER</strong>的Intent广播，该Intent中包含了推广链接中的参数。<br/>
  3.应用收到<strong>INSTALL_REFERRER</strong>广播之后，从Intent中读取参数，上报推广数据。</p>

<h2>统计推广数据</h2>

<h3>1.manifest声明receiver，接收<strong>INSTALL_REFERRER</strong>广播</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;receiver</span> <span class="na">android:name=</span><span class="s">&quot;.PlayCampaignReceiver&quot;</span> <span class="na">android:exported=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>              <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.android.vending.INSTALL_REFERRER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/intent-filter&gt;</span>  
</span><span class='line'><span class="nt">&lt;/receiver&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.实现PlayCampaignReceiver，处理<strong>INSTALL_REFERRER</strong>广播</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">playstorereferrertester</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.BroadcastReceiver</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlayCampaignReceiver</span> <span class="kd">extends</span> <span class="n">BroadcastReceiver</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;PlayCampaignReceiver&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onReceive intent=&quot;</span> <span class="o">+</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">//处理referrer参数</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">referrer</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="s">&quot;referrer&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">//some other code</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>多个Receiver</h2>

<p>有些时候我们可能有这样的需求，我们需要多个Receiver监听<strong>INSTALL_REFERRER</strong>广播，其实是可以的。</p>

<h3>代码调用</h3>

<p>这一种是比较推荐的实现方式，比较简单，就是在一个Receiver的onReceive中，实例化另一个Receiver并调用其onReceive方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlayCampaignReceiver</span> <span class="kd">extends</span> <span class="n">BroadcastReceiver</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;PlayCampaignReceiver&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onReceive intent=&quot;</span> <span class="o">+</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">//调用另一个Receiver实例的onReceive方法</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">AnotherPlayCampaignReceiver</span><span class="o">().</span><span class="na">onReceive</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>manifest声明</h3>

<p>通过manifest的增加另一个监听<strong>INSTALL_REFERRER</strong>广播的Receiver的形式理论上也可以，但是之前的Google文档中说这种方式有问题，不建议使用。之前Google统计关于市场推广的描述为</p>

<blockquote><p>Note: Only one BroadcastReceiver class can be specified per application. Should you need to incorporate two or more BroadcastReceivers from different SDKs, you will need to create your own BroadcastReceiver class that will receive all broadcasts and call the appropriate BroadcastReceivers for each type of Broadcast.</p></blockquote>

<h2>何时收到推广数据</h2>

<p>关于何时收到推广数据的问题争论颇多，基本上又两个答案：安装完成之后和打一次打开程序时。这两个答案可以说是都对或者都错。</p>

<p>在3.1之前，<strong>INSTALL_REFERRER</strong>广播 确实是在程序安装之后发送的。 <br/>
在3.1之后，<strong>INSTALL_REFERRER</strong>广播 就变成了在程序第一次启动的时候进行的。</p>

<p>那么这又是作何原因呢，其真实的原因就是在3.1 API 12之后，Android系统引入了停止状态，也就是说一个刚下载的程序，在用户手动点击图标启动之前，是收不到正常的广播的。只有当处于非停止状态的应用才能收到<strong>INSTALL_REFERRER</strong>广播。所以广播的发送就选择在程序第一次启动时。  更多关于<a href="http://droidyue.com/blog/2014/07/14/look-inside-android-package-stop-state-since-honeycomb-mr1/">Android中的停止状态</a></p>

<p>为了进一步验证这个发送广播实际，我在Play Store上传了一个测试程序，可以使用这个地址<a href="https://play.google.com/store/apps/details?id=com.droidyue.playstorereferrertester&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dblog%26utm_term%3Dtest%252Bapp%26utm_content%3Dtest%252Bapp%26utm_campaign%3Dandroidyue_123456">https://play.google.com/store/apps/details?id=com.droidyue.playstorereferrertester&amp;referrer=utm_source%3Ddroidyue.com%26utm_medium%3Dblog%26utm_term%3Dtest%252Bapp%26utm_content%3Dtest%252Bapp%26utm_campaign%3Dandroidyue_123456</a>从Play Store下载测试一下，过滤日志<code>adb logcat | grep PlayCampaignReceiver</code>测试。</p>

<p>注意：这里的第一次安装可以是从Play Store 应用中点打开按钮，也可以是从Launcher中点击应用图标。前面两种情况都是可以接收到广播的。</p>

<h2>别的包也会收到么</h2>

<p>这也是一个被争论的问题，当然我也是通过上面的包验证了，答案就是不会的。<strong>INSTALL_REFERRER</strong>只会发给那个推广安装的程序。</p>

<h2>例外情况</h2>

<p>从网页到客户端的安装是无法发送<strong>INSTALL_REFERRER</strong>广播的。</p>

<h2>奇怪问题</h2>

<h3>协议为哪个</h3>

<p>其实有人会奇怪，究竟推广链接是market还是https协议，答案是都可以，但是推荐使用https协议的链接，首先的既定事实是Google Play URL Builder默认生成的就是https协议链接，另外https是一个被广泛采用的协议，设想如果一个market协议链接在PC浏览器上被点击是怎样的一种体验呢？答案不言自明。</p>

<h2>参考文章</h2>

<ul>
<li><a href="https://developers.google.com/analytics/devguides/collection/android/v2/campaigns#overview">Campaign Measurement </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关闭Mac屏幕右上角QQ通知]]></title>
    <link href="http://droidyue.com/blog/2015/04/26/guanbi-mac-qq-tishi/"/>
    <updated>2015-04-26T12:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/04/26/guanbi-mac-qq-tishi</id>
    <content type="html"><![CDATA[<p>前段时间看到QQ提示更新，于是手贱了一次升级到了QQ for Mac V4.0.1,最不爽的一件事在屏幕的右上角多出来了一个横幅，内容就是别人发给你的消息的内容。</p>

<!--more-->


<p>如下图</p>

<p><img src="http://droidyueimg.qiniudn.com/qq_notification.png" title="QQ Notification" ></p>

<p>这是多么脑残的产品想出来的啊，多么地泄露隐私啊。于是果断查看QQ设置，没有办法取消横幅展示。于是另寻办法。</p>

<p>实际上在Mac系统中有对通知的设置，打开<strong>系统偏好设置</strong> &mdash; <strong>通知</strong> 找到QQ，然后将<strong>QQ提示样式</strong>设置成无即可。如下图</p>

<p><img src="http://droidyueimg.qiniudn.com/qq_notification_turn_off.png" title="Turn off QQ Notification" ></p>

<p>同理，Mac版微信也可以进行这样的设置。</p>

<h3>推荐一本书</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00P0GDLGO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P0GDLGO&amp;linkCode=as2&amp;tag=droidyue-23">苹果Mac OSX高手真经</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[避免Android中Context引起的内存泄露]]></title>
    <link href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/"/>
    <updated>2015-04-12T21:28:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android</id>
    <content type="html"><![CDATA[<p>Context是我们在编写Android程序经常使用到的对象，意思为上下文对象。 常用的有Activity的Context还是有Application的Context。Activity用来展示活动界面，包含了很多的视图，而视图又含有图片，文字等资源。在Android中内存泄露很容易出现，而持有很多对象内存占用的Activity更加容易出现内存泄露，开发者需要特别注意这个问题。</p>

<p>本文讲介绍Android中Context，更具体的说是Activity内存泄露的情况，以及如何避免Activity内存泄露，加速应用性能。</p>

<!--more-->


<h2>Drawable引起的内存泄露</h2>

<p>Drawable引起内存泄露这个问题是比较隐晦，难以察觉的。在阅读了Romain Guy的<a href="http://android-developers.blogspot.com.tr/2009/01/avoiding-memory-leaks.html">Avoiding memory leaks</a>，结合grepcode查看源码才明白了。</p>

<p>在Android系统中，当我们进行了屏幕旋转，默认情况下，会销毁掉当前的Activity，并创建一个新的Activity并保持之前的状态。在这个过程中，Android系统会重新加载程序的UI视图和资源。假设我们有一个程序用到了一个很大的Bitmap图像，我们不想每次屏幕旋转时都重新加载这个Bitmap对象，最简单的办法就是将这个Bitmap对象使用static修饰。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Drawable</span> <span class="n">sBackground</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">state</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TextView</span> <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="n">label</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Leaks are bad&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">sBackground</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sBackground</span> <span class="o">=</span> <span class="n">getDrawable</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">large_bitmap</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">label</span><span class="o">.</span><span class="na">setBackgroundDrawable</span><span class="o">(</span><span class="n">sBackground</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setContentView</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是上面的方法在屏幕旋转时有可能引起内存泄露，无论是咋一看还是仔细看这段代码，都很难发现哪里引起了内存泄露。</p>

<p>当一个Drawable绑定到了View上，实际上这个View对象就会成为这个Drawable的一个callback成员变量，上面的例子中静态的sBackground持有TextView对象lable的引用，而lable只有Activity的引用，而Activity会持有其他更多对象的引用。sBackground生命周期要长于Activity。当屏幕旋转时，Activity无法被销毁，这样就产生了内存泄露问题。</p>

<p>2.3.7及以下版本Drawable的setCallback方法的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setCallback</span><span class="o">(</span><span class="n">Callback</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mCallback</span> <span class="o">=</span> <span class="n">cb</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好在从4.0.1开始，引入了<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">弱引用</a>处理这个问题，弱引用在GC回收时，不会阻止GC回收其指向的对象，避免了内存泄露问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setCallback</span><span class="o">(</span><span class="n">Callback</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Callback</span><span class="o">&gt;(</span><span class="n">cb</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>单例引起的内存泄露</h2>

<p>单例是我们比较简单常用的一种设计模式,然而如果单例使用不当也会导致内存泄露。
比如这样一个例子,我们使用饿汉式初始化单例，AppSettings我们需要持有一个Context作为成员变量，如果我们按照下面的实现其实是有问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>    
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mAppContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppSettings</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//some other codes</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>sInstance作为静态对象，其生命周期要长于普通的对象，其中也包含Activity，当我们进行屏幕旋转，默认情况下，系统会销毁当前Activity，然后当前的Activity被一个单例持有，导致垃圾回收器无法进行回收，进而产生了内存泄露。</p>

<p>解决的方法就是不持有Activity的引用，而是持有Application的Context引用。代码如下修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">();</span> 
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>访问这里了解更多关于<a href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/">单例模式的问题</a></p>

<h2>条条方法返回Context</h2>

<p>通常我们想要获取Context对象，主要有以下四种方法</p>

<ul>
<li>View.getContext,返回当前View对象的Context对象，通常是当前正在展示的Activity对象。</li>
<li>Activity.getApplicationContext,获取当前Activity所在的(应用)进程的Context对象，通常我们使用Context对象时，要优先考虑这个全局的进程Context。</li>
<li>ContextWrapper.getBaseContext():用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，这个方法在实际开发中使用并不多，也不建议使用。</li>
<li>Activity.this 返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。</li>
</ul>


<h2>其他内存泄露问题</h2>

<ul>
<li><a href="http://droidyue.com/blog/2014/11/08/bad-smell-of-asynctask-in-android/">Android中糟糕的AsyncTask</a></li>
<li><a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/">Android中Handler引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2014/11/29/why-onsharedpreferencechangelistener-was-not-called/">Google为何这样设计OnSharedPreferenceChangeListener</a></li>
</ul>


<h2>避免内存泄露须谨记</h2>

<ul>
<li>不要让生命周期长于Activity的对象持有到Activity的引用</li>
<li>尽量使用Application的Context而不是Activity的Context</li>
<li>尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用（具体可以查看<a href="http://droidyue.com/blog/2014/10/02/the-private-modifier-in-java/">细话Java：&#8221;失效&#8221;的private修饰符</a>了解）。如果使用静态内部类，将外部实例引用作为<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">弱引用</a>持有。</li>
<li>垃圾回收不能解决内存泄露，了解<a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/">Android中垃圾回收机制</a></li>
</ul>


<h2>参考文章</h2>

<ul>
<li><a href="http://android-developers.blogspot.com.tr/2009/01/avoiding-memory-leaks.html">Avoiding memory leaks</a></li>
<li><a href="http://stackoverflow.com/questions/10641144/difference-between-getcontext-getapplicationcontext-getbasecontext-and">Difference between getContext() , getApplicationContext() , getBaseContext() and “this”</a></li>
<li><a href="http://stackoverflow.com/questions/1026973/android-whats-the-difference-between-the-various-methods-to-get-a-context">Android &ndash; what&rsquo;s the difference between the various methods to get a Context?</a></li>
</ul>


<h2>好书推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B009VV6EG8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009VV6EG8&amp;linkCode=as2&amp;tag=droidyue-23">Android应用性能优化</a></li>
<li><a href="http://www.amazon.cn/gp/product/B00IOB0K1Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IOB0K1Q&amp;linkCode=as2&amp;tag=droidyue-23">图灵程序设计丛书:Java性能优化权威指南</a></li>
<li><a href="http://www.amazon.cn/gp/product/B009GT0H4U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009GT0H4U&amp;linkCode=as2&amp;tag=droidyue-23">Java程序性能优化:让你的Java程序更快、更稳定</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的自动装箱与拆箱]]></title>
    <link href="http://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java/"/>
    <updated>2015-04-07T07:31:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java</id>
    <content type="html"><![CDATA[<p>自动装箱和拆箱从Java 1.5开始引入，目的是将原始类型值转自动地转换成对应的对象。自动装箱与拆箱的机制可以让我们在Java的变量赋值或者是方法调用等情况下使用原始类型或者对象类型更加简单直接。</p>

<p>如果你在Java1.5下进行过编程的话，你一定不会陌生这一点，你不能直接地向集合(Collections)中放入原始类型值，因为集合只接收对象。通常这种情况下你的做法是，将这些原始类型的值转换成对象，然后将这些转换的对象放入集合中。使用Integer,Double,Boolean等这些类我们可以将原始类型值转换成对应的对象，但是从某些程度可能使得代码不是那么简洁精炼。为了让代码简练，Java 1.5引入了具有在原始类型和对象类型自动转换的装箱和拆箱机制。但是自动装箱和拆箱并非完美，在使用时需要有一些注意事项，如果没有搞明白自动装箱和拆箱，可能会引起难以察觉的bug。</p>

<p>本文将介绍，什么是自动装箱和拆箱，自动装箱和拆箱发生在什么时候，以及要注意的事项。</p>

<!--more-->


<h2>什么是自动装箱和拆箱</h2>

<p>自动装箱就是Java自动将原始类型值转换成对应的对象，比如将int的变量转换成Integer对象，这个过程叫做装箱，反之将Integer对象转换成int类型值，这个过程叫做拆箱。因为这里的装箱和拆箱是自动进行的非人为转换，所以就称作为自动装箱和拆箱。原始类型byte,short,char,int,long,float,double和boolean对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。</p>

<h2>自动装箱拆箱要点</h2>

<ul>
<li>自动装箱时编译器调用valueOf将原始类型值转换成对象，同时自动拆箱时，编译器通过调用类似intValue(),doubleValue()这类的方法将对象转换成原始类型值。</li>
<li>自动装箱是将boolean值转换成Boolean对象，byte值转换成Byte对象，char转换成Character对象，float值转换成Float对象，int转换成Integer，long转换成Long，short转换成Short，自动拆箱则是相反的操作。</li>
</ul>


<h2>何时发生自动装箱和拆箱</h2>

<p>自动装箱和拆箱在Java中很常见，比如我们有一个方法，接受一个对象类型的参数，如果我们传递一个原始类型值，那么Java会自动讲这个原始类型值转换成与之对应的对象。最经典的一个场景就是当我们向ArrayList这样的容器中增加原始类型数据时或者是创建一个参数化的类，比如下面的ThreadLocal。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">intList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//autoboxing - primitive to object</span>
</span><span class='line'><span class="n">intList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//autoboxing</span>
</span><span class='line'>
</span><span class='line'><span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">intLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> <span class="c1">//autoboxing</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">intList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// unboxing</span>
</span><span class='line'><span class="kt">int</span> <span class="n">local</span> <span class="o">=</span> <span class="n">intLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> <span class="c1">// unboxing in Java</span>
</span></code></pre></td></tr></table></div></figure>


<h2>举例说明</h2>

<p>上面的部分我们介绍了自动装箱和拆箱以及它们何时发生，我们知道了自动装箱主要发生在两种情况，一种是赋值时，另一种是在方法调用的时候。为了更好地理解这两种情况，我们举例进行说明。</p>

<h3>赋值时</h3>

<p>这是最常见的一种情况，在Java 1.5以前我们需要手动地进行转换才行，而现在所有的转换都是由编译器来完成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//before autoboxing</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">iObject</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'><span class="n">Int</span> <span class="n">iPrimitive</span> <span class="o">=</span> <span class="n">iObject</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//after java5</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">iObject</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="c1">//autobxing - primitive to wrapper conversion</span>
</span><span class='line'><span class="kt">int</span> <span class="n">iPrimitive</span> <span class="o">=</span> <span class="n">iObject</span><span class="o">;</span> <span class="c1">//unboxing - object to primitive conversion</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法调用时</h3>

<p>这是另一个常用的情况，当我们在方法调用时，我们可以传入原始数据值或者对象，同样编译器会帮我们进行转换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="nf">show</span><span class="o">(</span><span class="n">Integer</span> <span class="n">iParam</span><span class="o">){</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;autoboxing example - method invocation i: &quot;</span> <span class="o">+</span> <span class="n">iParam</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">iParam</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//autoboxing and unboxing in method invocation</span>
</span><span class='line'><span class="n">show</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//autoboxing</span>
</span><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">show</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//unboxing because return type of method is Integer</span>
</span></code></pre></td></tr></table></div></figure>


<p>show方法接受Integer对象作为参数，当调用<code>show(3)</code>时，会将int值转换成对应的Integer对象，这就是所谓的自动装箱，show方法返回Integer对象，而<code>int result = show(3);</code>中result为int类型，所以这时候发生自动拆箱操作，将show方法的返回的Integer对象转换成int值。</p>

<h2>自动装箱的弊端</h2>

<p>自动装箱有一个问题，那就是在一个循环中进行自动装箱操作的情况，如下面的例子就会创建多余的对象，影响程序的性能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'> <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5000</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>   <span class="n">sum</span><span class="o">+=</span><span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码<code>sum+=i</code>可以看成<code>sum = sum + i</code>，但是<code>+</code>这个操作符不适用于Integer对象，首先sum进行自动拆箱操作，进行数值相加操作，最后发生自动装箱操作转换成Integer对象。其内部变化如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于我们这里声明的sum为Integer类型，在上面的循环中会创建将近4000个无用的Integer对象，在这样庞大的循环中，会降低程序的性能并且加重了垃圾回收的工作量。因此在我们编程时，需要注意到这一点，正确地声明变量类型，避免因为自动装箱引起的性能问题。</p>

<h2>重载与自动装箱</h2>

<p>当重载遇上自动装箱时，情况会比较有些复杂，可能会让人产生有些困惑。在1.5之前，value(int)和value(Integer)是完全不相同的方法，开发者不会因为传入是int还是Integer调用哪个方法困惑，但是由于自动装箱和拆箱的引入，处理重载方法时稍微有点复杂。一个典型的例子就是ArrayList的remove方法，它有<code>remove(index)</code>和<code>remove(Object)</code>两种重载，我们可能会有一点小小的困惑，其实这种困惑是可以验证并解开的，通过下面的例子我们可以看到，当出现这种情况时，不会发生自动装箱操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;method with primitive argument&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="n">Integer</span> <span class="n">num</span><span class="o">){</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;method with wrapper argument&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//calling overloaded method</span>
</span><span class='line'><span class="n">AutoboxingTest</span> <span class="n">autoTest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AutoboxingTest</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="n">autoTest</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">value</span><span class="o">);</span> <span class="c1">//no autoboxing </span>
</span><span class='line'><span class="n">Integer</span> <span class="n">iValue</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="n">autoTest</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">iValue</span><span class="o">);</span> <span class="c1">//no autoboxing</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Output:</span>
</span><span class='line'><span class="n">method</span> <span class="n">with</span> <span class="n">primitive</span> <span class="n">argument</span>
</span><span class='line'><span class="n">method</span> <span class="n">with</span> <span class="n">wrapper</span> <span class="n">argument</span>
</span></code></pre></td></tr></table></div></figure>


<h2>要注意的事项</h2>

<p>自动装箱和拆箱可以使代码变得简洁,但是其也存在一些问题和极端情况下的问题，以下几点需要我们加强注意。</p>

<h3>对象相等比较</h3>

<p>这是一个比较容易出错的地方，&#8221;==&ldquo;可以用于原始值进行比较，也可以用于对象进行比较，当用于对象与对象之间比较时，比较的不是对象代表的值，而是检查两个对象是否是同一对象，这个比较过程中没有自动装箱发生。进行对象值比较不应该使用&rdquo;==&ldquo;，而应该使用对象对应的equals方法。看一个能说明问题的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AutoboxingTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Example 1: == comparison pure primitive – no autoboxing</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;i1==i2 : &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">i1</span> <span class="o">==</span> <span class="n">i2</span><span class="o">));</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Example 2: equality operator mixing object and primitive</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// autoboxing</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;num1 == num2 : &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">num1</span> <span class="o">==</span> <span class="n">num2</span><span class="o">));</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Example 3: special case - arises due to autoboxing in Java</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">obj1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// autoboxing will call Integer.valueOf()</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">obj2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// same call to Integer.valueOf() will return same</span>
</span><span class='line'>                            <span class="c1">// cached Object</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;obj1 == obj2 : &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">obj1</span> <span class="o">==</span> <span class="n">obj2</span><span class="o">));</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Example 4: equality operator - pure object comparison</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// no autoboxing</span>
</span><span class='line'>        <span class="n">Integer</span> <span class="n">anotherOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;one == anotherOne : &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">one</span> <span class="o">==</span> <span class="n">anotherOne</span><span class="o">));</span> <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Output:</span>
</span><span class='line'><span class="n">i1</span><span class="o">==</span><span class="n">i2</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="n">num1</span> <span class="o">==</span> <span class="n">num2</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="n">obj1</span> <span class="o">==</span> <span class="n">obj2</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="n">one</span> <span class="o">==</span> <span class="n">anotherOne</span> <span class="o">:</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>值得注意的是第三个小例子，这是一种极端情况。obj1和obj2的初始化都发生了自动装箱操作。但是处于节省内存的考虑，JVM会缓存-128到127的Integer对象。因为obj1和obj2实际上是同一个对象。所以使用&#8221;==&ldquo;比较返回true。</p>

<h3>容易混乱的对象和原始数据值</h3>

<p>另一个需要避免的问题就是混乱使用对象和原始数据值，一个具体的例子就是当我们在一个原始数据值与一个对象进行比较时，如果这个对象没有进行初始化或者为Null，在自动拆箱过程中obj.xxxValue，会抛出NullPointerException,如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//NullPointerException on unboxing</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Count is not started yet&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>缓存的对象</h3>

<p>这个问题就是我们上面提到的极端情况，在Java中，会对-128到127的Integer对象进行缓存，当创建新的Integer对象时，如果符合这个这个范围，并且已有存在的相同值的对象，则返回这个对象，否则创建新的Integer对象。</p>

<p>在Java中另一个节省内存的例子就是<a href="http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/">字符串常量池</a>,感兴趣的同学可以了解一下。</p>

<h3>生成无用对象增加GC压力</h3>

<p>因为自动装箱会隐式地创建对象，像前面提到的那样，如果在一个循环体中，会创建无用的中间对象，这样会增加GC压力，拉低程序的性能。所以在写循环时一定要注意代码，避免引入不必要的自动装箱操作。</p>

<p>如想了解垃圾回收和内存优化，可以查看本文<a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/">Google IO：Android内存管理主题演讲记录</a></p>

<p>总的来说，自动装箱和拆箱着实为开发者带来了很大的方便，但是在使用时也是需要格外留意，避免引起出现文章提到的问题。</p>

<h2>原文信息</h2>

<ul>
<li><a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html">What is Autoboxing and Unboxing in Java – Example Tutorial and Corner cases</a></li>
</ul>


<h2>好书推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=droidyue-23">Java编程思想(第4版) </a></li>
<li><a href="http://www.amazon.cn/gp/product/B00G9KF4JC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G9KF4JC&amp;linkCode=as2&amp;tag=droidyue-23">Java核心技术(卷1):基础知识</a></li>
<li><a href="http://www.amazon.cn/gp/product/B00D2ID4PK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D2ID4PK&amp;linkCode=as2&amp;tag=droidyue-23">深入理解Java虚拟机:JVM高级特性与最佳实践</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读懂Java中的Socket编程]]></title>
    <link href="http://droidyue.com/blog/2015/03/08/sockets-programming-in-java/"/>
    <updated>2015-03-08T16:09:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/03/08/sockets-programming-in-java</id>
    <content type="html"><![CDATA[<p>Socket,又称为套接字，Socket是计算机网络通信的基本的技术之一。如今大多数基于网络的软件，如浏览器，即时通讯工具甚至是P2P下载都是基于Socket实现的。本文会介绍一下基于TCP/IP的Socket编程，并且如何写一个客户端/服务器程序。</p>

<!--more-->


<h2>餐前甜点</h2>

<p>Unix的输入输出(IO)系统遵循Open-Read-Write-Close这样的操作范本。当一个用户进程进行IO操作之前，它需要调用Open来指定并获取待操作文件或设备读取或写入的权限。一旦IO操作对象被打开，那么这个用户进程可以对这个对象进行一次或多次的读取或写入操作。Read操作用来从IO操作对象读取数据，并将数据传递给用户进程。Write操作用来将用户进程中的数据传递（写入）到IO操作对象。 当所有的Read和Write操作结束之后，用户进程需要调用Close来通知系统其完成对IO对象的使用。</p>

<p>在Unix开始支持进程间通信（InterProcess Communication，简称IPC）时，IPC的接口就设计得类似文件IO操作接口。在Unix中，一个进程会有一套可以进行读取写入的IO描述符。IO描述符可以是文件，设备或者是通信通道（socket套接字）。一个文件描述符由三部分组成：创建（打开socket），读取写入数据（接受和发送到socket）还有销毁（关闭socket）。</p>

<p>在Unix系统中，类BSD版本的IPC接口是作为TCP和UDP协议之上的一层进行实现的。消息的目的地使用socket地址来表示。一个socket地址是由网络地址和端口号组成的通信标识符。</p>

<p>进程间通信操作需要一对儿socket。进程间通信通过在一个进程中的一个socket与另一个进程中得另一个socket进行数据传输来完成。当一个消息执行发出后，这个消息在发送端的socket中处于排队状态，直到下层的网络协议将这些消息发送出去。当消息到达接收端的socket后，其也会处于排队状态，直到接收端的进程对这条消息进行了接收处理。</p>

<h2>TCP和UDP通信</h2>

<p>关于socket编程我们有两种通信协议可以进行选择。一种是数据报通信，另一种就是流通信。</p>

<h3>数据报通信</h3>

<p>数据报通信协议，就是我们常说的UDP（User Data Protocol 用户数据报协议）。UDP是一种无连接的协议，这就意味着我们每次发送数据报时，需要同时发送本机的socket描述符和接收端的socket描述符。因此，我们在每次通信时都需要发送额外的数据。</p>

<h3>流通信</h3>

<p>流通信协议，也叫做TCP(Transfer Control Protocol，传输控制协议)。和UDP不同，TCP是一种基于连接的协议。在使用流通信之前，我们必须在通信的一对儿socket之间建立连接。其中一个socket作为服务器进行监听连接请求。另一个则作为客户端进行连接请求。一旦两个socket建立好了连接，他们可以单向或双向进行数据传输。</p>

<p>读到这里，我们多少有这样的疑问，我们进行socket编程使用UDP还是TCP呢。选择基于何种协议的socket编程取决于你的具体的客户端-服务器端程序的应用场景。下面我们简单分析一下TCP和UDP协议的区别，或许可以帮助你更好地选择使用哪种。</p>

<p>在UDP中，每次发送数据报时，需要附带上本机的socket描述符和接收端的socket描述符。而由于TCP是基于连接的协议，在通信的socket对之间需要在通信之前建立连接，因此会有建立连接这一耗时存在于TCP协议的socket编程。</p>

<p>在UDP中，数据报数据在大小上有64KB的限制。而TCP中也不存在这样的限制。一旦TCP通信的socket对建立了连接，他们之间的通信就类似IO流，所有的数据会按照接受时的顺序读取。</p>

<p>UDP是一种不可靠的协议，发送的数据报不一定会按照其发送顺序被接收端的socket接受。然后TCP是一种可靠的协议。接收端收到的包的顺序和包在发送端的顺序是一致的。</p>

<p>简而言之，TCP适合于诸如远程登录(rlogin,telnet)和文件传输（FTP）这类的网络服务。因为这些需要传输的数据的大小不确定。而UDP相比TCP更加简单轻量一些。UDP用来实现实时性较高或者丢包不重要的一些服务。在局域网中UDP的丢包率都相对比较低。</p>

<h2>Java中的socket编程</h2>

<p>下面的部分我将通过一些示例讲解一下如何使用socket编写客户端和服务器端的程序。</p>

<p>注意：在接下来的示例中，我将使用基于TCP/IP协议的socket编程，因为这个协议远远比UDP/IP使用的要广泛。并且所有的socket相关的类都位于java.net包下，所以在我们进行socket编程时需要引入这个包。</p>

<h3>客户端编写</h3>

<h4>开启Socket</h4>

<p>如果在客户端，你需要写下如下的代码就可以打开一个socket。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">host</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">8919</span><span class="o">;</span>
</span><span class='line'><span class="n">Socket</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，host即客户端需要连接的机器，port就是服务器端用来监听请求的端口。在选择端口时，需要注意一点，就是0~1023这些端口都已经被系统预留了。这些端口为一些常用的服务所使用，比如邮件，FTP和HTTP。当你在编写服务器端的代码，选择端口时，请选择一个大于1023的端口。</p>

<h4>写入数据</h4>

<p>接下来就是写入请求数据，我们从客户端的socket对象中得到OutputStream对象，然后写入数据后。很类似文件IO的处理代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientSocket</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">host</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">8919</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Socket</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Writer</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
</span><span class='line'>          <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;Hello From Client&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>          <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>关闭IO对象</h4>

<p>类似文件IO，在读写数据完成后，我们需要对IO对象进行关闭，以确保资源的正确释放。</p>

<h3>服务器端编写</h3>

<h4>打开服务器端的socket</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">8919</span><span class="o">;</span>
</span><span class='line'><span class="n">ServerSocket</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
</span><span class='line'><span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码创建了一个服务器端的socket，然后调用accept方法监听并获取客户端的请求socket。accept方法是一个阻塞方法，在服务器端与客户端之间建立联系之前会一直等待阻塞。</p>

<h4>读取数据</h4>

<p>通过上面得到的socket对象获取InputStream对象，然后安装文件IO一样读取数据即可。这里我们将内容打印出来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServerClient</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">8919</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ServerSocket</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">chars</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">len</span><span class="o">;</span>
</span><span class='line'>            <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">len</span><span class="o">=</span><span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">chars</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">chars</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Receive from client message=: &quot;</span> <span class="o">+</span> <span class="n">builder</span><span class="o">);</span>
</span><span class='line'>            <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="n">server</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>关闭IO对象</h4>

<p>还是不能忘记的，最后需要正确地关闭IO对象，以确保资源的正确释放。</p>

<h3>附注一个例子</h3>

<p>这里我们增加一个例子，使用socket实现一个回声服务器，就是服务器会将客户端发送过来的数据传回给客户端。代码很简单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EchoServer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// declaration section:</span>
</span><span class='line'>        <span class="c1">// declare a server socket and a client socket for the server</span>
</span><span class='line'>        <span class="c1">// declare an input and an output stream</span>
</span><span class='line'>        <span class="n">ServerSocket</span> <span class="n">echoServer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>        <span class="n">DataInputStream</span> <span class="n">is</span><span class="o">;</span>
</span><span class='line'>        <span class="n">PrintStream</span> <span class="n">os</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Socket</span> <span class="n">clientSocket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Try to open a server socket on port 9999</span>
</span><span class='line'>        <span class="c1">// Note that we can&#39;t choose a port less than 1023 if we are not</span>
</span><span class='line'>        <span class="c1">// privileged users (root)</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">echoServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="mi">9999</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// Create a socket object from the ServerSocket to listen and accept </span>
</span><span class='line'>        <span class="c1">// connections.</span>
</span><span class='line'>        <span class="c1">// Open input and output streams</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">clientSocket</span> <span class="o">=</span> <span class="n">echoServer</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>               <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
</span><span class='line'>               <span class="n">os</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
</span><span class='line'>               <span class="c1">// As long as we receive data, echo that data back to the client.</span>
</span><span class='line'>               <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                 <span class="n">line</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>                 <span class="n">os</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译运行上面的代码，进行如下请求，就可以看到客户端请求携带的数据的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">15</span><span class="o">:</span><span class="mi">00</span> <span class="n">$</span> <span class="n">curl</span> <span class="nl">http:</span><span class="c1">//127.0.0.1:9999/?111</span>
</span><span class='line'><span class="n">GET</span> <span class="o">/?</span><span class="mi">111</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="n">User</span><span class="o">-</span><span class="nl">Agent:</span> <span class="n">curl</span><span class="o">/</span><span class="mf">7.37</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="nl">Host:</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="o">:</span><span class="mi">9999</span>
</span><span class='line'><span class="nl">Accept:</span> <span class="o">*/*</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>进行客户端-服务器端编程还是比较有趣的，同时在Java中进行socket编程要比其他语言（如C）要简单快速编写。</p>

<p>java.net这个包里面包含了很多强大灵活的类供开发者进行网络编程，在进行网络编程中，建议使用这个包下面的API。同时Sun.*这个包也包含了很多的网络编程相关的类，但是不建议使用这个包下面的API，因为这个包可能会改变，另外这个包不能保证在所有的平台都有包含。</p>

<h2>原文信息</h2>

<ul>
<li>原文地址：<a href="http://www.javaworld.com/article/2077322/core-java/core-java-sockets-programming-in-java-a-tutorial.html?null">Sockets programming in Java: A tutorial</a></li>
</ul>


<h2>好书推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00116OTVS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116OTVS&amp;linkCode=as2&amp;tag=droidyue-23">TCP/IP详解卷1:协议</a></li>
<li><a href="http://www.amazon.cn/gp/product/B002FB7KG4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002FB7KG4&amp;linkCode=as2&amp;tag=droidyue-23">TCP/IP详解•卷2：实现</a></li>
<li><a href="http://www.amazon.cn/gp/product/B002WC7NKO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NKO&amp;linkCode=as2&amp;tag=droidyue-23">TCP.IP详解(卷3):TCP事务协议.HTTP和UNIX域协议</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[士别三年，我的最新个人作品]]></title>
    <link href="http://droidyue.com/blog/2015/02/28/my-android-work-akoi/"/>
    <updated>2015-02-28T20:43:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/02/28/my-android-work-akoi</id>
    <content type="html"><![CDATA[<p>这个应用是我的最新的作品，一个解决了自己需求的App。</p>

<h2>这是神马App</h2>

<p>拷译是一款超级便捷的翻译工具，其理念就是拷贝即翻译。通常情况下，我们在阅读外文文章时遇到不懂的单词，常见的步骤就是，复制单词，然后切换到桌面，打开字典，进行翻译，理解了意思之后，然后退回到阅读软件，其实就在这些繁琐的过程中，我们阅读很容易被打断，进而影响阅读外文的效率。拷译则解决了这个问题，在阅读软件中遇到了生词，我们只需要复制一下，然后生词对应的意思就能立刻出来，省去了繁琐的切换，让你专注阅读不分心。</p>

<!--more-->


<h2>高清无码大图</h2>

<p><img src="http://droidyueimg.qiniudn.com/akoi_ui.png">
<img src="http://droidyueimg.qiniudn.com/akoi_target_language.png">
<img src="http://droidyueimg.qiniudn.com/akoi_result_new.png"></p>

<h2>等饭时的脑洞</h2>

<p>一个周末的晚上，我去附近的春和饺子馆买饭，为了避免在那里吃堂食吸二手烟，我决定打包带走，去之前使用Pocket离线了一篇关于Java运行时数据区的英文文章，于是边等饭边阅读文章，发现了一个不懂的单词，这时候我的做法是复制单词，按Home键退回桌面，找到词典进入，贴出单词，然后查看答案，再退回到Pocket继续阅读。</p>

<p>此时此刻，程序的优越性体现出来了，当剪切板内容变化是由回调通知的，既然我可以拿到复制的内容，我可以使用一个Web服务API翻译这个内容，然后将这些操作放到Service中，将取到的结果以Toast形式展示不就可以了么。当饭好了之后，提着打包的饭屁颠屁颠地回去了。。。。。</p>

<h2>完成前的瞬间</h2>

<ul>
<li>想法出来之后，吃完晚饭花了两个小时解决了技术问题，做出了一个可用的原型</li>
<li>一周以后，邀请小伙伴设计师大麦讨论问题，讨论结果显示位置和应用的功能。</li>
<li>最近的周末，催大麦给我做启动图标，在三里屯请我吃了顿饭，然后去央视大裤衩附近的他的公司逼着他做图。</li>
</ul>


<h2>为什么加广告</h2>

<p>我确实是在应用里面加了广告了，想必使用QQ手机管家这样的工具都能提示的。</p>

<p>国内版本加入的是<a href="https://www.youmi.net/account/register?r=OTU2Ng==">有米广告</a>,之前一直在用有米广告，感觉很不错，感兴趣的朋友可以试一试。</p>

<p>主要的原因还是增加一点收入，毕竟在帝都公交地铁都涨价了，另外加入的广告属于可以接受的，不存在强制弹出的问题，而且广告并非是时刻展示，只有用户触发类似推荐应用时才出现，属于无干扰的类型。</p>

<h2>下载地址</h2>

<p><img src="http://droidyueimg.qiniudn.com/akoi_qrcode_download.png"></p>

<h2>特别感谢</h2>

<ul>
<li>大麦 我的御用设计师，帮我做图标。多次往返于宋家庄与西北旺之间，辛苦。</li>
</ul>


<h2>最后的话</h2>

<h3>其他词典有这个功能</h3>

<p>确实，当我有了上面的想法之后，查了一下市场上的应用，确实有几款有这样的功能。但是还是有一些不同的，因为依托了百度翻译的技术，支持的语言相对较多。只做复制翻译操作。</p>

<h3>博客没更新</h3>

<p>确实写这个小应用还是比较花时间的，周末的时间，回到家的时间，零零散散的时间，导致最近博客更新减慢，多有抱歉哈。</p>

<h3>沉默三年</h3>

<p>确实距离上次写应用已经三年了，三年前自己还在大学的时候，写过几个拿不出手的应用，那时候自己找图，写的App一点儿技术含量都没有。现在写这个应用完全是解决自己的需求，如果同时能帮助其他人，那么这个应用也是值得的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中处理Touch Icon的方案]]></title>
    <link href="http://droidyue.com/blog/2015/01/18/deal-with-touch-icon-in-android/"/>
    <updated>2015-01-18T21:23:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/01/18/deal-with-touch-icon-in-android</id>
    <content type="html"><![CDATA[<p>苹果的Touch Icon相对我们都比较熟悉，是苹果为了支持网络应用（或者说网页）添加到桌面需要的图标，有了这些Touch Icon的网页链接更加和Native应用更相像了。由于苹果设备IPod，IPhone,IPad等设备广泛，很多网页都提供了touch icon这种图标资源。由于Android中并没有及早的有一份这样的标准，当我们想把网页添加到桌面时，仍然需要使用苹果的Touch Icon。</p>

<!--more-->


<h2>Touch Icon</h2>

<p>当我们想让一个网页比较完美地添加到桌面，通常情况下我们需要设置一个png图片文件作为apple-touch-icon。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon&quot;</span> <span class="na">href=</span><span class="s">&quot;/custom_icon.png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想支持IPhone和IPad，我们需要使用sizes属性来制定多个图片，默认sizes的值为60 x 60。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon&quot;</span> <span class="na">href=</span><span class="s">&quot;touch-icon-iphone.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon&quot;</span> <span class="na">sizes=</span><span class="s">&quot;76x76&quot;</span> <span class="na">href=</span><span class="s">&quot;touch-icon-ipad.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon&quot;</span> <span class="na">sizes=</span><span class="s">&quot;120x120&quot;</span> <span class="na">href=</span><span class="s">&quot;touch-icon-iphone-retina.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon&quot;</span> <span class="na">sizes=</span><span class="s">&quot;152x152&quot;</span> <span class="na">href=</span><span class="s">&quot;touch-icon-ipad-retina.png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在IOS7之前，苹果系统会对添加到桌面的图标进行圆角化等视觉上的处理，为了不让其处理，我们可以使用apple-touch-icon-precomposed来作为rel的值实现。</p>

<p>更多关于Touch Icon的信息，可以访问<a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html">水果开发者网站</a>了解更多。</p>

<h2>Android中有缺陷的实现</h2>

<p>在Android WebView提供了处理Touch Icon的回调，<code>onReceivedTouchIconUrl(WebView view, String url,boolean precomposed)</code>该方法返回了对我们有用的touch icon的url，和是否为预组合（在IOS中不需要进行视觉处理）。虽然有这些数据，我们可以进行处理，但是这其中是有问题的，就是我们不好确定文件的大小，来选择适合的图片。</p>

<p>举个例子,如下一个网页的源码，其中sizes的顺序不规律</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;72x72&quot;</span> <span class="na">href=</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-72x72.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;114x114&quot;</span> <span class="na">href=</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-114x114.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;57x57&quot;</span> <span class="na">href=</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-57x57.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span>  <span class="na">href=</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-0x0.png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>加载网页，onReceivedTouchIconUrl输出的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>I/MainActivity<span class="o">(</span> 6995<span class="o">)</span>: onReceivedTouchIconUrl <span class="nv">url</span><span class="o">=</span>http://www.qiyipic.com/20130423143600/fix/H5-0x0.png;precomposed<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>I/MainActivity<span class="o">(</span> 6995<span class="o">)</span>: onReceivedTouchIconUrl <span class="nv">url</span><span class="o">=</span>http://www.qiyipic.com/20130423143600/fix/H5-57x57.png;precomposed<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>I/MainActivity<span class="o">(</span> 6995<span class="o">)</span>: onReceivedTouchIconUrl <span class="nv">url</span><span class="o">=</span>http://www.qiyipic.com/20130423143600/fix/H5-114x114.png;precomposed<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>I/MainActivity<span class="o">(</span> 6995<span class="o">)</span>: onReceivedTouchIconUrl <span class="nv">url</span><span class="o">=</span>http://www.qiyipic.com/20130423143600/fix/H5-72x72.png;precomposed<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的输出来看，基本上是后面（书写）的元素先打印出来，所以这个回调的缺陷如下</p>

<ul>
<li>由于Touch Icon url地址没有硬性规定，不能根据url包含某些尺寸来判断使用哪个icon</li>
<li>由于网页编写touch icon元素相对随意，不能根据onReceivedTouchIconUrl调用先后来决定使用哪个icon</li>
<li>回调中没有sizes属性值，不好确定使用哪个icon</li>
<li>如果我们选取质量最高的图片，然后进行适当压缩处理或许可以解决问题，但是将全部icon下载下来或者根据Head头信息总感觉不怎么好。</li>
</ul>


<h2>改进方法</h2>

<p>既然WebView没有现成的方法满足我们的需求，只好自己来实现。其实实现方法还是比较简单地就是js脚本注入检测网页元素中得touch icon，返回json数据。</p>

<h3>JavaScript方法</h3>

<p>下面的JS代码所做的功能为查找所有为touch icon的link元素，包含正常的还标记为precomposed。然后将这些link元素的属性存入json数据，最后返回给Java代码中对应的回调。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">touchIcons</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">gatherTouchIcons</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">normalTouchIconLength</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">currentElement</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">normalTouchIconLength</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">currentElement</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">size</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">currentElement</span><span class="p">.</span><span class="nx">hasAttribute</span><span class="p">(</span><span class="s1">&#39;sizes&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">size</span> <span class="o">=</span> <span class="nx">currentElement</span><span class="p">.</span><span class="nx">sizes</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">size</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;sizes&#39;</span><span class="o">:</span><span class="nx">size</span><span class="p">,</span> <span class="s1">&#39;rel&#39;</span><span class="o">:</span> <span class="nx">currentElement</span><span class="p">.</span><span class="nx">rel</span><span class="p">,</span> <span class="s1">&#39;href&#39;</span><span class="o">:</span> <span class="nx">currentElement</span><span class="p">.</span><span class="nx">href</span><span class="p">};</span>
</span><span class='line'>      <span class="nx">touchIcons</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">info</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">obtainTouchIcons</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">normalElements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;link[rel=&#39;apple-touch-icon&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">precomposedElements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;link[rel=&#39;apple-touch-icon-precomposed&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">gatherTouchIcons</span><span class="p">(</span><span class="nx">normalElements</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">gatherTouchIcons</span><span class="p">(</span><span class="nx">precomposedElements</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">touchIcons</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">app_native</span><span class="p">.</span><span class="nx">onReceivedTouchIcons</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">URL</span><span class="p">,</span> <span class="nx">info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">obtainTouchIcons</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java代码</h3>

<p>这里为了便于理解还是全部贴出了demo的源码，demo中当网页加载完成之后注入上面的js代码获取touch icon信息，然后返回给java的回调方法中。如果不清楚Java和JavaScript交互，可以访问<a href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/">Android中Java和JavaScript交互</a>了解更多。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">obtaintouchicon</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.JavascriptInterface</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebChromeClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebViewClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">WebView</span> <span class="n">webView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="n">webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setJavaScriptEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">webView</span><span class="o">.</span><span class="na">setWebViewClient</span><span class="o">(</span><span class="k">new</span> <span class="n">WebViewClient</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPageFinished</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">super</span><span class="o">.</span><span class="na">onPageFinished</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">url</span><span class="o">);</span>
</span><span class='line'>              <span class="kd">final</span> <span class="n">String</span> <span class="n">touchIconJsCode</span> <span class="o">=</span> <span class="n">getTouchIconJsCode</span><span class="o">();</span>
</span><span class='line'>              <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span> <span class="o">,</span> <span class="s">&quot;onPageFinished url = &quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;;touchIconJsCode=&quot;</span> <span class="o">+</span> <span class="n">touchIconJsCode</span><span class="o">);</span>
</span><span class='line'>              <span class="n">view</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;javascript:&quot;</span> <span class="o">+</span> <span class="n">touchIconJsCode</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      <span class="n">webView</span><span class="o">.</span><span class="na">addJavascriptInterface</span><span class="o">(</span><span class="k">new</span> <span class="n">JsObject</span><span class="o">(),</span> <span class="s">&quot;app_native&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">webView</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;http://192.168.1.5:8000/html/touchicon.html&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">class</span> <span class="nc">JsObject</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@JavascriptInterface</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceivedTouchIcons</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">String</span> <span class="n">json</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onReceivedTouchIcons url=&quot;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&quot;;json=&quot;</span> <span class="o">+</span> <span class="n">json</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="nf">getTouchIconJsCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">total</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">bufferReader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">inputStream</span> <span class="o">=</span> <span class="n">getAssets</span><span class="o">().</span><span class="na">open</span><span class="o">(</span><span class="s">&quot;touchicon.js&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">bufferReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">));</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">bufferReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">total</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">inputStream</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">inputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">total</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>返回的JSON数据</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span><span class="s">&quot;72x72&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;rel&quot;</span><span class="o">:</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;href&quot;</span><span class="o">:</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-72x72.png&quot;</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span><span class="s">&quot;114x114&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;rel&quot;</span><span class="o">:</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;href&quot;</span><span class="o">:</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-114x114.png&quot;</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span><span class="s">&quot;57x57&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;rel&quot;</span><span class="o">:</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;href&quot;</span><span class="o">:</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-57x57.png&quot;</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span><span class="s">&quot;&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;rel&quot;</span><span class="o">:</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;href&quot;</span><span class="o">:</span><span class="s">&quot;http://www.qiyipic.com/20130423143600/fix/H5-0x0.png&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以对得到的JSON数据按照需要处理。</p>

<h2>Google会改进么</h2>

<p>答案是会，而且已经改进，但Google修改的不是onReceivedTouchIconUrl这个方法，而是Google正在推行自己的一套规则。</p>

<p>在Chrome上，Google增加了这样一个元素，这是Google提供的为网页程序定义元数据的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;manifest&quot;</span> <span class="na">href=</span><span class="s">&quot;manifest.json&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在元数据json中，你可以自定义title，起始页，程序是横屏还是竖屏展示。一个简单地json实例如下，这里我们可以看到其中icons中存在多个类似touch icon的图标，src代表图标路径，sizes代表大小，type就是mimetype，density指的是Android中的屏幕密度（这样更加Android化了）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Web Application Manifest Sample&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;icons&quot;</span><span class="o">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;src&quot;</span><span class="o">:</span> <span class="s">&quot;launcher-icon-0-75x.png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span> <span class="s">&quot;36x36&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;image/png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;density&quot;</span><span class="o">:</span> <span class="s">&quot;0.75&quot;</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;src&quot;</span><span class="o">:</span> <span class="s">&quot;launcher-icon-1x.png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span> <span class="s">&quot;48x48&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;image/png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;density&quot;</span><span class="o">:</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;src&quot;</span><span class="o">:</span> <span class="s">&quot;launcher-icon-1-5x.png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span> <span class="s">&quot;72x72&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;image/png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;density&quot;</span><span class="o">:</span> <span class="s">&quot;1.5&quot;</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;src&quot;</span><span class="o">:</span> <span class="s">&quot;launcher-icon-2x.png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span> <span class="s">&quot;96x96&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;image/png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;density&quot;</span><span class="o">:</span> <span class="s">&quot;2.0&quot;</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;src&quot;</span><span class="o">:</span> <span class="s">&quot;launcher-icon-3x.png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span> <span class="s">&quot;144x144&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;image/png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;density&quot;</span><span class="o">:</span> <span class="s">&quot;3.0&quot;</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s">&quot;src&quot;</span><span class="o">:</span> <span class="s">&quot;launcher-icon-4x.png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;sizes&quot;</span><span class="o">:</span> <span class="s">&quot;192x192&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;image/png&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;density&quot;</span><span class="o">:</span> <span class="s">&quot;4.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">],</span>
</span><span class='line'>  <span class="s">&quot;start_url&quot;</span><span class="o">:</span> <span class="s">&quot;index.html&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;display&quot;</span><span class="o">:</span> <span class="s">&quot;standalone&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;orientation&quot;</span><span class="o">:</span> <span class="s">&quot;landscape&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Google这套新的标准，可以参考<a href="https://developer.chrome.com/multidevice/android/installtohomescreen">Add to Homescreen</a></p>

<p>但是由于目前，这种标准实施率相对比较低，所以我们还是需要使用苹果的touch icon。</p>

<h2>推荐阅读</h2>

<ul>
<li><a href="https://mathiasbynens.be/notes/touch-icons">Everything you always wanted to know about touch icons</a></li>
</ul>


<h2>源码下载</h2>

<ul>
<li><a href="http://pan.baidu.com/s/1dDD3gZZ">http://pan.baidu.com/s/1dDD3gZZ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例这种设计模式]]></title>
    <link href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/"/>
    <updated>2015-01-11T22:15:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/01/11/looking-into-singleton</id>
    <content type="html"><![CDATA[<p>随着我们编写代码的深入，我们或多或少都会接触到设计模式，其中单例(Singleton)模式应该是我们耳熟能详的一种模式。本文将比较特别的介绍一下Java设计模式中的单例模式。</p>

<!--more-->


<h2>概念</h2>

<p>单例模式，又称单件模式或者单子模式，指的是一个类只有一个实例，并且提供一个全局访问点。</p>

<h2>实现思路</h2>

<ul>
<li>在单例的类中设置一个private静态变量sInstance，sInstance类型为当前类，用来持有单例唯一的实例。</li>
<li>将（无参数）构造器设置为private，避免外部使用new构造多个实例。</li>
<li>提供一个public的静态方法，如getInstance，用来返回该类的唯一实例sInstance。</li>
</ul>


<p>其中上面的单例的实例可以有以下几种创建形式，每一种实现都需要保证实例的唯一性。</p>

<h3>饿汉式</h3>

<p>饿汉式指的是单例的实例在类装载时进行创建。如果单例类的构造方法中没有包含过多的操作处理，饿汉式其实是可以接受的。</p>

<p>饿汉式的常见代码如下,当SingleInstance类加载时会执行<code>private static SingleInstance sInstance = new SingleInstance();</code>初始化了唯一的实例，然后<code>getInstance()</code>直接返回sInstance即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SingleInstance</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SingleInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>饿汉式的问题</p>

<ul>
<li>如果构造方法中存在过多的处理，会导致加载这个类时比较慢，可能引起性能问题。</li>
<li>如果使用饿汉式的话，只进行了类的装载，并没有实质的调用，会造成资源的浪费。</li>
</ul>


<h3>懒汉式</h3>

<p>懒汉式指的是单例实例在第一次使用时进行创建。这种情况下避免了上面饿汉式可能遇到的问题。</p>

<p>但是考虑到多线程的并发操作，我们<strong>不能</strong>简简单单得像下面代码实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SingleInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">sInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SingleInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的代码在多个线程密集调用getInstance时，存在创建多个实例的可能。比如线程A进入<code>null == sInstance</code>这段代码块，而在A线程未创建完成实例时，如果线程B也进入了该代码块，必然会造成两个实例的产生。</p>

<h3>synchronized修饰方法</h3>

<p>使用synchrnozed修饰getInstance方法可能是最简单的一个保证多线程保证单例唯一性的方法。<br/>
synchronized修饰的方法后，当某个线程进入调用这个方法，该线程只有当其他线程离开当前方法后才会进入该方法。所以可以保证getInstance在任何时候只有一个线程进入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SingleInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">SingleInstance</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">sInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SingleInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是使用synchronized修饰getInstance方法后必然会导致性能下降，而且getInstance是一个被频繁调用的方法。虽然这种方法能解决问题，但是不推荐。</p>

<h4>双重检查加锁</h4>

<p>使用双重检查加锁，首先进入该方法时进行<code>null == sInstance</code>检查，如果第一次检查通过，即没有实例创建，则进入synchronized控制的同步块,并再次检查实例是否创建，如果仍未创建，则创建该实例。</p>

<p>双重检查加锁保证了多线程下只创建一个实例，并且加锁代码块只在实例创建的之前进行同步。如果实例已经创建后，进入该方法，则不会执行到同步块的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">SingleInstance</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SingleInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">sInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">synchronized</span> <span class="o">(</span><span class="n">SingleInstance</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">sInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SingleInstance</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>volatile是什么</strong></p>

<p>Volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。使用volatile修饰sInstance变量之后，可以确保多个线程之间正确处理sInstance变量。<br/>
关于volatile，可以访问<a href="http://www.infoq.com/cn/articles/ftf-java-volatile">深入分析Volatile的实现原理</a>了解更多。</p>

<h3>利用static机制</h3>

<p>在Java中，类的静态初始化会在类被加载时触发，我们利用这个原理，可以实现利用这一特性，结合内部类，可以实现如下的代码，进行懒汉式创建实例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SingleInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">SingleInstanceHolder</span><span class="o">.</span><span class="na">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingleInstanceHolder</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SingleInstance</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于这种机制，可以具体了解<a href="http://www.infoq.com/cn/articles/double-checked-locking-with-delay-initialization">双重检查锁定与延迟初始化</a></p>

<h2>好奇问题</h2>

<h3>真的只有一个对象么</h3>

<p>其实，单例模式并不能保证实例的唯一性，只要我们想办法的话，还是可以打破这种唯一性的。以下几种方法都能实现。</p>

<ul>
<li>使用反射，虽然构造器为非公开，但是在反射面前就不起作用了。</li>
<li>如果单例的类实现了cloneable，那么还是可以拷贝出多个实例的。</li>
<li>Java中的对象序列化也有可能导致创建多个实例。避免使用readObject方法。</li>
<li>使用多个类加载器加载单例类，也会导致创建多个实例并存的问题。</li>
</ul>


<h3>单例可以继承么</h3>

<p>单例类能否被继承需要分情况而定。</p>

<h4>可以继承的情况</h4>

<p>当子类是父类单例类的内部类时，继承是可以的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseSingleton</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">BaseSingleton</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="nf">BaseSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">BaseSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">sInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">synchronized</span><span class="o">(</span><span class="n">BaseSingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">sInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BaseSingleton</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span>  <span class="nc">MySingleton</span> <span class="kd">extends</span> <span class="n">BaseSingleton</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是上面仅仅是编译和执行上允许的，但是继承单例没有实际的意义，反而会变得更加事倍功半，其代价要大于新写一个单例类。感兴趣的童鞋可以尝试折腾一下。</p>

<h4>不可以继承的情况</h4>

<p>如果子类为单独的类，非单例类的内部类的话，那么在编译时就会出错<code>Implicit super constructor BaseSingleton() is not visible for default constructor. Must define an explicit constructor</code>，主要原因是单例类的构造器是private，解决方法是讲构造器设置为可见，但是这样做就无法保证单例的唯一性。所以这种方式不可以继承。</p>

<p>总的来说，单例类不要继承。</p>

<h3>单例 vs static变量</h3>

<p>全局静态变量也可以实现单例的效果，但是使用全局变量无法保证只创建一个实例，而且使用全局变量的形式，需要团队的约束，执行起来可能会出现问题。</p>

<h3>关于GC</h3>

<p>因为单例类中又一个静态的变量持有单例的实例，所以相比普通的对象，单例的对象更不容易被GC回收掉。单例对象的回收应该发生在其类加载器被GC回收掉之后，一般不容易出现。</p>

<h2>相关阅读</h2>

<ul>
<li><a href="http://javarevisited.blogspot.sg/2011/03/10-interview-questions-on-singleton.html">10 Singleton Pattern Interview Questions in Java</a></li>
</ul>


<h2>一本书</h2>

<p><a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011FBU34&amp;linkCode=as2&amp;tag=droidyue-23">Head First设计模式</a>,本书荣获2005年第十五届Jolt通用类图书震撼大奖。本书英文影印版被《程序员》等机构评选为2006年最受读者喜爱的十大IT图书之一 。本书趋近完美，因为它在提供专业知识的同时，仍然具有相当高的可读性。叙述权威、文笔优美。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015上半年]]></title>
    <link href="http://droidyue.com/blog/2015/01/10/plan-for-the-first-half-of-2015/"/>
    <updated>2015-01-10T22:41:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/01/10/plan-for-the-first-half-of-2015</id>
    <content type="html"><![CDATA[<p>时光荏苒，自上次的<a href="http://droidyue.com/blog/2014/07/06/my-plan-for-the-left-half-of-2014/">2014年下半年计划</a>已经过去半年了，又到了展望一下开始的这半年的时刻了。</p>

<!--more-->


<h2>过去半年的收获</h2>

<ul>
<li>日语四级考试通过</li>
<li>开始把Java中的一些东西研究透了</li>
<li>技术小黑屋的日均IP过百，并且超额完成</li>
<li>每天早上玩<a href="http://s.click.taobao.com/t?e=m%3D2%26s%3DYqRO1Rfaov0cQipKwQzePOeEDrYVVa64Qih%2F7PxfOKS5VBFTL4hn2X7BOnX0umzUYFMBzHxYoCPM3gYQjCL89qULerPwKfMIwRKDNIG1Ob7cAkcj9pZG3swMHV%2FCenxVQc4fM4SkruX%2BecaeU0a94sYOae24fhW0">体感游戏机</a>，身体素质明显增强</li>
<li>学会了在爱情中付出，全心去爱女友，并且女友也一直深爱我</li>
</ul>


<h2>过去半年的教训</h2>

<ul>
<li>制定的目标过多，精力有限。需根据自身实际情况制定，不能过于主观。</li>
<li>有些事情没有坚持做下去，很多想法尚未实现。需要更加高效的执行力。</li>
</ul>


<h2>15上半年的预期</h2>

<h3>编程</h3>

<ul>
<li>继续读完<a href="http://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=droidyue-23">Thinking In Java</a></li>
<li>继续研究东西要彻底嚼烂的风格</li>
<li>在码农周刊,infoq各发布5篇以上文章</li>
<li>尝试以新的展现形式分享我的研究</li>
</ul>


<h3>爱情</h3>

<ul>
<li>陪女友吃遍帝都的小吃，逛街，一起去大阪。</li>
<li>爱她，宠她，帮助她改变，努力赚钱养她。</li>
</ul>


<h3>外语</h3>

<ul>
<li>12月参加N3考试（较之前有推迟）准备</li>
<li>第三季度去日本旅行日常会话练习</li>
<li>通过通勤路上听英文演讲重拾英语</li>
</ul>


<h3>其他</h3>

<ul>
<li>利用好<a href="http://s.click.taobao.com/t?e=m%3D2%26s%3DYqRO1Rfaov0cQipKwQzePOeEDrYVVa64Qih%2F7PxfOKS5VBFTL4hn2X7BOnX0umzUYFMBzHxYoCPM3gYQjCL89qULerPwKfMIwRKDNIG1Ob7cAkcj9pZG3swMHV%2FCenxVQc4fM4SkruX%2BecaeU0a94sYOae24fhW0">体感游戏机</a>，体检时彻底没有轻度脂肪肝症状。</li>
<li>常回家看看，毕竟大家都羡慕保定距离北京这么近。</li>
<li>技术小黑屋网站的Alexa排名到30万，目前为40万</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的静态绑定和动态绑定]]></title>
    <link href="http://droidyue.com/blog/2014/12/28/static-biding-and-dynamic-binding-in-java/"/>
    <updated>2014-12-28T11:32:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/12/28/static-biding-and-dynamic-binding-in-java</id>
    <content type="html"><![CDATA[<p>一个Java程序的执行要经过编译和执行（解释）这两个步骤，同时Java又是面向对象的编程语言。当子类和父类存在同一个方法，子类重写了父类的方法，程序在运行时调用方法是调用父类的方法还是子类的重写方法呢，这应该是我们在初学Java时遇到的问题。这里首先我们将确定这种调用何种方法实现或者变量的操作叫做绑定。</p>

<p>在Java中存在两种绑定方式，一种为静态绑定，又称作早期绑定。另一种就是动态绑定，亦称为后期绑定。</p>

<!--more-->


<h2>区别对比</h2>

<ul>
<li>静态绑定发生在编译时期，动态绑定发生在运行时</li>
<li>使用private或static或final修饰的变量或者方法，使用静态绑定。而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。</li>
<li>静态绑定使用类信息来完成，而动态绑定则需要使用对象信息来完成。</li>
<li>重载(Overload)的方法使用静态绑定完成，而重写(Override)的方法则使用动态绑定完成。</li>
</ul>


<h2>重载方法的示例</h2>

<p>这里展示一个重载方法的示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Caller</span> <span class="n">caller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Caller</span><span class="o">();</span>
</span><span class='line'>      <span class="n">caller</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Caller</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行的结果为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">19</span> <span class="n">$</span> <span class="n">java</span> <span class="n">TestMain</span>
</span><span class='line'><span class="n">a</span> <span class="n">String</span> <span class="n">instance</span> <span class="n">in</span> <span class="n">in</span> <span class="n">Caller</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，call方法存在两个重载的实现，一个是接收Object类型的对象作为参数，另一个则是接收String类型的对象作为参数。str是一个String对象，所有接收String类型参数的call方法会被调用。而这里的绑定就是在编译时期根据参数类型进行的静态绑定。</p>

<h3>验证</h3>

<p>光看表象无法证明是进行了静态绑定，使用javap发编译一下即可验证。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">19</span> <span class="n">$</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">TestMain</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestMain.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TestMain</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// class java/lang/String</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method java/lang/String.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class TestMain$Caller</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method TestMain$Caller.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">18</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Method TestMain$Caller.call:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到了这一行<code>18: invokevirtual #6                  // Method TestMain$Caller.call:(Ljava/lang/String;)V</code>确实是发生了静态绑定，确定了调用了接收String对象作为参数的caller方法。</p>

<h2>重写方法的示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Caller</span> <span class="n">caller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubCaller</span><span class="o">();</span>
</span><span class='line'>      <span class="n">caller</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Caller</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SubCaller</span> <span class="kd">extends</span> <span class="n">Caller</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in SubCaller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行的结果为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">27</span> <span class="n">$</span> <span class="n">java</span> <span class="n">TestMain</span>
</span><span class='line'><span class="n">a</span> <span class="n">String</span> <span class="n">instance</span> <span class="n">in</span> <span class="n">SubCaller</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，Caller中有一个call方法的实现，SubCaller继承Caller，并且重写了call方法的实现。我们声明了一个Caller类型的变量callerSub，但是这个变量指向的时一个SubCaller的对象。根据结果可以看出，其调用了SubCaller的call方法实现，而非Caller的call方法。这一结果的产生的原因是因为在运行时发生了动态绑定，在绑定过程中需要确定调用哪个版本的call方法实现。</p>

<h3>验证</h3>

<p>使用javap不能直接验证动态绑定，然后如果证明没有进行静态绑定，那么就说明进行了动态绑定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">27</span> <span class="n">$</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">TestMain</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestMain.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TestMain</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// class java/lang/String</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method java/lang/String.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class TestMain$SubCaller</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method TestMain$SubCaller.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">18</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Method TestMain$Caller.call:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正如上面的结果，<code>18: invokevirtual #6                  // Method TestMain$Caller.call:(Ljava/lang/String;)V</code>这里是<code>TestMain$Caller.call</code>而非<code>TestMain$SubCaller.call</code>，因为编译期无法确定调用子类还是父类的实现，所以只能丢给运行时的动态绑定来处理。</p>

<h2>当重载遇上重写</h2>

<p>下面的例子有点变态哈，Caller类中存在call方法的两种重载，更复杂的是SubCaller集成Caller并且重写了这两个方法。其实这种情况是上面两种情况的复合情况。</p>

<p>下面的代码首先会发生静态绑定，确定调用参数为String对象的call方法，然后在运行时进行动态绑定确定执行子类还是父类的call实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Caller</span> <span class="n">callerSub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubCaller</span><span class="o">();</span>
</span><span class='line'>      <span class="n">callerSub</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Caller</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SubCaller</span> <span class="kd">extends</span> <span class="n">Caller</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in SubCaller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in in SubCaller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">30</span> <span class="n">$</span> <span class="n">java</span> <span class="n">TestMain</span>
</span><span class='line'><span class="n">a</span> <span class="n">String</span> <span class="n">instance</span> <span class="n">in</span> <span class="n">in</span> <span class="n">SubCaller</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证</h3>

<p>由于上面已经介绍，这里只贴一下反编译结果啦</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">30</span> <span class="n">$</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">TestMain</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestMain.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TestMain</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// class java/lang/String</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method java/lang/String.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class TestMain$SubCaller</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method TestMain$SubCaller.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">18</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Method TestMain$Caller.call:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>好奇问题</h2>

<h3>非动态绑定不可么？</h3>

<p>其实理论上，某些方法的绑定也可以由静态绑定实现。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">();</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Caller</span> <span class="n">callerSub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubCaller</span><span class="o">();</span>
</span><span class='line'>      <span class="n">callerSub</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如这里callerSub持有subCaller的对象并且callerSub变量为final，立即执行了call方法，编译器理论上通过足够的分析代码，是可以知道应该调用SubCaller的call方法。</p>

<p>但是为什么没有进行静态绑定呢？<br/>
假设我们的Caller继承自某一个框架的BaseCaller类，其实现了call方法，而BaseCaller继承自SuperCaller。SuperCaller中对call方法也进行了实现。</p>

<p>假设某框架1.0中的BaseCaller和SuperCaller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">SuperCaller</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in SuperCaller&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">BaseCaller</span> <span class="kd">extends</span> <span class="n">SuperCaller</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in BaseCaller&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而我们使用框架1.0进行了这样的实现。Caller继承自BaseCaller，并且调用了super.call方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>      <span class="n">SuperCaller</span> <span class="n">callerSub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubCaller</span><span class="o">();</span>
</span><span class='line'>      <span class="n">callerSub</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Caller</span> <span class="kd">extends</span> <span class="n">BaseCaller</span><span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in in Caller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SubCaller</span> <span class="kd">extends</span> <span class="n">Caller</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;an Object instance in SubCaller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a String instance in in SubCaller&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们基于这个框架的1.0版编译出来了class文件，假设静态绑定可以确定上面Caller的super.call为BaseCaller.call实现。</p>

<p>然后我们再次假设这个框架1.1版本中BaseCaller不重写SuperCaller的call方法，那么上面的假设可以静态绑定的call实现在1.1版本就会出现问题，因为在1.1版本上super.call应该是使用SuperCall的call方法实现，而非假设使用静态绑定确定的BaseCaller的call方法实现。</p>

<p>所以，有些实际可以静态绑定的，考虑到安全和一致性，就索性都进行了动态绑定。</p>

<h3>得到的优化启示？</h3>

<p>由于动态绑定需要在运行时确定执行哪个版本的方法实现或者变量，比起静态绑定起来要耗时。</p>

<p>所以<strong>在不影响整体设计</strong>，我们可以考虑将方法或者变量使用private，static或者final进行修饰。</p>

<h3>参考文章</h3>

<ul>
<li><a href="http://javarevisited.blogspot.com/2012/03/what-is-static-and-dynamic-binding-in.html">What is Static and Dynamic binding in Java with Example</a></li>
</ul>


<h3>一本书</h3>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00G9KF4JC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G9KF4JC&amp;linkCode=as2&amp;tag=droidyue-23">Java核心技术</a>，Java领域最有影响力和价值的著作之一，拥有20多年教学与研究经验的资深Java技术专家撰写（获Jolt大奖），与<a href="http://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=droidyue-23">《Java编程思想》</a>齐名，10余年全球畅销不衰，广受好评。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中Handler引起的内存泄露]]></title>
    <link href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/"/>
    <updated>2014-12-28T11:24:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur</id>
    <content type="html"><![CDATA[<p>在Android常用编程中，Handler在进行异步操作并处理返回结果时经常被使用。通常我们的代码会这样实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Handler</span> <span class="n">mLeakyHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ... </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>但是，其实上面的代码可能导致内存泄露，当你使用Android lint工具的话，会得到这样的警告</p>

<blockquote><p>In Android, Handler classes should be static or leaks might occur, Messages enqueued on the application thread&rsquo;s MessageQueue also retain their target Handler. If the Handler is an inner class, its outer class will be retained as well. To avoid leaking the outer class, declare the Handler as a static nested class with a WeakReference to its outer class</p></blockquote>

<p>看到这里，可能还是有一些搞不清楚，代码中哪里可能导致内存泄露，又是如何导致内存泄露的呢？那我们就慢慢分析一下。</p>

<p>1.当一个Android应用启动的时候，会自动创建一个供应用主线程使用的Looper实例。Looper的主要工作就是一个一个处理消息队列中的消息对象。在Android中，所有Android框架的事件（比如Activity的生命周期方法调用和按钮点击等）都是放入到消息中，然后加入到Looper要处理的消息队列中，由Looper负责一条一条地进行处理。主线程中的Looper生命周期和当前应用一样长。</p>

<p>2.当一个Handler在主线程进行了初始化之后，我们发送一个target为这个Handler的消息到Looper处理的消息队列时，实际上已经发送的消息已经包含了一个Handler实例的引用，只有这样Looper在处理到这条消息时才可以调用Handler#handleMessage(Message)完成消息的正确处理。</p>

<p>3.在Java中，非静态的内部类和匿名内部类都会隐式地持有其外部类的引用。静态的内部类不会持有外部类的引用。关于这一内容可以查看<a href="http://droidyue.com/blog/2014/10/02/the-private-modifier-in-java/">细话Java：&#8221;失效&#8221;的private修饰符</a></p>

<p>确实上面的代码示例有点难以察觉内存泄露，那么下面的例子就非常明显了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Handler</span> <span class="n">mLeakyHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Post a message and delay its execution for 10 minutes.</span>
</span><span class='line'>    <span class="n">mLeakyHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span> <span class="cm">/* ... */</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Go back to the previous Activity.</span>
</span><span class='line'>    <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析一下上面的代码，当我们执行了Activity的finish方法，被延迟的消息会在被处理之前存在于主线程消息队列中10分钟，而这个消息中又包含了Handler的引用，而Handler是一个匿名内部类的实例，其持有外面的SampleActivity的引用，所以这导致了SampleActivity无法回收，进行导致SampleActivity持有的很多资源都无法回收，这就是我们常说的内存泄露。</p>

<p>注意上面的new Runnable这里也是匿名内部类实现的，同样也会持有SampleActivity的引用，也会阻止SampleActivity被回收。</p>

<p>要解决这种问题，思路就是不适用非静态内部类，继承Handler时，要么是放在单独的类文件中，要么就是使用静态内部类。因为静态的内部类不会持有外部类的引用，所以不会导致外部类实例的内存泄露。当你需要在静态内部类中调用外部的Activity时，我们可以使用<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">弱引用</a>来处理。另外关于同样也需要将Runnable设置为静态的成员属性。注意：一个静态的匿名内部类实例不会持有外部类的引用。
修改后不会导致内存泄露的代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Instances of static inner classes do not hold an implicit</span>
</span><span class='line'><span class="cm">   * reference to their outer class.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyHandler</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SampleActivity</span><span class="o">&gt;</span> <span class="n">mActivity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyHandler</span><span class="o">(</span><span class="n">SampleActivity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mActivity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SampleActivity</span><span class="o">&gt;(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SampleActivity</span> <span class="n">activity</span> <span class="o">=</span> <span class="n">mActivity</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">activity</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">MyHandler</span> <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyHandler</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Instances of anonymous classes do not hold an implicit</span>
</span><span class='line'><span class="cm">   * reference to their outer class when they are &quot;static&quot;.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">sRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span> <span class="cm">/* ... */</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Post a message and delay its execution for 10 minutes.</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">sRunnable</span><span class="o">,</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Go back to the previous Activity.</span>
</span><span class='line'>    <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实在Android中很多的内存泄露都是由于在Activity中使用了非静态内部类导致的，就像本文提到的一样，所以当我们使用时要非静态内部类时要格外注意，如果其实例的持有对象的生命周期大于其外部类对象，那么就有可能导致内存泄露。个人倾向于使用文章的静态类和弱引用的方法解决这种问题。</p>

<h3>译文信息</h3>

<ul>
<li><a href="http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html">How to Leak a Context: Handlers &amp; Inner Classes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的字符串常量池]]></title>
    <link href="http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/"/>
    <updated>2014-12-21T19:09:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java</id>
    <content type="html"><![CDATA[<p>Java中字符串对象创建有两种形式，一种为字面量形式，如<code>String str = "droid";</code>，另一种就是使用<strong>new</strong>这种标准的构造对象的方法，如<code>String str = new String("droid");</code>，这两种方式我们在代码编写时都经常使用，尤其是字面量的方式。然而这两种实现其实存在着一些性能和内存占用的差别。这一切都是源于JVM为了减少字符串对象的重复创建，其维护了一个特殊的内存，这段内存被成为字符串常量池或者字符串字面量池。</p>

<!--more-->


<h2>工作原理</h2>

<p>当代码中出现字面量形式创建字符串对象时，JVM首先会对这个字面量进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回，否则新的字符串对象被创建，然后将这个引用放入字符串常量池，并返回该引用。</p>

<h2>举例说明</h2>

<h3>字面量创建形式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;droid&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JVM检测这个字面量，这里我们认为没有内容为<code>droid</code>的对象存在。JVM通过字符串常量池查找不到内容为<code>droid</code>的字符串对象存在，那么会创建这个字符串对象，然后将刚创建的对象的引用放入到字符串常量池中,并且将引用返回给变量str1。</p>

<p>如果接下来有这样一段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;droid&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样JVM还是要检测这个字面量，JVM通过查找字符串常量池，发现内容为&#8221;droid&#8221;字符串对象存在，于是将已经存在的字符串对象的引用返回给变量str2。注意这里不会重新创建新的字符串对象。</p>

<p>验证是否为str1和str2是否指向同一对象，我们可以通过这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span> <span class="o">==</span> <span class="n">str2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果为<code>true</code>。</p>

<h3>使用new创建</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;droid&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们使用了new来构造字符串对象的时候，不管字符串常量池中有没有相同内容的对象的引用，新的字符串对象都会创建。因此我们使用下面代码测试一下，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;droid&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span> <span class="o">==</span> <span class="n">str3</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如我们所想，为<code>false</code>，表明这两个变量指向的为不同的对象。</p>

<h3>intern</h3>

<p>对于上面使用new创建的字符串对象，如果想将这个对象的引用加入到字符串常量池，可以使用intern方法。</p>

<p>调用intern后，首先检查字符串常量池中是否有该对象的引用，如果存在，则将这个引用返回给变量，否则将引用加入并返回给变量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str4</span> <span class="o">=</span> <span class="n">str3</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str4</span> <span class="o">==</span> <span class="n">str1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出的结果为<code>true</code>。</p>

<h2>疑难问题</h2>

<h3>前提条件？</h3>

<p>字符串常量池实现的前提条件就是Java中String对象是不可变的，这样可以安全保证多个变量共享同一个对象。如果Java中的String对象可变的话，一个引用操作改变了对象的值，那么其他的变量也会受到影响，显然这样是不合理的。</p>

<h3>引用 or 对象</h3>

<p>字符串常量池中存放的时引用还是对象，这个问题是最常见的。字符串常量池存放的是对象引用，不是对象。<strong>在Java中，对象都创建在堆内存中</strong>。</p>

<p>更新验证，收到的很多评论也在讨论这个问题，我简单的进行了验证。
验证环境</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">54</span><span class="o">-</span><span class="n">androidyue</span><span class="o">~/</span><span class="n">Videos$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">os</span><span class="o">-</span><span class="n">release</span>
</span><span class='line'><span class="n">NAME</span><span class="o">=</span><span class="n">Fedora</span>
</span><span class='line'><span class="n">VERSION</span><span class="o">=</span><span class="s">&quot;17 (Beefy Miracle)&quot;</span>
</span><span class='line'><span class="n">ID</span><span class="o">=</span><span class="n">fedora</span>
</span><span class='line'><span class="n">VERSION_ID</span><span class="o">=</span><span class="mi">17</span>
</span><span class='line'><span class="n">PRETTY_NAME</span><span class="o">=</span><span class="s">&quot;Fedora 17 (Beefy Miracle)&quot;</span>
</span><span class='line'><span class="n">ANSI_COLOR</span><span class="o">=</span><span class="s">&quot;0;34&quot;</span>
</span><span class='line'><span class="n">CPE_NAME</span><span class="o">=</span><span class="s">&quot;cpe:/o:fedoraproject:fedora:17&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="mi">22</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">04</span><span class="o">-</span><span class="n">androidyue</span><span class="o">~/</span><span class="n">Videos$</span> <span class="n">java</span> <span class="o">-</span><span class="n">version</span>
</span><span class='line'><span class="n">java</span> <span class="n">version</span> <span class="s">&quot;1.7.0_25&quot;</span>
</span><span class='line'><span class="n">OpenJDK</span> <span class="n">Runtime</span> <span class="nf">Environment</span> <span class="o">(</span><span class="n">fedora</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mf">12.1</span><span class="o">.</span><span class="na">fc17</span><span class="o">-</span><span class="n">x86_64</span><span class="o">)</span>
</span><span class='line'><span class="n">OpenJDK</span> <span class="mi">64</span><span class="o">-</span><span class="n">Bit</span> <span class="n">Server</span> <span class="n">VM</span> <span class="o">(</span><span class="n">build</span> <span class="mf">23.7</span><span class="o">-</span><span class="n">b01</span><span class="o">,</span> <span class="n">mixed</span> <span class="n">mode</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>验证思路：以下的Java程序读取一个大小为82M的视频文件，以字符串形式进行intern操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>22:01:17-androidyue~/Videos<span class="nv">$ </span>ll -lh | grep why_to_learn.mp4
</span><span class='line'>-rw-rw-r--. 1 androidyue androidyue  82M Oct 20  2013 why_to_learn.mp4
</span></code></pre></td></tr></table></div></figure>


<p>验证代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestMain</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">fileContent</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">fileContent</span> <span class="o">=</span> <span class="n">readFileToString</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">fileContent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">fileContent</span> <span class="o">=</span> <span class="n">fileContent</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Not Null&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">readFileToString</span><span class="o">(</span><span class="n">String</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span><span class='line'>          <span class="n">StringBuffer</span> <span class="n">buff</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">buff</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">buff</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">reader</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于字符串常量池存在于堆内存中的永久代，适用于Java8之前。我们通过设置永久代一个很小的值来进行验证。如果字符串对象存在字符串常量池中，那么必然抛出<code>java.lang.OutOfMemoryError permgen space</code>错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -XX:PermSize<span class="o">=</span>6m TestMain ~/Videos/why_to_learn.mp4
</span></code></pre></td></tr></table></div></figure>


<p>运行证明程序没有抛出OOM，其实这个不能很好的证明存储的是对象还是引用。</p>

<p>但是这个至少证明了字符串的实际内容对象char[]不存放在字符串常量池中。既然这样的话，其实字符串常量池存储字符串对象还是字符串对象的引用反而不是那么重要。但个人还是倾向于存储的为引用。</p>

<h3>优缺点</h3>

<p>字符串常量池的好处就是减少相同内容字符串的创建，节省内存空间。</p>

<p>如果硬要说弊端的话，就是牺牲了CPU计算时间来换空间。CPU计算时间主要用于在字符串常量池中查找是否有内容相同对象的引用。不过其内部实现为HashTable，所以计算成本较低。</p>

<h3>GC回收？</h3>

<p>因为字符串常量池中持有了共享的字符串对象的引用，这就是说是不是会导致这些对象无法回收？</p>

<p>首先问题中共享的对象一般情况下都比较小。据我查证了解，在早期的版本中确实存在这样的问题，但是随着<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">弱引用</a>的引入，目前这个问题应该没有了。</p>

<p>关于这个问题，可以具体了解这片文章<a href="http://mindprod.com/jgloss/interned.html#GC">interned Strings : Java Glossary</a></p>

<h3>intern使用？</h3>

<p>关于使用intern的前提就是你清楚自己确实需要使用。比如，我们这里有一份上百万的记录，其中记录的某个值多次为<strong>美国加利福尼亚州</strong>，我们不想创建上百万条这样的字符串对象，我们可以使用intern只在内存中保留一份即可。关于intern更深入的了解请参考<a href="http://tech.meituan.com/in_depth_understanding_string_intern.html">深入解析String#intern</a>。</p>

<h3>总有例外？</h3>

<p>你知道下面的代码，会创建几个字符串对象，在字符串常量池中保存几个引用么？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">test</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span> <span class="o">+</span> <span class="s">&quot;b&quot;</span> <span class="o">+</span> <span class="s">&quot;c&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>答案是只创建了一个对象，在常量池中也只保存一个引用。我们使用javap反编译看一下即可得知。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">17</span><span class="o">:</span><span class="mi">02</span> <span class="n">$</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">TestInternedPoolGC</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestInternedPoolGC.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestInternedPoolGC</span> <span class="kd">extends</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">TestInternedPoolGC</span><span class="o">();</span>
</span><span class='line'>  <span class="nl">Code:</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">:</span>  <span class="n">aload_0</span>
</span><span class='line'>   <span class="mi">1</span><span class="o">:</span>  <span class="n">invokespecial</span>    <span class="err">#</span><span class="mi">1</span><span class="o">;</span> <span class="c1">//Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>   <span class="mi">4</span><span class="o">:</span>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[])</span>   <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Exception</span><span class="o">;</span>
</span><span class='line'>  <span class="nl">Code:</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">:</span>  <span class="n">ldc</span>  <span class="err">#</span><span class="mi">2</span><span class="o">;</span> <span class="c1">//String abc</span>
</span><span class='line'>   <span class="mi">2</span><span class="o">:</span>  <span class="n">astore_1</span>
</span><span class='line'>   <span class="mi">3</span><span class="o">:</span>  <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到了么，实际上在编译期间，已经将这三个字面量合成了一个。这样做实际上是一种优化，避免了创建多余的字符串对象，也没有发生字符串拼接问题。关于字符串拼接，可以查看<a href="http://droidyue.com/blog/2014/08/30/java-details-string-concatenation/">Java细节：字符串的拼接</a>。</p>

<h2>参考文章</h2>

<ul>
<li><a href="http://blog.jamesdbloom.com/JVMInternals.html">JVMInternals</a></li>
<li><a href="http://www.javaranch.com/journal/200409/ScjpTipLine-StringsLiterally.html">Strings, Literally</a></li>
<li><a href="http://theopentutorials.com/tutorials/java/strings/string-literal-pool/">STRING LITERAL POOL</a></li>
<li><a href="http://mindprod.com/jgloss/interned.html">interned Strings : Java Glossary</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM运行时的数据区]]></title>
    <link href="http://droidyue.com/blog/2014/12/21/java-runtime-data-areas/"/>
    <updated>2014-12-21T18:59:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/12/21/java-runtime-data-areas</id>
    <content type="html"><![CDATA[<p>理解JVM运行时的数据区是Java编程中的进阶部分。我们在开发中都遇到过一个很头疼的问题就是OutOfMemoryError（内存溢出错误），但是如果我们了解JVM的内部实现和其运行时的数据区的工作机制，那么前面的问题就会迎刃而解。在这片文章中，我们将简单了解JVM中有哪些运行时数据区以及这些数据区的工作机制。</p>

<!--more-->


<h2>JVM运行时数据区分类</h2>

<ul>
<li>程序计数器 (Program Counter (PC) Register)</li>
<li>JVM栈 (Java Virtual Machine Stacks)</li>
<li>堆内存 (Heap Memory)</li>
<li>方法区 (Method Area)</li>
<li>运行时常量池 (Run-time Constant Pool)</li>
<li>本地方法栈 (Native Method Stacks)</li>
</ul>


<h3>有图才能说</h3>

<p><img src="http://droidyueimg.qiniudn.com/JVM_runtime_data_areas.png" title="jvm runtime data areas" ></p>

<h3>按线程持有划分</h3>

<p>查看上面的图，可以得知以上六个数据区其实线程私有还是共享，可以分为如下两种。</p>

<ul>
<li><strong>单个线程私有</strong>(Managed Per-Thread) 属于这一种的数据区包含 程序计数器， JVM栈还有本地方法栈。 每个线程都私有这三个数据区，这些数据区在其所属的线程创建时初始化，并随着所属线程结束被销毁。</li>
<li><strong>多个线程共享</strong>  属于这一种的数据区包含 堆内存，方法区和运行时常量池。这些数据区可以被每一个线程访问，他们随着JVM启动而初始化，同时伴随JVM关闭而销毁。</li>
</ul>


<h2>程序计数器</h2>

<p>在通用的计算机体系中，程序计数器用来记录当前正在执行的指令，在JVM中也是如此。程序计数器是线程私有，所以当一个新的线程创建时，程序计数器也会创建。由于Java是支持多线程，Java中的程序计数器用来记录当前线程中正在执行的指令。如果当前正在执行的方法是本地方法，那么此刻程序计数器的值为<strong>undefined</strong>。注意这个区域是唯一一个不抛出OutOfMemoryError的运行时数据区。</p>

<h2>JVM栈</h2>

<p>在介绍JVM栈之前，简单介绍一个概念，栈帧</p>

<h3>栈帧</h3>

<p>一个栈帧随着一个方法的调用开始而创建，这个方法调用完成而销毁。栈帧内存放者方法中的局部变量，操作数栈等数据。</p>

<p>JVM栈只对栈帧进行存储，压栈和出栈操作。栈内存的大小可以有两种设置，固定值和根据线程需要动态增长。在JVM栈这个数据区可能会发生抛出两种错误。</p>

<ul>
<li>StackOverflowError 出现在栈内存设置成固定值的时候，当程序执行需要的栈内存超过设定的固定值会抛出这个错误。</li>
<li>OutOfMemoryError   出现在栈内存设置成动态增长的时候，当JVM尝试申请的内存大小超过了其可用内存时会抛出这个错误。</li>
</ul>


<h2>堆数据区</h2>

<p>堆数据区是用来存放对象和数组（特殊的对象）。堆内存由多个线程共享。堆内存随着JVM启动而创建。众所周知，Java中有一个很好的特性就是自动垃圾回收。垃圾回收就操作这个数据区来回收对象进而释放内存。如果堆内存剩余的内存不足以满足于对象创建，JVM会抛出OutOfMemoryError错误。</p>

<h2>方法区</h2>

<p>在JVM规范中，方法区被视为堆内存的一个逻辑部分。这一点可能由于具体的JVM实现而不同，甚至在方法区不实现垃圾回收处理也是可以的。方法区和堆内存一样被多个线程访问，方法区中存放类的信息，比如类加载器引用，属性，方法代码和构造方法和常量等。当方法区的可用内存无法满足内存分配需求时，JVM会抛出OutOfMemoryError错误。</p>

<h2>运行时常量池</h2>

<p>运行时常量池创建在方法区，当一个类或者一个接口被创建的时候，JVM会创建一个运行时常量池。一个运行时常量池实际上是一个类或者接口的class文件中常量池表（constant_pool table）的运行时展示形式。一个运行时常量池包含了多种类型的常量，从诸如运行时可以确定的数值型字面量到运行时才能决定的方法和属性引用。当运行时常量池无法满足于内存分配需求时，JVM会抛出OutOfMemoryError错误。</p>

<h2>本地方法栈</h2>

<p>一个支持native方法调用的JVM实现，需要有这样一个数据区，就是本地方法栈，Java官方对于本地方法的定义为<code>methods written in a language other than the Java programming language</code>，就是使用非Java语言实现的方法，但是通常我们指的一般为C或者C++，因此这个栈也有着<strong>C栈</strong>这一称号。一个不支持本地方法执行的JVM没有必要实现这个数据区域。本地方法栈基本和JVM栈一样，其大小也是可以设置为固定值或者动态增加，因此也会对应抛出StackOverflowError和OutOfMemoryError错误。</p>

<h2>译文信息</h2>

<ul>
<li>原文出处<a href="http://javapapers.com/core-java/java-jvm-run-time-data-areas/">Java JVM Run-time Data Areas</a> 原文有些东西偏于隐晦，译文有这方面的修改。</li>
<li>翻译文章参考<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html">Chapter 2. The Structure of the Java Virtual Machine</a></li>
</ul>


<p>注：本文介绍JVM运行时数据相对比较概括，以后会有更加详细的针对单个数据区的介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用认领那些事]]></title>
    <link href="http://droidyue.com/blog/2014/12/14/android-yingyong-renling/"/>
    <updated>2014-12-14T19:35:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/12/14/android-yingyong-renling</id>
    <content type="html"><![CDATA[<p>最近公司的一款产品提交国内市场，发现有些国内市场提示需要进行应用认领。原因就是别人（或者市场抓取）已经在我们之前将这个应用提交到了该市场。认领成功后，这个应用就重回你的怀抱了，其实认领很简单，这里讲到的自然是对未签名的包进行签名。由于这样的操作细小琐屑，这样更需要记录一下，免得以后麻烦。</p>

<!--more-->


<h2>如何认领</h2>

<ul>
<li>一般的就是市场提供一个未签名的apk包，认领方进行签名后，上传即可认领成功。</li>
<li>另一种就是提供公司证明，这个我们不讲，也没什么可以讲。</li>
</ul>


<p>通常情况下认领都会有对一个未签名的apk包签名认证这种方式，因为签名是软件发布商所独有的，通过对比测试需认领的包的签名和刚签过名的apk包是否一致，如果一致就认领成功，否则失败。</p>

<h2>对未签名包签名</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore your_keystore  -storepass your_storepass -keypass your_keypass -signedjar path_of_signed_apk  path_of_unsigned_apk your_alias
</span></code></pre></td></tr></table></div></figure>


<h3>需要替换的值</h3>

<ul>
<li>your_key_store keystore文件路径</li>
<li>your_storepass   store密码</li>
<li>your_keypass    key密码</li>
<li>path_of_signed_apk 签名后apk保存的目录</li>
<li>path_of_unsigned_apk 待签名的apk包</li>
<li>your_alias keystore中的别名</li>
</ul>


<p>注意上面的签名算法sigalg 使用SHA1withRSA或者MD5withRSA都可以。</p>

<h2>验证签名</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jarsigner -verify -certs -verbose your_app.apk
</span></code></pre></td></tr></table></div></figure>


<p>比如我们验证百度金融的apk，会得到类似这样的结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>19:23 <span class="nv">$ </span>jarsigner -verify -certs -verbose BaiduFinance.apk | more
</span><span class='line'>
</span><span class='line'>s      61679 Fri Nov 14 19:50:16 CST 2014 META-INF/MANIFEST.MF
</span><span class='line'>
</span><span class='line'>      X.509, <span class="nv">CN</span><span class="o">=</span>Baidu, <span class="nv">OU</span><span class="o">=</span>Baidu Inc., <span class="nv">O</span><span class="o">=</span>Baidu Inc., <span class="nv">L</span><span class="o">=</span>Beijing, <span class="nv">ST</span><span class="o">=</span>Beijing, <span class="nv">C</span><span class="o">=</span>CN
</span><span class='line'>      <span class="o">[</span>certificate is valid from 12/6/13 10:19 AM to 11/24/63 10:19 AM<span class="o">]</span>
</span><span class='line'>      <span class="o">[</span>CertPath not validated: Path does not chain with any of the trust anchors<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>       61800 Fri Nov 14 19:50:16 CST 2014 META-INF/MCO_BAID.SF
</span><span class='line'>         936 Fri Nov 14 19:50:16 CST 2014 META-INF/MCO_BAID.RSA
</span><span class='line'>sm      2304 Fri Nov 14 19:49:32 CST 2014 assets/mean/data_mean_24_bank_card
</span></code></pre></td></tr></table></div></figure>


<h2>疑难问题</h2>

<h3>No -tsa or -tsacert is provided and this jar is not timestamped</h3>

<p>在签名时加入下面的选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jarsigner -tsa http://timestamp.digicert.com
</span></code></pre></td></tr></table></div></figure>


<h3>Windows无法打开文件</h3>

<p>有些Windows工具无法打开签名后的apk，如果你的签名没有错误，并且验证过，这种情况请忽略。</p>

<h3>签名认领失败</h3>

<p>如果签名认领失败的话，请检查目前线上的包是否进行了二次打包被别人篡改了签名，如果是的话，需要进行商务上的沟通来解决了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的substring真的会引起内存泄露么？]]></title>
    <link href="http://droidyue.com/blog/2014/12/14/substring-memory-issue-in-java/"/>
    <updated>2014-12-14T12:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2014/12/14/substring-memory-issue-in-java</id>
    <content type="html"><![CDATA[<p>在Java中开发，String是我们开发程序可以说必须要使用的类型，String有一个substring方法用来截取字符串，我们想必也常常使用。但是你知道么，关于Java 6中的substring是否会引起内存泄露，在国外的论坛和社区有着一些讨论，以至于Java官方已经将其标记成bug，并且为此Java 7 还重新进行了实现。读到这里可能你的问题就来了，substring怎么会引起内存泄露呢？那么我们就带着问题，走进小黑屋，看看substring有没有内存泄露，又是怎么导致所谓的内存泄露。</p>

<!--more-->


<h2>基本介绍</h2>

<p>substring方法提供两种重载，第一种为只接受开始截取位置一个参数的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如我们使用上面的方法，<code>"unhappy".substring(2)</code> 返回结果 <code>"happy"</code></p>

<p>另一种重载就是接受一个开始截取位置和一个结束截取位置的参数的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endIndex</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用这个方法，<code>"smiles".substring(1, 5)</code> 返回结果 <code>"mile"</code></p>

<p>通过这个介绍我们基本了解了substring的作用，这样便于我们理解下面的内容。</p>

<h2>准备工作</h2>

<p>因为这个问题出现的情况在Java 6，如果你的Java版本号不是Java 6 需要调整一下。</p>

<h3>终端调整（适用于Mac系统）</h3>

<p>查看java版本号</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>13:03 <span class="nv">$ </span>java -version
</span><span class='line'>java version <span class="s2">&quot;1.8.0_25&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.8.0_25-b17<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 25.25-b02, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>切换到1.6</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">export</span> <span class="n">JAVA_HOME</span><span class="o">=</span><span class="n">$</span><span class="o">(/</span><span class="n">usr</span><span class="o">/</span><span class="n">libexec</span><span class="o">/</span><span class="n">java_home</span> <span class="o">-</span><span class="n">v</span> <span class="mf">1.6</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ubuntu使用<code>alternatives --config java</code>，Fedora上面使用<code>alternatives --config java</code>。</p>

<p>如果你使用Eclipse，可以选择工程，右击，选择Properties（属性）&mdash; Java Compiler（Java编译器）进行特殊指定。</p>

<h2>问题重现</h2>

<p>这里贴一下java官方bug里用到的重现问题的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGC</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">largeString</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">100000</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">largeString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TestGC</span> <span class="n">gc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestGC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">gc</span><span class="o">.</span><span class="na">getString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而上面的代码，只要使用Java 6 （Java 7和8 都不会抛出异常）运行一下就会报java.lang.OutOfMemoryError: Java heap space的异常，这说明没有足够的堆内存供我们创建对象，JVM选择了抛出异常操作。</p>

<p>于是有人会说，是因为你每个循环中创建了一个TestGC对象，虽然我们加入ArrayList只是两个字符的字符串，但是这个对象中又存储largeString这么大的对象，这样必然会造成OOM的。</p>

<p>然而，其实你说的不对。比如我们看一下这样的代码,我们只修改getString方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGC</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">largeString</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">100000</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//return this.largeString.substring(0,2);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TestGC</span> <span class="n">gc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestGC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">gc</span><span class="o">.</span><span class="na">getString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行上面的方法，<strong>并不会导致OOM异常</strong>，因为我们持有的时1000000个ab字符串对象，而TestGC对象（包括其中的largeString）会在java的垃圾回收中释放掉。所以这里不会存在内存溢出。</p>

<p>那么究竟是什么导致的内存泄露呢？要研究这个问题，我们需要看一下方法的实现，即可。</p>

<h2>深入Java 6实现</h2>

<p>在String类中存在这样三个属性</p>

<ul>
<li>value 字符数组，存储字符串实际的内容</li>
<li>offset 该字符串在字符数组value中的起始位置</li>
<li>count 字符串包含的字符的长度</li>
</ul>


<p>Java 6中substring的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">beginIndex</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">beginIndex</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">endIndex</span> <span class="o">&gt;</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">endIndex</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">beginIndex</span> <span class="o">&gt;</span> <span class="n">endIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">endIndex</span> <span class="o">-</span> <span class="n">beginIndex</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">((</span><span class="n">beginIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">endIndex</span> <span class="o">==</span> <span class="n">count</span><span class="o">))</span> <span class="o">?</span> <span class="k">this</span> <span class="o">:</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">endIndex</span> <span class="o">-</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述方法调用的构造方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Package private constructor which shares value array for speed.</span>
</span><span class='line'><span class="n">String</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">,</span> <span class="kt">char</span> <span class="n">value</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">offset</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们读完上述的代码，我们应该会豁然开朗，原来是这个样子啊！</p>

<p>当我们调用字符串a的substring得到字符串b，其实这个操作，无非就是调整了一下b的offset和count，用到的内容还是a之前的value字符数组，并没有重新创建新的专属于b的内容字符数组。</p>

<p>举个和上面重现代码相关的例子，比如我们有一个1G的字符串a，我们使用substring(0,2)得到了一个只有两个字符的字符串b，如果b的生命周期要长于a或者手动设置a为null，当垃圾回收进行后，a被回收掉，b没有回收掉，那么这1G的内存占用依旧存在，因为b持有这1G大小的字符数组的引用。</p>

<p>看到这里，大家应该可以明白上面的代码为什么出现内存溢出了。</p>

<h3>共享内容字符数组</h3>

<p>其实substring中生成的字符串与原字符串共享内容数组是一个很棒的设计，这样避免了每次进行substring重新进行字符数组复制。正如其文档说明的,共享内容字符数组为了就是速度。但是对于本例中的问题，共享内容字符数组显得有点蹩脚。</p>

<h3>如何解决</h3>

<p>对于之前比较不常见的1G字符串只截取2个字符的情况可以使用下面的代码，这样的话，就不会持有1G字符串的内容数组引用了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">littleString</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">largeString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的这个构造方法，在源字符串内容数组长度大于字符串长度时，进行数组复制，新的字符串会创建一个只包含源字符串内容的字符数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">String</span><span class="o">(</span><span class="n">String</span> <span class="n">original</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">original</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">[]</span> <span class="n">originalValue</span> <span class="o">=</span> <span class="n">original</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">[]</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">originalValue</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// The array representing the String is bigger than the new</span>
</span><span class='line'>      <span class="c1">// String itself.  Perhaps this constructor is being called</span>
</span><span class='line'>      <span class="c1">// in order to trim the baggage, so make a copy of the array.</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">off</span> <span class="o">=</span> <span class="n">original</span><span class="o">.</span><span class="na">offset</span><span class="o">;</span>
</span><span class='line'>      <span class="n">v</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">originalValue</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">off</span><span class="o">+</span><span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// The array representing the String is the same</span>
</span><span class='line'>      <span class="c1">// size as the String, so no point in making a copy.</span>
</span><span class='line'>      <span class="n">v</span> <span class="o">=</span> <span class="n">originalValue</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java 7 实现</h2>

<p>在Java 7 中substring的实现抛弃了之前的内容字符数组共享的机制，对于子字符串（自身除外）采用了数组复制实现单个字符串持有自己的应该拥有的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">beginIndex</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">beginIndex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">endIndex</span> <span class="o">&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">endIndex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">subLen</span> <span class="o">=</span> <span class="n">endIndex</span> <span class="o">-</span> <span class="n">beginIndex</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">subLen</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">subLen</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">((</span><span class="n">beginIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">endIndex</span> <span class="o">==</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">))</span> <span class="o">?</span> <span class="k">this</span>
</span><span class='line'>                <span class="o">:</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">subLen</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>substring方法中调用的构造方法，进行内容字符数组复制。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">String</span><span class="o">(</span><span class="kt">char</span> <span class="n">value</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">offset</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">StringIndexOutOfBoundsException</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">offset</span><span class="o">+</span><span class="n">count</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>真的是内存泄露么</h2>

<p>我们知道了substring某些情况下可能引起内存问题，但是这个叫做内存泄露么？</p>

<p>其实个人认为这个不应该算为内存泄露，使用substring生成的字符串b固然会持有原有字符串a的内容数组引用，但是当a和b都被回收之后，该字符数组的内容也是可以被垃圾回收掉的。</p>

<h2>哪个版本实现的好</h2>

<p>关于Java 7 对substring做的修改，收到了褒贬不一的反馈。</p>

<p>个人更加倾向于Java 6的实现，当进行substring时，使用共享内容字符数组，速度会更快，不用重新申请内存。虽然有可能出现本文中的内存性能问题，但也是有方法可以解决的。</p>

<p>Java 7的实现不需要程序员特殊操作避免了本文中问题，但是进行每次substring的操作性能总会比java 6 的实现要差一些。这种实现显得有点“糟糕”。</p>

<h2>问题的价值</h2>

<p>虽然这个问题出现在Java 6并且Java 7中已经修复，但并不代表我们就不需要了解，况且Java 7的重新实现被喷的很厉害。</p>

<p>其实这个问题的价值，还是比较宝贵的，尤其是内容字符数组共享这个优化的实现。希望可以为大家以后的设计实现提供帮助和一些想法。</p>

<h2>受影响的方法</h2>

<p>trim和subSequence都存在调用substring的操作。Java 6和Java 7 substring实现的更改也间接影响到了这些方法。</p>

<h2>参考资源</h2>

<p>以下三篇文章写得都比较不错，但是都稍微有一些问题，我都已经标明出来，大家阅读时，需要注意。</p>

<ul>
<li><a href="http://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/">The substring() Method in JDK 6 and JDK 7</a> 本文中解决java6中问题提到的字符串拼接<strong>不推荐</strong>，具体原因可以参考<a href="http://droidyue.com/blog/2014/08/30/java-details-string-concatenation/">Java细节：字符串的拼接</a></li>
<li><a href="http://javarevisited.blogspot.com/2011/10/how-substring-in-java-works.html">How SubString method works in Java &ndash; Memory Leak Fixed in JDK 1.7</a> 本文中提到的有一个概念错误，新的字符串不会阻止旧的字符串被回收，而是阻止旧字符串中的内容字符数组。阅读时需要注意。</li>
<li><a href="http://bugs.java.com/view_bug.do?bug_id=4513622">JDK-4513622 : (str) keeping a substring of a field prevents GC for object</a> 本文中提到的有一个测试，使用非new的形式有一点问题，其忽视了字符串常量池的存在，具体查看下面的注意。</li>
</ul>


<h2>注意</h2>

<p>上面的重现问题的代码中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="nf">getString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//return this.largeString.substring(0,2);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里最好不要写成下面这样，因为在JVM中存在字符串常量池，&#8221;ab&#8221;不会重新创建新字符串，所有的变量都会引用一个对象，而使用new String()则每次重新创建对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="nf">getString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;ab&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于字符串常量池，以后的文章会有介绍。</p>

<h3>吐血推荐</h3>

<p>如果你对本文这样的内容感兴趣，可以阅读以下Joshua Bloch大神写得书，虽然有点贵，还是英文的。
<a href="http://www.amazon.cn/gp/product/032133678X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=032133678X&amp;linkCode=as2&amp;tag=droidyue-23">Java Puzzlers</a></p>
]]></content>
  </entry>
  
</feed>
