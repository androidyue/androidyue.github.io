<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2019-12-22T20:50:41+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin 注解 第三篇 @JvmField 与 @JvmStatic]]></title>
    <link href="https://droidyue.com/blog/2019/12/22/kotlin-annotation-jvmfiled-and-jvmstatic-and-object/"/>
    <updated>2019-12-22T20:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/22/kotlin-annotation-jvmfiled-and-jvmstatic-and-object</id>
    <content type="html"><![CDATA[<p>本文是既 <a href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/">JvmName 注解在 Kotlin 中的应用</a>和<a href="https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin/">JvmMultifile 注解在 Kotlin 中的应用</a>的第三篇关于 Kotlin的注解文章。</p>

<p>介绍的内容比较简单，主要是包含了JvmField和JvmStatic两个。</p>

<!--more-->


<h3>@JvmField</h3>

<p>示例代码声明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nf">Developer</span> <span class="p">(</span><span class="n">@JvmField</span> <span class="k">val</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="n">ide</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用@JvmField，我们在Java中调用的时候，可以直接使用属性名，而不是对应的getter方法。</p>

<p>调用代码对比</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//test jvmField</span>
</span><span class='line'><span class="n">Developer</span> <span class="n">developer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Developer</span><span class="o">(</span><span class="s">&quot;Andy&quot;</span><span class="o">,</span> <span class="s">&quot;Android Studio&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">developer</span><span class="o">.</span><span class="na">getIde</span><span class="o">());</span><span class="c1">// not using JvmField</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">developer</span><span class="o">.</span><span class="na">name</span><span class="o">);</span><span class="c1">// using JvmField</span>
</span></code></pre></td></tr></table></div></figure>


<h3>@JvmStatic</h3>

<p>除此之外，对于静态属性和静态方法的实现，我们也可以使用@JvmStatic实现，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sample</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">@JvmStatic</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">TAG_NAME</span> <span class="p">=</span> <span class="s">&quot;Sample&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">NON_STATIC_VALUE</span> <span class="p">=</span> <span class="s">&quot;non_static_value&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">@JvmStatic</span> <span class="k">fun</span> <span class="nf">callStatic</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">callNonStatic</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//JVM static method</span>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">callStatic</span><span class="o">();</span>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">Companion</span><span class="o">.</span><span class="na">callNonStatic</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">getTAG_NAME</span><span class="o">();</span>
</span><span class='line'><span class="n">Sample</span><span class="o">.</span><span class="na">Companion</span><span class="o">.</span><span class="na">getNON_STATIC_VALUE</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Companion</h3>

<p>Kotlin中我们可以借助<code>object</code>实现静态的形式，比如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">getCommonProperties</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">emptyList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实除此之外，我们还能命名companion的名称,如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AnotherClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="n">Assistant</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">scheduleSomething</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//test companion</span>
</span><span class='line'><span class="n">SomeClass</span><span class="o">.</span><span class="na">Companion</span><span class="o">.</span><span class="na">getCommonProperties</span><span class="o">();</span>
</span><span class='line'><span class="n">AnotherClass</span><span class="o">.</span><span class="na">Assistant</span><span class="o">.</span><span class="na">scheduleSomething</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>相关文章推荐</h3>

<ul>
<li><a href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/">JvmName注解</a></li>
<li><a href="https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin/">JvmMultifile注解</a></li>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">Kotlin编译调校</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多Kotlin文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端依赖者福利：终端也能实现翻译功能了]]></title>
    <link href="https://droidyue.com/blog/2019/12/15/translate-words-in-terminal/"/>
    <updated>2019-12-15T19:41:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/15/translate-words-in-terminal</id>
    <content type="html"><![CDATA[<p>一直是终端重度依赖，现在发现了一个终端翻译的工具，更加爱不释手。本文介绍一下一个终端可以实现的工具，trans。</p>

<h2>是什么</h2>

<blockquote><p>Command-line translator using Google Translate, Bing Translator, Yandex.Translate, etc</p>

<p>一个终端翻译工具，利用Google翻译，Bing翻译，Yandex翻译等。</p></blockquote>

<!--more-->


<h2>效果</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>trans Android
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'>noun
</span><span class='line'>    <span class="o">(</span>in science fiction<span class="o">)</span> a robot with a human appearance.
</span><span class='line'>        - <span class="s2">&quot;The science fiction fascination with robots and androids is the culmination of this perception of machines as being almost like one of us.&quot;</span>
</span><span class='line'>    Synonyms: robot, automaton, cyborg, droid, bot
</span><span class='line'>
</span><span class='line'>    an open-source operating system used <span class="k">for </span>smartphones and tablet computers.
</span><span class='line'>        - <span class="s2">&quot;I have an Android phone and I like it a lot&quot;</span>
</span><span class='line'>
</span><span class='line'>Synonyms
</span><span class='line'>    noun
</span><span class='line'>        - robot, automaton, cyborg, droid, bot
</span><span class='line'>        - humanoid
</span></code></pre></td></tr></table></div></figure>


<h2>安装</h2>

<h3>Debian/Ubuntu</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> sudo apt-get install translate-shell
</span></code></pre></td></tr></table></div></figure>


<h3>Homebrew Mac</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install translate-shell
</span></code></pre></td></tr></table></div></figure>


<p>更多安装方式，请查看<a href="https://github.com/soimort/translate-shell/wiki/Distros">https://github.com/soimort/translate-shell/wiki/Distros</a></p>

<h2>查看支持的搜索引擎</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> trans -list-engines
</span><span class='line'>  aspell
</span><span class='line'>* google
</span><span class='line'>  bing
</span><span class='line'>  spell
</span><span class='line'>  hunspell
</span><span class='line'>  apertium
</span><span class='line'>  yandex
</span></code></pre></td></tr></table></div></figure>


<h2>设置搜索引擎</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>trans -engine yandex  Android
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'><span class="o">[</span> English -&gt; English <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置源语言和目标语言</h2>

<p>前面的是源语言，后面的是目标语言，比如下面的<code>en:zh</code>就是将英文翻译成中文</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> trans   en:zh Android
</span><span class='line'>Android
</span><span class='line'>
</span><span class='line'>Android的
</span><span class='line'><span class="o">(</span>Android de<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Translations of Android
</span><span class='line'><span class="o">[</span> English -&gt; 简体中文 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Android
</span><span class='line'>    Android的, 安卓, 的Android, Android版, Android电子
</span></code></pre></td></tr></table></div></figure>


<h2>查看语言代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>trans -R
</span><span class='line'>┌───────────────────────┬───────────────────────┬───────────────────────┐
</span><span class='line'>│ Afrikaans      -   af │ Hebrew         -   he │ Portuguese     -   pt │
</span><span class='line'>│ Albanian       -   sq │ Hill Mari      -  mrj │ Punjabi        -   pa │
</span><span class='line'>│ Amharic        -   am │ Hindi          -   hi │ Querétaro Otomi-  otq │
</span><span class='line'>│ Arabic         -   ar │ Hmong          -  hmn │ Romanian       -   ro │
</span><span class='line'>│ Armenian       -   hy │ Hmong Daw      -  mww │ Russian        -   ru │
</span><span class='line'>│ Azerbaijani    -   az │ Hungarian      -   hu │ Samoan         -   sm │
</span><span class='line'>│ Bashkir        -   ba │ Icelandic      -   is │ Scots Gaelic   -   gd │
</span><span class='line'>│ Basque         -   eu │ Igbo           -   ig │ Serbian <span class="o">(</span>Cyr...-sr-Cyrl
</span><span class='line'>│ Belarusian     -   be │ Indonesian     -   id │ Serbian <span class="o">(</span>Latin<span class="o">)</span>-sr-Latn
</span><span class='line'>│ Bengali        -   bn │ Irish          -   ga │ Sesotho        -   st │
</span><span class='line'>│ Bosnian        -   bs │ Italian        -   it │ Shona          -   sn │
</span><span class='line'>│ Bulgarian      -   <span class="nb">bg</span> │ Japanese       -   ja │ Sindhi         -   sd │
</span><span class='line'>│ Cantonese      -  yue │ Javanese       -   jv │ Sinhala        -   si │
</span><span class='line'>│ Catalan        -   ca │ Kannada        -   kn │ Slovak         -   sk │
</span><span class='line'>│ Cebuano        -  ceb │ Kazakh         -   kk │ Slovenian      -   sl │
</span><span class='line'>│ Chichewa       -   ny │ Khmer          -   km │ Somali         -   so │
</span><span class='line'>│ Chinese Simp...- zh-CN│ Klingon        -  tlh │ Spanish        -   es │
</span><span class='line'>│ Chinese Trad...- zh-TW│ Klingon <span class="o">(</span>pIqaD<span class="o">)</span>tlh-Qaak Sundanese      -   su │
</span><span class='line'>│ Corsican       -   co │ Korean         -   ko │ Swahili        -   sw │
</span><span class='line'>│ Croatian       -   hr │ Kurdish        -   ku │ Swedish        -   sv │
</span><span class='line'>│ Czech          -   cs │ Kyrgyz         -   ky │ Tahitian       -   ty │
</span><span class='line'>│ Danish         -   da │ Lao            -   lo │ Tajik          -   tg │
</span><span class='line'>│ Dutch          -   nl │ Latin          -   la │ Tamil          -   ta │
</span><span class='line'>│ Eastern Mari   -  mhr │ Latvian        -   lv │ Tatar          -   tt │
</span><span class='line'>│ Emoji          -  emj │ Lithuanian     -   lt │ Telugu         -   te │
</span><span class='line'>│ English        -   en │ Luxembourgish  -   lb │ Thai           -   th │
</span><span class='line'>│ Esperanto      -   eo │ Macedonian     -   mk │ Tongan         -   to │
</span><span class='line'>│ Estonian       -   et │ Malagasy       -   mg │ Turkish        -   tr │
</span><span class='line'>│ Fijian         -   fj │ Malay          -   ms │ Udmurt         -  udm │
</span><span class='line'>│ Filipino       -   tl │ Malayalam      -   ml │ Ukrainian      -   uk │
</span><span class='line'>│ Finnish        -   <span class="k">fi</span> │ Maltese        -   mt │ Urdu           -   ur │
</span><span class='line'>│ French         -   fr │ Maori          -   mi │ Uzbek          -   uz │
</span><span class='line'>│ Frisian        -   fy │ Marathi        -   mr │ Vietnamese     -   vi │
</span><span class='line'>│ Galician       -   gl │ Mongolian      -   mn │ Welsh          -   cy │
</span><span class='line'>│ Georgian       -   ka │ Myanmar        -   my │ Xhosa          -   xh │
</span><span class='line'>│ German         -   de │ Nepali         -   ne │ Yiddish        -   yi │
</span><span class='line'>│ Greek          -   el │ Norwegian      -   no │ Yoruba         -   yo │
</span><span class='line'>│ Gujarati       -   gu │ Papiamento     -  pap │ Yucatec Maya   -  yua │
</span><span class='line'>│ Haitian Creole -   ht │ Pashto         -   ps │ Zulu           -   zu │
</span><span class='line'>│ Hausa          -   ha │ Persian        -   fa │                       │
</span><span class='line'>│ Hawaiian       -  haw │ Polish         -   pl │                       │
</span><span class='line'>└───────────────────────┴───────────────────────┴───────────────────────┘
</span></code></pre></td></tr></table></div></figure>


<h2>翻译句子</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>trans :zh <span class="s2">&quot;What is your name?&quot;</span>
</span><span class='line'>What is your name?
</span><span class='line'>
</span><span class='line'>你叫什么名字？
</span><span class='line'><span class="o">(</span>Nǐ jiào shénme míngzì?<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Definitions of What is your name?
</span><span class='line'><span class="o">[</span> English -&gt; 简体中文 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>interjection
</span><span class='line'>    贵姓?
</span><span class='line'>        What is your name?
</span><span class='line'>
</span><span class='line'>What is your name?
</span><span class='line'>    你叫什么名字？, 请问你贵姓大名？
</span></code></pre></td></tr></table></div></figure>


<h2>翻译文件内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/tmp<span class="o">(</span>:|✔<span class="o">)</span> % cat /tmp/greetings.txt
</span><span class='line'>Hello, World
</span><span class='line'>/tmp<span class="o">(</span>:|✔<span class="o">)</span> % trans en:zh file:///tmp/greetings.txt
</span><span class='line'>你好，世界
</span></code></pre></td></tr></table></div></figure>


<h2>查看更多详细</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>man trans
</span></code></pre></td></tr></table></div></figure>


<h2>自己简单包裹一下</h2>

<p>将下面的内容，保存成<code>fanyi.sh</code>并设置可执行，同时加入环境变量PATH.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>trans   :zh <span class="err">&quot;</span><span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时就更加简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fanyi.sh Google
</span><span class='line'>Google
</span><span class='line'>
</span><span class='line'>谷歌
</span><span class='line'><span class="o">(</span>Gǔgē<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Translations of Google
</span><span class='line'><span class="o">[</span> English -&gt; 简体中文 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Google
</span><span class='line'>    谷歌
</span></code></pre></td></tr></table></div></figure>


<h2>其他</h2>

<ul>
<li>github地址:<a href="https://github.com/soimort/translate-shell">https://github.com/soimort/translate-shell</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下在终端直接查看图片]]></title>
    <link href="https://droidyue.com/blog/2019/12/08/display-img-in-ternimal/"/>
    <updated>2019-12-08T20:02:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/08/display-img-in-ternimal</id>
    <content type="html"><![CDATA[<p>在开发的过程中，我们通常会遇到这样的情况，就是我们需要根据图片的url地址查看其对应的内容，通常的做法就是把这个图片链接贴到浏览器。不过一直好奇，能不能再终端中直接展示，于是做了一些搜索，发现了对应的实现方式。</p>

<p>注意：此方式只适用于Mac，其他的Linux 发行版 需要自行按照如下的思路查找对应的工具。</p>

<!--more-->


<h2>安装imgcat</h2>

<p>使用iTerm 2 执行如下的语句(或者是选择 iTerm2菜单 &ndash;> Install Shell Integration安装)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash</span></code></pre></td></tr></table></div></figure>


<p>安装完成之后，建议重新启动iTerm 2</p>

<h2>使用imgcat 展示本地图片</h2>

<p>用法很简单，<code>imgcat localfile</code>,操作示例</p>

<p><img src="https://asset.droidyue.com/image/2019_11/imgcat_local_file_2.png" alt="https://asset.droidyue.com/image/2019_11/imgcat_local_file_2.png" /></p>

<h2>使用imgcat 展示网络上的图片</h2>

<p>由于imgcat的参数只支持本地的文件，如果想要展示网络的文件，我们需要写一个简单的脚本实现。</p>

<p>脚本内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>rm -rf <span class="s2">&quot;/tmp/1.png&quot;</span>
</span><span class='line'>curl -o <span class="s2">&quot;/tmp/1.png&quot;</span> <span class="s2">&quot;$1&quot;</span>
</span><span class='line'>~/.iterm2/imgcat <span class="s2">&quot;/tmp/1.png&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行效果如下</p>

<p><img src="https://asset.droidyue.com/image/2019_11/catimg_result.png" alt="https://asset.droidyue.com/image/2019_11/catimg_result.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Android 中如何确定 App(Activity) 的启动者]]></title>
    <link href="https://droidyue.com/blog/2019/12/01/android-uid-process-name/"/>
    <updated>2019-12-01T21:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/01/android-uid-process-name</id>
    <content type="html"><![CDATA[<p>最近在帮忙定位一个问题，涉及到某个应用自动启动了，为了确定是谁调用的，使用如下的日志进行查看（注：为了简单考虑，下面的启动者为launcher）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>pre_release|✔<span class="o">)</span> % adb logcat | grep -E <span class="s2">&quot;ActivityManager: START&quot;</span> --color<span class="o">=</span>always
</span><span class='line'>I ActivityManager: START u0 <span class="o">{</span><span class="nv">act</span><span class="o">=</span>android.intent.action.MAIN
</span><span class='line'><span class="nv">cat</span><span class="o">=[</span>android.intent.category.HOME<span class="o">]</span> <span class="nv">flg</span><span class="o">=</span>0x10000000 <span class="nv">hwFlg</span><span class="o">=</span>0x10
</span><span class='line'><span class="nv">cmp</span><span class="o">=</span>com.huawei.android.launcher/.unihome.UniHomeLauncher <span class="o">(</span>has extras<span class="o">)}</span> from uid 10070
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>我们看最后看到这个<code>from uid 10070</code>，嗯，基本定位到了是这个uid的应用启动了。</p>

<h2>确定 uid 10070 是哪个 App</h2>

<p>确定uid不能说明问题，我们至少需要确定是哪个应用，我们尝试使用下面的命令过滤进程有关数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell ps | grep 10070
</span><span class='line'>没有任何数据输出
</span></code></pre></td></tr></table></div></figure>


<p>然而一无所获。</p>

<p>当然前面说了，示例的启动者是launcher，那我们过滤一下launcher</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell ps | grep launcher
</span><span class='line'>u0_a70        2207   620 4979992 156312 0                   0 S com.huawei.android.launcher
</span></code></pre></td></tr></table></div></figure>


<p>我们发现了<code>u0_a70</code>和<code>10070</code>貌似有一些关联（至少都含有70）</p>

<p>于是我们使用下面的命令确定id</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell id u0_a70
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>10070<span class="o">(</span>u0_a70<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>10070<span class="o">(</span>u0_a70<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>10070<span class="o">(</span>u0_a70<span class="o">)</span>, <span class="nv">context</span><span class="o">=</span>u:r:shell:s0
</span></code></pre></td></tr></table></div></figure>


<p>果然，<code>u0_a70</code>和<code>10070</code> 是有关联的</p>

<h2>u0_a70 的含义</h2>

<ul>
<li>u0  默认的手机第一个用户（可以通过设置里面的多用户新增和切换）</li>
<li>a 代表app</li>
<li>70 代表着第70个应用</li>
</ul>


<h2>转换公式</h2>

<p>简单而言，对应的公式是这样</p>

<blockquote><p>u0_a70 = &ldquo;u0_&rdquo; + &ldquo;a&rdquo; + (uid(这里是10070) &ndash; FIRST_APPLICATION_UID(固定值10000))</p></blockquote>

<p>具体复杂的转换，请参考这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Generate a text representation of the uid, breaking out its individual</span>
</span><span class='line'><span class="cm">     * components -- user, app, isolated, etc.</span>
</span><span class='line'><span class="cm">     * @hide</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">formatUid</span><span class="o">(</span><span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">uid</span> <span class="o">&lt;</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APPLICATION_UID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">uid</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;u&#39;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">getUserId</span><span class="o">(</span><span class="n">uid</span><span class="o">));</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">appId</span> <span class="o">=</span> <span class="n">getAppId</span><span class="o">(</span><span class="n">uid</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isIsolated</span><span class="o">(</span><span class="n">appId</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">appId</span> <span class="o">&gt;</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_ISOLATED_UID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;i&#39;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span> <span class="o">-</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_ISOLATED_UID</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;ai&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span> <span class="o">-</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APP_ZYGOTE_ISOLATED_UID</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">appId</span> <span class="o">&gt;=</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APPLICATION_UID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;a&#39;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span> <span class="o">-</span> <span class="n">Process</span><span class="o">.</span><span class="na">FIRST_APPLICATION_UID</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;s&#39;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">appId</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>部分常量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Defines the start of a range of UIDs (and GIDs), going from this</span>
</span><span class='line'><span class="cm">     * number to {@link #LAST_APPLICATION_UID} that are reserved for assigning</span>
</span><span class='line'><span class="cm">     * to applications.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FIRST_APPLICATION_UID</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Last of application-specific UIDs starting at</span>
</span><span class='line'><span class="cm">     * {@link #FIRST_APPLICATION_UID}.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">LAST_APPLICATION_UID</span> <span class="o">=</span> <span class="mi">19999</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * First uid used for fully isolated sandboxed processes (with no permissions of their own)</span>
</span><span class='line'><span class="cm">     * @hide</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@UnsupportedAppUsage</span>
</span><span class='line'>    <span class="nd">@TestApi</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FIRST_ISOLATED_UID</span> <span class="o">=</span> <span class="mi">99000</span><span class="o">;</span>
</span><span class='line'>     <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * First uid used for fully isolated sandboxed processes spawned from an app zygote</span>
</span><span class='line'><span class="cm">     * @hide</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@TestApi</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FIRST_APP_ZYGOTE_ISOLATED_UID</span> <span class="o">=</span> <span class="mi">90000</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上。</p>

<h2>References</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Process.java">https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Process.java</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/UserHandle.java">https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/UserHandle.java</a></li>
<li><a href="https://stackoverflow.com/questions/17054996/compare-uid-from-android-packagemanager-to-uid-from-ls-l">https://stackoverflow.com/questions/17054996/compare-uid-from-android-packagemanager-to-uid-from-ls-l</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这可能是最好的 Android/Kotlin日志输出方法]]></title>
    <link href="https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin/"/>
    <updated>2019-11-24T18:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin</id>
    <content type="html"><![CDATA[<p>在编程调试和定位问题的时候，日志是一个最常用的工具。比如输出一些信息，确定执行轨迹。今天我们这里简单聊一聊打印日志的一些分析。</p>

<p>通常，我们进行日志输出的时候都会限定在debug包下执行，对于非debug包，我们就不输出日志。那么如果是非debug，不同的日志输出方式可能存在一定的性能问题，本文将通过几个版本来对比着方面的差异。</p>

<!--more-->


<h2>原始版</h2>

<p>这可能是最原始的版本打印日志了，判断是否是debug，然后决定是否输出日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">debugLog</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s">&quot;debugLog&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testDebugLog</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugLog</span><span class="p">(</span><span class="s">&quot;getProperties &quot;</span> <span class="p">+</span> <span class="n">getProperties</span><span class="p">()?.</span><span class="n">joinToString</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的问题</p>

<ul>
<li><code>testDebugLog</code> 需要执行<code>getProperties()</code>，这一步的性能不可预知</li>
<li><code>testDebugLog</code> 内部存在字符串拼接</li>
<li>如果拼接内容复杂，比如一个庞大的Object，会造成一定的开销</li>
<li>综上所述，该实现如果在<code>非Debug条件下</code>存在一定的运行时开销</li>
</ul>


<h2>不拼接的版本</h2>

<p>既然拼接会导致一些问题，那么下面的版本采用(调用处)不拼接的形式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">debugMessage</span><span class="p">(</span><span class="n">vararg</span> <span class="n">args</span><span class="p">:</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s">&quot;debugMessage&quot;</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">joinToString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testDebugMessage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;getProperties&quot;</span><span class="p">,</span> <span class="n">getProperties</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>仍然需要执行 <code>getProperties()</code>，这一步的性能不可预知</strong></li>
<li>上面的代码使用了可变参数的形式处理message信息</li>
<li>而可变参数内部实际采用了数组的形式，也就是上面的代码会在运行时生成一个数组，一个元素是<code>getProperties</code>,另一个元素是<code>getProperties()</code>的内容</li>
<li>这个版本相对第一个版本要好一些（以极端情况看），但是<code>在非Debug条件下</code>仍然存在一定的运行时开销，不完美。</li>
</ul>


<h2>相对最完美的版本</h2>

<p>这个版本是相对最好的实现，规避了非Debug环境下的字符串拼接和具体求值的操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="nf">smartMessage</span><span class="p">(</span><span class="n">lazyMessage</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s">&quot;smartMessage&quot;</span><span class="p">,</span> <span class="n">lazyMessage</span><span class="p">().</span><span class="n">toString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testSmartMessage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">smartMessage</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;getProperties &quot;</span> <span class="p">+</span> <span class="n">getProperties</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面使用了Lambda表达式来生成message信息</li>
</ul>


<h3>如何巧妙地规避不必要的开销</h3>

<p>当我们反编译Kotlin 代码 到 Java代码时，一切就清晰了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testSmartMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$smartMessage</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">BuildConfig</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">String</span> <span class="n">var3</span> <span class="o">=</span> <span class="s">&quot;smartMessage&quot;</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="n">String</span> <span class="n">var4</span> <span class="o">=</span> <span class="s">&quot;getProperties &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
</span><span class='line'>         <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">var3</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">var4</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>之前的Lambda 由于采用了 inline 处理 会把<code>smartMessage</code> 提取到调用处<code>testSmartMessage</code></li>
<li>上面的信息，都是确保了在<code>BuildConfig.DEBUG</code>成立时才执行，否则不执行</li>
<li>上面的做法，利用了Kotlin的特性，就运行时可能存在的开销一下就移除了。</li>
</ul>


<h2>注意</h2>

<ul>
<li>smartMessage 建议只在 Kotlin 中调用，否则会生成实例，因为无法inline处理</li>
</ul>


<h2>相关阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2014/08/30/java-details-string-concatenation/">字符串拼接</a></li>
<li><a href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/">Kotlin 中的 Lambda 与 Inline</a></li>
<li><a href="https://droidyue.com/blog/2015/11/01/thinking-about-android-log/">关于Android Log的一些思考</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">如何反编译 Kotlin 代码</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多Kotlin文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简简单单对比encodeURI与encodeURIComponent]]></title>
    <link href="https://droidyue.com/blog/2019/11/17/encodeuri-vs-encodeuricomponent/"/>
    <updated>2019-11-17T21:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/11/17/encodeuri-vs-encodeuricomponent</id>
    <content type="html"><![CDATA[<p>encodeURI和encodeURIComponent 是两个很相近的方法，用来encode URI。但是他们之间也存在着细微的差异，如果不能很好的理解这个差异，可能会导致一些不必要的麻烦。本文将尝试用最简单的形式展示这个差异。</p>

<!--more-->


<h2>encodeURI</h2>

<ul>
<li>encode所有的字符，除了下面的字符</li>
</ul>


<blockquote><p>Not Escaped:</p>

<p> A-Z a-z 0-9 ; , / ? : @ &amp; = + $ &ndash; _ . ! ~ * &lsquo; ( ) #</p></blockquote>

<h2>encodeURIComponent</h2>

<ul>
<li>encode所有的字符，除了下面的字符</li>
</ul>


<blockquote><p>Not Escaped:</p>

<p> A-Z a-z 0-9 &ndash; _ . ! ~ * &lsquo; ( )</p></blockquote>

<h2>表现差异</h2>

<p>encodeURIComponent encode的字符多于 encodeURI，即如下字符</p>

<blockquote><p>, / ? : @ &amp; = + $ #</p></blockquote>

<h2>使用场景差异</h2>

<h3>当encode内容作为 URI 的参数值时，使用encodeURIComponent</h3>

<p>比如下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">linkOne</span> <span class="o">=</span> <span class="s2">&quot;https://droidyue.com/q=&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;安卓&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容  https://droidyue.com/q=%E5%AE%89%E5%8D%93</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">deepLink</span> <span class="o">=</span> <span class="s2">&quot;droidyue://webview?url=&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=%E5%AE%89%E5%8D%93&amp;from=direct&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//encode后的内容  droidyue://webview?url=https%3A%2F%2Fdroidyue.com%2F%3Fq%3D%25E5%25AE%2589%25E5%258D%2593%26from%3Ddirect</span>
</span></code></pre></td></tr></table></div></figure>


<h3>当encode的内容是独立的URI，不作为其他URI附属时，使用encodeURI</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">linkTwo</span> <span class="o">=</span> <span class="nb">encodeURI</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=安卓&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容 https://droidyue.com/?q=%E5%AE%89%E5%8D%93</span>
</span></code></pre></td></tr></table></div></figure>


<h2>错用会怎样</h2>

<h3>该用encodeURI,却使用了 encodeURIComponent</h3>

<ul>
<li>导致连接无法被识别加载</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=安卓&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容 https%3A%2F%2Fdroidyue.com%2F%3Fq%3D%E5%AE%89%E5%8D%93</span>
</span></code></pre></td></tr></table></div></figure>


<h3>该用encodeURIComponent 却使用了 encodeURI</h3>

<ul>
<li>导致参数丢失</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;droidyue://webview?url=&quot;</span> <span class="o">+</span> <span class="nb">encodeURI</span><span class="p">(</span><span class="s2">&quot;https://droidyue.com/?q=%E5%AE%89%E5%8D%93&amp;from=direct&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//encode后的内容 droidyue://webview?url=https://droidyue.com/?q=%25E5%25AE%2589%25E5%258D%2593&amp;from=direct</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上<code>from=direct</code>本属于<code>https://droidyue.com/?q=%E5%AE%89%E5%8D%93&amp;from=direct</code>，但是错误的encode后，反而属于了<code>droidyue://webview?url=your_url&amp;from=direct</code>。</p>

<p>以上，希望有所帮助。</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent</a></li>
<li><a href="https://dev.to/wanoo21/difference-between-encodeuri-and-encodeuricomponent-j3j">https://dev.to/wanoo21/difference-between-encodeuri-and-encodeuricomponent-j3j</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GapWorker导致RecyclerView视频播放声音残留问题]]></title>
    <link href="https://droidyue.com/blog/2019/11/11/gap-worker-issue/"/>
    <updated>2019-11-11T20:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/11/11/gap-worker-issue</id>
    <content type="html"><![CDATA[<p>场景描述</p>

<ul>
<li>App 有两个tab，每一个都是Fragment,以FragmentA和FragmentB 代称.</li>
<li>切到FragmentA 视频播放（在RecyclerViewA 内部），然后切到FragmentB 视频暂停.</li>
<li>就在此刻，滑动FragmentB 的recyclerView B ，来自FragmentA的视频播放出声音，而且声音是下一条视频的声音。</li>
</ul>


<!--more-->


<p>这确实是一个非常奇怪的问题，不滑动不会出现视频播放声音，必须滑动一下才能出现声音。</p>

<h2>解决思路</h2>

<p>  1.分析日志，查找播放业务相关的代码<br/>
  2.增加logStackTrace(&ldquo;xxx&rdquo;)用来打印出调用的栈信息</p>

<h2>辅助方法</h2>

<p>该方法用来查看调用的层级关系，实现原理很简单，就是生成一个Throwable，然后打印stacktrace。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">logStackTrace</span><span class="o">(</span><span class="nl">tag:</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">BuildConfig</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;logStackTrace $tag&quot;</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">(</span><span class="n">tag</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题日志</h2>

<p>于是我们得到了如下的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Throwable</span><span class="o">:</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">commonsdk</span><span class="o">.</span><span class="na">utils</span><span class="o">.</span><span class="na">ExtensionKt</span><span class="o">.</span><span class="na">logStackTrace</span><span class="o">(</span><span class="n">Extension</span><span class="o">.</span><span class="na">kt</span><span class="o">:</span><span class="mi">99</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">video</span><span class="o">.</span><span class="na">DiscoveryVideoPlayer</span><span class="o">.</span><span class="na">setUp</span><span class="o">(</span><span class="n">DiscoveryVideoPlayer</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">786</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">shuyu</span><span class="o">.</span><span class="na">gsyvideoplayer</span><span class="o">.</span><span class="na">video</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">GSYVideoView</span><span class="o">.</span><span class="na">setUp</span><span class="o">(</span><span class="n">GSYVideoView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">446</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">shuyu</span><span class="o">.</span><span class="na">gsyvideoplayer</span><span class="o">.</span><span class="na">video</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">GSYVideoControlView</span><span class="o">.</span><span class="na">setUp</span><span class="o">(</span><span class="n">GSYVideoControlView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">541</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">ui</span><span class="o">.</span><span class="na">adapter</span><span class="o">.</span><span class="na">VideoFeedAdapter</span><span class="o">.</span><span class="na">initVideo</span><span class="o">(</span><span class="n">VideoFeedAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">211</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">ui</span><span class="o">.</span><span class="na">adapter</span><span class="o">.</span><span class="na">VideoFeedAdapter</span><span class="o">.</span><span class="na">onBindViewHolder</span><span class="o">(</span><span class="n">VideoFeedAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">127</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxxxx</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">ui</span><span class="o">.</span><span class="na">adapter</span><span class="o">.</span><span class="na">VideoFeedAdapter</span><span class="o">.</span><span class="na">onBindViewHolder</span><span class="o">(</span><span class="n">VideoFeedAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">34</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Adapter</span><span class="o">.</span><span class="na">onBindViewHolder</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6673</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Adapter</span><span class="o">.</span><span class="na">bindViewHolder</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6714</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Recycler</span><span class="o">.</span><span class="na">tryBindViewHolderByDeadline</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5647</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">RecyclerView</span><span class="n">$Recycler</span><span class="o">.</span><span class="na">tryGetViewHolderForPositionByDeadline</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5913</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">prefetchPositionWithDeadline</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">285</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">flushTaskWithDeadline</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">342</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">flushTasksWithDeadline</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">358</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">prefetch</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">365</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">GapWorker</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">GapWorker</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">396</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">891</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">207</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">7470</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RuntimeInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">RuntimeInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">524</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">logStackTrace</span> <span class="o">:</span>   <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">958</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题症结</h2>

<p>问题的症结就在GapWorker调用导致了RecyclerView的item预加载处理。</p>

<h2>解决方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">yourLayoutManager</span><span class="o">.</span><span class="na">setItemPrefetchEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>为什么会这样</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sets whether the LayoutManager should be queried for views outside of</span>
</span><span class='line'><span class="cm">     * its viewport while the UI thread is idle between frames.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;If enabled, the LayoutManager will be queried for items to inflate/bind in between</span>
</span><span class='line'><span class="cm">     * view system traversals on devices running API 21 or greater. Default value is true.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;On platforms API level 21 and higher, the UI thread is idle between passing a frame</span>
</span><span class='line'><span class="cm">     * to RenderThread and the starting up its next frame at the next VSync pulse. By</span>
</span><span class='line'><span class="cm">     * prefetching out of window views in this time period, delays from inflation and view</span>
</span><span class='line'><span class="cm">     * binding are much less likely to cause jank and stuttering during scrolls and flings.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;While prefetch is enabled, it will have the side effect of expanding the effective</span>
</span><span class='line'><span class="cm">     * size of the View cache to hold prefetched views.&lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param enabled &lt;code&gt;True&lt;/code&gt; if items should be prefetched in between traversals.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @see #isItemPrefetchEnabled()</span>
</span><span class='line'><span class="cm">     */</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述是<code>setItemPrefetchEnabled</code>的注释，item prefetch是一种用来减少滑动时卡顿的一种预加载方式。这种对于普通的RecyclerView的item没有问题，但是对于视频有声音的，就显得问题明显了。所以这里的解决方法就是关闭这个预取的设置。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在终端使用脚本查看网站 SSL 证书信息]]></title>
    <link href="https://droidyue.com/blog/2019/10/27/view-ssl-certificate-in-terminal/"/>
    <updated>2019-10-27T18:23:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/27/view-ssl-certificate-in-terminal</id>
    <content type="html"><![CDATA[<p>之前遇到过一次赛门铁克很久的证书被Chrome弃用的问题，涉及到了查看证书。当然第一个大家会想到的是在浏览器中查看，但是总是感觉不够极客。后来摸索找到了终端查看网站证书的方法</p>

<!--more-->


<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> | openssl s_client -showcerts -servername <span class="nv">$1</span> -connect <span class="nv">$2</span>:443 2&gt;/dev/null | openssl x509 -inform pem -noout -text
</span></code></pre></td></tr></table></div></figure>


<p>将上面的文件保存成<code>checkSSLCertificate.sh</code>并增加执行权限<code>chmod a+x checkSSLCertificate.sh</code></p>

<h2>使用方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>checkSSLCertificate.sh domain server_ip
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>domain 域名 比如droidyue.com</li>
<li>server_ip 服务器端ip，一个域名可以对应多个ip,可以使用ping命令获取域名对应的服务器ip</li>
</ul>


<h2>示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MacBook-Pro-7:~/Documents/OneDrive/scripts<span class="o">(</span>:|✔<span class="o">)</span> %checkSSLCertificate.sh droidyue.com 104.27.129.205
</span><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 <span class="o">(</span>0x2<span class="o">)</span>
</span><span class='line'>        Serial Number:
</span><span class='line'>            05:f6:c5:0d:86:17:c1:6c:cb:a3:6c:01:85:b7:ff:a0
</span><span class='line'>    Signature Algorithm: ecdsa-with-SHA256
</span><span class='line'>        Issuer: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>CA, <span class="nv">L</span><span class="o">=</span>San Francisco, <span class="nv">O</span><span class="o">=</span>CloudFlare, Inc., <span class="nv">CN</span><span class="o">=</span>CloudFlare Inc ECC CA-2
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Oct  2 00:00:00 2018 GMT
</span><span class='line'>            Not After : Oct  2 12:00:00 2019 GMT
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>CA, <span class="nv">L</span><span class="o">=</span>San Francisco, <span class="nv">O</span><span class="o">=</span>CloudFlare, Inc., <span class="nv">CN</span><span class="o">=</span>sni.cloudflaressl.com
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: id-ecPublicKey
</span><span class='line'>                Public-Key: <span class="o">(</span>256 bit<span class="o">)</span>
</span><span class='line'>                pub:
</span><span class='line'>                    04:75:31:b0:0f:40:66:72:4f:b2:d3:d3:ab:9a:eb:
</span><span class='line'>                    b8:70:f3:6e:73:ed:56:51:39:7f:49:d8:ad:c8:4c:
</span><span class='line'>                    cb:12:16:67:7d:09:c5:51:68:f5:12:ac:89:cc:ec:
</span><span class='line'>                    f4:b0:1c:4e:09:1c:01:2e:6b:7d:01:0c:f5:0c:d5:
</span><span class='line'>                    0c:7e:7d:09:53
</span><span class='line'>                ASN1 OID: prime256v1
</span><span class='line'>                NIST CURVE: P-256
</span><span class='line'>        X509v3 extensions:
</span><span class='line'>            X509v3 Authority Key Identifier:
</span><span class='line'>                keyid:3E:74:2D:1F:CF:45:75:04:7E:3F:C0:A2:87:3E:4C:43:83:51:13:C6
</span><span class='line'>
</span><span class='line'>            X509v3 Subject Key Identifier:
</span><span class='line'>                FE:75:3B:AF:CD:5F:46:26:4F:B1:A1:F0:3A:4C:C3:82:D1:FF:AF:F7
</span><span class='line'>            X509v3 Subject Alternative Name:
</span><span class='line'>                DNS:sni.cloudflaressl.com, DNS:droidyue.com, DNS:*.droidyue.com
</span><span class='line'>            X509v3 Key Usage: critical
</span><span class='line'>                Digital Signature
</span><span class='line'>            X509v3 Extended Key Usage:
</span><span class='line'>                TLS Web Server Authentication, TLS Web Client Authentication
</span><span class='line'>            X509v3 CRL Distribution Points:
</span><span class='line'>
</span><span class='line'>                Full Name:
</span><span class='line'>                  URI:http://crl3.digicert.com/CloudFlareIncECCCA2.crl
</span><span class='line'>
</span><span class='line'>                Full Name:
</span><span class='line'>                  URI:http://crl4.digicert.com/CloudFlareIncECCCA2.crl
</span><span class='line'>
</span><span class='line'>            X509v3 Certificate Policies:
</span><span class='line'>                Policy: 2.16.840.1.114412.1.1
</span><span class='line'>                  CPS: https://www.digicert.com/CPS
</span><span class='line'>                Policy: 2.23.140.1.2.2
</span><span class='line'>
</span><span class='line'>            Authority Information Access:
</span><span class='line'>                OCSP - URI:http://ocsp.digicert.com
</span><span class='line'>                CA Issuers - URI:http://cacerts.digicert.com/CloudFlareIncECCCA-2.crt
</span><span class='line'>
</span><span class='line'>            X509v3 Basic Constraints: critical
</span><span class='line'>                CA:FALSE
</span><span class='line'>            1.3.6.1.4.1.11129.2.4.2:
</span><span class='line'>                ......w.......X......gp
</span><span class='line'>.....f4<span class="s2">&quot;.......H0F.!..B.#....3.A.s%1...;...n..-.U~T?m.!.....\V....^.N..M..bt..S......__..w.t~..1.3..!..%OBp...^B ..75y..{.V...f4&quot;</span>.......H0F.!........-<span class="err">&#39;</span>@.<span class="nv">$.</span>o......x.F.I.0F.....!....J..m&lt;.|...q.t2c..L...^.T.?.L.
</span><span class='line'>    Signature Algorithm: ecdsa-with-SHA256
</span><span class='line'>         30:46:02:21:00:cf:d8:25:3e:a5:2f:cd:dc:1a:07:11:eb:f0:
</span><span class='line'>         53:e1:fb:42:53:5b:1f:2f:4b:e5:02:5a:c3:76:bd:23:78:68:
</span><span class='line'>         cb:02:21:00:8c:9d:36:2e:c0:3b:af:93:ea:8b:e3:29:54:25:
</span><span class='line'>         4f:30:04:af:a0:be:bd:71:ab:64:5c:f4:93:5d:bd:84:2c:5a
</span></code></pre></td></tr></table></div></figure>


<p>使用终端一时爽，一直使用一直爽。</p>

<p>以上。</p>

<p>点击<a href="https://droidyue.com/blog/categories/jiao-ben/">更多脚本</a> 了解更多脚本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android WebView 诊断与排查问题的方法和技巧]]></title>
    <link href="https://droidyue.com/blog/2019/10/20/how-to-diagnose-webview-in-android/"/>
    <updated>2019-10-20T21:13:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/20/how-to-diagnose-webview-in-android</id>
    <content type="html"><![CDATA[<p>WebView，是安卓中很重要的一个组件，我们的应用中集成WebView后，可能会遇到各种各样的问题，这里简单介绍一些Android WebView 诊断与排查问题的方法，希望对于大家有这方面的问题的朋友有所帮助。</p>

<!--more-->


<h2>开启DiagnosableWebViewClient日志输出</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.droidyue.webview.webviewclient</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">SslError</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">webkit</span><span class="p">.*</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">debugMessage</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">webview</span><span class="p">.</span><span class="n">ext</span><span class="p">.</span><span class="n">toSimpleString</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 诊断（错误信息）的WebViewClient,会以日志输出形式输出错误信息，便于发现网页的问题</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nc">DiagnosableWebViewClient</span> <span class="p">:</span> <span class="n">WebViewClient</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">errorCode</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">description</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span> <span class="n">failingUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">errorCode</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">failingUrl</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedError&quot;</span><span class="p">,</span> <span class="s">&quot;errorCode&quot;</span><span class="p">,</span> <span class="n">errorCode</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;failingUrl&quot;</span><span class="p">,</span> <span class="n">failingUrl</span><span class="p">,</span> <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">request</span><span class="p">:</span> <span class="n">WebResourceRequest</span><span class="p">?,</span> <span class="n">error</span><span class="p">:</span> <span class="n">WebResourceError</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedError&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">,</span> <span class="n">request</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span> <span class="s">&quot;error&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSafeBrowsingHit</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">request</span><span class="p">:</span> <span class="n">WebResourceRequest</span><span class="p">?,</span> <span class="n">threatType</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">callback</span><span class="p">:</span> <span class="n">SafeBrowsingResponse</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onSafeBrowsingHit</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">threatType</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onSafeBrowsingHit&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">,</span> <span class="n">request</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span> <span class="s">&quot;threatType&quot;</span><span class="p">,</span> <span class="n">threatType</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedHttpError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">request</span><span class="p">:</span> <span class="n">WebResourceRequest</span><span class="p">?,</span> <span class="n">errorResponse</span><span class="p">:</span> <span class="n">WebResourceResponse</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedHttpError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">errorResponse</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedHttpError&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="s">&quot;errorResponse&quot;</span><span class="p">,</span> <span class="n">errorResponse</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceivedSslError</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">WebView</span><span class="p">?,</span> <span class="n">handler</span><span class="p">:</span> <span class="n">SslErrorHandler</span><span class="p">?,</span> <span class="n">error</span><span class="p">:</span> <span class="n">SslError</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onReceivedSslError</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">handler</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onReceivedSslError&quot;</span><span class="p">,</span> <span class="s">&quot;error&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="s">&quot;webview.info&quot;</span><span class="p">,</span> <span class="n">view</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>举个例子</h3>

<p>WebView页面出现了白屏，不展示任何内容，如下图</p>

<p><img src="https://asset.droidyue.com/image/2019_09/hybrid_app_white_issue.png" alt="https://asset.droidyue.com/image/2019_09/hybrid_app_white_issue.png" /></p>

<p>利用上面支持的内容，我们查看错误输出日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D debugMessage: ConcreteWebViewClient;onReceivedSslError error primary error: 3 certificate: Issued to: <span class="nv">CN</span><span class="o">=</span>sni.cloudflaressl.com,O<span class="o">=</span>Cloudflare<span class="se">\,</span> Inc.,L<span class="o">=</span>San Francisco,ST<span class="o">=</span>CA,C<span class="o">=</span>US;
</span><span class='line'>D debugMessage: Issued by: <span class="nv">C</span><span class="o">=</span>NZ,ST<span class="o">=</span>Auckland,L<span class="o">=</span>Auckland,O<span class="o">=</span>XK72 Ltd,OU<span class="o">=</span>https://charlesproxy.com/ssl,CN<span class="o">=</span>Charles Proxy CA <span class="o">(</span>4 Sep 2018<span class="se">\,</span> bogon<span class="o">)</span>;
</span><span class='line'>D debugMessage:  on URL: https://droidyue.com/ webview.info <span class="nv">url</span><span class="o">=</span>https://droidyue.com/;originalUrl<span class="o">=</span>null
</span></code></pre></td></tr></table></div></figure>


<p>通过查找源码(SslError.java)我们了解到</p>

<ul>
<li>errorCode 为 3，代表证书不信任。</li>
</ul>


<p>这其中的缘由是</p>

<ul>
<li>我们在设备上安装的charles证书，属于用户添加的证书</li>
<li>出于应用安全的目的，Android 7及之后默认不信任用户添加的证书(Android 7 之前是默认信任用户添加的证书)</li>
<li>当我们将App的编译目标提到24及其以上，系统就会激活这一安全限制。</li>
</ul>


<p>所以，我们按照这篇文章<a href="https://droidyue.com/blog/2019/01/13/resolve-charles-unknow-indicator-on-android-phones/">解决Android手机连接Charles Unknown问题</a>的方案，允许App在debug版本下信任用户证书就可以解决问题了。</p>

<h2>Console日志查看</h2>

<p>比如，我们有这样一段Javascript代码处理console输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s2">&quot;console.debug&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;console.log&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">&quot;console.info&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;console.warn&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;console.error&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb logcat | grep <span class="s2">&quot;chromium&quot;</span> --line-buffered --color<span class="o">=</span>always | grep CONSOLE --color<span class="o">=</span>always
</span></code></pre></td></tr></table></div></figure>


<p>
可以过滤出WebView CONSOLE的日志输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>2<span class="o">)]</span> <span class="s2">&quot;console.debug&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>2<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>3<span class="o">)]</span> <span class="s2">&quot;console.log&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>3<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>4<span class="o">)]</span> <span class="s2">&quot;console.info&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>4<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>5<span class="o">)]</span> <span class="s2">&quot;console.warn&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>5<span class="o">)</span>
</span><span class='line'> I chromium: <span class="o">[</span>INFO:CONSOLE<span class="o">(</span>6<span class="o">)]</span> <span class="s2">&quot;console.error&quot;</span>, <span class="nb">source</span>:  <span class="o">(</span>6<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样也有一个不足，就是没有打印出Console的消息级别(都展示成了INFO:CONSOLE)。</p>

<p>如果想要解决上面的不足或者自定义日志输出关键字的话，可以重写实现WebChromeClient的<code>onConsoleMessage</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.droidyue.webview.chromeclient</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">webkit</span><span class="p">.</span><span class="n">ConsoleMessage</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">webkit</span><span class="p">.</span><span class="n">WebChromeClient</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">debugMessage</span>
</span><span class='line'><span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="n">droidyue</span><span class="p">.</span><span class="n">webview</span><span class="p">.</span><span class="n">ext</span><span class="p">.</span><span class="n">toSimpleString</span>
</span><span class='line'>
</span><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nc">DiagnosableChromeClient</span><span class="p">:</span> <span class="n">WebChromeClient</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onConsoleMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span> <span class="n">lineNumber</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">sourceID</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//不需要调用super方法</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onConsoleMessage&quot;</span><span class="p">,</span> <span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="s">&quot;lineNumber&quot;</span><span class="p">,</span> <span class="n">lineNumber</span><span class="p">,</span> <span class="s">&quot;sourceID&quot;</span><span class="p">,</span> <span class="n">sourceID</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onConsoleMessage</span><span class="p">(</span><span class="n">consoleMessage</span><span class="p">:</span> <span class="n">ConsoleMessage</span><span class="p">?):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">debugMessage</span><span class="p">(</span><span class="s">&quot;onConsoleMessage&quot;</span><span class="p">,</span> <span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="n">consoleMessage</span><span class="p">?.</span><span class="n">toSimpleString</span><span class="p">())</span>
</span><span class='line'>        <span class="c1">//返回true，不再需要webview内部处理</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>TIP;message<span class="o">=</span>console.debug;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>1
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>LOG;message<span class="o">=</span>console.log;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>2
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>LOG;message<span class="o">=</span>console.info;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>3
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>WARNING;message<span class="o">=</span>console.warn;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>4
</span><span class='line'>D debugMessage: ConcreteWebChromeClient;onConsoleMessage message <span class="nv">messageLevel</span><span class="o">=</span>ERROR;message<span class="o">=</span>console.error;sourceId<span class="o">=</span>;<span class="nv">lineNumber</span><span class="o">=</span>5
</span></code></pre></td></tr></table></div></figure>


<h2>开启 WebView 远程调试</h2>

<p>从Android Kitkat(4.4)开始，WebView 支持与Chrome 连接执行远程调试。</p>

<p>开启很简单，如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="n">WebView</span><span class="p">.</span><span class="n">enableRemoteDebugging</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">Build</span><span class="p">.</span><span class="n">VERSION</span><span class="p">.</span><span class="n">SDK_INT</span> <span class="p">&gt;=</span> <span class="n">Build</span><span class="p">.</span><span class="n">VERSION_CODES</span><span class="p">.</span><span class="n">KITKAT</span> <span class="p">&amp;&amp;</span> <span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">WebView</span><span class="p">.</span><span class="n">setWebContentsDebuggingEnabled</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但需要注意两点</p>

<ul>
<li>一定要限定运行设备大于等于4.4系统</li>
<li>强烈建议限定在Debug编译(或等同条件)包下开启，不建议Release包也启用该功能</li>
</ul>


<p>配置完成后，启动App，打开Chrome，输入<code>chrome://inspect</code>
<img src="https://asset.droidyue.com/image/2019_09/webview-debugging.png" alt="https://asset.droidyue.com/image/2019_09/webview-debugging.png" /></p>

<p>可以调试的功能有</p>

<ul>
<li>审查元素</li>
<li>执行Javascript</li>
<li>查看网页资源</li>
<li>进行性能分析</li>
<li>其他功能</li>
</ul>


<p>具体内容可以访问<a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews">https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews</a>了解。</p>

<h2>推荐阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/categories/webview/">WebView分类文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用脚本批量替换文本内容]]></title>
    <link href="https://droidyue.com/blog/2019/10/13/replace-text-in-multiple-files-using-shell-script/"/>
    <updated>2019-10-13T19:07:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/13/replace-text-in-multiple-files-using-shell-script</id>
    <content type="html"><![CDATA[<p>很多时候，我们需要进行多个文件的查找并替换，虽然IDE有这样的可视化功能，但是偏爱终端的人还是想要尝试用脚本实现一把。如下是一个简单的脚本来实现多文件的查找替换处理。</p>

<!--more-->


<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># $1 search_keyword</span>
</span><span class='line'><span class="c"># $2 replace_original</span>
</span><span class='line'><span class="c"># $3 replace_destination</span>
</span><span class='line'><span class="c"># $4 search file type</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>find ./ -type f -name <span class="s2">&quot;*.$4&quot;</span> -exec grep -l <span class="s2">&quot;$1&quot;</span> <span class="o">{}</span> <span class="se">\;</span> | xargs sed -i <span class="s2">&quot;&quot;</span> -e <span class="s2">&quot;s/$2/$3/g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>内容解析</h3>

<ul>
<li>find 查找文件命令使用</li>
<li>-name 限定文件名</li>
<li>-type 限定文件类型，f为常用文件</li>
<li>-exec 执行相关的命令，这里是用来查找关键字</li>
<li>sed 用来执行将源文字替换为目标文字</li>
</ul>


<p>我们将上述脚本保存为<code>replaceText.sh</code>。</p>

<h2>执行脚本</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  octopress git:<span class="o">(</span>master<span class="o">)</span> replaceText.sh <span class="s2">&quot;FD&quot;</span> <span class="s2">&quot;FD&quot;</span> <span class="s2">&quot;文件描述符&quot;</span> <span class="s2">&quot;markdown&quot;</span>
</span><span class='line'>➜  octopress git:<span class="o">(</span>master<span class="o">)</span> ✗ git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>
</span><span class='line'>Changes not staged <span class="k">for </span>commit:
</span><span class='line'>  <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class='line'>  <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2014-02-16-fix-no-sound-issue-on-mac.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2014-07-06-my-plan-for-the-left-half-of-2014.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2019-06-02-file-descriptor-explained.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/_posts/2019-06-09-will-unclosed-stream-objects-cause-memory-leaks.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/buy/index.markdown
</span><span class='line'>  modified:   <span class="nb">source</span>/fuli/index.markdown
</span></code></pre></td></tr></table></div></figure>


<p>这样一个很简单快速的功能就实现了。</p>

<p>注：该脚本未在Linux发行版验证，可能有涉及到sed的简单修改。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个小技巧提升 OkHttp 请求稳定性]]></title>
    <link href="https://droidyue.com/blog/2019/10/07/okhttp-client-intercept-safe-guard-nullpointer/"/>
    <updated>2019-10-07T19:56:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/10/07/okhttp-client-intercept-safe-guard-nullpointer</id>
    <content type="html"><![CDATA[<p>OkHttp是可以说是Android开发中，每个项目都必需依赖的网络库，我们可以很便捷高效的处理网络请求，极大的提升了编码效率。但是有时候，我们使用OkHttp也会遇到这样的问题</p>

<h2>崩溃的stacktrace</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> E AndroidRuntime: FATAL EXCEPTION: OkHttp Dispatcher
</span><span class='line'> E AndroidRuntime: Process: com.example.okhttpexceptionsample, PID: 13564
</span><span class='line'> E AndroidRuntime: java.lang.NullPointerException: blablabla
</span><span class='line'> E AndroidRuntime:    at com.example.okhttpexceptionsample.MainActivity<span class="nv">$createNPEInterceptor$1</span>.intercept<span class="o">(</span>MainActivity.kt:61<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:112<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:87<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.RealCall.getResponseWithInterceptorChain<span class="o">(</span>RealCall.kt:184<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at okhttp3.RealCall<span class="nv">$AsyncCall</span>.run<span class="o">(</span>RealCall.kt:136<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="o">(</span>ThreadPoolExecutor.java:1167<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at java.util.concurrent.ThreadPoolExecutor<span class="nv">$Worker</span>.run<span class="o">(</span>ThreadPoolExecutor.java:641<span class="o">)</span>
</span><span class='line'> E AndroidRuntime:    at java.lang.Thread.run<span class="o">(</span>Thread.java:784<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>为什么会崩溃</h2>

<p>从上面的stacktrace，我们可以分析到，发生了NullPointerException。发生了崩溃。</p>

<p>等等，我记得OkHttp有处理异常的情况呢。</p>

<p>嗯，确实，OkHttp有处理异常的情况，比如发生异常会调用<code>onFailure</code>。比如下面的Callback的内容介绍。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">interface</span> <span class="n">Callback</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Called when the request could not be executed due to cancellation, a connectivity problem or</span>
</span><span class='line'><span class="cm">   * timeout. Because networks can fail during an exchange, it is possible that the remote server</span>
</span><span class='line'><span class="cm">   * accepted the request before the failure.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span> <span class="n">IOException</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Called when the HTTP response was successfully returned by the remote server. The callback may</span>
</span><span class='line'><span class="cm">   * proceed to read the response body with [Response.body]. The response is still live until its</span>
</span><span class='line'><span class="cm">   * response body is [closed][ResponseBody]. The recipient of the callback may consume the response</span>
</span><span class='line'><span class="cm">   * body on another thread.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Note that transport-layer success (receiving a HTTP response code, headers and body) does not</span>
</span><span class='line'><span class="cm">   * necessarily indicate application-layer success: `response` may still indicate an unhappy HTTP</span>
</span><span class='line'><span class="cm">   * response code like 404 or 500.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="n">@Throws</span><span class="p">(</span><span class="n">IOException</span><span class="p">::</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">onResponse</span><span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">Response</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，</p>

<ul>
<li>OkHttp只处理了IOException的情况，</li>
<li>NullPointerException不是IOException的子类</li>
</ul>


<p>所以没有被处理,发生了崩溃。</p>

<p>那么有没有办法解决，让这种崩溃不发生，对用户不进行干扰呢？其实是可以的。</p>

<h2>使用Interceptor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.okhttpexceptionsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">okhttp3</span><span class="p">.</span><span class="n">Interceptor</span>
</span><span class='line'><span class="n">import</span> <span class="n">okhttp3</span><span class="p">.</span><span class="n">Response</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">IOException</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 对于Interceptor的intercept中可能出现的Throwable包裹成IOExceptionWrapper，转成网络请求失败，而不是应用崩溃</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SafeGuardInterceptor</span> <span class="p">:</span> <span class="n">Interceptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">intercept</span><span class="p">(</span><span class="n">chain</span><span class="p">:</span> <span class="n">Interceptor</span><span class="p">.</span><span class="n">Chain</span><span class="p">):</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">chain</span><span class="p">.</span><span class="n">proceed</span><span class="p">(</span><span class="n">chain</span><span class="p">.</span><span class="n">request</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="nf">IOExceptionWrapper</span><span class="p">(</span><span class="s">&quot;SafeGuarded when requesting ${chain.request().url}&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 将chain.proceed处理中发生的Throwable包装成IOExceptionWrapper</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nf">IOExceptionWrapper</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span> <span class="n">cause</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">?)</span> <span class="p">:</span> <span class="n">IOException</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">cause</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，我们将任何<code>Throwable</code>的转成<code>IOExceptionWrapper</code>（伪装成IOException），然后添加到OkHttpClient中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">createOKHttpClient</span><span class="p">():</span> <span class="n">OkHttpClient</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">OkHttpClient</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">addInterceptor</span><span class="p">(</span><span class="n">SafeGuardInterceptor</span><span class="p">())</span>
</span><span class='line'>            <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们再次执行有NPE的代码，日志就发生了改变(不再是崩溃的日志，而是异常的日志)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  W System.err: com.example.okhttpexceptionsample.IOExceptionWrapper: <span class="nv">SafeGuarded</span><span class="o">=</span>blablabla
</span><span class='line'>  W System.err:   at com.example.okhttpexceptionsample.SafeGuardInterceptor.intercept<span class="o">(</span>SafeGuardInterceptor.kt:12<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:112<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:87<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.RealCall.getResponseWithInterceptorChain<span class="o">(</span>RealCall.kt:184<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.RealCall<span class="nv">$AsyncCall</span>.run<span class="o">(</span>RealCall.kt:136<span class="o">)</span>
</span><span class='line'>  W System.err:   at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="o">(</span>ThreadPoolExecutor.java:1167<span class="o">)</span>
</span><span class='line'>  W System.err:   at java.util.concurrent.ThreadPoolExecutor<span class="nv">$Worker</span>.run<span class="o">(</span>ThreadPoolExecutor.java:641<span class="o">)</span>
</span><span class='line'>  W System.err:   at java.lang.Thread.run<span class="o">(</span>Thread.java:784<span class="o">)</span>
</span><span class='line'>  W System.err: Caused by: java.lang.NullPointerException: blablabla
</span><span class='line'>  W System.err:   at com.example.okhttpexceptionsample.MainActivity<span class="nv">$createNPEInterceptor$1</span>.intercept<span class="o">(</span>MainActivity.kt:61<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:112<span class="o">)</span>
</span><span class='line'>  W System.err:   at okhttp3.internal.http.RealInterceptorChain.proceed<span class="o">(</span>RealInterceptorChain.kt:87<span class="o">)</span>
</span><span class='line'>  W System.err:   at com.example.okhttpexceptionsample.SafeGuardInterceptor.intercept<span class="o">(</span>SafeGuardInterceptor.kt:10<span class="o">)</span>
</span><span class='line'>  W System.err:   ... 7 more
</span></code></pre></td></tr></table></div></figure>


<p>上述需要注意两点</p>

<ul>
<li>添加的是Interceptor,而不是NetworkInterceptor</li>
<li>顺序很重要,一定要放在第一个位置</li>
</ul>


<h2>这么做有什么问题</h2>

<p>这么做，当然可以明显增强请求的稳定性和应用的崩溃率。但是是不是也有一些问题呢？比如</p>

<ul>
<li>将问题情况吞掉，不利于发现问题呢</li>
</ul>


<p>是的，确实可能存在上述的问题，但是我们可以利用下面的方式减轻或者解决问题</p>

<ul>
<li>只针对release情况应用SafeGuardInterceptor,这样便于debug情况下更容易发现</li>
<li>针对不同的build variants进行配置，便于尽可能的小范围发现问题</li>
<li>实行更加智能的动态开启策略。</li>
</ul>


<p>在软件工程中，很多决定都是trade-off的体现，具体的实施方案大家可以自行平衡选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据包名查找 jar 包文件]]></title>
    <link href="https://droidyue.com/blog/2019/09/22/find-jar-file-by-package-name/"/>
    <updated>2019-09-22T21:19:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/22/find-jar-file-by-package-name</id>
    <content type="html"><![CDATA[<p>很多时候，我们需要根据包名来查找一些依赖所在的jar包，比如我们想要查找<code>com.alipay</code>这个包及其文件所在的jar包。</p>

<p>最笨拙的办法可能是这样</p>

<ul>
<li>一个一个jar包查找，再利用一些工具来验证。</li>
</ul>


<p>其实，大可不必，我们需要简单实用如下的脚本就能解决这个问题。</p>

<!--more-->


<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;find&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># extract arguements from command line</span>
</span><span class='line'><span class="n">dirToSearch</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">packageName</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;dirToSearch=</span><span class="si">#{</span><span class="n">dirToSearch</span><span class="si">}</span><span class="s2">;packageName=</span><span class="si">#{</span><span class="n">packageName</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Find</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">dirToSearch</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot;.jar&quot;</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Checking </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1">#as jar tf shows the package information like the file path style</span>
</span><span class='line'>    <span class="c1"># we need to map all the dots(.) to slashes(/)</span>
</span><span class='line'>    <span class="n">contains</span> <span class="o">=</span> <span class="sb">`jar tf </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="sb">`</span><span class="o">.</span><span class="n">include?</span> <span class="n">packageName</span><span class="o">.</span><span class="n">gsub</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">contains</span>
</span><span class='line'>      <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;The jar files containing </span><span class="si">#{</span><span class="n">packageName</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">results</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的脚本利用了</p>

<ul>
<li>遍历查找jar文件</li>
<li>利用<code>jar tf</code>命令读取出jar包中的文件列表</li>
<li>执行字符串包含来实行检查</li>
</ul>


<h2>脚本执行</h2>

<p>将上面的内容保存成文件<code>findJarByPackageName.rb</code>，如下执行即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby findJarByPackageName.rb . <span class="s2">&quot;com.alipay&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">dirToSearch</span><span class="o">=</span>.;packageName<span class="o">=</span>com.alipay
</span><span class='line'>Checking ./0.jar
</span><span class='line'>Checking ./HwPush_SDK.jar
</span><span class='line'>Checking ./MiPush_SDK_Client_3_0_3.jar
</span><span class='line'>Checking ./alipaySdk-20180601.jar
</span><span class='line'>Checking ./classes.jar
</span><span class='line'>Checking ./full.jar
</span><span class='line'>Checking ./gradle-wrapper.jar
</span><span class='line'>Checking ./huawei-pps-channel-sdk.jar
</span><span class='line'>Checking ./mqtt-client-java1.4-uber-1.14.jar
</span><span class='line'>Checking ./mta-sdk-1.6.2.jar
</span><span class='line'>Checking ./open_sdk_r5788.jar
</span><span class='line'>Checking ./pinyin4j-2.5.0.jar
</span><span class='line'>Checking ./res.jar
</span><span class='line'>Checking ./tbs_sdk_thirdapp_v3.6.0.1249_43610_sharewithdownload_withoutGame_obfs_20180608_114954.jar
</span><span class='line'>Checking ./zxing.jar
</span><span class='line'>The jar files containing com.alipay
</span><span class='line'>./alipaySdk-20180601.jar
</span></code></pre></td></tr></table></div></figure>


<h2>更多推荐</h2>

<ul>
<li><a href="https://github.com/androidyue/DroidScripts">https://github.com/androidyue/DroidScripts</a></li>
<li><a href="https://droidyue.com/blog/categories/jiao-ben/">其他脚本</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 grep 的多次管道过滤问题]]></title>
    <link href="https://droidyue.com/blog/2019/09/15/fix-grep-multiple-filter-issue-cache-size/"/>
    <updated>2019-09-15T20:50:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/15/fix-grep-multiple-filter-issue-cache-size</id>
    <content type="html"><![CDATA[<p>在日常的开发过程中，我们利用<code>grep</code>可以方便快捷的查找感兴趣的日志内容，极大地提升了开发和排错效率。但是有时候，我们也会遇到一些问题，比如。</p>

<!--more-->


<ol>
<li><code>crazy.log</code> 是某个进程不断输出日志的文件</li>
<li>我们使用<code>tail -f crazy.log</code>来检测日志的产生</li>
<li>我们在前面的基础上利用管道增加一层过滤筛选感兴趣的内容。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f crazy.log | grep Hello
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,printting from Ruby
</span><span class='line'>Hello,Time is 1566096393
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>那么当我们再次增加一个过滤是，却没有内容（立即）产生了</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  /tmp tail -f crazy.log | grep Hello | grep Time
</span></code></pre></td></tr></table></div></figure>


<h2>如何解决</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f crazy.log | grep --line-buffered Hello | grep Time
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span><span class='line'>Hello,Time is 1566096393
</span></code></pre></td></tr></table></div></figure>


<p>如上，我们使用grep的选项<code>--line-buffered</code>即可。</p>

<h2>line-buffered 是什么</h2>

<blockquote><pre><code>--line-buffered
         Force output to be line buffered.  By default, output is line buffered when standard output is
         a terminal and block buffered otherwise.
</code></pre></blockquote>

<p>上面的意思是</p>

<ul>
<li>强制输出结果使用行缓冲</li>
<li>默认情况下，如果标准输入时终端，则使用line bufferred</li>
<li>否则，使用块缓冲，（默认的大小为4096 bytes，因系统和配置而异）</li>
</ul>


<p>所以，这也就解释了为什么双重grep过滤没有内容，因为没有达到块缓冲限制。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JvmMultifile 注解在 Kotlin 中的应用]]></title>
    <link href="https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin/"/>
    <updated>2019-09-08T20:43:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/08/jvmmultifile-annotation-in-kotlin</id>
    <content type="html"><![CDATA[<p>接触过Kotlin之后，我们会利用其扩展方法特性创建很多便捷的方法来实现更好更快的编码。比如我们对于RxJava进行一些简单的扩展方法实现。</p>

<!--more-->


<p>下面的这段代码实现一个将任意的对象转成Single实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Single</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//fileName:SingleExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to change T instance into Single&lt;T&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">T</span><span class="p">.</span><span class="n">toSingle</span><span class="p">():</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Single</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来的代码，实现将任意类型的List转成Observable实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Observable</span>
</span><span class='line'><span class="c1">//fileName:ObservableExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to convert List&lt;T&gt; instance to Observable&lt;List&lt;T&gt;&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">toObservable</span><span class="p">():</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">fromArray</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>针对上面的代码，我们使用时会是下面的样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">//the old way</span>
</span><span class='line'><span class="n">SingleExtKt</span><span class="o">.</span><span class="na">toSingle</span><span class="o">(</span><span class="s">&quot;Kotlin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ObservableExtKt</span><span class="o">.</span><span class="na">toObservable</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;Kotlinc&quot;</span><span class="o">,</span> <span class="s">&quot;Developer&quot;</span><span class="o">,</span> <span class="s">&quot;Friends&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>能不能将上面两个类合成一个呢</h2>

<p>有时候，我们可能处于这样的考虑，比如SingleExt与ObservableExt里面的扩展方法都是和RxJava有关，可不可以同一称为RxUtil呢，这样使用起来也很方面。</p>

<p>答案是，可以的，就是利用@file:JvmName和@file:JvmMultifileClass就可以实现。</p>

<p>实现代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;RxUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmMultifileClass</span>
</span><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Single</span>
</span><span class='line'><span class="c1">//fileName:SingleExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to change T instance into Single&lt;T&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">T</span><span class="p">.</span><span class="n">toSingle</span><span class="p">():</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Single</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;RxUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmMultifileClass</span>
</span><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="n">reactivex</span><span class="p">.</span><span class="n">Observable</span>
</span><span class='line'><span class="c1">//fileName:ObservableExt.kt</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * shortcut method to convert List&lt;T&gt; instance to Observable&lt;List&lt;T&gt;&gt; instance</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">toObservable</span><span class="p">():</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">fromArray</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改后，就可以在Java中完全使用<code>RxUtil</code>调用了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//a much better way using @file:JvmMultifileClass</span>
</span><span class='line'><span class="n">RxUtil</span><span class="p">.</span><span class="n">toSingle</span><span class="p">(</span><span class="s">&quot;Kotlin&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">RxUtil</span><span class="p">.</span><span class="n">toObservable</span><span class="p">(</span><span class="n">Arrays</span><span class="p">.</span><span class="n">asList</span><span class="p">(</span><span class="s">&quot;Kotlinc&quot;</span><span class="p">,</span> <span class="s">&quot;Developer&quot;</span><span class="p">,</span> <span class="s">&quot;Friends&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>内部机制</h2>

<p>确实有一些神奇，简简单单的增加几个注解，就能实现。但是这样远远还不够，我们需要了解它是如何工作的。</p>

<p>查找对应的类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;*.class&quot;</span>
</span><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil.class
</span><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__ObservableExtKt.class
</span><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__SingleExtKt.class
</span></code></pre></td></tr></table></div></figure>


<p>使用javap工具拆解分析RxUtil.class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil.class
</span><span class='line'>public final class com.example.jvmannotationsample.RxUtil <span class="o">{</span>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Observable&lt;java.util.List&lt;T&gt;&gt; toObservable<span class="o">(</span>java.util.List&lt;? extends T&gt;<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: invokestatic  <span class="c">#12                 // Method com/example/jvmannotationsample/RxUtil__ObservableExtKt.toObservable:(Ljava/util/List;)Lio/reactivex/Observable;</span>
</span><span class='line'>       4: areturn
</span><span class='line'>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Single&lt;T&gt; toSingle<span class="o">(</span>T<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: invokestatic  <span class="c">#21                 // Method com/example/jvmannotationsample/RxUtil__SingleExtKt.toSingle:(Ljava/lang/Object;)Lio/reactivex/Single;</span>
</span><span class='line'>       4: areturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，我们可以看到</p>

<ul>
<li>toObservable方法内部实际上是调用了<code>RxUtil__ObservableExtKt.toObservable</code></li>
<li>toSingle 方法内部实际上是调用了<code>RxUtil__SingleExtKt.toSingle</code></li>
</ul>


<p>下面是对两个具体实现类的分析。</p>

<p>使用javap工具拆解分析RxUtil__ObservableExtKt.class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__ObservableExtKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;ObservableExt.kt&quot;</span>
</span><span class='line'>final class com.example.jvmannotationsample.RxUtil__ObservableExtKt <span class="o">{</span>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Observable&lt;java.util.List&lt;T&gt;&gt; toObservable<span class="o">(</span>java.util.List&lt;? extends T&gt;<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: ldc           <span class="c">#10                 // String $this$toObservable</span>
</span><span class='line'>       3: invokestatic  <span class="c">#16                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       6: iconst_1
</span><span class='line'>       7: anewarray     <span class="c">#18                 // class java/util/List</span>
</span><span class='line'>      10: dup
</span><span class='line'>      11: iconst_0
</span><span class='line'>      12: aload_0
</span><span class='line'>      13: aastore
</span><span class='line'>      14: invokestatic  <span class="c">#24                 // Method io/reactivex/Observable.fromArray:([Ljava/lang/Object;)Lio/reactivex/Observable;</span>
</span><span class='line'>      17: dup
</span><span class='line'>      18: ldc           <span class="c">#26                 // String Observable.fromArray(this)</span>
</span><span class='line'>      20: invokestatic  <span class="c">#29                 // Method kotlin/jvm/internal/Intrinsics.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>      23: areturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用javap工具拆解分析RxUtil__SingleExtKt.class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__SingleExtKt
</span><span class='line'>Warning: Binary file ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/RxUtil__SingleExtKt contains com.example.jvmannotationsample.RxUtil__SingleExtKt
</span><span class='line'>Compiled from <span class="s2">&quot;SingleExt.kt&quot;</span>
</span><span class='line'>final class com.example.jvmannotationsample.RxUtil__SingleExtKt <span class="o">{</span>
</span><span class='line'>  public static final &lt;T&gt; io.reactivex.Single&lt;T&gt; toSingle<span class="o">(</span>T<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: ldc           <span class="c">#10                 // String $this$toSingle</span>
</span><span class='line'>       3: invokestatic  <span class="c">#16                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       6: aload_0
</span><span class='line'>       7: invokestatic  <span class="c">#21                 // Method io/reactivex/Single.just:(Ljava/lang/Object;)Lio/reactivex/Single;</span>
</span><span class='line'>      10: dup
</span><span class='line'>      11: ldc           <span class="c">#23                 // String Single.just(this)</span>
</span><span class='line'>      13: invokestatic  <span class="c">#26                 // Method kotlin/jvm/internal/Intrinsics.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>      16: areturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>相关Kotlin内容推荐</h3>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">如何研究Kotlin</a></li>
<li><a href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/">JvmName注解</a></li>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">kotlin编译器调校</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">Kotlin更多文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JvmName 注解在 Kotlin 中的应用]]></title>
    <link href="https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin/"/>
    <updated>2019-09-01T20:45:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/09/01/jvm-name-annotations-kotlin</id>
    <content type="html"><![CDATA[<p>JvmName注解是Kotlin提供的一个可以变更编译器输出的注解，这里简单的介绍一下其使用规则。</p>

<h2>应用在文件上</h2>

<h3>未应用@JvmName</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">Uri</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">toUri</span><span class="p">():</span> <span class="n">Uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>当我们在Java中调用上面的toUri方法时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringExtKt</span><span class="o">.</span><span class="na">toUri</span><span class="o">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的 class 文件名称为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/StringExtKt.class
</span></code></pre></td></tr></table></div></figure>


<h3>应用@JvmName</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;StringUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">Uri</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">toUri</span><span class="p">():</span> <span class="n">Uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringUtil</span><span class="o">.</span><span class="na">toUri</span><span class="o">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的 class 文件名为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/StringUtil.class
</span></code></pre></td></tr></table></div></figure>


<h2>作用在方法上</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample.jvm_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">@JvmName</span><span class="p">(</span><span class="s">&quot;isOK&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">isValid</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的对应的class 文件，我们可以看到方法名称已经修改了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/OnMethodSampleKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;OnMethodSample.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.OnMethodSampleKt <span class="o">{</span>
</span><span class='line'>  public static final boolean isOK<span class="o">(</span>java.lang.String<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: ldc           <span class="c">#11                 // String $this$isValid</span>
</span><span class='line'>       3: invokestatic  <span class="c">#17                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       6: aload_0
</span><span class='line'>       7: checkcast     <span class="c">#19                 // class java/lang/CharSequence</span>
</span><span class='line'>      10: astore_1
</span><span class='line'>      11: iconst_0
</span><span class='line'>      12: istore_2
</span><span class='line'>      13: aload_1
</span><span class='line'>      14: invokeinterface <span class="c">#23,  1           // InterfaceMethod java/lang/CharSequence.length:()I</span>
</span><span class='line'>      19: ifle          26
</span><span class='line'>      22: iconst_1
</span><span class='line'>      23: goto          27
</span><span class='line'>      26: iconst_0
</span><span class='line'>      27: ireturn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，我们在Java代码中，可以这样调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testJvmNameOnMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">OnMethodSampleKt</span><span class="o">.</span><span class="na">isOK</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，我们在Kotlin代码中，还是只能使用<code>isValid</code>而不是<code>isOK</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testJvmNameOnMethod</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;&quot;</span><span class="p">.</span><span class="n">isValid</span><span class="p">()</span>
</span><span class='line'><span class="c1">//    &quot;&quot;.isOK() unresolved reference</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题就奇怪了，生成的class里面的方法是<code>isOK</code>，怎么还能调用<code>isValid</code>呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/KotlinPlaygroundKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;KotlinPlayground.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.KotlinPlaygroundKt <span class="o">{</span>
</span><span class='line'>  public static final void testJvmNameOnMethod<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: ldc           <span class="c">#8                  // String</span>
</span><span class='line'>       2: invokestatic  <span class="c">#14                 // Method com/example/jvmannotationsample/jvm_name/OnMethodSampleKt.isOK:(Ljava/lang/String;)Z</span>
</span><span class='line'>       5: pop
</span><span class='line'>       6: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，Kotlin编译器将<code>isValid</code>在字节码层面又替换成了<code>isOK</code>。</p>

<p>关于@JvmName作用到方法上，比较好的例子(来自Kotlin官网)是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/JVMAnnotationSample/app/src/main/java/com/example/jvmannotationsample/jvm_name/GenericList.kt: <span class="o">(</span>3, 1<span class="o">)</span>: Platform declaration clash: The following declarations have the same JVM signature <span class="o">(</span>filterValid<span class="o">(</span>Ljava/util/List;<span class="o">)</span>Ljava/util/List;<span class="o">)</span>:
</span><span class='line'>    fun List&lt;Int&gt;.filterValid<span class="o">()</span>: List&lt;Int&gt; defined in com.example.jvmannotationsample.jvm_name in file GenericList.kt
</span><span class='line'>    fun List&lt;String&gt;.filterValid<span class="o">()</span>: List&lt;String&gt; defined in com.example.jvmannotationsample.jvm_name in file GenericList.kt
</span></code></pre></td></tr></table></div></figure>


<p>上面的两个方法声明会导致Kotlin编译出错，因为</p>

<p>由于JVM对于泛型采取了类型擦除，<code>List&lt;Int&gt;.filterValid()</code>和<code>List&lt;String&gt;.filterValid()</code>实际上对应的都是<code>List.filterValid()</code></p>

<p>所以，对应的解决方法</p>

<ul>
<li> 修改两个的方法名称，比如<code>List&lt;String&gt;.filterValid()</code>修改成<code>List&lt;String&gt;.filterValidString()</code>等</li>
<li> 第二种就是使用@JvmName达到第一种方法的效果</li>
</ul>


<p>具体修改如下所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample.jvm_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">@JvmName</span><span class="p">(</span><span class="s">&quot;filterValidString&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@JvmName</span><span class="p">(</span><span class="s">&quot;filterValidInt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;.</span><span class="n">filterValid</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>作用在属性上</h2>

<p>除此之外，@JvmName还可以作用在属性上。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.jvmannotationsample.jvm_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">@get</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;x&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@set</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;changeX&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">23</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中对应的调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testJvmNameOnProperty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OnPropertiesSampleKt</span><span class="o">.</span><span class="na">changeX</span><span class="o">(</span><span class="mi">111</span><span class="o">);</span>
</span><span class='line'>        <span class="n">OnPropertiesSampleKt</span><span class="o">.</span><span class="na">x</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Kotlin中对应的调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testJvmNameOnProperty</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="p">=</span> <span class="m">1111</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和作用在方法上一样，其实现原理一致，具体如下面的反编译代码可见一斑。</p>

<p>Java调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/OnPropertiesSampleKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;OnPropertiesSample.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.OnPropertiesSampleKt <span class="o">{</span>
</span><span class='line'>  public static final int x<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: getstatic     <span class="c">#11                 // Field x:I</span>
</span><span class='line'>       3: ireturn
</span><span class='line'>
</span><span class='line'>  public static final void changeX<span class="o">(</span>int<span class="o">)</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: iload_0
</span><span class='line'>       1: putstatic     <span class="c">#11                 // Field x:I</span>
</span><span class='line'>       4: <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="k">  </span>static <span class="o">{}</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: bipush        23
</span><span class='line'>       2: putstatic     <span class="c">#11                 // Field x:I</span>
</span><span class='line'>       5: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlin调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c ./app/build/tmp/kotlin-classes/debug/com/example/jvmannotationsample/jvm_name/KotlinPlaygroundKt.class
</span><span class='line'>Compiled from <span class="s2">&quot;KotlinPlayground.kt&quot;</span>
</span><span class='line'>public final class com.example.jvmannotationsample.jvm_name.KotlinPlaygroundKt <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  public static final void testJvmNameOnProperty<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: sipush        1111
</span><span class='line'>       3: invokestatic  <span class="c">#36                 // Method com/example/jvmannotationsample/jvm_name/OnPropertiesSampleKt.changeX:(I)V</span>
</span><span class='line'>       6: invokestatic  <span class="c">#40                 // Method com/example/jvmannotationsample/jvm_name/OnPropertiesSampleKt.x:()I</span>
</span><span class='line'>       9: pop
</span><span class='line'>      10: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>相关文章</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多优质Kotlin文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contract，开发者和 Kotlin 编译器之间的契约]]></title>
    <link href="https://droidyue.com/blog/2019/08/25/kotlin-contract-between-developers-and-the-compiler/"/>
    <updated>2019-08-25T16:09:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/25/kotlin-contract-between-developers-and-the-compiler</id>
    <content type="html"><![CDATA[<p>相比 Java，使用 Kotlin 编程的时候，我们和kotlin编译器的交互行为会更多一些，比如我们可以通过<code>inline</code>来控制字节码的输出结果，使用注解也可以修改编译输出的class文件。</p>

<p>这里介绍一个和kotlin编译器更加好玩的特性，contract。可以理解成中文里面的契约。</p>

<!--more-->


<h2>不够智能的 Kotlin 编译器</h2>

<p>Kotlin编译器向来是比较智能的，比如做类型推断和<code>smart cast</code>等。但是有些时候，显得不是那么智能，比如下面的这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">News</span><span class="p">(</span><span class="k">val</span> <span class="n">publisherId</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="k">val</span> <span class="n">title</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//检查标题是否合法，如果title为null或者内容为空返回false</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">isTitleValid</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">title</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsTitleValid</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">isTitleValid</span><span class="p">())</span> <span class="p">{</span>   
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span> <span class="c1">//编译失败 并报错  //Only safe (?.) or non-null asserted (!!.) calls </span>
</span><span class='line'>        <span class="c1">//are allowed on a nullable receiver of type News?</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码会让我们觉得Kotlin编译器很不智能，甚至是有些笨拙。</p>

<ul>
<li><code>news.isTitleValid()</code>返回true，我们可以推测出<code>news.title</code>不为null，也能推断出news不为null</li>
<li>但是即使这样，我们使用<code>news.title</code>会导致编译报错 <code>Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type News?</code></li>
<li>所以，想要编译通过，我们要么继续使用<code>news?.title</code>或者是<code>news!!.title</code>，但无论哪一种都不够优雅</li>
</ul>


<p>所以不争的结论就是，Kotlin编译器在<code>if</code>语句内部无法推断<code>news</code>是非null的。</p>

<h3>为什么 Kotlin编译器不能推断出来呢</h3>

<p>可能有人会想，我觉得挺简单的啊，应该可以推断出来吧。</p>

<p>是的，如果仅仅以例子中如此简单的实现，大家都会觉得可以推断出来</p>

<p>但是</p>

<ul>
<li>现实中的实践代码往往会比上面的复杂，比如涉及到多个调用和更加复杂的方法体实现等等</li>
<li>纵使可以做到，编译器也需要花费资源和时间来分析上下文，这其中随着层级加深，资源消耗和编译耗时也会增加。</li>
</ul>


<p>所以，不能推断也是有对应的考虑的。</p>

<h2>契约是什么</h2>

<p>所以我们面临的现实情况是</p>

<ul>
<li>作为开发者，我们了解较多的情况，比如<code>News?.isTitleValid</code>返回true，代表News实例不为null</li>
<li>而编译器，由于上面的原因或者其他原因，不知道足够的信息，无法做到和开发者一样做相同的推断</li>
</ul>


<p>于是，开发者和编译器之间可以建立一个这样的契约</p>

<ul>
<li>开发者将关于方法的额外信息提供给编译器，还是以<code>News?.isTitleValid</code>返回true，代表News实例不为null为例</li>
<li>编译器在编译的时候，发现<code>News?.isTitleValid</code>为true后，按照开发者预期，转换成非空的News实例，让开发者可以直接调用</li>
</ul>


<p>而 Kotlin 从1.3版本引入了Contract(契约)，用来解决我们刚刚提到的问题。</p>

<h2>应用契约</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">isTitleValid</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//contract 开始</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@isTitleValid</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//contract 结束</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">title</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsTitleValid</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">?.</span><span class="n">isTitleValid</span><span class="p">()</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于上面代码的一些简单解释</p>

<ul>
<li>contract 采用DSL方式声明</li>
<li><code>returns(true) implies (this@isTitleValid is News)</code> 代表如果方法返回(returns) true，表明(implies) <code>this@isTitleValid</code> 是News实例，而不是News?的实例，即<code>this@isTitleValid</code>为非null</li>
<li>声明使用Contract的方法和其被调用的方法都需要使用<code>@ExperimentalContracts</code>（后面章节会提到）</li>
</ul>


<h2>其他的契约实现</h2>

<p>上面的契约为<code>returns(true) implies</code>，除此之外，还有</p>

<ul>
<li>returns(false) implies</li>
<li>returns(null) implies</li>
<li>returns implies</li>
<li>returnsNotNull implies</li>
<li>callsInPlace</li>
</ul>


<h3>returns(false) implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">isFake</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@isFake</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="k">this</span><span class="p">.</span><span class="n">publisherId</span> <span class="p">==</span> <span class="m">1980</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsIsFake</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">isFake</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">?.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当方法<code>News?.isFake</code>返回false，则表明<code>this@isFake</code>是<code>News</code>实例，非null</li>
</ul>


<h3>return(null) implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">copy</span><span class="p">():</span> <span class="n">Any</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@copy</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;EMPTY&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsCopy</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">?.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当方法<code>News?.copy</code>返回null时，<code>this@copy</code>是<code>News</code>实例，非null</li>
</ul>


<h3>returns implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">validate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">()</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@validate</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nf">IllegalStateException</span><span class="p">(</span><span class="s">&quot;null instance&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">publisherId</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nf">IllegalStateException</span><span class="p">(</span><span class="s">&quot;publisherId is less than 0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">title</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nf">IllegalStateException</span><span class="p">(</span><span class="s">&quot;title is empty&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsValidate</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">news</span><span class="p">.</span><span class="n">validate</span><span class="p">()</span>
</span><span class='line'>    <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果方法<code>News?.validate()</code>顺利执行完毕，不抛出异常，则<code>this@validate</code>是<code>News</code>实例，非null</li>
</ul>


<h3>returnsNotNull implies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">News</span><span class="p">?.</span><span class="n">getTitleHashCode</span><span class="p">():</span> <span class="n">Int</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returnsNotNull</span><span class="p">()</span> <span class="n">implies</span> <span class="p">(</span><span class="k">this</span><span class="n">@getTitleHashCode</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">?.</span><span class="n">title</span><span class="p">?.</span><span class="n">hashCode</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNewsGetTitleHashCode</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">news</span><span class="p">.</span><span class="n">getTitleHashCode</span><span class="p">()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">?.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果<code>News?.getTitleHashCode()</code>返回为非null，则<code>this@getTitleHashCode</code>是<code>News</code>实例，非null</li>
</ul>


<h2>callsInPlace 原地调用</h2>

<p>callsInPlace(lambda, kind)和之前的契约不同，它让我们有能力告知编译器，lambda在什么时候，什么地方，以及执行次数等信息。</p>

<p>同样，我们继续看这样一段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.androidcontractsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getAppVersion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">appVersion</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">appVersion</span> <span class="p">=</span> <span class="m">50</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//安全运行runFunction,捕获异常</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="nf">safeRun</span><span class="p">(</span><span class="n">runFunction</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">runFunction</span><span class="p">.</span><span class="n">invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们执行编译的时候，会得到这样的错误信息<code>Captured values initialization is forbidden due to possible reassignment</code></p>

<p>因为上面的代码，也存在这里开发者知道一些信息，而编译器不知道的情况</p>

<h3>对于编译器来说</h3>

<ul>
<li>无法确定<code>runFunction</code>实参是否会执行</li>
<li>无法确定<code>runFunction</code>实参是否只执行一次还是多次(val赋值多次会出错)</li>
<li>无法确定<code>runFunction</code>实参执行时，是否getappVersion已经执行完毕</li>
</ul>


<h3>可能的结果</h3>

<ul>
<li><code>runFunction</code>没有执行，<code>appVersion</code>处于未初始化状态</li>
<li><code>runFunction</code>执行多次，<code>appVersion</code>被多次赋值，对于val是禁止的。</li>
</ul>


<h3>改进方案</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">import</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">contracts</span><span class="p">.</span><span class="n">ExperimentalContracts</span>
</span><span class='line'><span class="n">import</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">contracts</span><span class="p">.</span><span class="n">InvocationKind</span>
</span><span class='line'><span class="n">import</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">contracts</span><span class="p">.</span><span class="n">contract</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">getAppVersion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">appVersion</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">appVersion</span> <span class="p">=</span> <span class="m">50</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">safeRun</span><span class="p">(</span><span class="n">runFunction</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//使用EXACTLY_ONCE</span>
</span><span class='line'>        <span class="n">callsInPlace</span><span class="p">(</span><span class="n">runFunction</span><span class="p">,</span> <span class="n">InvocationKind</span><span class="p">.</span><span class="n">EXACTLY_ONCE</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">runFunction</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过契约上面的代码实现了</p>

<ul>
<li><code>safeRun</code>会在<code>getAppVersion</code>执行的过程中执行，不会等到<code>getAppVersion</code>执行完毕后执行</li>
<li><code>safeRun</code>会确保<code>runFunction</code>只会执行一次，不会多次执行</li>
</ul>


<p>注意：官方说使用callsInPlace作用的方法必须inline(A function declaring the callsInPlace effect must be inline.)。但是经过验证不inline也没有问题，只是对应的实现方式不同。</p>

<p>除此之外，上面提到的InvocationKind 有这样几个变量</p>

<ul>
<li>AT_MOST_ONCE 做多调用一次</li>
<li>EXACTLY_ONCE 只调用一次</li>
<li>AT_LEAST_ONCE 最少执行一次</li>
<li>UNKNOWN (the default). 未知，默认值</li>
</ul>


<h2>应用Contract的问题</h2>

<p>由于目前Contract还处于实验阶段，需要使用相关的注解来表明开发者明确这一特性（以后可能修改，并自愿承担相应的变动和后果）。</p>

<p>目前我们可以使用<code>UseExperimental</code>和<code>ExperimentalContracts</code>两种注解，以下为具体的使用示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@UseExperimental</span><span class="p">(</span><span class="n">ExperimentalContracts</span><span class="p">::</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">?.</span><span class="n">isOK</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span><span class="p">(</span><span class="k">this</span><span class="n">@isOK</span> <span class="k">is</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">?.</span><span class="n">isGood</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span><span class="p">(</span><span class="k">this</span><span class="n">@isGood</span> <span class="k">is</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>非 Android项目</h3>

<p>对于非 Android项目，会有另外一个非注解的方式，那就是为模块增加编译选项。如下图。
<img src="https://asset.droidyue.com/image/2019_07/kotlin_contract_compiler_option.png" alt="https://asset.droidyue.com/image/2019_07/kotlin_contract_compiler_option.png" /></p>

<p>当然，你也可以在模块的配置文件，增加<code>-Xuse-experimental=kotlin.contracts.ExperimentalContracts</code>到<code>compilerSettings</code>的<code>additionalArguments</code>中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">module</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;JAVA_MODULE&quot;</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;4&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">component</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;FacetManager&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">facet</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;kotlin-language&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Kotlin&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">configuration</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;3&quot;</span> <span class="n">platform</span><span class="o">=</span><span class="s">&quot;JVM 1.8&quot;</span> <span class="n">useProjectSettings</span><span class="o">=</span><span class="s">&quot;false&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">compilerSettings</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;additionalArguments&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;-version -Xuse-experimental=kotlin.contracts.ExperimentalContracts&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">compilerSettings</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">compilerArguments</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;jvmTarget&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;1.8&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;languageVersion&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;1.3&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">option</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;apiVersion&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;1.3&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">compilerArguments</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">configuration</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">facet</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">component</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">component</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;NewModuleRootManager&quot;</span> <span class="n">inherit</span><span class="o">-</span><span class="n">compiler</span><span class="o">-</span><span class="n">output</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">exclude</span><span class="o">-</span><span class="n">output</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">url</span><span class="o">=</span><span class="s">&quot;file://$MODULE_DIR$&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">sourceFolder</span> <span class="n">url</span><span class="o">=</span><span class="s">&quot;file://$MODULE_DIR$/src&quot;</span> <span class="n">isTestSource</span><span class="o">=</span><span class="s">&quot;false&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">orderEntry</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;inheritedJdk&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">orderEntry</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;sourceFolder&quot;</span> <span class="n">forTests</span><span class="o">=</span><span class="s">&quot;false&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">orderEntry</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;library&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;KotlinJavaRuntime&quot;</span> <span class="n">level</span><span class="o">=</span><span class="s">&quot;project&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">component</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">module</span>
</span></code></pre></td></tr></table></div></figure>


<h2>当方法行为与契约不符</h2>

<ul>
<li>这种情况是可能且容易出现的，因为Contract并没有校验机制处理。</li>
<li>当这种情况出现，就意味着我们向编译器提供了虚假的辅助信息</li>
<li>一旦问题出现，对应的结果结果就是导致应用运行时崩溃。</li>
</ul>


<p>比如下面的例子，我们的方法与契约不符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">validateByMistake</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">contract</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">returns</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="n">implies</span> <span class="p">(</span><span class="n">news</span> <span class="k">is</span> <span class="n">News</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@ExperimentalContracts</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testValidateByMistake</span><span class="p">(</span><span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">validateByMistake</span><span class="p">(</span><span class="n">news</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">news</span><span class="p">.</span><span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然随之而来的就是运行时的崩溃</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java.lang.NullPointerException: Attempt to invoke virtual method <span class="s1">&#39;java.lang.String com.example.androidcontractsample.News.getTitle()&#39;</span> on a null object reference
</span><span class='line'> at com.example.androidcontractsample.NewsKt.testValidateByMistake<span class="o">(</span>News.kt:91<span class="o">)</span>
</span><span class='line'> at com.example.androidcontractsample.MainActivity.onCreate<span class="o">(</span>MainActivity.kt:13<span class="o">)</span>
</span><span class='line'> at android.app.Activity.performCreate<span class="o">(</span>Activity.java:7698<span class="o">)</span>
</span><span class='line'> at android.app.Activity.performCreate<span class="o">(</span>Activity.java:7687<span class="o">)</span>
</span><span class='line'> at android.app.Instrumentation.callActivityOnCreate<span class="o">(</span>Instrumentation.java:1299<span class="o">)</span>
</span><span class='line'> at android.app.ActivityThread.performLaunchActivity<span class="o">(</span>ActivityThread.java:3096<span class="o">)</span>
</span><span class='line'> ... 11 more
</span></code></pre></td></tr></table></div></figure>


<p>所以作为开发者，我们需要小心谨慎避免犯这种错误。</p>

<h2>注意事项</h2>

<ul>
<li>Contract 自1.3才引入，而且是实验性的功能,未来的实现方式可能会有变动</li>
<li>Contract 目前只适用于top-level的方法，否则将会编译失败</li>
</ul>


<h2>Contract 如今还是实验功能，用还是不用</h2>

<ul>
<li>是的，正如前面提到的Contract属于实验阶段，后期的规划，可能是作为正式功能引入还是变更实施方案，还是相对未知的。</li>
<li>但是仅以个人的观点来看，还是推荐使用的。因为我觉得有些技术不需要等到稳定或者正式阶段就可以应用。</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://www.kotlindevelopment.com/help-yourself-and-the-compiler-with-contracts/">https://www.kotlindevelopment.com/help-yourself-and-the-compiler-with-contracts/</a></li>
<li><a href="https://ncorti.com/blog/discovering-kotlin-contracts">https://ncorti.com/blog/discovering-kotlin-contracts</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单几招提速 Kotlin kapt编译]]></title>
    <link href="https://droidyue.com/blog/2019/08/18/faster-kapt/"/>
    <updated>2019-08-18T10:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/18/faster-kapt</id>
    <content type="html"><![CDATA[<p>应用Kotlin之后，涉及到注解的注解处理器依赖也会由<code>annotationProcessor</code>替换成<code>kapt</code>，和最初应用Kotlin一样，总会让人一种感觉，一番应用Kotlin和Kapt之后，编译耗时更长了，不过好在Kotlin和Google 在这一方面做了很多的优化和改进，本文将简单介绍一些配置，来实现项目编译关于kapt这方面的加速。</p>

<!--more-->


<h2>开启Gradle 构建缓存支持(Gradle build cache support)</h2>

<p>默认情况下，kapt注解处理任务并没有利用开启gradle的构建缓存，需要我们手动增加配置开启</p>

<p>开启方式：在项目的app module下的 build.gradle 文件增加如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kapt</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">useBuildCache</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意：</p>

<ul>
<li><code>kapt</code>配置和<code>android</code>配置同一层级。</li>
<li>该特性支持从Kotlin 1.2.20开始。</li>
<li>上述配置生效需Gradle为4.3及以上，且开启build-cache。（增加&mdash;build-cache 选项或在gradle.properties文件添加<code>org.gradle.caching=true</code>）</li>
</ul>


<h2>并行执行kapt任务</h2>

<p>为了加快构建速度，我们可以利用<code>Gradle worker API</code>实现并行执行kapt任务。</p>

<p>开启方式，在<code>gradle.properties</code>文件中增加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kapt.use.worker.api<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：</p>

<ul>
<li><code>Gradle worker API</code>需依赖<code>Gradle</code>4.10.3及以上。</li>
<li>该特性支持自Kotlin 1.2.60</li>
<li>启用并行执行，会引发更高的内存占用</li>
</ul>


<h2>启用kapt编译规避</h2>

<p>除此之外，我们可以利用<code>Gradle compile avoidance</code>（编译规避）来避免执行注解处理。</p>

<p>注解处理被略过的场景有</p>

<ul>
<li>项目的源文件没有改变</li>
<li>依赖的改变是ABI(Application Binary Interface)兼容的，比如仅仅修改某个方法的方法体。</li>
</ul>


<p>开启方式：</p>

<ul>
<li>对于注解依赖需要使用<code>kapt</code>显式声明</li>
<li>在<code>gradle.properties</code>文件中增加<code>kapt.include.compile.classpath=false</code></li>
</ul>


<p>注意：</p>

<ul>
<li>该特性需 Kotlin 1.3.20 及以上</li>
</ul>


<h2>增量注解处理</h2>

<p>Kotlin 自1.3.30引入了一个实验功能，即支持注解增量处理。</p>

<p>开启需要很简单，在<code>gradle.properties</code>中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kapt.incremental.apt<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是还需要有一个前提，就是开启Gradle的增量编译（Kotlin 1.1.1已默认开启）。</p>

<p>除此之外，关键的因素还是需要开依赖的注解处理器是否支持增量处理。</p>

<h3>如何查看注解处理器是否支持增量编译</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew aDeb -Pkapt.verbose<span class="o">=</span><span class="nb">true</span> | grep KAPT
</span><span class='line'>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Incremental KAPT support is disabled. Processors that are not incremental:
</span><span class='line'>  com.bumptech.glide.annotation.compiler.GlideAnnotationProcessor,
</span><span class='line'>  dagger.internal.codegen.ComponentProcessor,
</span><span class='line'>  android.arch.lifecycle.LifecycleProcessor.
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Incremental KAPT support is disabled. Processors that are not incremental:
</span><span class='line'>  butterknife.compiler.ButterKnifeProcessor,
</span><span class='line'>  com.alibaba.android.arouter.compiler.processor.AutowiredProcessor,
</span><span class='line'>  com.alibaba.android.arouter.compiler.processor.InterceptorProcessor,
</span><span class='line'>  com.alibaba.android.arouter.compiler.processor.RouteProcessor,
</span><span class='line'>  dagger.internal.codegen.ComponentProcessor,
</span><span class='line'>  com.google.auto.service.processor.AutoServiceProcessor.
</span></code></pre></td></tr></table></div></figure>


<h3>更新依赖至最新版</h3>

<p>上面我们看到了<code>glide</code>,<code>butterknife</code>等依赖，我们都可以通过将这些依赖更新到最新版来解决</p>

<ul>
<li>Glide在v4.9.0版本增加了增量处理支持，对应的github commit为 <a href="https://github.com/bumptech/glide/commit/a16a1baa140c9b87b9a68a2a3b91047fd60ba5d8">https://github.com/bumptech/glide/commit/a16a1baa140c9b87b9a68a2a3b91047fd60ba5d8</a></li>
<li>google/auto 也在较早的时候进行了支持，对应的github commit为 <a href="https://github.com/google/auto/commit/a5673d06f687e1354f1f069cce36136538cf532c">https://github.com/google/auto/commit/a5673d06f687e1354f1f069cce36136538cf532c</a></li>
</ul>


<h3>更新加手动配置</h3>

<p>以Dagger为例，除了更新到最新版之外，还需要增加如下的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">javaCompileOptions</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">annotationProcessorOptions</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">arguments</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="s">&quot;dagger.gradle.incremental&quot;</span><span class="o">:</span> <span class="s">&quot;true&quot;</span><span class="o">]</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考链接<a href="https://github.com/google/dagger/issues/1120">https://github.com/google/dagger/issues/1120</a></p>

<h2>Troubleshooting</h2>

<ul>
<li>如果启用上面的方案导致问题，可以找到对应的配置，关闭该特性。</li>
</ul>


<h2>最后的建议</h2>

<ul>
<li>积极保持依赖为最新(稳定)版，否则时间越长升级成本越大。</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/reference/kapt.html">https://kotlinlang.org/docs/reference/kapt.html</a></li>
<li><a href="https://medium.com/avast-engineering/making-incremental-kapt-work-speed-up-your-kotlin-projects-539db1a771cf">https://medium.com/avast-engineering/making-incremental-kapt-work-speed-up-your-kotlin-projects-539db1a771cf</a></li>
</ul>


<h2>相关内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
<li><a href="https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation/">关于应用Kotlin后的编译速度问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin编译与Intrinsics检查]]></title>
    <link href="https://droidyue.com/blog/2019/08/11/kotlin-compiler-intrinsics/"/>
    <updated>2019-08-11T20:31:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/11/kotlin-compiler-intrinsics</id>
    <content type="html"><![CDATA[<p>在很早的时候，小黑屋就介绍过如何研究Kotlin，其中涉及到了查看字节码和反编译成Java代码的方式，相信很多人研究过的人，都会或多或少遇到过<code>Intrinsics.checkParameterIsNotNull</code>这样或者类似的代码。</p>

<!--more-->


<p>首先，我们先看一下这段简单的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">dumpStringMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;dumpStringMessage=$message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照我们之前的方法，反编译成Java代码就是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">dumpStringMessage</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="s">&quot;message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var1</span> <span class="o">=</span> <span class="s">&quot;dumpStringMessage=&quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译后，我们可以看到代码中有这样的一行代码<code>Intrinsics.checkParameterIsNotNull(message, "message");</code></p>

<h2>Intrinsics 是什么</h2>

<ul>
<li>Intrinsics是Kotlin内部的一个类</li>
<li>包含了检查参数是否为null的<code>checkParameterIsNotNull</code></li>
<li>包含了表达式结果是否为null的<code>checkExpressionValueIsNotNull</code></li>
<li>包含了检测lateinit是否初始化的<code>throwUninitializedPropertyAccessException</code></li>
<li>包含了开发者强制非空!!出现空指针时抛出<code>throwNpe</code>的方法</li>
<li>判断对象相等的方法<code>areEqual</code></li>
<li>其他的一些处理数据异常的方法和辅助方法</li>
</ul>


<p>所以上面代码中的<code>Intrinsics.checkParameterIsNotNull(message, "message");</code>是为了检测参数message是否为null进行的判断。</p>

<h2>为什么会有Intrinsics等判断代码呢</h2>

<p>不是说 Kotlin 是空指针安全，有可空(Any?)和不可空(Any)的类型么，我上面的代码声明的是<code>message: String</code>又不是<code>message: String?</code>,为什么还要多此一举呢？</p>

<p>是的，你的这句话基本上没有毛病，但是有一个前提，那就是空指针和两种类型的特性，目前只在纯kotlin中生效，一旦涉及到和Java交互时，就不灵了。</p>

<p>比如我们在Java代码中这样调用，不会产生任何编译的问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">StringExtKt</span><span class="o">.</span><span class="na">dumpStringMessage</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是当我们运行时，就会报出这样的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Exception in thread <span class="s2">&quot;main&quot;</span> java.lang.IllegalArgumentException: Parameter specified as non-null is null: method StringExtKt.dumpStringMessage, parameter message
</span><span class='line'>  at StringExtKt.dumpStringMessage<span class="o">(</span>StringExt.kt<span class="o">)</span>
</span><span class='line'>  at JavaTest.test<span class="o">(</span>JavaTest.java:5<span class="o">)</span>
</span><span class='line'>  at MainKt.main<span class="o">(</span>Main.kt:3<span class="o">)</span>
</span><span class='line'>  at MainKt.main<span class="o">(</span>Main.kt<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Process finished with <span class="nb">exit </span>code 1
</span></code></pre></td></tr></table></div></figure>


<p>所以考虑到方法被Java调用的情况，Kotlin会默认的增加<code>checkParameterIsNotNull</code>校验。</p>

<h2>Intrinsics.checkParameterIsNotNull 一直都有么？</h2>

<p>不过好在Kotlin编译器还是足够聪明的，对于不能被Java直接调用的方法，就不会增加相关处理。</p>

<p>比如标记为private的方法，通常情况下，不会被java调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">innerDumpStringMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;innerDumpStringMessage=$message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译成的如下代码，就没有<code>Intrinsics.checkParameterIsNotNull</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">innerDumpStringMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var1</span> <span class="o">=</span> <span class="s">&quot;innerDumpStringMessage=&quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var1</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Intrinsics.checkParameterIsNotNull 的好处</h2>

<h3>定位排查问题快捷</h3>

<p>上面代码的好处之一就是对于代码混淆之后，可以相对更加方便的定位问题。</p>

<p>比如这段代码，经过混淆之后，运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaMethod</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">callKotlin</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">KotlinCodeKt</span><span class="o">.</span><span class="na">dumpMessage</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到如下的崩溃日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">RuntimeException</span><span class="o">:</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">start</span> <span class="n">activity</span> <span class="n">ComponentInfo</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">}:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalArgumentException</span><span class="o">:</span> <span class="n">Parameter</span> <span class="n">specified</span> <span class="n">as</span> <span class="n">non</span><span class="o">-</span><span class="kc">null</span> <span class="n">is</span> <span class="kc">null</span><span class="o">:</span> <span class="n">method</span> <span class="n">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">parameter</span> <span class="n">message</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2927</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">handleLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2988</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.-</span><span class="n">wrap14</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="n">$H</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1631</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">154</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6682</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1520</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1410</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalArgumentException</span><span class="o">:</span> <span class="n">Parameter</span> <span class="n">specified</span> <span class="n">as</span> <span class="n">non</span><span class="o">-</span><span class="kc">null</span> <span class="n">is</span> <span class="kc">null</span><span class="o">:</span> <span class="n">method</span> <span class="n">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">parameter</span> <span class="n">message</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">intrinsicsmattersandroidsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6942</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1126</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2880</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>     <span class="o">...</span> <span class="mi">9</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们可以清晰的看到出问题的参数名称，定位出问题的位置。</p>

<h2>其他好处</h2>

<ul>
<li>对于先决条件（参数和状态）提前判断可以避免很多不必要的资源消耗。</li>
<li>避免不必要的状态产生</li>
</ul>


<h2>Intrinsics的问题</h2>

<p>刚才我们提到了Intrinsics可以辅助混淆情况下定位排查问题，但是同时也带来了一个问题，那就是</p>

<ul>
<li>为混淆之后逆向工程提供了更多的帮助。</li>
</ul>


<p>除此之外，还有人担心Intrinsics是不是存在这样的问题</p>

<ul>
<li>Intrinsics调用和返回带来进栈出栈操作，而Intrinsics为java实现，无法在编译时inline，会不会有性能问题</li>
</ul>


<p>对于性能的担忧可以说是有些过于杞人忧天了，不过还在好在Kotlin提供了方法来消除这种不必要的过虑。当然也能解决逆向混淆的问题。</p>

<h2>编译时去除Intrinsics检查</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">Xno</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">assertions</span>      <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">generate</span> <span class="n">not</span><span class="o">-</span><span class="kc">null</span> <span class="n">assertions</span> <span class="n">on</span> <span class="n">parameters</span> <span class="n">of</span> <span class="n">methods</span> <span class="n">accessible</span> <span class="n">from</span> <span class="n">Java</span>
</span><span class='line'><span class="o">-</span><span class="n">Xno</span><span class="o">-</span><span class="n">receiver</span><span class="o">-</span><span class="n">assertions</span>   <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">generate</span> <span class="n">not</span><span class="o">-</span><span class="kc">null</span> <span class="n">assertion</span> <span class="k">for</span> <span class="n">extension</span> <span class="n">receiver</span> <span class="n">arguments</span> <span class="n">of</span> <span class="n">platform</span> <span class="n">types</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体的实施方法，可以参考另一篇文章<a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">为 Kotlin 项目设置编译选项</a></p>

<h2>其他Intrinsics出现的场景</h2>

<h3>checkExpressionValueIsNotNull</h3>

<p>当Kotlin 调用 Java 获取表达式结果后需要进行操作时，会增加<code>Intrinsics.checkExpressionValueIsNotNull</code>校验</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Intrinsics.checkExpressionValueIsNotNull(var10000, &quot;JavaUtil.getBook()&quot;);</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">test1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">book</span><span class="p">:</span> <span class="n">Book</span> <span class="p">=</span> <span class="n">JavaUtil</span><span class="p">.</span><span class="n">getBook</span><span class="p">()</span>
</span><span class='line'>    <span class="n">book</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Intrinsics.throwNpe</h3>

<p>当使用<code>!!</code>非空断言时，会有校验非空断言结果的检查，如果有问题，则抛出NPE.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * if (message == null) {</span>
</span><span class='line'><span class="cm">       Intrinsics.throwNpe();</span>
</span><span class='line'><span class="cm">   }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">test2</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">message</span><span class="p">!!.</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>throwUninitializedPropertyAccessException</h3>

<p>当尝试访问一个lateinit的属性时，会增加是否初始化的判断，如果有问题，会抛出异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Movie</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="c1">//Intrinsics.throwUninitializedPropertyAccessException(&quot;name&quot;);</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dump</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是关于Kotlin编译与 Intrinsics 检查的内容。Enjoy.</p>

<h2>相关文章推荐阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">为 Kotlin 项目设置编译选项</a></li>
<li><a href="https://droidyue.com/blog/2019/07/14/search-bytecode-script-to-study-kotlin-better/">一个查找字节码更好研究Kotlin的脚本</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">其他Kotlin优质文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin编译调校之WarningsAsErrors]]></title>
    <link href="https://droidyue.com/blog/2019/08/03/kotlinc-config-warnings-as-errors/"/>
    <updated>2019-08-03T14:21:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/08/03/kotlinc-config-warnings-as-errors</id>
    <content type="html"><![CDATA[<p>这之前的文章中，我们介绍过如果通过Kotlin编译器参数实现将所有的warnings按照errors对待，主要的实现方法是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>//Code to be added
</span><span class='line'>kotlinOptions <span class="o">{</span>
</span><span class='line'>    <span class="nv">allWarningsAsErrors</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>那么问题可能就会被提出来，开启这一选项有什么好处呢，毕竟我需要修改很多文件。</p>

<p>通常情况下，开启后的作用，我们可以归纳为如下</p>

<ul>
<li>发现更多的潜在问题和崩溃</li>
<li>减少不必要的代码（变量，参数）</li>
<li>发现不好的编码实践</li>
<li>发现更多的API弃用问题</li>
<li>最终增加代码的健壮性和优雅程度</li>
</ul>


<p>如下，我们会通过一些实践来说明一些问题</p>

<h2>Nothing to Inline（作用不大的内联）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;NOTHING_TO_INLINE&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="n">String</span><span class="p">?.</span><span class="n">isNotNullNorEmpty</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Expected performance impact of inlining </span>
</span><span class='line'>    <span class="c1">// &#39;public inline fun String?.isNotNullNorEmpty(): Boolean </span>
</span><span class='line'>    <span class="c1">// defined in com.example.warningsaserrorscases in file NothingToInlineWarnings.kt&#39;</span>
</span><span class='line'>    <span class="c1">// is insignificant. </span>
</span><span class='line'>    <span class="c1">// Inlining works best for functions with parameters of functional types</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Kotlin的inline关键字会将对应的方法内联到调用者的方法体，减少进栈出栈操作</li>
<li>inline最好的场景是处理函数类型参数，比如lambda</li>
<li>刻意的inline可能导致方法体膨胀，增大class文件大小。</li>
<li>处理这种警告，建议是去除inline关键字</li>
<li>如果执意inline时，使用<code>@Suppress("NOTHING_TO_INLINE")</code>压制编译器警告</li>
</ul>


<h2>INACCESSIBLE_TYPE(不可访问的类型)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">RequestManager</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RequestManager</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TimelineRequest</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="n">from</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TimelineRequest</span> <span class="nf">getTimelineRequest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">TimelineRequest</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testInaccessibleType</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Type RequestManager.TimelineRequest! is inaccessible in this context</span>
</span><span class='line'>    <span class="c1">// due to: private open class TimelineRequest defined</span>
</span><span class='line'>    <span class="c1">// in com.example.warningsaserrorscases.RequestManager</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;INACCESSIBLE_TYPE&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">RequestManager</span><span class="p">.</span><span class="n">sInstance</span><span class="p">.</span><span class="n">timelineRequest</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上述的<code>testInaccessibleType</code>无法访问<code>TimelineRequest</code>的属性和方法</li>
<li>具体的解决办法，可以是设置<code>TimelineRequest</code>为public，而非private</li>
<li>必要时可以使用<code>@Suppress("INACCESSIBLE_TYPE")</code>压制警告</li>
</ul>


<h2>UNCHECKED_CAST(未检查的类型转换)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Unchecked cast: Any to T</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNCHECKED_CAST&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面<code>this as? T</code>属于未检查的类型转换，可能在运行时抛出转换异常</li>
<li>不推荐使用<code>@Suppress("UNCHECKED_CAST")</code>压制警告</li>
<li>推荐使用reified方式处理</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//a better way</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>WHEN_ENUM_CAN_BE_NULL_IN_JAVA(Enum 可能为null)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testEnum1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Enum argument can be null in Java, but exhaustive when contains no null branch</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">SeasonUtil</span><span class="p">.</span><span class="n">getCurrentSeason</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SPRING</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Spring&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SUMMER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Summer&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">FALL</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Fall&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">WINTER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Winter&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">//else -&gt; println(&quot;unknown&quot;)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testEnum2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Enum argument can be null in Java, but exhaustive when contains no null branch</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;WHEN_ENUM_CAN_BE_NULL_IN_JAVA&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">SeasonUtil</span><span class="p">.</span><span class="n">getCurrentSeason</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SPRING</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Spring&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">SUMMER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Summer&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">FALL</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Fall&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Season</span><span class="p">.</span><span class="n">WINTER</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Winter&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上述的<code>SeasonUtil.getCurrentSeason()</code>可能为null</li>
<li>建议增加<code>else -&gt; println("unknown")</code>处理when的缺省情况</li>
<li>不建议使用<code>@Suppress("WHEN_ENUM_CAN_BE_NULL_IN_JAVA")</code>压制警告</li>
</ul>


<h2>PARAMETER_NAME_CHANGED_ON_OVERRIDE(方法重写修改参数名)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">interface</span> <span class="n">OnViewClickedListener</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onViewClicked</span><span class="p">(</span><span class="n">viewId</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testParameterNameChangedOnOverride</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The corresponding parameter in the supertype &#39;OnViewClickedListener&#39;</span>
</span><span class='line'>    <span class="c1">// is named &#39;viewId&#39;.</span>
</span><span class='line'>    <span class="c1">// This may cause problems when calling this function with named arguments.</span>
</span><span class='line'>    <span class="n">object</span> <span class="p">:</span> <span class="n">OnViewClickedListener</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onViewClicked</span><span class="p">(</span><span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;PARAMETER_NAME_CHANGED_ON_OVERRIDE&quot;</span><span class="p">)</span> <span class="n">id</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;onViewClicked id=$id&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>出问题的情况是当我们使用具名变量指定参数值时，可能出问题。</li>
<li>建议方法参数与源方法保持一致。</li>
<li>不建议压制警告</li>
</ul>


<h2>Name shadowing（命名遮挡）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testNameShadowing</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">run</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Name shadowed: message</span>
</span><span class='line'>        <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;NAME_SHADOWING&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当run方法后面的lambda中的message与<code>testNameShadowing</code>的message命名一致时，就发生了所谓的Name shadowing（命名遮挡）</li>
<li>Name shadowing很容易导致问题，且排查起来不易察觉。</li>
<li>建议主动通过命名差异来解决这个问题</li>
<li>不建议压制警告</li>
</ul>


<h2>Uncessary cases (不必要的编码场景)</h2>

<h3>UNNECESSARY_SAFE_CALL(不必要的安全调用)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUnnecessarySafeCall</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNNECESSARY_SAFE_CALL&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">?.</span><span class="n">toIntOrNull</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上述的安全调用其实是显得多余，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>另外安全调用会增加if条件检查</li>
<li>建议主动移不必要的安全调用</li>
<li>不建议压制警告</li>
</ul>


<h3>SENSELESS_COMPARISON(无意义的比较)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testSenselessComparison</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Condition &#39;message != null&#39; is always &#39;true&#39;</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;SENSELESS_COMPARISON&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">message</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>和前面的例子一样，这种检查是多余的，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>建议主动移除无意义的比较</li>
<li>不建议压制警告</li>
</ul>


<h3>UNNECESSARY_NOT_NULL_ASSERTION（不需要的非空断言）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUncessaryNotNullAssertion</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Unnecessary non-null assertion (!!) on a non-null receiver</span>
</span><span class='line'>    <span class="c1">// of type String</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNNECESSARY_NOT_NULL_ASSERTION&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">!!.</span><span class="n">toIntOrNull</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这种断言是多余的，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>建议主动移除不需要的非空断言</li>
<li>不建议压制警告</li>
</ul>


<h3>USELESS_IS_CHECK(没有用的实例类型检查)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUselessIsCheck</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Check for instance is always &#39;true&#39;</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;USELESS_IS_CHECK&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">message</span> <span class="k">is</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>没有意义的类型检查，因为Kotlin内部会有<code>Intrinsics</code>做参数非空的与判断</li>
<li>建议主动移除不必要的检查</li>
<li>不建议压制警告</li>
</ul>


<h3>VARIABLE_WITH_REDUNDANT_INITIALIZER(变量初始化多余)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testVariableWithRedundantInitializer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Variable &#39;message&#39; initializer is redundant</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;VARIABLE_WITH_REDUNDANT_INITIALIZER&quot;</span><span class="p">)</span> <span class="k">var</span> <span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">message</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">().</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>建议手动移除多余的初始化</li>
<li>不建议压制警告</li>
</ul>


<h2>Deprecation (方法弃用)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testGetDrawable</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;DEPRECATION&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">resources</span><span class="p">.</span><span class="n">getDrawable</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">mipmap</span><span class="p">.</span><span class="n">ic_launcher</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>建议的方法是寻找替代弃用方法的其他方法，以getDrawable为例，我们可以使用</p>

<ul>
<li><code>ContextCompat.getDrawable(getActivity(), R.drawable.name);</code></li>
<li><code>ResourcesCompat.getDrawable(getResources(), R.drawable.name, null);</code></li>
<li><code>ResourcesCompat.getDrawable(getResources(), R.drawable.name, anotherTheme);</code></li>
<li>必要时可以选择压制警告</li>
</ul>


<h2>unsued cases(开发者编码没有用到的情况)</h2>

<h3>Parameter &lsquo;extra&rsquo; is never used(参数没有使用)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">showMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">extra</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决方法</p>

<ul>
<li>移除extra参数</li>
<li>方法中使用extra参数</li>
<li>使用<code>@Suppress("UNUSED_PARAMETER")</code>压制警告</li>
</ul>


<h3>Parameter &lsquo;index&rsquo; is never used, could be renamed to _（匿名参数没有使用，可以使用占位符）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">forEachList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">).</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">s</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将<code>index</code>改成占位符<code>_</code></li>
<li>使用<code>@Suppress("UNUSED_ANONYMOUS_PARAMETER")</code>压制警告</li>
</ul>


<h2>Variable &lsquo;currentTimeStamp&rsquo; is never used(变量未使用)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">unusedVariable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNUSED_VARIABLE&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="n">currentTimeStamp</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;unusedVariable&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除变量</li>
<li>使用@Suppress压制警告</li>
</ul>


<h2>The expression is unused(表达式未使用)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">test</span><span class="p">(</span><span class="n">status</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span> <span class="p">-&gt;</span> <span class="s">&quot;First&quot;</span>
</span><span class='line'>        <span class="m">2</span> <span class="p">-&gt;</span> <span class="s">&quot;Second&quot;</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">&quot;Else&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除不用的表达式</li>
<li>使用<code>Suppress</code>压制警告</li>
</ul>


<h2>UNUSED_VALUE &amp;&amp; ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE (未使用的值，赋值后未使用的变量)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testUnusedValue</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The value &#39;&quot;Hello&quot;&#39; assigned to &#39;var message: String?</span>
</span><span class='line'>    <span class="c1">// defined in com.example.warningsaserrorscases.test&#39; is never used</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE&quot;</span><span class="p">)</span> <span class="k">var</span> <span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="n">@Suppress</span><span class="p">(</span><span class="s">&quot;UNUSED_VALUE&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除不用变量</li>
<li>使用<code>Suppress</code>压制警告</li>
</ul>


<h2>关于@Suppress</h2>

<ul>
<li>不建议滥用，因优先考虑其他的更好的解决问题的方式</li>
<li>及时使用一定要限定最小作用范围，通常的选择范围尽量限制在变量(variable)，参数(parameter)或者语句(statement)上。</li>
<li>上面代码中出现了很多<code>@Suppress</code>主要目的是显示警告的名称，而不是提倡大家使用压制的方式处理警告。</li>
</ul>


<p>以上。</p>

<h2>相关文章</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/">为 Kotlin 项目设置编译选项</a></li>
<li><a href="https://droidyue.com/blog/2019/07/28/kotlin-reified-generics/">使用Kotlin Reified 让泛型更简单安全</a></li>
<li><a href="https://droidyue.com/blog/categories/kotlin/">更多Kotlin优质内容</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Kotlin reified 让泛型更简单安全]]></title>
    <link href="https://droidyue.com/blog/2019/07/28/kotlin-reified-generics/"/>
    <updated>2019-07-28T18:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/28/kotlin-reified-generics</id>
    <content type="html"><![CDATA[<p>我们在编程中，出于复用和高效的目的，我们使用到了泛型。但是泛型在JVM底层采取了类型擦除的实现机制，Kotlin也是这样。然后这也带来了一些问题和对应的解决方案。这里我们介绍一个reified用法，来实现更好的处理泛型。</p>

<!--more-->


<h2>类型擦除</h2>

<p>如下面的代码，在编译成class文件后，就采用了类型擦除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTypeErasure</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>list实例真实的保存是多个<code>Object</code></li>
<li><code>list.add("123")</code>实际上是<code>"123"</code>作为<code>Object</code>存入集合中</li>
<li><code>System.out.println(list.get(0));</code>是从<code>list</code>实例中读取出来<code>Object</code>然后转换成<code>String</code>才能使用的</li>
</ul>


<p>辅助证明的字节码内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestTypeErasure.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTypeErasure</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//省略部分代码</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Field list:Ljava/util/List;</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// String 123</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">6</span><span class="o">,</span>  <span class="mi">2</span>            <span class="c1">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Field list:Ljava/util/List;</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">8</span><span class="o">,</span>  <span class="mi">2</span>            <span class="c1">// InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span>
</span><span class='line'>      <span class="mi">25</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// class java/lang/String</span>
</span><span class='line'>      <span class="mi">28</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中</p>

<ul>
<li>第6行对应的<code>6: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</code> 对应添加元素参数的类型为<code>Object</code></li>
<li>第20行对应的<code>20: invokeinterface #8,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</code> 对应的获取元素的返回类型为<code>Object</code></li>
<li>第25行为进行类型转换操作</li>
</ul>


<h2>类型擦除带来的问题</h2>

<h3>安全问题:未检查的异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//unchecked cast</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Int</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的代码会导致编译器警告<code>unchecked cast</code></li>
<li>上面的代码由于在转换类型时，没有进行检查，所以有可能会导致运行时崩溃</li>
</ul>


<p>当我们执行这样的代码时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testCast</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="m">1.</span><span class="n">toType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>会得到<code>java.lang.Integer cannot be cast to java.lang.String</code>的类型错误。</p>

<h3>显式传递Class</h3>

<p>针对前面的问题，我们最常用的办法就是显式传递class信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//need pass class explicitly</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">(</span><span class="n">clazz</span><span class="p">:</span> <span class="n">Class</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;):</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="n">clazz</span><span class="p">.</span><span class="n">isInstance</span><span class="p">(</span><span class="k">this</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是显式传递Class信息也会感觉有一些问题，尤其是下面这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">clazz</span><span class="p">:</span> <span class="n">Class</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Long</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Long</span><span class="p">)</span>
</span><span class='line'>        <span class="n">String</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Char</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Char</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Int</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的代码（传value值和clazz）我们会感觉到明显的有一些笨拙，不够智能。</li>
<li>但是这也是基于Java的类型擦除机制导致无法再运行时得到<code>T</code>的类型信息，无法改进（至少在Java中）</li>
</ul>


<h3>可能导致更多方法的产生</h3>

<p>同时，由于上面的显式传递Class信息比较麻烦和崩溃，我们有时候会增加更多的方法，比如下面的这样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Bundle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Bundle.putInt key=$key;value=$value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Long</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putString</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的<code>putInt</code>,<code>putLong</code>,<code>putString</code>和<code>putChar</code>没有泛型引入</li>
<li>我们没有排除显式传递Class参数之外的优雅实现，比如我们只提供一个叫做<code>put(key: String,value: T)</code></li>
</ul>


<h2>reified 方式</h2>

<p>不过，好在Kotlin有一个对应的解决方案，这就是我们今天文章标题提到的reified（中文意思：具体化）</p>

<p>使用reified很简单，主要分为两步</p>

<ul>
<li>在泛型类型前面增加<code>reified</code></li>
<li>在方法前面增加<code>inline</code>（必需的）</li>
</ul>


<p>接下来我们使用reified改进之前的方法</p>

<h3>类型转换改进后的代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//much better way using reified</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">asType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法传参不需要多余传递参数类型信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Long</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">String</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Char</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Int</span><span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>reified实现原理</h2>

<p>不是说，泛型是使用了类型擦除么，为什么运行时能得到<code>T</code>的类型信息呢？</p>

<p>是的，采用类型擦除没有错，至于能在运行时得到<code>T</code>的类型信息是如何做到的，就需要了解<code>reified</code>的内部机制了。</p>

<p>其原理为</p>

<ul>
<li>Kotlin编译器会将reified方法<code>asType</code>内联(inline)到调用的地方(call-site)</li>
<li>方法被内联到调用的地方后，泛型T会被替换成具体的类型</li>
</ul>


<p>所以 <strong>reified 使得泛型的方法假装在运行时能够获取泛型的类信息</strong></p>

<p>为了便于理解，我们举个例子，如下是我们的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testCast2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="m">1.</span><span class="n">asType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的反编译后的java代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testCast2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">$this$asType$iv</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$asType</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var10000</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)(</span><span class="n">$this$asType$iv</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">?</span> <span class="n">$this$asType$iv</span> <span class="o">:</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var3</span><span class="o">;</span>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 后续的代码对应的Kotlin代码(也包含了部分call-site的逻辑，比如substring)</span>
</span><span class='line'><span class="cm">   return if (this is T) {</span>
</span><span class='line'><span class="cm">        this</span>
</span><span class='line'><span class="cm">      } else {</span>
</span><span class='line'><span class="cm">        null</span>
</span><span class='line'><span class="cm">      }</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//inline和reified替换开始</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">((</span><span class="n">String</span><span class="o">)(</span><span class="n">$this$asType$iv</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">?</span> <span class="n">$this$asType$iv</span> <span class="o">:</span> <span class="kc">null</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var3</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">byte</span> <span class="n">var4</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(</span><span class="n">var3</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">TypeCastException</span><span class="o">(</span><span class="s">&quot;null cannot be cast to non-null type java.lang.String&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="n">var3</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">var4</span><span class="o">);</span>
</span><span class='line'>         <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkExpressionValueIsNotNull</span><span class="o">(</span><span class="n">var10000</span><span class="o">,</span> <span class="s">&quot;(this as java.lang.String).substring(startIndex)&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//inline和reified替换结束</span>
</span><span class='line'>      <span class="n">var3</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>      <span class="n">$i$f$asType</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var3</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>all in(lined)?</h2>

<p>既然是inline，应该是把被inline的方法全部提取到调用处(call-site)吧？</p>

<ul>
<li>是的，通常是这样，不过reified可能有一些差异</li>
<li>reified方法并不会完全inline所有的方法实现，而是更加智能一些的类型匹配中断提取。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusLong</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">1000L</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusChar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusInt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次贴一些Bundle.plus实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Long</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">String</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Char</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Int</span><span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的when表达式的类型检查次序依次为</p>

<ul>
<li>Long</li>
<li>String</li>
<li>Char</li>
<li>Int</li>
</ul>


<p>反编译后的方法如下(类型不同，提取的方法体也不同)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusLong</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="mi">1000L</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//第一个就是Long类型，无需包含后面的检查代码</span>
</span><span class='line'>      <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="s">&quot;World&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//不是Long类型，需要继续匹配，找到String类型，终止inline后续代码</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusChar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="sc">&#39;h&#39;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//不是Long类型，需要继续匹配，</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//不是String类型，需要继续匹配，</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="c1">//找到String类型，终止inline后续代码</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putChar</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusInt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//最差的一种情况，inline全部的方法体实现</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Character</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putChar</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">Character</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是关于reified的内容，其实在Kotlin中有很多的特性是依赖于编译器的工作来实现的。</p>
]]></content>
  </entry>
  
</feed>
