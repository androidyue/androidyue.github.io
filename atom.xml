<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thinkblog]]></title>
  <link href="http://androidyue.github.io/atom.xml" rel="self"/>
  <link href="http://androidyue.github.io/"/>
  <updated>2013-10-28T11:34:25+08:00</updated>
  <id>http://androidyue.github.io/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Share Git Tag]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/25/how-to-share-git-tag/"/>
    <updated>2013-10-25T19:00:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/25/how-to-share-git-tag</id>
    <content type="html"><![CDATA[<p>Now I have two tags under my git repository. Let&rsquo;s take a look at how to push the git tags to Server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>v2850
</span><span class='line'>v4.1.1.2000_2852
</span></code></pre></td></tr></table></div></figure>


<h3>Push a single tag to the server</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#git push origin tag_name</span>
</span><span class='line'><span class="c">#Take v2850 for example</span>
</span><span class='line'>git push  origin v2850
</span></code></pre></td></tr></table></div></figure>


<h3>Push all tags to the server</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push  origin --tags
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Android Packages From Command Line]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/19/build-android-packages-from-command-line/"/>
    <updated>2013-10-19T09:11:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/19/build-android-packages-from-command-line</id>
    <content type="html"><![CDATA[<p>A few months ago,I dealed with a task:To build a large amount of apk files.  The trick I came up with is to build apk file from the command so that I could use Python to glue all the works.  Eventually I made it.And so this post is to make some description about the trick.</p>

<h2>Requirements</h2>

<ul>
<li> Setup JDK</li>
<li> Setup Android SDK

<h2>Steps</h2></li>
<li>Generate R class file</li>
<li>Compile Java codes(.java files) into classes(.class) files</li>
<li>Convert .class files into .dex files</li>
<li>Package Resouces</li>
<li>Build Unsigned APK File</li>
<li>Sign Apk with Jarsigner</li>
<li>The Extra One:Use zipalign for optimization</li>
</ul>


<h3>Generate R class File</h3>

<p>In Android,We use R class to refer resources instead of hard-coding the resouces.<br/>
For a better understanding,pleae have a look at <a href="http://www.satyakomatineni.com/akc/display?url=displaynoteimpurl&amp;ownerUserId=satya&amp;reportId=2883">http://www.satyakomatineni.com/akc/display?url=displaynoteimpurl&amp;ownerUserId=satya&amp;reportId=2883</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aapt package -f -m -J /home/androidyue/temp/ubuntu/workspace/MxDataProvider/gen/ -S /home/androidyue/temp/ubuntu/workspace/MxDataProvider/res/ -I /home/androidyue/dev_tools/android-sdk-linux_86_backup/platforms/android-17/android.jar -M /home/androidyue/temp/ubuntu/workspace/MxDataProvider/AndroidManifest.xml
</span></code></pre></td></tr></table></div></figure>


<h4>Some descriptions</h4>

<ul>
<li> -f  force overwrite of existing files</li>
<li> -m  make package directories under location specified by -J</li>
<li> -J  specify where to output R.java resource constant definitions</li>
<li> -S  directory in which to find resources.  Multiple directories will be scanned and the first match found (left to right) will take precedence.</li>
<li> -I  add an existing package to base include set</li>
<li> -M  specify full path to AndroidManifest.xml to include in zip</li>
</ul>


<h3>Comiple .java into .class files</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javac -encoding UTF-8 -source 1.6 -target 1.6 -bootclasspath /home/androidyue/dev_tools/android-sdk-linux_86_backup/platforms/android-17/android.jar -d /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin/ /home/androidyue/temp/ubuntu/workspace/MxDataProvider/src//coop/channel/provider/*.java /home/androidyue/temp/ubuntu/workspace/MxDataProvider/gen//coop/channel/provider/R.java
</span></code></pre></td></tr></table></div></figure>


<h4>Some descriptions</h4>

<ul>
<li> -encoding encoding  Set the source file encoding name, such as EUC-JP and UTF-8. If -encoding is not specified, the platform default converter is used.</li>
<li> -source release   Specifies the version of source code accepted, Please Do NOT use Java 7(1.7)</li>
<li> -target version  Generate  class files that target a specified version of the VM. Class files will run on the specified target and on later versions, but not on earlier versions of the VM. Valid targets are 1.1, 1.2, 1.3, 1.4, 1.5 (also 5), 1.6(also 6), and 1.7 (also 7).</li>
<li> -bootclasspath bootclasspath Cross-compile against the specified set of boot classes. As with the user class path, boot class path entries are separated by colons (:) and can be directories, JAR archives, or ZIP archives.</li>
<li> -d directory  Set the destination directory for class files. The directory must already exist; javac will not create it.
As I have suffered a lot using Java 7, It&rsquo;s recomended to use Java 6</li>
</ul>


<h3>Convert .class into .dex files</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/androidyue/dev_tools/android-sdk-linux_86_backup/build-tools/17.0.0/dx --dex --output<span class="o">=</span>/home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//class.dex /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin/
</span></code></pre></td></tr></table></div></figure>


<p>To dive into Dalvik, please visit <a href="http://source.android.com/devices/tech/dalvik/index.html">http://source.android.com/devices/tech/dalvik/index.html</a></p>

<h3>Package Resouces</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aapt package -f -M /home/androidyue/temp/ubuntu/workspace/MxDataProvider/AndroidManifest.xml -S /home/androidyue/temp/ubuntu/workspace/MxDataProvider/res/ -A /home/androidyue/temp/ubuntu/workspace/MxDataProvider//assets/ -I /home/androidyue/dev_tools/android-sdk-linux_86_backup/platforms/android-17/android.jar -F /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//resources.ap_
</span></code></pre></td></tr></table></div></figure>


<h4>Some descriptions</h4>

<ul>
<li> -F  specify the apk file to output</li>
<li> -A  additional directory in which to find raw asset files</li>
</ul>


<h3>Build Unsigned APK File</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/androidyue/temp/ubuntu/dev_tools/adt-bundle-linux_backup/sdk/tools/apkbuilder /tmp/unsignedApkFile.apk -v -u -z /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//resources.ap_ -f /home/androidyue/temp/ubuntu/workspace/MxDataProvider/bin//class.dex -rf /home/androidyue/temp/ubuntu/workspace/MxDataProvider/src/
</span></code></pre></td></tr></table></div></figure>


<h4>Some descriptions</h4>

<ul>
<li> -u      Creates an unsigned package.</li>
<li> -z      Followed by the path to a zip archive. Adds the content of the application package.</li>
<li> -f      Followed by the path to a file. Adds the file to the application package.</li>
<li> -rf     Followed by the path to a source folder. Adds the java resources found in that folder to the application package, while keeping their path relative to the source folder.</li>
</ul>


<h3>Sign Apk with Jarsigner</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jarsigner -keystore /home/androidyue/temp/ubuntu/myKeystore -storepass storepassValue -keypass keypassValue -signedjar /home/androidyue/Desktop/output/max1111111.apk /tmp/unsignedApkFile.apk maxthon -digestalg SHA1 -sigalg MD5withRSA
</span></code></pre></td></tr></table></div></figure>


<h4>Some descriptions</h4>

<ul>
<li> [-keystore <url>]           keystore location</li>
<li> [-storepass <password>]     password for keystore integrity</li>
<li> [-keypass <password>]       password for private key (if different)</li>
<li> [-signedjar <file>]         name of signed JAR file</li>
<li> [-digestalg <algorithm>]    name of digest algorithm</li>
<li> [-sigalg <algorithm>]       name of signature algorithm</li>
</ul>


<h3>Use Zipalign for optimization</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>zipalign -f -v 4 /home/androidyue/Desktop/output/max1111111.apk /home/androidyue/Desktop/output/max222222.apk
</span></code></pre></td></tr></table></div></figure>


<h4>Some descriptions</h4>

<ul>
<li> The <alignment> is an integer that defines the byte-alignment boundaries. This must always be 4 (which provides 32-bit alignment) or else it effectively does nothing.</li>
<li> For more details, please visit <a href="http://developer.android.com/tools/help/zipalign.html">http://developer.android.com/tools/help/zipalign.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start An Android App by ADB]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/10/start-android-app-by-adb/"/>
    <updated>2013-10-10T19:04:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/10/start-android-app-by-adb</id>
    <content type="html"><![CDATA[<p>To be more geek,I began to start an Android App by using adb.Thanks to Google.It&rsquo;s possible and powerful.<br/>
The tool we use to make it is ADB(Android Debug Tool),For more detailed use please visit <a href="http://developer.android.com/tools/help/adb.html#shellcommands">http://developer.android.com/tools/help/adb.html#shellcommands</a>
Actually What I use here is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>start <span class="o">[</span>options<span class="o">]</span> &lt;INTENT&gt;
</span></code></pre></td></tr></table></div></figure>


<p>An example is followed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Here I want to start MxBrowser app by using ADB</span>
</span><span class='line'>17:04:30-androidyue/tmp<span class="nv">$ </span>adb shell am start -n com.mx.browser/com.mx.browser.MxBrowserActivity
</span><span class='line'>Starting: Intent <span class="o">{</span> <span class="nv">cmp</span><span class="o">=</span>com.mx.browser/.MxBrowserActivity  <span class="o">}</span>
</span><span class='line'>Warning: Activity not started, its current task has been brought to the front
</span></code></pre></td></tr></table></div></figure>


<p>the Package name(com.mx.browser) before the slash is provided to determine which app should the intent delivered to.The com.mx.browser.MxBrowserActivity is the destination Activity.<br/>
For more explanations about ADB INTENT,please visit <a href="http://developer.android.com/tools/help/adb.html#IntentSpec">http://developer.android.com/tools/help/adb.html#IntentSpec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Could Not Reliably Determine the Server's Fully Qualified Domain Name]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/09/could-not-reliably-determine-the-servers-fully-qualified-domain-name/"/>
    <updated>2013-10-09T12:50:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/09/could-not-reliably-determine-the-servers-fully-qualified-domain-name</id>
    <content type="html"><![CDATA[<p>An easy trick to solve problem:Could not reliably determine the server&rsquo;s fully qualified domain name<br/>
Let&rsquo;s take Linux for example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Modify your configuration file.</span>
</span><span class='line'>12:52:21-androidyue/etc/httpd/conf<span class="nv">$ </span>sudo vim httpd.conf
</span></code></pre></td></tr></table></div></figure>


<p>Find out the following sentence</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># ServerName gives the name and port that the server uses to identify itself.</span>
</span><span class='line'><span class="c"># This can often be determined automatically, but we recommend you specify</span>
</span><span class='line'><span class="c"># it explicitly to prevent problems during startup.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If this is not set to valid DNS name for your host, server-generated</span>
</span><span class='line'><span class="c"># redirections will not work.  See also the UseCanonicalName directive.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If your host doesn&#39;t have a registered DNS name, enter its IP address here.</span>
</span><span class='line'><span class="c"># You will have to access it by its address anyway, and this will make </span>
</span><span class='line'><span class="c"># redirections work in a sensible way.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#ServerName localhost:80</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the ServerName localhost:80 has been commented,it may cause above problem.A simple trick is just uncomment the sentence.Let it be like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ServerName localhost:80
</span></code></pre></td></tr></table></div></figure>


<p>Hope you could resolve your problem,Guys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get MD5 Hash of Big Files]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/07/get-md5-hash-of-big-files/"/>
    <updated>2013-10-07T10:16:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/07/get-md5-hash-of-big-files</id>
    <content type="html"><![CDATA[<p>Recently I have been dealing with files and I need to get md5 hash of all kinds of files;Some are small and some are big.<br/>
For the small files I use this method to get md5 hash value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getFileMd5</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="n">md5</span><span class="p">()</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>    <span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span>  <span class="n">m</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>However for calculating md5 hash value of big files,the above method will be very Less Efficient.For Big files I use the following method(It&rsquo;s acquired from stackoverflow)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getBigFileMd5</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">block_size</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="mi">20</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="n">md5</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">block_size</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I did a test.The cost of Getting md5 hash of a Big file(size:10.7 GiB; 11,455,512,109 bytes) is 213.447s.And I think it&rsquo;s OK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a .db File in Python with Sqlite3]]></title>
    <link href="http://androidyue.github.io/blog/2013/10/07/how-to-create-a-db-file-in-python-with-sqlite3/"/>
    <updated>2013-10-07T09:35:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/10/07/how-to-create-a-db-file-in-python-with-sqlite3</id>
    <content type="html"><![CDATA[<p>How to create a .db file in Python with sqlite3?Actually It&rsquo;s really easy.<br/>
Run the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sqlite3</span>
</span><span class='line'><span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;./test.db&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running the above code,the test.db file will be created if it does not exist.<br/>
Of course,you have the proper permission to create the file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yum Install build-essentials]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/30/yum-install-build-essentials/"/>
    <updated>2013-09-30T18:32:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/30/yum-install-build-essentials</id>
    <content type="html"><![CDATA[<p>I was once stucked in installing build-essentials which is for Debian/Ubuntu.I could not find any packages like build-essentials in yum.However this helped me out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install kernel-devel kernel-headers
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javac:command not found]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/27/javac-command-not-found/"/>
    <updated>2013-09-27T22:31:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/27/javac-command-not-found</id>
    <content type="html"><![CDATA[<p>I have been getting well on with my java tool.However When I use the javac command.It says</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javac : <span class="nb">command </span>not found
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s just because I just only install the JRE(Java Runtime Environment) and do not install JDK(Java Development KIt).I got the answer going for my fedora</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install java-devel
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Httpd Service]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/25/manage-httpd-service/"/>
    <updated>2013-09-25T19:30:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/25/manage-httpd-service</id>
    <content type="html"><![CDATA[<p>To Start</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /sbin/service httpd start
</span></code></pre></td></tr></table></div></figure>


<p>To Stop</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /sbin/service httpd stop
</span></code></pre></td></tr></table></div></figure>


<p>To Restart</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /sbin/service httpd restart
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List  Ports on Linux]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/25/list-ports-on-linux/"/>
    <updated>2013-09-25T19:01:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/25/list-ports-on-linux</id>
    <content type="html"><![CDATA[<p>I have often suffered this painful thing.When I start a service but the destination port is always used.So I should list all open ports and kill the occupied application.<br/>
So This is a short tip for how to list open ports on Linux</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo netstat -tulpn
</span></code></pre></td></tr></table></div></figure>


<p>Note sometimes you should grant the command for a enough access.<br/>
For a better understanding,please</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>man netstat
</span></code></pre></td></tr></table></div></figure>


<p>or navigate to <a href="http://linux.about.com/od/commands/l/blcmdl8_netstat.htm">http://linux.about.com/od/commands/l/blcmdl8_netstat.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Find out What Linux Distribution You Are Using]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/17/how-to-find-out-what-linux-distribution-you-are-using/"/>
    <updated>2013-09-17T19:09:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/17/how-to-find-out-what-linux-distribution-you-are-using</id>
    <content type="html"><![CDATA[<p>How to known what Linux Distribution I am using now.<br/>
All right, run this command  and you could get what you need in from the output result</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>19:12:17-androidyue~/github/octopress <span class="o">(</span>master<span class="o">)</span><span class="nv">$ </span>cat /etc/*-release
</span><span class='line'>Fedora release 17 <span class="o">(</span>Beefy Miracle<span class="o">)</span>
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span>Fedora
</span><span class='line'><span class="nv">VERSION</span><span class="o">=</span><span class="s2">&quot;17 (Beefy Miracle)&quot;</span>
</span><span class='line'><span class="nv">ID</span><span class="o">=</span>fedora
</span><span class='line'><span class="nv">VERSION_ID</span><span class="o">=</span>17
</span><span class='line'><span class="nv">PRETTY_NAME</span><span class="o">=</span><span class="s2">&quot;Fedora 17 (Beefy Miracle)&quot;</span>
</span><span class='line'><span class="nv">ANSI_COLOR</span><span class="o">=</span><span class="s2">&quot;0;34&quot;</span>
</span><span class='line'><span class="nv">CPE_NAME</span><span class="o">=</span><span class="s2">&quot;cpe:/o:fedoraproject:fedora:17&quot;</span>
</span><span class='line'>Fedora release 17 <span class="o">(</span>Beefy Miracle<span class="o">)</span>
</span><span class='line'>Fedora release 17 <span class="o">(</span>Beefy Miracle<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: unable to find the sources of your current Linux kernel. Specify KERN_DIR directory and run Make again]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/17/error-unable-to-find-the-sources-of-your-current-linux-kernel-specify-kern-dir-equals-and-run-make-again/"/>
    <updated>2013-09-17T18:55:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/17/error-unable-to-find-the-sources-of-your-current-linux-kernel-specify-kern-dir-equals-and-run-make-again</id>
    <content type="html"><![CDATA[<p>This happends when I am dealing with VirtualBox.<br/>
Try this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install gcc kernel kernel-devel
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/17/error-2002-hy000-cant-connect-to-local-mysql-server-through-socket-slash-var-slash-lib-slash-mysql-slash-mysql-dot-sock-2/"/>
    <updated>2013-09-17T18:48:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/17/error-2002-hy000-cant-connect-to-local-mysql-server-through-socket-slash-var-slash-lib-slash-mysql-slash-mysql-dot-sock-2</id>
    <content type="html"><![CDATA[<p>This works for me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo systemctl start mysqld.service
</span><span class='line'>sudo systemctl <span class="nb">enable </span>mysqld.service
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Error: curses.h: No such file or directory]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/15/linux-error-curses-dot-h-no-such-file-or-directory/"/>
    <updated>2013-09-15T13:37:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/15/linux-error-curses-dot-h-no-such-file-or-directory</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s make it direct.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install ncurses-devel ncurses
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Delete Git Remote Branches]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/13/how-to-delete-git-remote-branches/"/>
    <updated>2013-09-13T18:45:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/13/how-to-delete-git-remote-branches</id>
    <content type="html"><![CDATA[<p>It&rsquo;s easy to remove a certain remote branch in a Git respository.
You could try this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push origin --delete &lt;branchName&gt;
</span></code></pre></td></tr></table></div></figure>


<p>And of course another short command is waiting for You</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push origin :&lt;branchName&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accelerate Yum Installation]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/10/accelerate-yum-installation/"/>
    <updated>2013-09-10T21:15:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/10/accelerate-yum-installation</id>
    <content type="html"><![CDATA[<p>Yum is a great tool for manage dependencies and easy to use.However actually there is a way to speed up the installation.<br/>
Fastestmirror is a tool that will help yum determin what mirror is fastest and to use.<br/>
To install on Fedora 17</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install yum-fastestmirror
</span></code></pre></td></tr></table></div></figure>


<p>Of course you could customize the fastestmirror configuration easily</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/yum/pluginconf.d/fastestmirror.conf
</span></code></pre></td></tr></table></div></figure>


<p>So when you next install a package from the network,I hope you could feel it much faster.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Sum the Number of Files or Folders in a Folder]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/10/how-to-sum-the-number-of-files-or-folders-in-a-folder/"/>
    <updated>2013-09-10T20:49:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/10/how-to-sum-the-number-of-files-or-folders-in-a-folder</id>
    <content type="html"><![CDATA[<p>I once had a request to sum the number of files in a specific folder.After googling I found the command wc could help me out.<br/>
wc &ndash; print newline, word, and byte counts for each file.  And I think wc is short for Word Count.Please have a detailed information by visiting <a href="http://linux.about.com/library/cmd/blcmdl1_wc.htm">http://linux.about.com/library/cmd/blcmdl1_wc.htm</a>  if you have the desire.<br/>
Ok,Let&#8217; get the total number of files(including folders) in a specific folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>20:56:08-androidyue/tmp<span class="nv">$ </span>ls | wc
</span></code></pre></td></tr></table></div></figure>


<p>Well,the following command will sum the number of pure files(Not including folders)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>20:58:27-androidyue/tmp<span class="nv">$ </span>ll | grep ^- | wc
</span></code></pre></td></tr></table></div></figure>


<p>However how to sum the number of pure folder?The following command will help.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>21:00:20-androidyue/tmp<span class="nv">$ </span>ll | grep ^d | wc
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Git Daemon on Fedora]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/10/install-git-daemon-on-fedora/"/>
    <updated>2013-09-10T19:45:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/10/install-git-daemon-on-fedora</id>
    <content type="html"><![CDATA[<p>Git-daemon is  A really simple server for git repositories.You can take a detailed understanding by reading <a href="https://www.kernel.org/pub/software/scm/git/docs/git-daemon.html">https://www.kernel.org/pub/software/scm/git/docs/git-daemon.html</a> .<br/>
I once often used git-daemon when I was using Ubuntu.But when I turn to Fedora and found it was not installed.And the output is like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git: <span class="s1">&#39;daemon&#39;</span> is not a git command. See <span class="s1">&#39;git --help&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>So I write this post to record How to install and enable git-daemon
First Let&rsquo;s intall the git Daemon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install git-daemon
</span></code></pre></td></tr></table></div></figure>


<p>However git daemon is off by default.We should enable it.We should do as the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim  /etc/xinetd.d/git
</span></code></pre></td></tr></table></div></figure>


<p>And modify the file as the following configuration.</p>

<pre><code># default: off
# description: The git dæmon allows git repositories to be exported using \
        #       the git:// protocol.

service git
{
            disable         = no
            socket_type     = stream
            wait            = no
            user            = nobody
            server          = /usr/libexec/git-core/git-daemon
            server_args     = --base-path=/var/lib/git --export-all --user-path=public_git --syslog --inetd --verbose
            log_on_failure  += USERID
            # xinetd does not enable IPv6 by default
            flags           = IPv6

}
</code></pre>

<p>And then,We use this command to start the git Daemon</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git  daemon--export-all--base-path<span class="o">=</span>your_local_git_path
</span></code></pre></td></tr></table></div></figure>


<p>Mostly we could clone the repositories from the git daemon.<br/>
But if  you have enabled Firewall and other people want to clone the repository from your git daemon,please let the port 9418 available to the outsite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BashBites:How To Append Outputs To A File]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/07/bashbites-how-to-append-outputs-to-file/"/>
    <updated>2013-09-07T19:40:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/07/bashbites-how-to-append-outputs-to-file</id>
    <content type="html"><![CDATA[<p>Is there any way to append output(debugging information) to a existings file? As we all know in bash the command &lsquo;>&rsquo; will write ouputs to a file.However this command will also erase the existing data it the file.<br/>
Of course bash provides a command that appends outputs to a file.It resembles &lsquo;>&rsquo;.It&rsquo;s &lsquo;>>&rsquo;<br/>
The following is a piece of example code.</p>

<h5>Let&rsquo;s look at ></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span>touch a.txt
</span><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span>cat a.txt
</span><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;ABC&quot;</span> &gt; a.txt
</span><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span>cat a.txt
</span><span class='line'>ABC
</span><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;DEF&quot;</span> &gt; a.txt
</span><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span>cat a.txt
</span><span class='line'>DEF
</span></code></pre></td></tr></table></div></figure>


<h5>Well,Let&rsquo;s look at the exiciting command >></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;GHI&quot;</span> &gt;&gt; a.txt
</span><span class='line'><span class="o">[</span>androidyue@androidyue tmp<span class="o">]</span><span class="nv">$ </span>cat a.txt
</span><span class='line'>DEF
</span><span class='line'>GHI
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Flash Plugin on Fedora 17]]></title>
    <link href="http://androidyue.github.io/blog/2013/09/07/install-flash-plugin-on-fedora-17/"/>
    <updated>2013-09-07T17:05:00+08:00</updated>
    <id>http://androidyue.github.io/blog/2013/09/07/install-flash-plugin-on-fedora-17</id>
    <content type="html"><![CDATA[<h5>Addings</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#For 32-bit System:</span>
</span><span class='line'>sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-i386-1.0-1.noarch.rpm
</span><span class='line'><span class="c">#For 64-bit System </span>
</span><span class='line'>sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm
</span><span class='line'>
</span><span class='line'>sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux
</span></code></pre></td></tr></table></div></figure>


<h5>Updatings</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum update
</span></code></pre></td></tr></table></div></figure>


<h5>Installings</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install flash-plugin nspluginwrapper alsa-plugins-pulseaudio libcurl
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
