<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="http://droidyue.com/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-09-22T22:10:01+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中使用ViewStub提高布局性能]]></title>
    <link href="http://droidyue.com/blog/2016/09/11/using-viewstub-in-android-to-improve-layout-performance/"/>
    <updated>2016-09-11T19:57:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/09/11/using-viewstub-in-android-to-improve-layout-performance</id>
    <content type="html"><![CDATA[<p>在Android开发中,View是我们必须要接触的用来展示的技术.通常情况下随着View视图的越来越复杂,整体布局的性能也会随之下降.这里介绍一个在某些场景下提升布局性能的View,它就是ViewStub.</p>

<!--more-->


<h2>ViewStub是什么</h2>

<ul>
<li>ViewStub是View的子类</li>
<li>它不可见,大小为0</li>
<li>用来延迟加载布局资源</li>
</ul>


<p>注,关于Stub的解释</p>

<blockquote><p>A stub is a small program routine that substitutes for a longer program, possibly to be loaded later or that is located remotely</p></blockquote>

<p>在Java中,桩是指用来代替关联代码或者未实现代码的代码.</p>

<h2>ViewStub使用场景</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/viestub_demo.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/viestub_demo.png" /></p>

<p>如上图所示,</p>

<ul>
<li>一个ListView包含了诸如<code>新闻,商业,科技</code>等Item</li>
<li>每个Item又包含了各自对应的子话题,</li>
<li>但是子话题的View(蓝色区域)只有在点击展开按钮才真正需要加载.</li>
<li>如果默认加载子话题的View,则会造成内存的占用和CPU的消耗</li>
</ul>


<p>所以,这时候就ViewStub就派上用处了.使用ViewStub可以延迟加载布局资源.</p>

<h2>ViewStub 怎么用</h2>

<ol>
<li>在布局文件中使用ViewStub标签</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;RelativeLayout
</span><span class='line'>        xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>        xmlns:tools="http://schemas.android.com/tools"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="match_parent"
</span><span class='line'>        android:paddingLeft="@dimen/activity_horizontal_margin"
</span><span class='line'>        android:paddingRight="@dimen/activity_horizontal_margin"
</span><span class='line'>        android:paddingTop="@dimen/activity_vertical_margin"
</span><span class='line'>        android:paddingBottom="@dimen/activity_vertical_margin"
</span><span class='line'>        tools:context="com.droidyue.viewstubsample.MainActivity"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;Button
</span><span class='line'>            android:id="@+id/clickMe"
</span><span class='line'>            android:text="Hello World!"
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"/&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;ViewStub
</span><span class='line'>            android:id="@+id/myViewStub"
</span><span class='line'>            android:inflatedId="@+id/myInflatedViewId"
</span><span class='line'>            android:layout="@layout/include_merge"
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:layout_below="@id/clickMe"
</span><span class='line'>    /&gt;
</span><span class='line'>&lt;/RelativeLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>2.在代码中inflate布局</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ViewStub</span> <span class="n">myViewStub</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewStub</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">myViewStub</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">myViewStub</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">myViewStub</span><span class="o">.</span><span class="na">inflate</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//或者是下面的形式加载</span>
</span><span class='line'>    <span class="c1">//myViewStub.setVisibility(View.VISIBLE);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关于ViewStub的事</h2>

<ul>
<li>除了<code>inflate</code>方法外,我们还可以调用<code>setVisibility()</code>方法加载布局文件</li>
<li>一旦加载布局完成后,ViewStub会从当前布局层级中删除</li>
<li><code>android:id</code>指定ViewStub ID,用于查找ViewStub进行延迟加载</li>
<li><code>android:layout</code>延迟加载布局的资源id</li>
<li><code>android:inflatedId</code>加载的布局被重写的id,这里为RelativeLayout的id</li>
</ul>


<h2>ViewStub的不足</h2>

<p>官方的文档中有这样一段描述</p>

<blockquote><p>Note: One drawback of ViewStub is that it doesn’t currently support the <merge> tag in the layouts to be inflated.</p></blockquote>

<p>意思是ViewStub不支持<code>&lt;merge&gt;</code>标签.</p>

<p>关于不支持<code>&lt;merge&gt;</code>标签的程度,我们进行一个简单的验证</p>

<h3>验证一:直接<merge>标签</h3>

<p>如下,我们有布局文件名为<code>merge_layout.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">merge</span> <span class="nl">xmlns:</span><span class="n">android</span><span class="o">=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">Button</span>
</span><span class='line'>            <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>            <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="nl">android:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;Yes&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">Button</span>
</span><span class='line'>            <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>            <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="nl">android:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;No&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;/</span><span class="n">merge</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换对应的ViewStub的android:layout属性值之后,运行后(点击Button按钮)得到产生了如下的崩溃</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">InflateException</span><span class="o">:</span> <span class="n">Binary</span> <span class="n">XML</span> <span class="n">file</span> <span class="n">line</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">merge</span> <span class="o">/&gt;</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">only</span> <span class="n">with</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">ViewGroup</span> <span class="n">root</span> <span class="n">and</span> <span class="n">attachToRoot</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">LayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">LayoutInflater</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">551</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">LayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">LayoutInflater</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">429</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">ViewStub</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">ViewStub</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">259</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">viewstubsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="n">$1</span><span class="o">.</span><span class="na">onClick</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">20</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">View</span><span class="o">.</span><span class="na">performClick</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5697</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">widget</span><span class="o">.</span><span class="na">TextView</span><span class="o">.</span><span class="na">performClick</span><span class="o">(</span><span class="n">TextView</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">10815</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">View</span><span class="n">$PerformClick</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">22526</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">739</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">95</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">158</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">7237</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1230</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1120</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">InflateException</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">merge</span> <span class="o">/&gt;</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">only</span> <span class="n">with</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">ViewGroup</span> <span class="n">root</span> <span class="n">and</span> <span class="n">attachToRoot</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">LayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">LayoutInflater</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">491</span><span class="o">)</span>
</span><span class='line'> <span class="n">E</span> <span class="nl">AndroidRuntime:</span>         <span class="o">...</span> <span class="mi">13</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见,直接的<code>&lt;merge&gt;</code>标签,ViewStub是不支持的.</p>

<h3>验证二 间接的ViewStub</h3>

<p>下面布局间接使用了merge标签.文件名为<code>include_merge.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">LinearLayout</span> <span class="nl">xmlns:</span><span class="n">android</span><span class="o">=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>              <span class="nl">android:</span><span class="n">orientation</span><span class="o">=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>              <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>              <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;match_parent&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">include</span> <span class="n">layout</span><span class="o">=</span><span class="s">&quot;@layout/merge_layout&quot;</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">LinearLayout</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改ViewStub的<code>android:layout</code>值,运行,一切正常.</p>

<p>除此之外,本例也验证了ViewStub也是对<code>&lt;include&gt;</code>标签支持良好的.</p>

<h2>关于ViewStub的一点代码剖析</h2>

<h3>inflate vs setVisibility</h3>

<p>inflate和setVisibility的共同点是都可以实现加载布局</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * When visibility is set to {@link #VISIBLE} or {@link #INVISIBLE},</span>
</span><span class='line'><span class="cm">     * {@link #inflate()} is invoked and this StubbedView is replaced in its parent</span>
</span><span class='line'><span class="cm">     * by the inflated layout resource.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param visibility One of {@link #VISIBLE}, {@link #INVISIBLE}, or {@link #GONE}.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @see #inflate() </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setVisibility</span><span class="o">(</span><span class="kt">int</span> <span class="n">visibility</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mInflatedViewRef</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">mInflatedViewRef</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">view</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">view</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">visibility</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;setVisibility called on un-referenced view&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">visibility</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">visibility</span> <span class="o">==</span> <span class="n">VISIBLE</span> <span class="o">||</span> <span class="n">visibility</span> <span class="o">==</span> <span class="n">INVISIBLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">inflate</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>setVisibility只是在ViewStub第一次延迟初始化时,并且visibility是非<code>GONE</code>时,调用了<code>inflate</code>方法.</p>

<h3>inflate源码</h3>

<p>通过阅读下面的inflate方法实现,我们将更加理解</p>

<ul>
<li>android:inflatedId的用途</li>
<li>ViewStub在初始化后从视图层级中移除</li>
<li>ViewStub的layoutParameters应用</li>
<li>mInflatedViewRef通过弱引用形式,建立ViewStub与加载的View的联系.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Inflates the layout resource identified by {@link #getLayoutResource()}</span>
</span><span class='line'><span class="cm">     * and replaces this StubbedView in its parent by the inflated layout resource.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return The inflated layout resource.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">View</span> <span class="nf">inflate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ViewParent</span> <span class="n">viewParent</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">viewParent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">viewParent</span> <span class="k">instanceof</span> <span class="n">ViewGroup</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mLayoutResource</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">ViewGroup</span> <span class="n">parent</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">viewParent</span><span class="o">;</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">LayoutInflater</span> <span class="n">factory</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">mLayoutResource</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span>
</span><span class='line'>                        <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">mInflatedId</span> <span class="o">!=</span> <span class="n">NO_ID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">view</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">mInflatedId</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">indexOfChild</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">removeViewInLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">layoutParams</span> <span class="o">=</span> <span class="n">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">layoutParams</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">index</span><span class="o">,</span> <span class="n">layoutParams</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">mInflatedViewRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">mInflateListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mInflateListener</span><span class="o">.</span><span class="na">onInflate</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">view</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;ViewStub must have a valid layoutResource&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;ViewStub must have a non-null ViewGroup viewParent&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于ViewStub的研究就是这些,希望对大家关于优化视图有所帮助和启发.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两分钟理解Android中SP与DP的区别]]></title>
    <link href="http://droidyue.com/blog/2016/09/05/dp-vs-sp-in-android/"/>
    <updated>2016-09-05T19:41:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/09/05/dp-vs-sp-in-android</id>
    <content type="html"><![CDATA[<p>从一开始写Android程序,就被告知这些常识</p>

<ul>
<li>长度宽度的数值要使用dp作为单位放入dimens.xml文件中</li>
<li>字体大小的数值要使用sp作为单位,也放入dimens.xml文件中</li>
</ul>


<p>然后,就没有然后了,仿佛潜台词就是说,你记住去用就行了.</p>

<!--more-->


<p>偶然有一天,当我们阴差阳错地将字体写成了dp,也是可以工作,而且效果和sp一样.</p>

<p>这时候,就开始怀疑了,到底有啥区别呢,dp和sp有什么不同呢?</p>

<p>我们做个简单的Sample验证一下,如下,一个布局代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">TextView</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">textSize</span><span class="o">=</span><span class="s">&quot;18sp&quot;</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;Hello World! in SP&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">TextView</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">textSize</span><span class="o">=</span><span class="s">&quot;18dp&quot;</span>
</span><span class='line'>        <span class="nl">android:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;Hello World! in DP&quot;</span>
</span><span class='line'>        <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的效果是这个样子</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/dp_sp_normal.jpg" alt="dp and sp both normal" /></p>

<p>但是,当我们进入系统设置中修改字体大小时</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/system_font_settings.jpg" alt="system font settings" /></p>

<p>再次进入之前的界面,发现了一些不一样的东西.</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/dp_sp_with_biggest_text.jpg" alt="dp and sp strange" /></p>

<p>由此看来</p>

<ul>
<li> 使用sp作为字体大小单位,会随着系统的字体大小改变</li>
<li> 而dp作为单位则不会.</li>
</ul>


<p>关于sp,<a href="https://developer.android.com/guide/topics/resources/more-resources.html#Dimension">文档</a>的描述为:</p>

<blockquote><p>Scale-independent Pixels &ndash; This is like the dp unit, but it is also scaled by the user&rsquo;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&rsquo;s preference.</p></blockquote>

<p>大致意思为</p>

<ul>
<li>sp除了受屏幕密度影响外,还受到用户的字体大小影响</li>
<li>通常情况下,建议使用sp来跟随用户字体大小设置</li>
</ul>


<p>因此通常情况下,我们还是建议使用sp作为字体的单位,除非一些特殊的情况,不想跟随系统字体变化的,可以使用dp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派入手指南]]></title>
    <link href="http://droidyue.com/blog/2016/08/22/before-you-buy-raspberry-pi/"/>
    <updated>2016-08-22T18:57:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/08/22/before-you-buy-raspberry-pi</id>
    <content type="html"><![CDATA[<p>最近入手了树莓派,简单整理一些入手的注意事项,本文尤其是对于不了解树莓派并想要购买的同学有参考意义.</p>

<!--more-->


<h2>关于树莓派</h2>

<blockquote><p>树莓派（英语：Raspberry Pi），是一款基于Linux的单板机电脑.</p></blockquote>

<p>从一问世就受到了极客的热捧,现在最新的为第三代.它长成这个样子</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/rasp-pi-3-board.png" alt="RaspBerry Pi 3" /></p>

<p>以树莓派3为例,它的硬件配置已经很强悍了</p>

<ul>
<li>四核1.2GHz Broadcom BCM2837 64位ARM CPU</li>
<li>1GB RAM</li>
<li>板载WiFi和蓝牙低能耗(BLE)</li>
<li>40引脚扩展GPIO</li>
<li>4个USB 2端口</li>
<li>4路立体声输出和复合视频端口</li>
<li>全尺寸HDMI</li>
<li>其他</li>
</ul>


<p>树莓派3强悍的不仅是硬件,软件方便也不示弱</p>

<h3>系统篇</h3>

<ul>
<li>Raspbian 树莓派官方系统(Desktop和Server版),基于著名的Debian</li>
<li>Ubuntu 发行版</li>
<li>Windows 10 IOT 系统</li>
<li>其他系统,如Fedora,Arch Linux等支持ARM CPU的系统.</li>
</ul>


<p>既然有了上面的操作系统,可以做的事情就越来越多,利用<code>apt-get</code>等安装很多工具,比如</p>

<ul>
<li>ruby</li>
<li>python</li>
<li>java</li>
<li>php</li>
<li>etc</li>
</ul>


<p>目前我的板子上跑的是Raspbian的Server版,安装了ruby,python等运行环境.</p>

<h2>树莓派能做啥</h2>

<p>树莓派能做的事情多了去了,这里简单列举一些我实现的用途</p>

<ul>
<li>Long-running server</li>
<li>运行Shadowsocks上网</li>
<li>类网络爬虫的工具</li>
<li>VPN服务器</li>
</ul>


<p>除此之外,一些网友列出的树莓派的用途还有
<img src="http://7jpolu.com1.z0.glb.clouddn.com/what_can_raspberry_do.png" alt="What can Raspberry do" /></p>

<p>查看详细链接为<a href="https://linuxtoy.org/archives/cool-ideas-for-raspberry-pi.html">34 个使用 Raspberry Pi 的酷创意</a></p>

<h2>入手必备</h2>

<h3>树莓派板子</h3>

<p>这个是必不可少的,目前来说,最新的是三代,建议选择要选购最新的.</p>

<p><a href="http://s.click.taobao.com/t?e=m%3D2%26s%3Df6ZGuoGzBXUcQipKwQzePOeEDrYVVa64LKpWJ%2Bin0XLjf2vlNIV67lRBEt9fZGXB0e71iVTN2RzM3gYQjCL89vSdxyvKgR5IYpon8UCVSYb15Y5fs5g2zSq7CQVxqFEujUVD%2FJG4O4tJFT4OGjNoyE7JzNSx6OYNxg5p7bh%2BFbQ%3D&amp;pvid=10_118.247.4.215_192_1471158628562">树莓派购买地址</a></p>

<h3>TF卡</h3>

<ul>
<li>也称sd卡,起硬盘的作用</li>
<li>如没有,需要购买</li>
<li><strong>建议的容量8G或者以上</strong>.</li>
<li>建议单独从京东上购买即可.</li>
</ul>


<h3>TF卡读卡器</h3>

<ul>
<li>用来将系统镜像写到TF卡中</li>
<li>非必需,根据需求购买</li>
<li>另外一些支持拆卸SD卡的Android手机也可以实现读卡器的功能</li>
</ul>


<h3>电源</h3>

<ul>
<li>需要购买</li>
<li>树莓派要求的输出电流(2.1A),普通安卓手机的电源无法满足</li>
</ul>


<h3>散热片</h3>

<ul>
<li>建议购买</li>
<li>树莓派3的散热量会大一些,通常三片儿就够了.</li>
</ul>


<h3>风扇</h3>

<ul>
<li>不建议购买</li>
<li>如果已经使用了散热片,实际上就不需要购买风扇了.</li>
</ul>


<h3>保护壳</h3>

<ul>
<li>建议购买</li>
<li>保护主板不受一些不必要的破坏.</li>
<li>亚克力透明外壳 很便宜,但是很容易坏掉,建议安装后不要在拆卸,否则就很容易坏掉.</li>
<li>推荐一个比较豪华的保护壳,不仅其保护作用,由于材质为铝合金,还起到了散热的作用,有了它,散热片和风扇都免了. <a href="http://s.click.taobao.com/t?e=m%3D2%26s%3DQfp662yOKDAcQipKwQzePOeEDrYVVa64LKpWJ%2Bin0XLjf2vlNIV67lq2yb%2B823hksUZsiWgXrvjM3gYQjCL89vSdxyvKgR5IYpon8UCVSYajLHHEy4DVWPecTmP%2Bt89nu9eJRZ3mZqJD8TATeSZeQGTuSLA3e9ZzxiXvDf8DaRs%3D&amp;pvid=10_118.247.4.215_1955_1471161468655">树莓派3B代外壳 电脑机箱金属 2B保护盒子 铝合金 带散热柱</a></li>
</ul>


<h3>小显示屏</h3>

<ul>
<li>非必需</li>
<li>因个人需求购买</li>
<li>如果是仅仅跑server,则不需要.通过ssh登录即可.</li>
</ul>


<h3>视频线及转接口</h3>

<ul>
<li>建议购买,但因需求而定.</li>
<li>视频线通常为HDMI</li>
<li>转接口为HDMI转VGA</li>
<li>可以连接大显示器</li>
</ul>


<h3>网线</h3>

<ul>
<li>因个人需要购买</li>
<li>如果没有显示装备,网线则必须要具有</li>
<li>等开启了wifi连接后,网线则不再需要了</li>
<li>通常1m即可.</li>
</ul>


<p>基本上,在首次购买树莓派时,该买什么不该买什么有了大致的掌握了.</p>

<h2>入手心理</h2>

<p>然后光准备好了银子也是不够的,还需要准备心理.</p>

<p>因为很多人买了树莓派,过了一段时间新鲜期就把它放置不管,通常称为&#8221;吃土&#8221;.</p>

<p>我购买树莓派的目的很简单:就是让它做一个long-running server.我在购买树莓派之前已经写了一些长期运行的脚本.</p>

<p>为了充分利用树莓派,建议学习如下</p>

<ul>
<li>ruby,python等脚本</li>
<li>js脚本运行工具phantomjs</li>
</ul>


<p>树莓派很便宜,但是购买之前还是要再三思考,确保物尽其用.</p>

<h2>补充1:</h2>

<p>文章发出后,很多朋友问我,该具体怎么玩树莓派,说来话长,于是从精挑细选了一本介绍如何玩树莓派的书籍</p>

<ul>
<li><a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgFVGF4UBSJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIUB1YeWhIdS0IJRmtza2JjB08GVmFEBA18OVIFbwUtayhDDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhcHVB1SEwcaAGUbXhMAFwFWG1IWBhAOZRxrRV1HRAtDDl1GRjdl&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBBIEUBpcCltXWwg%3D">树莓派 Raspberry Pi 实战指南</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探究Android中的注解]]></title>
    <link href="http://droidyue.com/blog/2016/08/14/android-annnotation/"/>
    <updated>2016-08-14T20:42:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/08/14/android-annnotation</id>
    <content type="html"><![CDATA[<p>本文系GDG Android Meetup分享内容总结文章</p>

<p>注解是我们经常接触的技术,Java有注解,Android也有注解,本文将试图介绍Android中的注解,以及ButterKnife和Otto这些基于注解的库的一些工作原理.</p>

<p>归纳而言,Android中的注解大概有以下好处</p>

<ul>
<li>提高我们的开发效率</li>
<li>更早的发现程序的问题或者错误</li>
<li>更好的增加代码的描述能力</li>
<li>更加利于我们的一些规范约束</li>
<li>提供解决问题的更优解</li>
</ul>


<!--more-->


<h2>准备工作</h2>

<p>默认情况下,Android中的注解包并没有包括在framework中,它独立成一个单独的包,通常我们需要引入这个包.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    compile 'com.android.support:support-annotations:22.2.0'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>但是如果我们已经引入了<code>appcompat</code>则没有必要再次引用<code>support-annotations</code>,因为<code>appcompat</code>默认包含了对其引用.</p>

<h2>替代枚举</h2>

<p>在最早的时候,当我们想要做一些值得限定实现枚举的效果,通常是</p>

<ul>
<li>定义几个常量用于限定</li>
<li>从上面的常量选取值进行使用</li>
</ul>


<p>一个比较描述上面问题的示例代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COLOR_RED</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColor</span><span class="o">(</span><span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//some code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//调用</span>
</span><span class='line'><span class="n">setColor</span><span class="o">(</span><span class="n">COLOR_RED</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而上面的还是有不尽完美的地方</p>

<ul>
<li><code>setColor(COLOR_RED)</code>与<code>setColor(0)</code>效果一样,而后者可读性很差,但却可以正常运行</li>
<li>setColor方法可以接受枚举之外的值,比如<code>setColor(3)</code>,这种情况下程序可能出问题</li>
</ul>


<p>一个相对较优的解决方法就是使用Java中的Enum.使用枚举实现的效果如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ColorEnum.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ColorEmun</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RED</span><span class="o">,</span>
</span><span class='line'>    <span class="n">GREEN</span><span class="o">,</span>
</span><span class='line'>    <span class="n">YELLOW</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColorEnum</span><span class="o">(</span><span class="n">ColorEmun</span> <span class="n">colorEnum</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//some code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">setColorEnum</span><span class="o">(</span><span class="n">ColorEmun</span><span class="o">.</span><span class="na">GREEN</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而Enum也并非最佳,Enum因为其相比方案一的常量来说,占用内存相对大很多而受到曾经被Google列为不建议使用,为此Google特意引入了一些相关的注解来替代枚举.</p>

<p>Android中新引入的替代枚举的注解有<code>IntDef</code>和<code>StringDef</code>,这里以<code>IntDef</code>做例子说明一下.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Colors</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@IntDef</span><span class="o">({</span><span class="n">RED</span><span class="o">,</span> <span class="n">GREEN</span><span class="o">,</span> <span class="n">YELLOW</span><span class="o">})</span>
</span><span class='line'>    <span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nd">@interface</span> <span class="n">LightColors</span><span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>声明必要的int常量</li>
<li>声明一个注解为LightColors</li>
<li>使用@IntDef修饰LightColors,参数设置为待枚举的集合</li>
<li>使用@Retention(RetentionPolicy.SOURCE)指定注解仅存在与源码中,不加入到class文件中</li>
</ul>


<h2>Null相关的注解</h2>

<p>和Null相关的注解有两个</p>

<pre><code>@Nullable 注解的元素可以是Null
@NonNull 注解的元素不能是Null
</code></pre>

<p>上面的两个可以修饰如下的元素</p>

<ul>
<li>成员属性</li>
<li>方法参数</li>
<li>方法的返回值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Nullable</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">obtainReferrerFromIntent</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="s">&quot;apps_referrer&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NonNull检测生效的条件</p>

<ul>
<li>显式传入null</li>
<li>在调用方法之前已经判断了参数为null时</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">setReferrer</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span><span class="c1">//提示警告</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//不提示警告</span>
</span><span class='line'><span class="n">String</span> <span class="n">referrer</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getStringExtra</span><span class="o">(</span><span class="s">&quot;apps_referrer&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">setReferrer</span><span class="o">(</span><span class="n">referrer</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//提示警告</span>
</span><span class='line'><span class="n">String</span> <span class="n">referrer</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getStringExtra</span><span class="o">(</span><span class="s">&quot;apps_referrer&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">referrer</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setReferrer</span><span class="o">(</span><span class="n">referrer</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setReferrer</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">String</span> <span class="n">referrer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//some code here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>区间范围注解</h2>

<p>Android中的IntRange和FloatRange是两个用来限定区间范围的注解,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">float</span> <span class="n">currentProgress</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCurrentProgress</span><span class="o">(</span><span class="nd">@FloatRange</span><span class="o">(</span><span class="n">from</span><span class="o">=</span><span class="mf">0.0f</span><span class="o">,</span> <span class="n">to</span><span class="o">=</span><span class="mf">1.0f</span><span class="o">)</span> <span class="kt">float</span> <span class="n">progress</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们传入非法的值,如下所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">setCurrentProgress</span><span class="o">(</span><span class="mi">11</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>就会得到这样的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Value</span> <span class="n">must</span> <span class="n">be</span> <span class="o">&gt;=</span><span class="mf">0.0</span> <span class="n">and</span> <span class="o">&lt;=</span> <span class="mf">1.0</span><span class="o">(</span><span class="n">was</span> <span class="mi">11</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>长度以及数组大小限制</h2>

<p>限制字符串的长度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setKey</span><span class="o">(</span><span class="nd">@Size</span><span class="o">(</span><span class="mi">6</span><span class="o">)</span> <span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>限定数组集合的大小</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span> <span class="n">String</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">setData</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">});</span><span class="c1">//error occurs</span>
</span></code></pre></td></tr></table></div></figure>


<p>限定特殊的数组长度,比如3的倍数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setItemData</span><span class="o">(</span><span class="nd">@Size</span><span class="o">(</span><span class="n">multiple</span> <span class="o">=</span> <span class="mi">3</span><span class="o">)</span> <span class="n">String</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>权限相关</h2>

<p>在Android中,有很多场景都需要使用权限,无论是Marshmallow之前还是之后的动态权限管理.都需要在manifest中进行声明,如果忘记了,则会导致程序崩溃.
好在有一个注解能辅助我们避免这个问题.使用RequiresPermission注解即可.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequiresPermission</span><span class="o">(</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">SET_WALLPAPER</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeWallpaper</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>资源注解</h2>

<p>在Android中几乎所有的资源都可以有对应的资源id.比如获取定义的字符串,我们可以通过下面的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getStringById</span><span class="o">(</span><span class="kt">int</span> <span class="n">stringResId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getResources</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">stringResId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用这个方法,我们可以很容易的获取到定义的字符串,但是这样的写法也存在着风险.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">getStringById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">mipmap</span><span class="o">.</span><span class="na">ic_launcher</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们在不知情或者疏忽情况下,传入这样的值,就会出现问题.
但是如果我们使用资源相关的注解修饰了参数,就能很大程度上避免错误的情况.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getStringById</span><span class="o">(</span><span class="nd">@StringRes</span>  <span class="kt">int</span> <span class="n">stringResId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getResources</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">stringResId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Android中资源注解如下所示</p>

<ul>
<li>AnimRes</li>
<li>AnimatorRes</li>
<li>AnyRes</li>
<li>ArrayRes</li>
<li>AttrRes</li>
<li>BoolRes</li>
<li>ColorRes</li>
<li>DimenRes</li>
<li>DrawableRes</li>
<li>FractionRes</li>
<li>IdRes</li>
<li>IntegerRes</li>
<li>InterpolatorRes</li>
<li>LayoutRes</li>
<li>MenuRes</li>
<li>PluralsRes</li>
<li>RawRes</li>
<li>StringRes</li>
<li>StyleRes</li>
<li>StyleableRes</li>
<li>TransitionRes</li>
<li>XmlRes</li>
</ul>


<h2>Color值限定</h2>

<p>上面部分提到了<code>ColorRes</code>,用来限定颜色资源id,这里我们将使用<code>ColorInt</code>,一个用来限定Color值的注解.
在较早的TextView的setTextColor是这样实现的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTextColor</span><span class="o">(</span><span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mTextColor</span> <span class="o">=</span> <span class="n">ColorStateList</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span><span class='line'>    <span class="n">updateTextColors</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而上面的方法在调用时常常会出现这种情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">myTextView</span><span class="o">.</span><span class="na">setTextColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">colorAccent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上,如果传递过去的参数为color的资源id就会出现颜色取错误的问题,这个问题在过去还是比较严重的.好在<code>ColorInt</code>出现了,改变了这一问题.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTextColor</span><span class="o">(</span><span class="nd">@ColorInt</span> <span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mTextColor</span> <span class="o">=</span> <span class="n">ColorStateList</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span><span class='line'>    <span class="n">updateTextColors</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们再次传入Color资源值时,就会得到错误的提示.</p>

<h2>CheckResult</h2>

<p>这是一个关于返回结果的注解，用来注解方法，如果一个方法得到了结果，却没有使用这个结果，就会有错误出现，一旦出现这种错误，就说明你没有正确使用该方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@CheckResult</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">trim</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>线程相关</h2>

<p>Android中提供了四个与线程相关的注解</p>

<ul>
<li>@UiThread,通常可以等同于主线程,标注方法需要在UIThread执行,比如View类就使用这个注解</li>
<li>@MainThread 主线程,经常启动后创建的第一个线程</li>
<li>@WorkerThread 工作者线程,一般为一些后台的线程,比如AsyncTask里面的doInBackground就是这样的.</li>
<li>@BinderThread 注解方法必须要在BinderThread线程中执行,一般使用较少.</li>
</ul>


<p>一些示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//doInBackground is already annotated with @WorkerThread</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">Void</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">updateViews</span><span class="o">();</span><span class="c1">//error</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@UiThread</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateViews</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;updateViews ThreadInfo=&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意,这种情况下不会出现错误提示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="o">(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="n">updateViews</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然updateViews会在一个新的工作者线程中执行,但是在compile时没有错误提示.</p>

<p>因为它的判断依据是,如果updateView的线程注解(这里为@UiThread)和run(没有线程注解)不一致才会错误提示.如果run方法没有线程注解,则不提示.</p>

<h2>CallSuper</h2>

<p>重写的方法必须要调用super方法</p>

<p>使用这个注解,我们可以强制方法在重写时必须调用父类的方法
比如Application的<code>onCreate</code>,<code>onConfigurationChanged</code>等.</p>

<h2>Keep</h2>

<p>在Android编译生成APK的环节,我们通常需要设置minifyEnabled为true实现下面的两个效果</p>

<ul>
<li>混淆代码</li>
<li>删除没有用的代码</li>
</ul>


<p>但是出于某一些目的,我们需要不混淆某部分代码或者不删除某处代码,除了配置复杂的Proguard文件之外,我们还可以使用@Keep注解
.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Keep</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getBitmapWidth</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ButterKnife</h2>

<p>ButterKnife是一个用来绑定View,资源和回调的提高效率的工具.作者为Jake Wharton.
ButterKnife的好处</p>

<ul>
<li>使用BindView替代繁琐的findViewById和类型转换</li>
<li>使用OnClick注解方法来替换显式声明的匿名内部类</li>
<li>使用BindString,BindBool,BindDrawable等注解实现资源获取</li>
</ul>


<p>一个摘自Github的示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">ExampleActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@BindView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">user</span><span class="o">)</span> <span class="n">EditText</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@BindView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">pass</span><span class="o">)</span> <span class="n">EditText</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@BindString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">login_error</span><span class="o">)</span> <span class="n">String</span> <span class="n">loginErrorMessage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@OnClick</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">submit</span><span class="o">)</span> <span class="kt">void</span> <span class="n">submit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// TODO call server...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_activity</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ButterKnife</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// TODO Use fields...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ButterKnife工作原理</h3>

<p>以BindView注解使用为例,示例代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@BindView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">myTextView</span><span class="o">)</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">myTextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ButterKnife</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  1.程序在compile时,会根据注解自动生成两个类,这里为<strong>MainActivity_ViewBinder.class</strong>和<strong>MainActivity_ViewBinding.class</strong>  <br/>
  2.当我们调用<code>ButterKnife.bind(this);</code>时,会查找当前类对应的ViewBinder类,并调用bind方法,这里会调用到<code>MainActiivty_ViewBinder.bind</code>方法.<br/>
  3.MainActiivty_ViewBinder.bind方法实际上是调用了findViewById然后在进行类型转换,赋值给MainActivity的myTextView属性</p>

<p>ButterKnife的bind方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Unbinder</span> <span class="nf">bind</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Activity</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getViewBinder</span><span class="o">(</span><span class="n">target</span><span class="o">).</span><span class="na">bind</span><span class="o">(</span><span class="n">Finder</span><span class="o">.</span><span class="na">ACTIVITY</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ButterKnife的<code>getViewBinder</code>和<code>findViewBinderForClass</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@NonNull</span> <span class="nd">@CheckResult</span> <span class="nd">@UiThread</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getViewBinder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">targetClass</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">debug</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Looking up view binder for &quot;</span> <span class="o">+</span> <span class="n">targetClass</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">findViewBinderForClass</span><span class="o">(</span><span class="n">targetClass</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@NonNull</span> <span class="nd">@CheckResult</span> <span class="nd">@UiThread</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">findViewBinderForClass</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">//如果内存集合BINDERS中包含,则不再查找</span>
</span><span class='line'>    <span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">viewBinder</span> <span class="o">=</span> <span class="n">BINDERS</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cls</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">viewBinder</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">debug</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;HIT: Cached in view binder map.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">viewBinder</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">clsName</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">clsName</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;android.&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">clsName</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;java.&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">debug</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;MISS: Reached framework class. Abandoning search.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">NOP_VIEW_BINDER</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//使用反射创建实例</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">viewBindingClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">clsName</span> <span class="o">+</span> <span class="s">&quot;_ViewBinder&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">//noinspection unchecked</span>
</span><span class='line'>      <span class="n">viewBinder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewBinder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;)</span> <span class="n">viewBindingClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">debug</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;HIT: Loaded view binder class.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//如果没有找到,对父类进行查找</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">debug</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Not found. Trying superclass &quot;</span> <span class="o">+</span> <span class="n">cls</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>      <span class="n">viewBinder</span> <span class="o">=</span> <span class="n">findViewBinderForClass</span><span class="o">(</span><span class="n">cls</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InstantiationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Unable to create view binder for &quot;</span> <span class="o">+</span> <span class="n">clsName</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Unable to create view binder for &quot;</span> <span class="o">+</span> <span class="n">clsName</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//加入内存集合,便于后续的查找</span>
</span><span class='line'>    <span class="n">BINDERS</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">cls</span><span class="o">,</span> <span class="n">viewBinder</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">viewBinder</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MainActivity_ViewBinder的反编译源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">➜</span>  <span class="n">androidannotationsample</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">MainActivity_ViewBinder</span>
</span><span class='line'><span class="nl">Warning:</span> <span class="n">Binary</span> <span class="n">file</span> <span class="n">MainActivity_ViewBinder</span> <span class="n">contains</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity_ViewBinder</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;MainActivity_ViewBinder.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity_ViewBinder</span> <span class="kd">implements</span> <span class="n">butterknife</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">ViewBinder</span><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity_ViewBinder</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">butterknife</span><span class="o">.</span><span class="na">Unbinder</span> <span class="nf">bind</span><span class="o">(</span><span class="n">butterknife</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">Finder</span><span class="o">,</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// class com/example/admin/androidannotationsample/MainActivity_ViewBinding</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">aload_3</span>                           <span class="c1">// 创建ViewBinding实例</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method com/example/admin/androidannotationsample/MainActivity_ViewBinding.&quot;&lt;init&gt;&quot;:(Lcom/example/admin/androidannotationsample/MainActivity;Lbutterknife/internal/Finder;Ljava/lang/Object;)V</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="n">areturn</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">butterknife</span><span class="o">.</span><span class="na">Unbinder</span> <span class="nf">bind</span><span class="o">(</span><span class="n">butterknife</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">Finder</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/example/admin/androidannotationsample/MainActivity</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">aload_3</span>                           <span class="c1">//调用上面的重载方法</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method bind:(Lbutterknife/internal/Finder;Lcom/example/admin/androidannotationsample/MainActivity;Ljava/lang/Object;)Lbutterknife/Unbinder;</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="n">areturn</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MainActivity_ViewBinding的反编译源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">➜</span>  <span class="n">androidannotationsample</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">MainActivity_ViewBinding</span>
</span><span class='line'><span class="nl">Warning:</span> <span class="n">Binary</span> <span class="n">file</span> <span class="n">MainActivity_ViewBinding</span> <span class="n">contains</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity_ViewBinding</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;MainActivity_ViewBinding.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity_ViewBinding</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">butterknife</span><span class="o">.</span><span class="na">Unbinder</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">T</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">androidannotationsample</span><span class="o">.</span><span class="na">MainActivity_ViewBinding</span><span class="o">(</span><span class="n">T</span><span class="o">,</span> <span class="n">butterknife</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">Finder</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field target:Lcom/example/admin/androidannotationsample/MainActivity;</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">aload_3</span>                           <span class="c1">//调用Finder.findRequireViewAsType找到View,并进行类型转换,并复制给MainActivity中对一个的变量</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// int 2131427412</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// String field &#39;myTextView&#39;</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// class android/widget/TextView</span>
</span><span class='line'>                                            <span class="c1">// 内部实际调用了findViewById</span>
</span><span class='line'>      <span class="mi">18</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method butterknife/internal/Finder.findRequiredViewAsType:(Ljava/lang/Object;ILjava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// class android/widget/TextView</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Field com/example/admin/androidannotationsample/MainActivity.myTextView:Landroid/widget/TextView;</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">unbind</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field target:Lcom/example/admin/androidannotationsample/MainActivity;</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">ifnonnull</span>     <span class="mi">19</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// class java/lang/IllegalStateException</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">13</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// String Bindings already cleared.</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// Method java/lang/IllegalStateException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">18</span><span class="o">:</span> <span class="n">athrow</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">aconst_null</span>                       <span class="c1">// 解除绑定,设置对应的变量为null</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Field com/example/admin/androidannotationsample/MainActivity.myTextView:Landroid/widget/TextView;</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">25</span><span class="o">:</span> <span class="n">aconst_null</span>
</span><span class='line'>      <span class="mi">26</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field target:Lcom/example/admin/androidannotationsample/MainActivity;</span>
</span><span class='line'>      <span class="mi">29</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finder的源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">butterknife</span><span class="o">.</span><span class="na">internal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Dialog</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.annotation.IdRes</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;UnusedDeclaration&quot;</span><span class="o">)</span> <span class="c1">// Used by generated code.</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Finder</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">VIEW</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">View</span> <span class="n">findOptionalView</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">View</span><span class="o">)</span> <span class="n">source</span><span class="o">).</span><span class="na">findViewById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Context</span> <span class="n">getContext</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">View</span><span class="o">)</span> <span class="n">source</span><span class="o">).</span><span class="na">getContext</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">protected</span> <span class="n">String</span> <span class="n">getResourceEntryName</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="o">(</span><span class="n">View</span><span class="o">)</span> <span class="n">source</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">isInEditMode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&lt;unavailable while editing&gt;&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getResourceEntryName</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="n">ACTIVITY</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">View</span> <span class="n">findOptionalView</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">Activity</span><span class="o">)</span> <span class="n">source</span><span class="o">).</span><span class="na">findViewById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Context</span> <span class="n">getContext</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">Activity</span><span class="o">)</span> <span class="n">source</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">},</span>
</span><span class='line'>  <span class="n">DIALOG</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">View</span> <span class="n">findOptionalView</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">Dialog</span><span class="o">)</span> <span class="n">source</span><span class="o">).</span><span class="na">findViewById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Context</span> <span class="n">getContext</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">Dialog</span><span class="o">)</span> <span class="n">source</span><span class="o">).</span><span class="na">getContext</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//查找对应的Finder,如上面的ACTIVITY, DIALOG, VIEW</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">View</span> <span class="nf">findOptionalView</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">findOptionalViewAsType</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">who</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">findOptionalView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">who</span><span class="o">,</span> <span class="n">cls</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="n">View</span> <span class="nf">findRequiredView</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">who</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">findOptionalView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">view</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">getResourceEntryName</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Required view &#39;&quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">+</span> <span class="s">&quot;&#39; with ID &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">id</span>
</span><span class='line'>        <span class="o">+</span> <span class="s">&quot; for &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">who</span>
</span><span class='line'>        <span class="o">+</span> <span class="s">&quot; was not found. If this view is optional add &#39;@Nullable&#39; (fields) or &#39;@Optional&#39;&quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="s">&quot; (methods) annotation.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//来自ViewBinding的调用</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">findRequiredViewAsType</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">who</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">findRequiredView</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">who</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">castView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">who</span><span class="o">,</span> <span class="n">cls</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">castView</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">who</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">getResourceEntryName</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;View &#39;&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot;&#39; with ID &quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">id</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot; for &quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">who</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot; was of the wrong type. See cause for more info.&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span> <span class="c1">// That&#39;s the point.</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">castParam</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">from</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fromPos</span><span class="o">,</span> <span class="n">String</span> <span class="n">to</span><span class="o">,</span> <span class="kt">int</span> <span class="n">toPos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Parameter #&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="o">(</span><span class="n">fromPos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot; of method &#39;&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">from</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot;&#39; was of the wrong type for parameter #&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="o">(</span><span class="n">toPos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot; of method &#39;&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">to</span>
</span><span class='line'>          <span class="o">+</span> <span class="s">&quot;&#39;. See cause for more info.&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span> <span class="nf">getResourceEntryName</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="nd">@IdRes</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">source</span><span class="o">).</span><span class="na">getResources</span><span class="o">().</span><span class="na">getResourceEntryName</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Context</span> <span class="nf">getContext</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Otto</h2>

<p>Otto Bus 是一个专为Android改装的Event Bus,在很多项目中都有应用.由Square开源共享.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventBusTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;EventBusTest&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Bus</span> <span class="n">mBus</span>  <span class="o">=</span> <span class="k">new</span> <span class="n">Bus</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mBus</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">NetworkChangedEvent</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Produce</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">NetworkChangedEvent</span> <span class="nf">sendNetworkChangedEvent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">NetworkChangedEvent</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Subscribe</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNetworkChanged</span><span class="o">(</span><span class="n">NetworkChangedEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onNetworkChanged event=&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Otto 的工作原理</h2>

<ul>
<li>使用@Produce和@Subscribe标记方法</li>
<li>当调用bus.register方法,去检索注册对象的标记方法,并cache映射关系</li>
<li>当post事件时,将事件与handler方法对应加入事件队列</li>
<li>抽取事件队列,然后调用handler处理</li>
</ul>


<p>如下为对Otto如何利用注解的分析</p>

<p>register的源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">object</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;Object to register must not be null.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">enforcer</span><span class="o">.</span><span class="na">enforce</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//查找object中的Subscriber</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;</span> <span class="n">foundHandlersMap</span> <span class="o">=</span> <span class="n">handlerFinder</span><span class="o">.</span><span class="na">findAllSubscribers</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">type</span> <span class="o">:</span> <span class="n">foundHandlersMap</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;</span> <span class="n">handlers</span> <span class="o">=</span> <span class="n">handlersByType</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">handlers</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//concurrent put if absent</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;</span> <span class="n">handlersCreation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CopyOnWriteArraySet</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">handlers</span> <span class="o">=</span> <span class="n">handlersByType</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">handlersCreation</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">handlers</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">handlers</span> <span class="o">=</span> <span class="n">handlersCreation</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;</span> <span class="n">foundHandlers</span> <span class="o">=</span> <span class="n">foundHandlersMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">handlers</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">foundHandlers</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Object already registered.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">foundHandlersMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">type</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>      <span class="n">EventProducer</span> <span class="n">producer</span> <span class="o">=</span> <span class="n">producersByType</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">producer</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">producer</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;</span> <span class="n">foundHandlers</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">EventHandler</span> <span class="n">foundHandler</span> <span class="o">:</span> <span class="n">foundHandlers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">producer</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">foundHandler</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dispatchProducerResultToHandler</span><span class="o">(</span><span class="n">foundHandler</span><span class="o">,</span> <span class="n">producer</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HandlerFinder源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">HandlerFinder</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">EventProducer</span><span class="o">&gt;</span> <span class="n">findAllProducers</span><span class="o">(</span><span class="n">Object</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;</span> <span class="n">findAllSubscribers</span><span class="o">(</span><span class="n">Object</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Otto注解查找器</span>
</span><span class='line'>  <span class="n">HandlerFinder</span> <span class="n">ANNOTATED</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerFinder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">EventProducer</span><span class="o">&gt;</span> <span class="n">findAllProducers</span><span class="o">(</span><span class="n">Object</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">AnnotatedHandlerFinder</span><span class="o">.</span><span class="na">findAllProducers</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;</span> <span class="n">findAllSubscribers</span><span class="o">(</span><span class="n">Object</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">AnnotatedHandlerFinder</span><span class="o">.</span><span class="na">findAllSubscribers</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体查找实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** This implementation finds all methods marked with a {@link Subscribe} annotation. */</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;</span> <span class="n">findAllSubscribers</span><span class="o">(</span><span class="n">Object</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">listenerClass</span> <span class="o">=</span> <span class="n">listener</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;</span> <span class="n">handlersInMethod</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Method</span><span class="o">&gt;&gt;</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">SUBSCRIBERS_CACHE</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">listenerClass</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">methods</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Method</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>      <span class="n">loadAnnotatedSubscriberMethods</span><span class="o">(</span><span class="n">listenerClass</span><span class="o">,</span> <span class="n">methods</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">methods</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Method</span><span class="o">&gt;&gt;</span> <span class="n">e</span> <span class="o">:</span> <span class="n">methods</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;</span> <span class="n">handlers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">EventHandler</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">m</span> <span class="o">:</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">handlers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">EventHandler</span><span class="o">(</span><span class="n">listener</span><span class="o">,</span> <span class="n">m</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">handlersInMethod</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">handlers</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">handlersInMethod</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是关于Android中注解的一些总结,文章部分内容参考自 <a href="http://tools.android.com/tech-docs/support-annotations">Support Annotations</a> ,希望能帮助大家对注解有基础的认识,并运用到实际的日常开发之中.</p>

<p>参考文章:</p>

<ul>
<li><a href="http://tools.android.com/tech-docs/support-annotations">http://tools.android.com/tech-docs/support-annotations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Android中避免创建不必要的对象]]></title>
    <link href="http://droidyue.com/blog/2016/08/01/avoid-creating-unnecesssary-objects-in-android/"/>
    <updated>2016-08-01T19:28:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/08/01/avoid-creating-unnecesssary-objects-in-android</id>
    <content type="html"><![CDATA[<p>在编程开发中，内存的占用是我们经常要面对的现实，通常的内存调优的方向就是尽量减少内存的占用。这其中避免创建不必要的对象是一项重要的方面。</p>

<p>Android设备不像PC那样有着足够大的内存，而且单个App占用的内存实际上是比较小的。所以避免创建不必要的对象对于Android开发尤为重要。</p>

<p>本文会介绍一些常见的避免创建对象的场景和方法，其中有些属于微优化，有的属于编码技巧，当然也有确实能够起到显著效果的方法。</p>

<!--more-->


<h2>使用单例</h2>

<p>单例是我们常用的设计模式，使用这种模式，我们可以只提供一个对象供全局调用。因此单例是避免创建不必要的对象的一种方式。</p>

<p>单例模式上手容易，但是需要注意很多问题，最重要的就是多线程并发的情况下保证单例的唯一性。当然方式很多，比如饿汉式，懒汉式double-check等。这里介绍一个很极客的书写单例的方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleInstance</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SingleInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">SingleInstanceHolder</span><span class="o">.</span><span class="na">sInstance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingleInstanceHolder</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="n">SingleInstance</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SingleInstance</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中，类的静态初始化会在类被加载时触发，我们利用这个原理，可以实现利用这一特性，结合内部类，可以实现上面的代码，进行懒汉式创建实例。</p>

<p>关于单例，可以详细参考文章<a href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/">单例这种设计模式</a></p>

<h2>避免进行隐式装箱</h2>

<p>自动装箱是Java 5 引入的一个特性，即自动将原始类型的数据转换成对应的引用类型，比如将int转为Integer等。</p>

<p>这种特性，极大的减少了编码时的琐碎工作，但是稍有不注意就可能创建了不必要的对象了。比如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5000</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>   <span class="n">sum</span><span class="o">+=</span><span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码sum+=i可以看成sum = sum + i，但是+这个操作符不适用于Integer对象，首先sum进行自动拆箱操作，进行数值相加操作，最后发生自动装箱操作转换成Integer对象。其内部变化如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于我们这里声明的sum为Integer类型，在上面的循环中会创建将近4000个无用的Integer对象，在这样庞大的循环中，会降低程序的性能并且加重了垃圾回收的工作量。因此在我们编程时，需要注意到这一点，正确地声明变量类型，避免因为自动装箱引起的性能问题。</p>

<p>另外，当将原始数据类型的值加入集合中时，也会发生自动装箱，所以这个过程中也是有对象创建的。如有需要避免这种情况，可以选择<code>SparseArray</code>,<code>SparseBooleanArray</code>,<code>SparseLongArray</code>等容器。</p>

<p>关于Java中的自动装箱与拆箱，参考文章<a href="http://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java/">Java中的自动装箱与拆箱</a></p>

<h2>谨慎选用容器</h2>

<p>Java和Android提供了很多编辑的容器集合来组织对象。比如<code>ArrayList</code>,<code>ContentValues</code>,<code>HashMap</code>等。</p>

<p>然而，这样容器虽然使用起来方便，但也存在一些问题，就是他们会自动扩容，这其中不是创建新的对象，而是创建一个更大的容器对象。这就意味这将占用更大的内存空间。</p>

<p>以HashMap为例，当我们put key和value时，会检测是否需要扩容，如需要则双倍扩容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">V</span> <span class="n">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">putValueForNullKey</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//some code here</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// No entry for (non-null) key is present; create one</span>
</span><span class='line'>        <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span><span class="o">++</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">tab</span> <span class="o">=</span> <span class="n">doubleCapacity</span><span class="o">();</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">addNewEntry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于扩容的问题，通常有如下几种方法</p>

<ul>
<li>预估一个较大的容量值，避免多次扩容</li>
<li>寻找替代的数据结构，确保做到时间和空间的平衡</li>
</ul>


<h2>用好LaunchMode</h2>

<p>提到LaunchMode必然和Activity有关系。正常情况下我们在manifest中声明Activity，如果不设置LaunchMode就使用默认的standard模式。</p>

<p>一旦设置成standard，每当有一次Intent请求，就会创建一个新的Activity实例。举个例子，如果有10个撰写邮件的Intent，那么就会创建10个ComposeMailActivity的实例来处理这些Intent。结果很明显，这种模式会创建某个Activity的多个实例。</p>

<p>如果对于一个搜索功能的Activity，实际上保持一个Activity示例就可以了，使用standard模式会造成Activity实例的过多创建，因而不好。</p>

<p>确保符合常理的情况下，合理的使用LaunchMode，减少Activity的创建。</p>

<p>详细了解LaunchMode，阅读文章<a href="http://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/">深入讲解Android中Activity launchMode
</a></p>

<h2>Activity处理onConfigurationChanged</h2>

<p>这又是一个关于Activity对象创建相关的，因为Activity创建的成本相对其他对象要高很多。</p>

<p>默认情况下，当我们进行屏幕旋转时，原Activity会销毁，一个新的Activity被创建，之所以这样做是为了处理布局适应。当然这是系统默认的做法，在我们开发可控的情况下，我们可以避免重新创建Activity。</p>

<p>以屏幕切换为例，在Activity声明时，加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">activity</span>
</span><span class='line'>    <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;.MainActivity&quot;</span>
</span><span class='line'>    <span class="nl">android:</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;@string/app_name&quot;</span>
</span><span class='line'>    <span class="nl">android:</span><span class="n">theme</span><span class="o">=</span><span class="s">&quot;@style/AppTheme.NoActionBar&quot;</span>
</span><span class='line'>    <span class="nl">android:</span><span class="n">configChanges</span><span class="o">=</span><span class="s">&quot;orientation&quot;</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重写Activity的onConfigurationChanged方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigurationChanged</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">newConfig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onConfigurationChanged</span><span class="o">(</span><span class="n">newConfig</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">orientation</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_PORTRAIT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">portrait_layout</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">orientation</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_LANDSCAPE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">landscape_layout</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意字符串拼接</h2>

<p>字符串这个或许是最不起眼的一项了。这里主要讲的是字符串的拼接</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onCreate bundle=&quot;</span> <span class="o">+</span> <span class="n">savedInstanceState</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这应该是我们最常见的打log的方式了，然而字符串的拼接内部实际是生成StringBuilder对象，然后挨个进行append，直至最后调用toString方法的过程。</p>

<p>下面是一段代码循环的代码，这明显是很不好的，因为这其中创建了很多的StringBuilder对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span>  <span class="nf">implicitUseStringBuilder</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">+=</span> <span class="n">values</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>降低字符串拼接的方法有</p>

<ul>
<li>使用String.format替换</li>
<li>如果是循环拼接，建议显式在循环外部创建StringBuilder使用</li>
</ul>


<p>关于字符串拼接的原理考究，可以参考这篇文章<a href="http://droidyue.com/blog/2014/08/30/java-details-string-concatenation/">Java细节：字符串的拼接
</a></p>

<h2>减少布局层级</h2>

<p>布局层级过多，不仅导致inflate过程耗时，还多创建了多余的辅助布局。所以减少辅助布局还是很有必要的。可以尝试其他布局方式或者自定义视图来解决这类的问题。</p>

<h2>提前检查，减少不必要的异常</h2>

<p>异常对于程序来说，在平常不过了，然后其实异常的代码很高的，因为它需要收集现场数据stacktrace。但是还是有一些避免异常抛出的措施的，那就是做一些提前检查。</p>

<p>比如，我们想要打印一个文件的每一行字符串，没做检查的代码如下，是存在FileNotFoundException抛出可能的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">printFileByLine</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FileInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;textfile.txt&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">strLine</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">//Read File Line By Line</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">strLine</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>   <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Print the content on the console</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span><span class="n">strLine</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们进行文件是否存在的检查，抛出FileNotFoundException的概率会减少很多，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">printFileByLine</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">).</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">FileInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;textfile.txt&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">));</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">strLine</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">//Read File Line By Line</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">strLine</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>   <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Print the content on the console</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span><span class="n">strLine</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的检查是一个不错的编码技巧，建议采纳。</p>

<h2>不要过多创建线程</h2>

<p>在android中，我们应该尽量避免在主线程中执行耗时的操作，因而需要使用其他线程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">//do some io work</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这些能工作，但是创建线程的代价远比普通对象要高的多，建议使用HandlerThread或者ThreadPool做替换。</p>

<p>关于HandlerThread的文章，<a href="http://droidyue.com/blog/2015/11/08/make-use-of-handlerthread/index.html">详解 Android 中的 HandlerThread
</a></p>

<p>关于工作者线程,可以参考文章<a href="http://droidyue.com/blog/2015/12/20/worker-thread-in-android/">关于Android中工作者线程的思考</a></p>

<h2>使用注解替代枚举</h2>

<p>枚举是我们经常使用的一种用作值限定的手段，使用枚举比单纯的常量约定要靠谱。然后枚举的实质还是创建对象。好在Android提供了相关的注解，使得值限定在编译时进行，进而减少了运行时的压力。相关的注解为IntDef和StringDef。</p>

<p>如下以IntDef为例，介绍如何使用</p>

<p>在一个文件中如下声明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConstants</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">STATE_OPEN</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">STATE_CLOSE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">STATE_BROKEN</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@IntDef</span><span class="o">({</span><span class="n">STATE_OPEN</span><span class="o">,</span> <span class="n">STATE_CLOSE</span><span class="o">,</span> <span class="n">STATE_BROKEN</span><span class="o">})</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nd">@interface</span>  <span class="n">DoorState</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后设置书写这样的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setDoorState</span><span class="o">(</span><span class="nd">@AppConstants.DoorState</span> <span class="kt">int</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//some code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当调用方法时只能使用<code>STATE_OPEN</code>，<code>STATE_CLOSE</code>和<code>STATE_BROKEN</code>。使用其他值会导致编译提醒和警告。</p>

<p>想要深入了解注解，可以阅读<a href="http://droidyue.com/blog/2016/04/24/look-into-java-annotation/">详解Java中的注解</a></p>

<h2>选用对象池</h2>

<p>在Android中有很多池的概念，如线程池，连接池。包括我们很长用的Handler.Message就是使用了池的技术。</p>

<p>比如，我们想要使用Handler发送消息，可以使用<code>Message msg = new Message()</code>，也可以使用<code>Message msg = handler.obtainMessage()</code>。使用池并不会每一次都创建新的对象，而是优先从池中取对象。</p>

<p>使用对象池需要需要注意几点</p>

<ul>
<li>将对象放回池中，注意初始化对象的数据，防止存在脏数据</li>
<li>合理控制池的增长，避免过大，导致很多对象处于闲置状态</li>
</ul>


<h2>谨慎初始化Application</h2>

<p>Android应用可以支持开启多个进程。
通常的做法是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">service</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;.NetworkService&quot;</span>
</span><span class='line'>    <span class="nl">android:</span><span class="n">process</span><span class="o">=</span><span class="s">&quot;:network&quot;</span>
</span><span class='line'><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常我们在Application的<code>onCreate</code>方法中会做很多初始化操作,但是每个进程启动都需要执行到这个onCreate方法,为了避免不必要的初始化,建议按照进程(通过判断当前进程名)对应初始化.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;MyApplication&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">currentProcessName</span> <span class="o">=</span> <span class="n">getCurrentProcessName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onCreate currentProcessName=&quot;</span> <span class="o">+</span> <span class="n">currentProcessName</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getPackageName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">currentProcessName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//init for default process</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">currentProcessName</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;:network&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//init for netowrk process</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getCurrentProcessName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">currentProcessName</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ActivityManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ACTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">.</span><span class="na">RunningAppProcessInfo</span> <span class="n">processInfo</span> <span class="o">:</span> <span class="n">manager</span><span class="o">.</span><span class="na">getRunningAppProcesses</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">processInfo</span><span class="o">.</span><span class="na">pid</span> <span class="o">==</span> <span class="n">pid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">currentProcessName</span> <span class="o">=</span> <span class="n">processInfo</span><span class="o">.</span><span class="na">processName</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">currentProcessName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的一些知识就是关于Android中如何避免创建多余对象的总结.欢迎提出意见和观点,共同进步.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读懂 Android 中的代码混淆]]></title>
    <link href="http://droidyue.com/blog/2016/07/10/understanding-android-obfuscated-code-by-proguard/"/>
    <updated>2016-07-10T20:19:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/07/10/understanding-android-obfuscated-code-by-proguard</id>
    <content type="html"><![CDATA[<p>在Android开发工作中，我们都或多或少接触过代码混淆。比如我们想要集成某个SDK，往往需要做一些排除混淆的操作。</p>

<p>本文为本人的一些实践总结，介绍一些混淆的知识和注意事项。希望可以帮助大家更好的学习和使用代码混淆。</p>

<!--more-->


<h2>什么是混淆</h2>

<p>关于混淆维基百科上该词条的解释为</p>

<blockquote><p>代码混淆（Obfuscated code）亦称花指令，是将计算机程序的代码，转换成一种功能上等价，但是难于阅读和理解的形式的行为。</p></blockquote>

<p>代码混淆影响到的元素有</p>

<ul>
<li>类名</li>
<li>变量名</li>
<li>方法名</li>
<li>包名</li>
<li>其他元素</li>
</ul>


<h2>混淆的目的</h2>

<p>混淆的目的是为了<strong>加大反编译的成本</strong>,但是并不能彻底防止反编译.</p>

<h2>如何开启混淆</h2>

<ul>
<li>通常我们需要找到项目路径下app目录下的build.gradle文件</li>
<li>找到minifyEnabled这个配置,然后设置为true即可.</li>
</ul>


<p>一个简单的示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="kc">true</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">android</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span><span class="o">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">rules</span><span class="o">.</span><span class="na">pro</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>proguard是什么</h2>

<p>Java官网对Proguard的定义</p>

<blockquote><p>ProGuard is a free Java class file shrinker, optimizer, obfuscator, and preverifier. It detects and removes unused classes, fields, methods, and attributes. It optimizes bytecode and removes unused instructions. It renames the remaining classes, fields, and methods using short meaningless names. Finally, it preverifies the processed code for Java 6 or higher, or for Java Micro Edition.</p></blockquote>

<ul>
<li>Proguard是一个集文件压缩,优化,混淆和校验等功能的工具</li>
<li>它检测并删除无用的类,变量,方法和属性</li>
<li>它优化字节码并删除无用的指令.</li>
<li>它通过将类名,变量名和方法名重命名为无意义的名称实现混淆效果.</li>
<li>最后它还校验处理后的代码</li>
</ul>


<h2>混淆的常见配置</h2>

<h3>-keep</h3>

<p>Keep用来保留Java的元素不进行混淆. keep有很多变种,他们一般都是</p>

<ul>
<li>-keep</li>
<li>-keepclassmembers</li>
<li>-keepclasseswithmembers</li>
</ul>


<h4>一些例子</h4>

<p>保留某个包下面的类以及子包</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">widget</span><span class="o">.**</span>
</span></code></pre></td></tr></table></div></figure>


<p>保留所有类中使用otto的public方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">Otto</span>
</span><span class='line'><span class="o">-</span><span class="n">keepclassmembers</span> <span class="kd">class</span> <span class="err">** {</span>
</span><span class='line'>    <span class="nd">@com.squareup.otto.Subscribe</span> <span class="kd">public</span> <span class="o">*;</span>
</span><span class='line'>    <span class="nd">@com.squareup.otto.Produce</span> <span class="kd">public</span> <span class="o">*;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>保留Contants类的BOOK_NAME属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">keepclassmembers</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Constants</span> <span class="o">{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">BOOK_NAME</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多关于Proguard keep使用,可以参考<a href="http://proguard.sourceforge.net/">官方文档</a></p>

<h3>-dontwarn</h3>

<p>dontwarn是一个和keep可以说是形影不离,尤其是处理引入的library时.</p>

<p>引入的library可能存在一些无法找到的引用和其他问题,在build时可能会发出警告,如果我们不进行处理,通常会导致build中止.因此为了保证build继续,我们需要使用dontwarn处理这些我们无法解决的library的警告.</p>

<p>比如关闭Twitter sdk的警告,我们可以这样做</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">dontwarn</span> <span class="n">com</span><span class="o">.</span><span class="na">twitter</span><span class="o">.</span><span class="na">sdk</span><span class="o">.**</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他混淆相关的介绍,都可以通过访问官方文档获取.</p>

<h2>哪些不应该混淆</h2>

<h3>反射中使用的元素</h3>

<p>如果一些被混淆使用的元素(属性,方法,类,包名等)进行了混淆,可能会出现问题,如NoSuchFiledException或者NoSuchMethodException等.</p>

<p>比如下面的示例源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Constants.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Constants</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span>  <span class="n">String</span> <span class="n">BOOK_NAME</span> <span class="o">=</span> <span class="s">&quot;book_name&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//MainActivity.java</span>
</span><span class='line'><span class="n">Field</span> <span class="n">bookNameField</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">fieldName</span> <span class="o">=</span> <span class="s">&quot;BOOK_NAME&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">bookNameField</span> <span class="o">=</span> <span class="n">Constants</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="n">fieldName</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;bookNameField=&quot;</span> <span class="o">+</span> <span class="n">bookNameField</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchFieldException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果上面的Constants类进行了混淆,那么上面的语句就可能抛出<code>NoSuchFieldException</code>.</p>

<p>想要验证,我们需要看一看混淆的映射文件,文件名为<code>mapping.txt</code>,该文件保存着混淆前后的映射关系.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Constants</span> <span class="o">-&gt;</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">a</span><span class="o">:</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">BOOK_NAME</span> <span class="o">-&gt;</span> <span class="n">a</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">&lt;</span><span class="n">clinit</span><span class="o">&gt;()</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="n">clinit</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span> <span class="o">-&gt;</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Bundle</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">onCreate</span>
</span></code></pre></td></tr></table></div></figure>


<p>从映射文件中,我们可以看到</p>

<ul>
<li><code>Constants</code>类被重命名为<code>a</code>.</li>
<li>Constants类的<code>BOOK_NAME</code>重命名了<code>a</code></li>
</ul>


<p>然后,我们对APK文件进行反编译一探究竟.推荐一下这个在线反编译工具 <a href="http://www.javadecompilers.com/apk">http://www.javadecompilers.com/apk</a></p>

<p>注意,使用jadx decompiler后,会重新命名,正如下面注释<code>/* renamed from: com.example.admin.proguardsample.a */</code>所示.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* renamed from: com.example.admin.proguardsample.a */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C0314a</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">f1712a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">f1712a</span> <span class="o">=</span> <span class="s">&quot;book_name&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而MainActivity的翻译后的对应的源码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;bookNameField=&quot;</span> <span class="o">+</span> <span class="n">C0314a</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&quot;BOOK_NAME&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchFieldException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MainActivity中反射获取的属性名称依然是<code>BOOK_NAME</code>,而对应的类已经没有了这个属性名,所以会抛出NoSuchFieldException.</p>

<p><strong>注意</strong>，如果上面的filedName使用字面量或者字符串常量，即使混淆也不会出现NoSuchFieldException异常。因为这两种情况下，混淆可以感知外界对filed的引用，已经在调用出替换成了混淆后的名称。</p>

<h3>GSON的序列化与反序列化</h3>

<p>GSON是一个很好的工具,使用它我们可以轻松的实现序列化和反序列化.但是当它一旦遇到混淆,就需要我们注意了.</p>

<p>一个简单的类Item,用来处理序列化和反序列化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Item</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>序列化的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Item</span> <span class="n">toSerializeItem</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Item</span><span class="o">();</span>
</span><span class='line'><span class="n">toSerializeItem</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="n">toSerializeItem</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&quot;Apple&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">serializedText</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">toSerializeItem</span><span class="o">);</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;testGson serializedText=&quot;</span> <span class="o">+</span> <span class="n">serializedText</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>开启混淆之后的日志输出结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">I</span><span class="o">/</span><span class="nl">MainActivity:</span> <span class="n">testGson</span> <span class="n">serializedText</span><span class="o">={</span><span class="s">&quot;a&quot;</span><span class="o">:</span><span class="s">&quot;Apple&quot;</span><span class="o">,</span><span class="s">&quot;b&quot;</span><span class="o">:</span><span class="mi">2</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性名已经改变了,变成了没有意思的名称,对我们后续的某些处理是很麻烦的.</p>

<p>反序列化的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'><span class="n">Item</span> <span class="n">item</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;{\&quot;id\&quot;:1, \&quot;name\&quot;:\&quot;Orange\&quot;}&quot;</span><span class="o">,</span> <span class="n">Item</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;testGson item.id=&quot;</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="na">id</span> <span class="o">+</span> <span class="s">&quot;;item.name=&quot;</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的日志结果是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">I</span><span class="o">/</span><span class="nl">MainActivity:</span> <span class="n">testGson</span> <span class="n">item</span><span class="o">.</span><span class="na">id</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">item</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见,混淆之后,反序列化的属性值设置都失败了.</p>

<h4>为什么呢?</h4>

<ul>
<li>因为反序列化创建对象本质还是利用反射,会根据json字符串的key作为属性名称,value则对应属性值.</li>
</ul>


<h4>如何解决</h4>

<ul>
<li>将序列化和反序列化的类排除混淆</li>
<li>使用<code>@SerializedName</code>注解字段</li>
</ul>


<p>@SerializedName(parameter)通过注解属性实现了</p>

<ul>
<li>序列化的结果中,指定该属性key为parameter的值.</li>
<li>反序列化生成的对象中,用来匹配key与parameter并赋予属性值.</li>
</ul>


<p>一个简单的用法为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Item</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>枚举也不要混淆</h3>

<p>枚举是Java 5 中引入的一个很便利的特性,可以很好的替代之前的常量形式.</p>

<p>枚举使用起来很简单,如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Day</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MONDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="n">TUESDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="n">WEDNESDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="n">THURSDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="n">FRIDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="n">SATURDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="n">SUNDAY</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们这样使用枚举</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Day</span> <span class="n">day</span> <span class="o">=</span> <span class="n">Day</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;monday&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;testEnum day=&quot;</span> <span class="o">+</span> <span class="n">day</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行上面的的代码,通常情况下是没有问题的,是否说明枚举就可以混淆呢?</p>

<p><strong>其实不是</strong>.</p>

<p>为什么没有问题呢,因为默认的<a href="https://android.googlesource.com/platform/sdk/+/android-4.1.2_r2/files/proguard-android.txt">Proguard配置</a>已经处理了枚举相关的keep操作.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">For</span> <span class="n">enumeration</span> <span class="n">classes</span><span class="o">,</span> <span class="n">see</span> <span class="nl">http:</span><span class="c1">//proguard.sourceforge.net/manual/examples.html#enumerations</span>
</span><span class='line'><span class="o">-</span><span class="n">keepclassmembers</span> <span class="kd">enum</span> <span class="o">*</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">**[]</span> <span class="n">values</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">**</span> <span class="n">valueOf</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们手动去掉这条keep配置,再次运行,一个这样的异常会从天而降.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="nl">Process:</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">,</span> <span class="nl">PID:</span> <span class="mi">17246</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">AssertionError</span><span class="o">:</span> <span class="n">impossible</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="n">$1</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Enum</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">45</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="n">$1</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Enum</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">36</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">libcore</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">BasicLruCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">BasicLruCache</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">54</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="o">.</span><span class="na">getSharedConstants</span><span class="o">(</span><span class="n">Enum</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">211</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">Enum</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">191</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">j</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">Unknown</span> <span class="n">Source</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6237</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1107</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2369</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">handleLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2476</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.-</span><span class="n">wrap11</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="n">$H</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1344</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">148</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5417</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">726</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">616</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NoSuchMethodException</span><span class="o">:</span> <span class="n">values</span> <span class="o">[]</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="n">Class</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">624</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Class</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="n">Class</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">586</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="n">$1</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">Enum</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">41</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span> <span class="nl">AndroidRuntime:</span>  <span class="o">...</span> <span class="mi">19</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>好玩的事情来了,我们看一看为什么会抛出这个异常</p>

<p>1.首先,一个枚举类会生成一个对应的类文件,这里是Day.class.
这里类里面包含什么呢,看一下反编译的结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">➜</span>  <span class="n">proguardsample</span> <span class="n">javap</span>  <span class="n">Day</span>
</span><span class='line'><span class="nl">Warning:</span> <span class="n">Binary</span> <span class="n">file</span> <span class="n">Day</span> <span class="n">contains</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;Day.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="kd">extends</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">MONDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">TUESDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">WEDNESDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">THURSDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">FRIDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">SATURDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="n">SUNDAY</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span><span class="o">[]</span> <span class="nf">values</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>枚举实际是创建了一个继承自java.lang.Enum的类</li>
<li>java代码中的枚举类型最后转换成类中的static final属性</li>
<li>多出了两个方法,values()和valueOf().</li>
<li>values方法返回定义的枚举类型的数组集合,即从MONDAY到SUNDAY这7个类型.</li>
</ul>


<p>2.找寻崩溃轨迹
其中Day.valueOf(String)内部会调用Enum.valueOf(Class,String)方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Day</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/example/admin/proguardsample/Day</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/example/admin/proguardsample/Day</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="n">areturn</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Enum的valueOf方法会间接调用Day.values()方法,具体步骤是</p>

<ul>
<li>Enum.value调用Class.enumConstantDirectory方法获取String到枚举的映射</li>
<li>Class.enumConstantDirectory方法调用Class.getEnumConstantsShared获取当前的枚举类型</li>
<li>Class.getEnumConstantsShared方法使用反射调用values来获取枚举类型的集合.</li>
</ul>


<p>混淆之后,values被重新命名,所以会发生<code>NoSuchMethodException</code>.</p>

<p>关于调用轨迹,感兴趣的可以自己研究一下源码,不难.</p>

<h3>四大组件不建议混淆</h3>

<p>Android中四大组件我们都很常用,这些组件不能被混淆的原因为</p>

<ul>
<li> 四大组件声明必须在manifest中注册,如果混淆后类名更改,而混淆后的类名没有在manifest注册,是不符合Android组件注册机制的.</li>
<li> 外部程序可能使用组件的字符串类名,如果类名混淆,可能导致出现异常</li>
</ul>


<h3>注解不能混淆</h3>

<p>注解在Android平台中使用的越来越多,常用的有ButterKnife和Otto.很多场景下注解被用作在运行时反射确定一些元素的特征.</p>

<p>为了保证注解正常工作,我们不应该对注解进行混淆.Android工程默认的混淆配置已经包含了下面保留注解的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">keepattributes</span> <span class="o">*</span><span class="n">Annotation</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于注解,可以阅读这篇文章了解.<a href="http://droidyue.com/blog/2016/04/24/look-into-java-annotation/">详解Java中的注解</a></p>

<h2>其他不该混淆的</h2>

<ul>
<li>jni调用的java方法</li>
<li>java的native方法</li>
<li>js调用java的方法</li>
<li>第三方库不建议混淆</li>
<li>其他和反射相关的一些情况</li>
</ul>


<h2>stacktrace的恢复</h2>

<p>Proguard混淆带来了很多好处,但是也会导致我们收集到的崩溃的stacktrace变得更加难以读懂,好在有补救的措施,这里就介绍一个工具,retrace,用来将混淆后的stacktrace还原成混淆之前的信息.</p>

<h3>retrace脚本</h3>

<p>Android 开发环境默认带着retrace脚本,一般情况下路径为<code>./tools/proguard/bin/retrace.sh</code></p>

<h3>mapping映射表</h3>

<p>Proguard进行混淆之后,会生成一个映射表,文件名为mapping.txt,我们可以使用find工具在Project下查找</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">find</span> <span class="o">.</span> <span class="o">-</span><span class="n">name</span> <span class="n">mapping</span><span class="o">.</span><span class="na">txt</span>
</span><span class='line'><span class="o">./</span><span class="n">app</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">outputs</span><span class="o">/</span><span class="n">mapping</span><span class="o">/</span><span class="n">release</span><span class="o">/</span><span class="n">mapping</span><span class="o">.</span><span class="na">txt</span>
</span></code></pre></td></tr></table></div></figure>


<h3>一个崩溃stacktrace信息</h3>

<p>一个原始的崩溃信息是这样的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span><span class="o">:</span> <span class="n">Attempt</span> <span class="n">to</span> <span class="n">invoke</span> <span class="n">virtual</span> <span class="n">method</span> <span class="err">&#39;</span><span class="kt">int</span> <span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span><span class="err">&#39;</span> <span class="n">on</span> <span class="n">a</span> <span class="kc">null</span> <span class="n">object</span> <span class="n">reference</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6106</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1123</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2566</span><span class="o">)</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">AndroidRuntime</span><span class="o">(</span><span class="mi">24006</span><span class="o">):</span>    <span class="o">...</span> <span class="mi">10</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>对上面的信息处理,去掉<code>E/AndroidRuntime(24006):</code>这些字符串retrace才能正常工作.得到的字符串是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span><span class="o">:</span> <span class="n">Attempt</span> <span class="n">to</span> <span class="n">invoke</span> <span class="n">virtual</span> <span class="n">method</span> <span class="err">&#39;</span><span class="kt">int</span> <span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span><span class="err">&#39;</span> <span class="n">on</span> <span class="n">a</span> <span class="kc">null</span> <span class="n">object</span> <span class="n">reference</span>
</span><span class='line'><span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6106</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1123</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2566</span><span class="o">)</span>
</span><span class='line'><span class="o">...</span> <span class="mi">10</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的stacktrace保存成一个文本文件,比如名称为<code>npe_stacktrace.txt</code>.</p>

<p>开搞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">tools</span><span class="o">/</span><span class="n">proguard</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">retrace</span><span class="o">.</span><span class="na">sh</span>   <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">admin</span><span class="o">/</span><span class="n">Downloads</span><span class="o">/</span><span class="n">ProguardSample</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">outputs</span><span class="o">/</span><span class="n">mapping</span><span class="o">/</span><span class="n">release</span><span class="o">/</span><span class="n">mapping</span><span class="o">.</span><span class="na">txt</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">npe_stacktrace</span><span class="o">.</span><span class="na">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的易读的stacktrace是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span><span class="o">:</span> <span class="n">Attempt</span> <span class="n">to</span> <span class="n">invoke</span> <span class="n">virtual</span> <span class="n">method</span> <span class="err">&#39;</span><span class="kt">int</span> <span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span><span class="err">&#39;</span> <span class="n">on</span> <span class="n">a</span> <span class="kc">null</span> <span class="n">object</span> <span class="n">reference</span>
</span><span class='line'><span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">Utils</span><span class="o">.</span><span class="na">int</span> <span class="nf">getBitmapWidth</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">Bitmap</span><span class="o">)(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">proguardsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Bundle</span><span class="o">)(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6106</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1123</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2566</span><span class="o">)</span>
</span><span class='line'><span class="o">...</span> <span class="mi">10</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意:为了更加容易和高效分析stacktrace,建议保留SourceFile和LineNumber属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">keepattributes</span> <span class="n">SourceFile</span><span class="o">,</span><span class="n">LineNumberTable</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于混淆,我的一些个人经验总结就是这些.希望可以对大家有所帮助.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员怎样才能写出一篇好的技术文章]]></title>
    <link href="http://droidyue.com/blog/2016/06/19/how-to-write-an-awesome-post/"/>
    <updated>2016-06-19T20:53:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/06/19/how-to-write-an-awesome-post</id>
    <content type="html"><![CDATA[<p>首先，这算是一篇回答知乎问题<a href="https://www.zhihu.com/question/40716838"> 程序员怎样才能写出一篇好的博客或者技术文章？</a>的文章。</p>

<h2>什么是技术文章</h2>

<p>这是一个超级简单的问题，技术文章通常是指的涉及技术（这里指的是程序设计）的文章。</p>

<p>技术文章可以是</p>

<ul>
<li>原创文章</li>
<li>翻译文章，如最常见的翻译英文文章</li>
<li>一篇阐述问题相关的文章</li>
<li>一个系列的文章，如教程。</li>
</ul>


<!--more-->


<h2>为什么写技术文章</h2>

<p>写技术文章的目的据不完全统计，如下</p>

<ul>
<li>备忘</li>
<li>帮助他人</li>
<li>知识体系积累</li>
<li>知识变现</li>
<li>提高知名度，成为大牛，网红</li>
</ul>


<p>其中，出于备忘这个目的，适合书写类似工具使用类的文章，比如<a href="http://droidyue.com/blog/2016/03/06/summary-of-android-signing/">Android签名相关知识整理</a></p>

<p>帮助别人这个应该是必须的，但是这个其实并不简单，因为有些时候文章的观点有误，可能误导了别人，结果反而适得其反。</p>

<p>知识体系积累，如果是处于这个目的的话，其实写文章应该是把知识研究明白的附属产物。如果是站在这个角度，想要写出一篇文章就需要对涉及的内容要彻底掌握和吸收，行文也要严谨，观点需要反复斟酌。</p>

<p>知识变现这是一个有意思的话题，尤其是对于一些刚刚开通博客不久的人来说，一提到这个话题便热血沸腾。然而真正实现这一目标的一般都是持久经营博客的作者。除了付费翻译变现快之外，想要靠博客变现必须要经得起时间的积累，而且是优质的技术文章的长时间积累。</p>

<p>16年的关键词之一就是网红。写博客或者文章也是成为技术大牛和网红的一种途径。在这其中，持续不断的高质量文章产出是成功的不二法则。</p>

<h2>什么是好的技术文章</h2>

<ul>
<li>好的文章必然得到很多肯定，如果你准备阅读一篇幅很长的文章，不放先跳到评论部分或者分享量，看一看其他读者对本文的评论，再选择继续还是放弃阅读。</li>
<li>技术文章的目的是帮助读者答疑解惑，而<strong>一篇好的技术文章能够以很轻松易理解的形式讲明白一件事</strong>。</li>
</ul>


<h2>选题</h2>

<p>选题对于文章来说很重要，它影响到了你的文章的阅读量。通常情况下选题有两种归类</p>

<ul>
<li>以读者需求为导向</li>
<li>以个人研究为导向</li>
</ul>


<p>以读者需求为导向，通常的选题为</p>

<ul>
<li> 新技术的教程，比如Android Studio系列</li>
<li> 某些热门的技术和工具</li>
<li> 某些技术的系列文章，比如内存泄漏专题</li>
<li> 鸡汤文章，这可能是读者最愿意读的系列</li>
</ul>


<p>以个人研究为导向的，通常选题比较有限，个人觉得这方面一般多为技术细节，比如ThreadLocal的原理等</p>

<h2>结构清晰很重要</h2>

<p>有一个清晰的结构是很重要的，一篇文字密密麻麻的文章，通常不会太好。</p>

<p>关于结构，建议使用Markdown更好管理结构。</p>

<p>通常我一般使用<code>#</code>标签和无序的<code>*</code>来处理文章结构，示例如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##section的标题
</span><span class='line'>  * abc
</span><span class='line'>  * def
</span><span class='line'>  * ABC
</span><span class='line'>  * DEF</span></code></pre></td></tr></table></div></figure>


<p>除此之外</p>

<ul>
<li>尽量避免一段很长的段落</li>
<li>段落之间建议增加一个空白行</li>
</ul>


<h2>代码高亮是对读者的基本尊重</h2>

<p>作为技术文章，代码通常应该是必不可少的。既然有了代码，就必须要高亮展示。</p>

<h2>聆听他人的反馈</h2>

<p>建议文章的发布平台都配备必要的反馈评论组建，因为它可以帮助你收集到这些有效的反馈</p>

<ul>
<li>文章中的错误</li>
<li>解决问题的其他方法或者是更佳的方法</li>
<li>别人对你的文章的正向肯定评价</li>
<li>批评和建议</li>
</ul>


<h2>耗时问题</h2>

<p>听见过很多人为什么没有坚持写博客下来，大多数回答是没有时间。可见，写博客是很需要时间的。尤其是产出一篇好文章。</p>

<p>我认为一篇博文的耗时可以分为两个阶段</p>

<ul>
<li>研究阶段（阅读查阅资料并咀嚼消化）</li>
<li>书写阶段（将研究阶段的成果以图文形式输出）</li>
</ul>


<p>对于研究阶段的一些实践</p>

<ul>
<li>将技术切分成点,比如研究ThreadLocal，我们可以切分成ThreadLocal的用途，使用方法，内部实现原理等</li>
<li>切分成技术点之后，我们可以利用碎片时间对这些点逐个研究</li>
<li>研究的参考资料推荐官方文档，StackOverflow和英文技术博客</li>
</ul>


<p>完成了研究阶段之后，就是书写阶段了。</p>

<p>通常情况下，我自由写作时间主要集中在以下两段时间</p>

<ul>
<li> 周末</li>
<li> 平时的早起时光（一般为6点开始到上班通勤之前）</li>
</ul>


<p>这里建议书写阶段最好是一个持续的时间，减少间断写作带来的回忆成本。</p>

<h2>拖延症问题</h2>

<p>拖延症已然成为了现代人的一种通病，写篇博文也或多或少碰到它。</p>

<p>通常我一般的拖延症表现为</p>

<ul>
<li>提笔前，各种刷新闻，逛知乎，却迟迟不肯动笔</li>
<li>写作中，忙里偷闲，刷微博，看朋友圈</li>
</ul>


<p>关于如果解决，通常的做法就是强迫自己，做到克制，缓解并解决强迫症需要慢慢来，循序渐进。</p>

<p>关于拖延症，有一本书，大家可以选择去看以下。<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgVXE1oVByJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIQBV0aWxAdS0IJRmscX2QdPRs6Q2EMHTRLBmkEEXsyTwZDDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFgdcElMVAhECZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVABAPVBteCltXWwg%3D">戒了吧！拖延症：写给年轻人的拖延心理学</a></p>

<h2>关于翻译</h2>

<p>翻译也是写作博文的一种，对于技术文章通常是把英文翻译成中文。有过翻译经历的同学都有过这样的感悟。</p>

<p>翻译最痛苦的莫过于知道句子意思，却找不到信达雅的语句表达出来。</p>

<p>我认为解决上述痛苦的方式有两种</p>

<ul>
<li>学习翻译技巧</li>
<li>多阅读相关的翻译，从中吸取精华</li>
</ul>


<p>之前，一位负责对我翻译审校的前辈向我推荐过一本书，叫做<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgFWElsdCiJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIUBFwbUx0dS0IJRmtHZHRaEGtSF2BzZQJjCRFdWkAnHAFlDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhcHVB1SEwcaAGUbXhIFEwVcG1kXBRUBZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBBEOVRNTCltXWwg%3D">翻译的技巧</a> 如有需要，建议阅读。</p>

<h2>究竟怎么才能写好</h2>

<p>其实写好一篇博文不容易，但是我觉得做到以下几点应该就能产出好文章。</p>

<ul>
<li>把复杂的事情讲简单</li>
<li>文章结构做到清晰</li>
<li>多多写作，熟能生巧，写多了就有感觉了。</li>
</ul>


<p>本文观点仅为个人观点，希望能对人一些帮助。欢迎留言评论一起探讨，共同学习进步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View：Padding与绘制内容]]></title>
    <link href="http://droidyue.com/blog/2016/06/05/cutom-view-padding-and-drawcontent/"/>
    <updated>2016-06-05T21:29:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/06/05/cutom-view-padding-and-drawcontent</id>
    <content type="html"><![CDATA[<p>有些时候，扩展Android框架提供的view并不能很好地解决问题。很多情况下，我们需要进行view绘制来实现想要的效果。本文我们将介绍如何使用Canvas绘制折线图，同时也会介绍一些视图的尺寸和padding的一些工作原理。</p>

<!--more-->


<h2>简单绘制</h2>

<p>如果你打算在自定义的view中控制绘制内容，最好是直接继承自View类。它是最基础的UI绘制单元。它相对来说功能齐全，虽然相比其他子类少一些功能，但对于本文还是够用的。</p>

<p>自定义绘制步骤</p>

<p>  1.创建一个继承自View的类<br/>
  2.重写onDraw方法，在该方法内，使用Canvas进行内容绘制。</p>

<p>注意：这里我们不需要调用父类（View）的onDraw方法，因为View.onDraw方法为空实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>protected void onDraw(Canvas canvas) {
</span><span class='line'>    Paint paint = new Paint();
</span><span class='line'>    paint.setStyle(Style.STROKE);
</span><span class='line'>    paint.setColor(0xFF33B5E5);
</span><span class='line'>    paint.setStrokeWidth(4);
</span><span class='line'>    canvas.drawLine(0, 0, getWidth(), getHeight(), paint);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面代码的意思是</p>

<ul>
<li>绘制一个蓝色(0xFF33B5E5)的线</li>
<li>起点坐标为(0,0) 终点坐标为(getWidth(), getHeight())</li>
<li>线的宽度为4像素</li>
</ul>


<p>Paint是用来控制绘制的类，使用它我们可以实现超级多的效果。这里我们仅仅使用了它的简单功能。</p>

<p>注意，当我们绘制内容时，该View的左上角的坐标为(0,0)，不管这个view位于屏幕的哪个位置。View有两个方法，getLeft()和getTop()，但是它们返回的是这个相对与父View的位置信息，所以在绘制view内容时，不能使用这两个值。</p>

<h2>处理Padding</h2>

<p>通常情况下，我们可以在xml布局文件中设置padding等信息，但是对于上面的onDraw方法来说，由于我们并没有处理padding，所以布局文件的padding值是不生效的。</p>

<p>在View中，视图的宽度和高度包含了padding的值，比如一个view的宽度为100像素，两侧的padding值为10像素，那么view的内容只有80像素的绘制宽度。同理高度也是一样。</p>

<p>在View中获取宽度，我们可以使用getWidth()，获取padding，可以使用getPaddingTop(), getPaddingBottom, getPaddingLeft() and getPaddingRight()这些方法。</p>

<p>想要支持padding，通常修改起点和终点即可。这里我们设置起点为(getPaddingLeft(), getPaddingTop()) 终点为(getWidth() &ndash; getPaddingRight(),  getHeight() &ndash; getPaddingBottom())。</p>

<p>支持padding的onDraw代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">paint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">paint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mh">0xFF33B5E5</span><span class="o">);</span>
</span><span class='line'>    <span class="n">paint</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">getPaddingLeft</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">getWidth</span><span class="o">()</span> <span class="o">-</span> <span class="n">getPaddingRight</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bottom</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">getPaddingBottom</span><span class="o">();</span>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">top</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">bottom</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后后的效果图如下</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/LineChartView1-180x300.png" alt="LineChartView" /></p>

<p>因情况而已，你可能不许要支持padding，但是我还是建议你加上对padding的处理，以备后用。</p>

<h2>绘制折线图</h2>

<p>首先，为了便于理解，我们先看一看，最终的折线图的样子。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/LineChartView2.png" alt="LineChartView" /></p>

<p>想要绘制上图，实际上需要很多的点坐标，及x轴的值与y轴的值。为了简单，我们这里只需要提供y轴的值，而x轴的值就是y轴值数组的索引。</p>

<p>以下就是View提供的设置数据的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Sets the y data points of the line chart. The data points</span>
</span><span class='line'><span class="cm">* are assumed to be positive and equally spaced on the x-axis.</span>
</span><span class='line'><span class="cm">* The line chart will be scaled so that the entire height of</span>
</span><span class='line'><span class="cm">* the view is used.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* @param datapoints</span>
</span><span class='line'><span class="cm">*     y values of the line chart</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setChartData</span><span class="o">(</span><span class="kt">float</span><span class="o">[]</span> <span class="n">datapoints</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">datapoints</span> <span class="o">=</span> <span class="n">datapoints</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了提供值外，我们还需要对这些值进行缩放来填充视图，以下是一个对Y轴坐标进行缩放转换的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">float</span> <span class="nf">getYPosition</span><span class="o">(</span><span class="kt">float</span> <span class="n">value</span><span class="o">,</span> <span class="kt">float</span> <span class="n">maxValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">height</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">getPaddingTop</span><span class="o">()</span> <span class="o">-</span> <span class="n">getPaddingBottom</span><span class="o">();</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="n">value</span><span class="o">/</span><span class="n">maxValue</span><span class="o">)</span> <span class="o">*</span> <span class="n">height</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">height</span> <span class="o">-</span> <span class="n">value</span><span class="o">;</span><span class="c1">//确保数值低的点位于底部</span>
</span><span class='line'>        <span class="n">offset</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">offset</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>getYPosition这个方法</p>

<ul>
<li>它接受一个y轴坐标和一个最大的y轴坐标，进行缩放处理后，返回适用于该View的值</li>
<li><code>value = (value/maxValue) * height</code> 这一步用来获取缩放的初始值</li>
<li><code>float offset = height - value;</code>由于折线图需要y轴低的点位于底部，所以需要做转换</li>
<li>除此之外，我们还要考虑到paddingTop的值，这就是为什么要使用<code>offset = offset + getPaddingTop();</code>的原因</li>
</ul>


<p>我们现在就可以绘制折线图了，关于实现方案，我们根据数据点绘制很多线，但是我们这里采用Path来实现，相比之下，使用Path经过处理可以让绘制效果更好一些，如下为onDraw方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setShadowLayer</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mh">0x80000000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setAntiAlias</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPaint</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Path</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">maxValue</span> <span class="o">=</span> <span class="n">getMax</span><span class="o">();</span>
</span><span class='line'>        <span class="n">path</span><span class="o">.</span><span class="na">moveTo</span><span class="o">(</span><span class="n">getXPosition</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">getYPosition</span><span class="o">(</span><span class="n">mData</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">maxValue</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mData</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">path</span><span class="o">.</span><span class="na">lineTo</span><span class="o">(</span><span class="n">getXPosition</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">getYPosition</span><span class="o">(</span><span class="n">mData</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">maxValue</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">canvas</span><span class="o">.</span><span class="na">drawPath</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述方法用到的getXPosition实现如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">float</span> <span class="nf">getXPosition</span><span class="o">(</span><span class="kt">float</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="o">(</span><span class="n">getWidth</span><span class="o">()</span> <span class="o">/</span> <span class="n">mData</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>细节处理</h2>

<p>首先，我们需要的处理就是开启抗锯齿，开启后会减少线的锯齿感，让线看起来更加平滑。开启方法如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">paint</span><span class="o">.</span><span class="na">setAntiAlias</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次，我们需要增加一些阴影来达到更好的展示效果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">paint</span><span class="o">.</span><span class="na">setShadowLayer</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mh">0x80000000</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用上面的代码，我们使用paint绘制出来的每条线都会有阴影效果。该方法的参数解释如下</p>

<ul>
<li>第一个参数意思是阴影的半径，其值越大，阴影也越大。如果该值为0，则表示移除阴影效果。</li>
<li>第二个和第三个参数表示阴影的偏移量。我们设置2，2表示阴影相对实线向右偏移2个像素和向下偏移2个像素。</li>
<li>第三个参数为阴影的颜色</li>
</ul>


<p>同时我还增加了水平线作为背景这样看起来更符合折线图的效果，实现代码很简单，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">drawBackground</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">maxValue</span> <span class="o">=</span> <span class="n">getMax</span><span class="o">(</span><span class="n">datapoints</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">range</span> <span class="o">=</span> <span class="n">getLineDistance</span><span class="o">(</span><span class="n">maxValue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">paint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">paint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">GRAY</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">maxValue</span><span class="o">;</span> <span class="n">y</span> <span class="o">+=</span> <span class="n">range</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">float</span> <span class="n">yPos</span> <span class="o">=</span> <span class="n">getYPos</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">yPos</span><span class="o">,</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">yPos</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，我们还可以增加更多的效果，利用Canvas，我们可以绘制线，路径，矩形，椭圆，位图等内容。使用Paint，我们可以更改填充方式，颜色，画笔宽度等很多效果。建议了解以下这两个类的API，然后自己写点小例子熟悉一下。</p>

<h2>英文原文</h2>

<ul>
<li><a href="http://www.jayway.com/2012/07/03/creating-custom-android-views-part-2-how-padding-works-and-how-to-draw-your-own-content/">http://www.jayway.com/2012/07/03/creating-custom-android-views-part-2-how-padding-works-and-how-to-draw-your-own-content/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android代码规范利器： Checkstyle]]></title>
    <link href="http://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/"/>
    <updated>2016-05-22T22:40:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style</id>
    <content type="html"><![CDATA[<p>程序代码向来都不仅仅是用来运行的，写的一手好代码，易读，可维护应该是每个程序员所追求的。</p>

<p>每个团队都（应该）有一套优良统一的代码规范，而规范的检查依赖于人工检测就不太现实，好在我们有一些分析工具可以辅助我们做这件事。</p>

<p>checkstyle是一个帮助我们检查java代码规范的工具。checkstyle具有很强的配置性。本文将简单介绍一些实用的checkstyle知识。</p>

<!--more-->


<h2>配置checkstyle</h2>

<p>如下修改Project的build.gradle文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">checkstyle</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">checkstyle</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Checkstyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">source</span> <span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="n">include</span> <span class="err">&#39;</span><span class="o">**</span><span class="cm">/*.java&#39;</span>
</span><span class='line'><span class="cm">        exclude &#39;**/</span><span class="n">gen</span><span class="cm">/**&#39;</span>
</span><span class='line'><span class="cm">        exclude &#39;**/</span><span class="n">R</span><span class="o">.</span><span class="na">java</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="err">&#39;</span><span class="o">**/</span><span class="n">BuildConfig</span><span class="o">.</span><span class="na">java</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="n">configFile</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">rootDir</span><span class="o">,</span> <span class="s">&quot;checkstyle.xml&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">// empty classpath</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="o">=</span> <span class="n">files</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置checkstyle配置文件</h2>

<ul>
<li>每一个checkstyle配置文件必须包含Checker作为根module</li>
<li>TreeWalker module用来遍历java文件，并定义一些属性。</li>
<li>ThreeWalker module包含了多个子module，用来进行检查规范。</li>
</ul>


<p>注：checkstyle的配置文件，这里名称为checkstyle.xml 位置为项目根目录即可。</p>

<p>一个简单的checkstyle配置文件如下，包含了检测import，whitespace,blocks等module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span><span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="n">DOCTYPE</span> <span class="n">module</span> <span class="n">PUBLIC</span>
</span><span class='line'>    <span class="s">&quot;-//Puppy Crawl//DTD Check Configuration 1.2//EN&quot;</span>
</span><span class='line'>    <span class="s">&quot;http://www.puppycrawl.com/dtds/configuration_1_2.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Checker&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;TreeWalker&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;!--</span> <span class="n">Checks</span> <span class="k">for</span> <span class="n">imports</span>                              <span class="o">--&gt;</span>
</span><span class='line'>    <span class="o">&lt;!--</span> <span class="n">See</span> <span class="nl">http:</span><span class="c1">//checkstyle.sf.net/config_import.html --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;IllegalImport&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;RedundantImport&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;UnusedImports&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;processJavadoc&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;FallThrough&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;!--</span> <span class="n">Checks</span> <span class="k">for</span> <span class="n">whitespace</span>                               <span class="o">--&gt;</span>
</span><span class='line'>    <span class="o">&lt;!--</span> <span class="n">See</span> <span class="nl">http:</span><span class="c1">//checkstyle.sf.net/config_whitespace.html --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;GenericWhitespace&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;EmptyForIteratorPad&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;MethodParamPad&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;NoWhitespaceAfter&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;NoWhitespaceBefore&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;OperatorWrap&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;ParenPad&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;TypecastParenPad&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;WhitespaceAfter&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;WhitespaceAround&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;!--</span> <span class="n">Checks</span> <span class="k">for</span> <span class="n">blocks</span><span class="o">.</span> <span class="n">You</span> <span class="n">know</span><span class="o">,</span> <span class="n">those</span> <span class="o">{}</span><span class="err">&#39;</span><span class="n">s</span>         <span class="o">--&gt;</span>
</span><span class='line'>    <span class="o">&lt;!--</span> <span class="n">See</span> <span class="nl">http:</span><span class="c1">//checkstyle.sf.net/config_blocks.html --&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;AvoidNestedBlocks&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;LeftCurly&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;RightCurly&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">module</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;NeedBraces&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;tokens&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">module</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些关于checkstyle配置的链接</p>

<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html">Java官方代码规范</a></li>
<li><a href="http://checkstyle.sourceforge.net/reports/google-java-style.html">Google Java Style</a></li>
<li><a href="http://checkstyle.sourceforge.net/config.html">Checkstyle Configuration</a></li>
</ul>


<h2>使用</h2>

<p>在终端使用checkstyle很简单，操作如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">10</span><span class="o">:</span><span class="mi">31</span><span class="o">:</span><span class="mi">36</span><span class="o">-</span><span class="n">androidyue</span><span class="o">~/</span><span class="n">coding</span><span class="o">/</span><span class="n">CheckstyleSample$</span> <span class="o">./</span><span class="n">gradlew</span> <span class="n">checkstyle</span>
</span><span class='line'><span class="o">:</span><span class="n">checkstyle</span> <span class="n">UP</span><span class="o">-</span><span class="n">TO</span><span class="o">-</span><span class="n">DATE</span>
</span><span class='line'><span class="o">:</span><span class="nl">app:</span><span class="n">checkstyle</span>
</span><span class='line'>
</span><span class='line'><span class="n">BUILD</span> <span class="n">SUCCESSFUL</span>
</span><span class='line'>
</span><span class='line'><span class="n">Total</span> <span class="nl">time:</span> <span class="mf">10.819</span> <span class="n">secs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Android Studio Run之前执行checkstyle</h2>

<p>  1.选择菜单<code>Run--Edit Configurations</code><br/>
  2.选择<code>Android Application--app</code>，然后点击<code>Before Launch</code>区域的绿色加号
<img src="http://7jpolu.com1.z0.glb.clouddn.com/run_checkstyle.png" alt="Checkstyle Before Run" /><br/>
  3.点击下拉菜单<code>Gradle-aware Make</code>，出现如下输入对话框
<img src="http://7jpolu.com1.z0.glb.clouddn.com/input_checkstyle.png" alt="Input Checkstyle" />  <br/>
  4.输入checkstyle，然后从联想列表中选择对应的checkstyle,保存。<br/>
  5.再次运行就可以从Gradle Console中看到有checkstyle任务先执行了。</p>

<p>注意：如果上面的checkstyle失败，则不进行后续的run操作。</p>

<h2>每次git commit执行checkstyle</h2>

<p>除此之外，我们还可易利用git的hooks，进行一些很cool的事情。比如在每次commit之前自动执行checkstyle检测代码规范。</p>

<p>思路就是，利用git的pre-commit hook，执行checkstyle,如果没有违背规范的地方，就继续执行commit,否则不执行。</p>

<p>关键代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SCRIPT_DIR</span><span class="o">=</span><span class="n">$</span><span class="o">(</span><span class="n">dirname</span> <span class="s">&quot;$0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">SCRIPT_ABS_PATH</span><span class="o">=</span><span class="err">`</span><span class="n">cd</span> <span class="s">&quot;$SCRIPT_DIR&quot;</span><span class="o">;</span> <span class="n">pwd</span><span class="err">`</span>
</span><span class='line'><span class="n">$SCRIPT_ABS_PATH</span><span class="o">/../../</span><span class="n">gradlew</span> <span class="n">checkstyle</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="n">$</span><span class="o">?</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">0</span>   <span class="o">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;checkstyle OK&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="n">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>hook文件路径为<code>.git/hooks/pre-commit</code>。</p>

<p>完整的pre-commit脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">An</span> <span class="n">example</span> <span class="n">hook</span> <span class="n">script</span> <span class="n">to</span> <span class="n">verify</span> <span class="n">what</span> <span class="n">is</span> <span class="n">about</span> <span class="n">to</span> <span class="n">be</span> <span class="n">committed</span><span class="o">.</span>
</span><span class='line'><span class="err">#</span> <span class="n">Called</span> <span class="n">by</span> <span class="s">&quot;git commit&quot;</span> <span class="n">with</span> <span class="n">no</span> <span class="n">arguments</span><span class="o">.</span>  <span class="n">The</span> <span class="n">hook</span> <span class="n">should</span>
</span><span class='line'><span class="err">#</span> <span class="n">exit</span> <span class="n">with</span> <span class="n">non</span><span class="o">-</span><span class="n">zero</span> <span class="n">status</span> <span class="n">after</span> <span class="n">issuing</span> <span class="n">an</span> <span class="n">appropriate</span> <span class="n">message</span> <span class="k">if</span>
</span><span class='line'><span class="err">#</span> <span class="n">it</span> <span class="n">wants</span> <span class="n">to</span> <span class="n">stop</span> <span class="n">the</span> <span class="n">commit</span><span class="o">.</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">To</span> <span class="n">enable</span> <span class="k">this</span> <span class="n">hook</span><span class="o">,</span> <span class="n">rename</span> <span class="k">this</span> <span class="n">file</span> <span class="n">to</span> <span class="s">&quot;pre-commit&quot;</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">git</span> <span class="n">rev</span><span class="o">-</span><span class="n">parse</span> <span class="o">--</span><span class="n">verify</span> <span class="n">HEAD</span> <span class="o">&gt;/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span>
</span><span class='line'><span class="n">then</span>
</span><span class='line'>  <span class="n">against</span><span class="o">=</span><span class="n">HEAD</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Initial</span> <span class="nl">commit:</span> <span class="n">diff</span> <span class="n">against</span> <span class="n">an</span> <span class="n">empty</span> <span class="n">tree</span> <span class="n">object</span>
</span><span class='line'>  <span class="n">against</span><span class="o">=</span><span class="mi">4</span><span class="n">b825dc642cb6eb9a060e54bf8d69288fbee4904</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="n">SCRIPT_DIR</span><span class="o">=</span><span class="n">$</span><span class="o">(</span><span class="n">dirname</span> <span class="s">&quot;$0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">SCRIPT_ABS_PATH</span><span class="o">=</span><span class="err">`</span><span class="n">cd</span> <span class="s">&quot;$SCRIPT_DIR&quot;</span><span class="o">;</span> <span class="n">pwd</span><span class="err">`</span>
</span><span class='line'><span class="n">$SCRIPT_ABS_PATH</span><span class="o">/../../</span><span class="n">gradlew</span> <span class="n">checkstyle</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="n">$</span><span class="o">?</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">0</span>   <span class="o">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;checkstyle OK&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">allow</span> <span class="n">non</span><span class="o">-</span><span class="n">ASCII</span> <span class="n">filenames</span> <span class="n">set</span> <span class="k">this</span> <span class="n">variable</span> <span class="n">to</span> <span class="kc">true</span><span class="o">.</span>
</span><span class='line'><span class="n">allownonascii</span><span class="o">=</span><span class="n">$</span><span class="o">(</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">bool</span> <span class="n">hooks</span><span class="o">.</span><span class="na">allownonascii</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Redirect</span> <span class="n">output</span> <span class="n">to</span> <span class="n">stderr</span><span class="o">.</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">1</span><span class="o">&gt;&amp;</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">Cross</span> <span class="n">platform</span> <span class="n">projects</span> <span class="n">tend</span> <span class="n">to</span> <span class="n">avoid</span> <span class="n">non</span><span class="o">-</span><span class="n">ASCII</span> <span class="n">filenames</span><span class="o">;</span> <span class="n">prevent</span>
</span><span class='line'><span class="err">#</span> <span class="n">them</span> <span class="n">from</span> <span class="n">being</span> <span class="n">added</span> <span class="n">to</span> <span class="n">the</span> <span class="n">repository</span><span class="o">.</span> <span class="n">We</span> <span class="n">exploit</span> <span class="n">the</span> <span class="n">fact</span> <span class="n">that</span> <span class="n">the</span>
</span><span class='line'><span class="err">#</span> <span class="n">printable</span> <span class="n">range</span> <span class="n">starts</span> <span class="n">at</span> <span class="n">the</span> <span class="n">space</span> <span class="n">character</span> <span class="n">and</span> <span class="n">ends</span> <span class="n">with</span> <span class="n">tilde</span><span class="o">.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s">&quot;$allownonascii&quot;</span> <span class="o">!=</span> <span class="s">&quot;true&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">Note</span> <span class="n">that</span> <span class="n">the</span> <span class="n">use</span> <span class="n">of</span> <span class="n">brackets</span> <span class="n">around</span> <span class="n">a</span> <span class="n">tr</span> <span class="n">range</span> <span class="n">is</span> <span class="n">ok</span> <span class="n">here</span><span class="o">,</span> <span class="o">(</span><span class="n">it</span><span class="err">&#39;</span><span class="n">s</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">even</span> <span class="n">required</span><span class="o">,</span> <span class="k">for</span> <span class="n">portability</span> <span class="n">to</span> <span class="n">Solaris</span> <span class="mi">10</span><span class="err">&#39;</span><span class="n">s</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">tr</span><span class="o">),</span> <span class="n">since</span>
</span><span class='line'>  <span class="err">#</span> <span class="n">the</span> <span class="n">square</span> <span class="n">bracket</span> <span class="n">bytes</span> <span class="n">happen</span> <span class="n">to</span> <span class="n">fall</span> <span class="n">in</span> <span class="n">the</span> <span class="n">designated</span> <span class="n">range</span><span class="o">.</span>
</span><span class='line'>  <span class="n">test</span> <span class="n">$</span><span class="o">(</span><span class="n">git</span> <span class="n">diff</span> <span class="o">--</span><span class="n">cached</span> <span class="o">--</span><span class="n">name</span><span class="o">-</span><span class="n">only</span> <span class="o">--</span><span class="n">diff</span><span class="o">-</span><span class="n">filter</span><span class="o">=</span><span class="n">A</span> <span class="o">-</span><span class="n">z</span> <span class="n">$against</span> <span class="o">|</span>
</span><span class='line'>    <span class="n">LC_ALL</span><span class="o">=</span><span class="n">C</span> <span class="n">tr</span> <span class="o">-</span><span class="n">d</span> <span class="err">&#39;</span><span class="o">[</span> <span class="o">-~]</span><span class="err">\</span><span class="mi">0</span><span class="err">&#39;</span> <span class="o">|</span> <span class="n">wc</span> <span class="o">-</span><span class="n">c</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">then</span>
</span><span class='line'>  <span class="n">cat</span> <span class="o">&lt;&lt;</span><span class="err">\</span><span class="n">EOF</span>
</span><span class='line'><span class="nl">Error:</span> <span class="n">Attempt</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">ASCII</span> <span class="n">file</span> <span class="n">name</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">This</span> <span class="n">can</span> <span class="n">cause</span> <span class="n">problems</span> <span class="k">if</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">work</span> <span class="n">with</span> <span class="n">people</span> <span class="n">on</span> <span class="n">other</span> <span class="n">platforms</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">To</span> <span class="n">be</span> <span class="n">portable</span> <span class="n">it</span> <span class="n">is</span> <span class="n">advisable</span> <span class="n">to</span> <span class="n">rename</span> <span class="n">the</span> <span class="n">file</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">If</span> <span class="n">you</span> <span class="n">know</span> <span class="n">what</span> <span class="n">you</span> <span class="n">are</span> <span class="n">doing</span> <span class="n">you</span> <span class="n">can</span> <span class="n">disable</span> <span class="k">this</span> <span class="n">check</span> <span class="nl">using:</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">git</span> <span class="n">config</span> <span class="n">hooks</span><span class="o">.</span><span class="na">allownonascii</span> <span class="kc">true</span>
</span><span class='line'><span class="n">EOF</span>
</span><span class='line'>  <span class="n">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">If</span> <span class="n">there</span> <span class="n">are</span> <span class="n">whitespace</span> <span class="n">errors</span><span class="o">,</span> <span class="n">print</span> <span class="n">the</span> <span class="n">offending</span> <span class="n">file</span> <span class="n">names</span> <span class="n">and</span> <span class="n">fail</span><span class="o">.</span>
</span><span class='line'><span class="n">exec</span> <span class="n">git</span> <span class="n">diff</span><span class="o">-</span><span class="n">index</span> <span class="o">--</span><span class="n">check</span> <span class="o">--</span><span class="n">cached</span> <span class="n">$against</span> <span class="o">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整下载地址为:<a href="http://7jpqsg.com1.z0.glb.clouddn.com/pre-commit">pre-commit</a></p>

<p>注意，放入本地后，需要确保该文件具有可执行权限。如<code>chmod a+x pre-commit</code></p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-华丽的风格线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>想要写出更规范优秀的代码，推荐阅读Bob大叔的<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEwZSHloUBSJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQMTAFAaWhIdS0IJRmtNQntCPVIjTWFPTxVtKF18ZAQUWRlDDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhcHQAWAmUbXhIAGgRcHF0TBhsHZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsUAxUCVBpcCltXWwg%3D">《代码整洁之道》</a>。</p>

<p>本书不仅仅是告诉你要做什么，还教会你什么不能做。书中有关于代码味道的一个章节，全面列举了大多数程序员遇到的各种错误，其后的章节则详细描述如何纠正这些错误。比如如何将过长的switch声明转换成遵循开放闭合原则的模型，如何利用集成和多态。再次啰嗦一下，这本书确实值得每个程序员拥有。书中的例子使用Java语言，但依然适合使用其他面向对象编程语言的开发者阅读。想要撸的一手好码，这本书必不可少。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探究Java中的克隆]]></title>
    <link href="http://droidyue.com/blog/2016/05/15/dive-into-java-clone/"/>
    <updated>2016-05-15T21:10:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/05/15/dive-into-java-clone</id>
    <content type="html"><![CDATA[<p>克隆，想必大家都有耳闻，世界上第一只克隆羊多莉就是利用细胞核移植技术将哺乳动物的成年体细胞培育出新个体，甚为神奇。其实在Java中也存在克隆的概念，即实现对象的复制。</p>

<p>本文将尝试介绍一些关于Java中的克隆和一些深入的问题，希望可以帮助大家更好地了解克隆。</p>

<!--more-->


<h2>Java中的赋值</h2>

<p>在Java中，赋值是很常用的，一个简单的赋值如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//原始类型</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//引用类型</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">weekdays</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">gongzuori</span> <span class="o">=</span> <span class="n">weekdays</span><span class="o">;</span><span class="c1">//仅拷贝引用</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上述代码中。</p>

<ul>
<li>如果是原始数据类型，赋值传递的为真实的值</li>
<li>如果是引用数据类型，赋值传递的为对象的引用，而不是对象。</li>
</ul>


<p>了解了数据类型和引用类型的这个区别，便于我们了解clone。</p>

<h2>Clone</h2>

<p>在Java中，clone是将已有对象在内存中复制出另一个与之相同的对象的过程。java中的克隆为逐域复制。</p>

<p>在Java中想要支持clone方法，<strong>需要首先实现Cloneable接口</strong></p>

<p>Cloneable其实是有点奇怪的，它不同与我们常用到的接口，它内部不包含任何方法，它仅仅是一个标记接口。</p>

<p>其源码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Cloneable</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于cloneable，需要注意的</p>

<ul>
<li>如果想要支持clone，就需要实现Cloneable 接口</li>
<li>如果没有实现Cloneable接口的调用clone方法，会抛出CloneNotSupportedException异常。</li>
</ul>


<p><strong>然后是重写clone方法，并修改成public访问级别</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">CloneableImp</span> <span class="kd">implements</span> <span class="n">Cloneable</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Child</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用clone方法复制对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CloneableImp</span> <span class="n">imp1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CloneableImp</span><span class="o">();</span>
</span><span class='line'><span class="n">imp1</span><span class="o">.</span><span class="na">child</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Child</span><span class="o">(</span><span class="s">&quot;Andy&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">imp1</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>  <span class="n">CloneableImp</span> <span class="n">imp2</span> <span class="o">=</span> <span class="o">(</span><span class="n">CloneableImp</span><span class="o">)</span><span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;main imp2.child.name=&quot;</span> <span class="o">+</span> <span class="n">imp2</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>浅拷贝</h2>

<p>上面的代码实现的clone实际上是属于浅拷贝（Shallow Copy）。</p>

<p>关于浅拷贝，你该了解的</p>

<ul>
<li>使用默认的clone方法</li>
<li>对于原始数据域进行值拷贝</li>
<li>对于引用类型仅拷贝引用</li>
<li>执行快，效率高</li>
<li>不能做到数据的100%分离。</li>
<li>如果一个对象只包含原始数据域或者不可变对象域，推荐使用浅拷贝。</li>
</ul>


<p>关于无法做到数据分离，我们可以使用这段代码验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CloneableImp</span> <span class="n">imp1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CloneableImp</span><span class="o">();</span>
</span><span class='line'><span class="n">imp1</span><span class="o">.</span><span class="na">child</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Child</span><span class="o">(</span><span class="s">&quot;Andy&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">imp1</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>  <span class="n">CloneableImp</span> <span class="n">imp2</span> <span class="o">=</span> <span class="o">(</span><span class="n">CloneableImp</span><span class="o">)</span><span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="n">imp2</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&quot;Bob&quot;</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;main imp1.child.name=&quot;</span> <span class="o">+</span> <span class="n">imp1</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码我们使用了imp1的clone方法克隆出imp2,然后修改 imp2.child.name 为 Bob,然后打印imp1.child.name 得到的结果是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">main</span> <span class="n">imp1</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因是浅拷贝并没有做到数据的100%分离，imp1和imp2共享同一个Child对象，所以一个修改会影响到另一个。</p>

<h2>深拷贝</h2>

<p>深拷贝可以解决数据100%分离的问题。只需要对上面代码进行一些修改即可。</p>

<ol>
<li>Child实现Cloneable接口。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Child</span> <span class="kd">implements</span>  <span class="n">Cloneable</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Child</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Child [name=&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.重写clone方法，调用数据域的clone方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">CloneableImp</span> <span class="kd">implements</span> <span class="n">Cloneable</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Child</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CloneableImp</span> <span class="n">obj</span> <span class="o">=</span> <span class="o">(</span><span class="n">CloneableImp</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>      <span class="n">obj</span><span class="o">.</span><span class="na">child</span> <span class="o">=</span> <span class="o">(</span><span class="n">Child</span><span class="o">)</span> <span class="n">child</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们再次修改imp2.child.name就不会影响到imp1.child.name的值了，因为imp1和imp2各自拥有自己的child对象，因为做到了数据的100%隔离。</p>

<p>关于深拷贝的一些特点</p>

<ul>
<li>需要重写clone方法，不仅仅只调用父类的方法，还需调用属性的clone方法</li>
<li>做到了原对象与克隆对象之间100%数据分离</li>
<li>如果是对象存在引用类型的属性，建议使用深拷贝</li>
<li>深拷贝比浅拷贝要更加耗时，效率更低</li>
</ul>


<h2>为什么使用克隆</h2>

<p>很重要并且常见的常见就是：某个API需要提供一个List集合，但是又不希望调用者的修改影响到自身的变化，因此需要克隆一份对象，以此达到数据隔离的目的。</p>

<h2>应尽量避免clone</h2>

<p>1.通常情况下，实现接口是为了表明类可以为它的客户做些什么，而Cloneable仅仅是一个标记接口，而且还改变了超类中的手保护的方法的行为，是接口的一种极端非典型的用法，不值得效仿。</p>

<p>2.Clone方法约定及其脆弱
clone方法的Javadoc描述有点暧昧模糊，如下为 Java SE8的约定</p>

<blockquote><p>clone方法创建并返回该对象的一个拷贝。而拷贝的精确含义取决于该对象的类。一般的含义是，对于任何对象x，表达式</p>

<p>x.clone() != x 为 true
x.clone().getClass() == x.getClass() 也返回true，但非必须
x.clone().equals(x)  也返回true，但也不是必须的</p></blockquote>

<p>上面的第二个和第三个表达式很容易就返回false。因而唯一能保证永久为true的就是表达式一，即两个对象为独立的对象。</p>

<p>3.可变对象final域
在克隆方法中，如果我们需要对可变对象的final域也进行拷贝，由于final的限制，所以实际上是无法编译通过的。因此为了实现克隆，我们需要考虑舍去该可变对象域的final关键字。</p>

<p>4.线程安全
如果你决定用线程安全的类实现Cloneable接口，需要保证它的clone方法做好同步工作。默认的Object.clone方法是没有做同步的。</p>

<p>总的来说，java中的clone方法实际上并不是完善的，建议尽量避免使用。如下是一些替代方案。</p>

<h2>Copy constructors</h2>

<p>使用复制构造器也可以实现对象的拷贝。</p>

<ul>
<li>复制构造器也是构造器的一种</li>
<li>只接受一个参数，参数类型为当前的类</li>
<li>目的是生成一个与参数相同的新对象</li>
</ul>


<p>复制构造器相比clone方法的优势是简单，易于实现。<br/>
一段使用了复制构造器的代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Wheel</span> <span class="n">wheel</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">manufacturer</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Wheel</span> <span class="n">wheel</span><span class="o">,</span> <span class="n">String</span> <span class="n">manufacturer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">wheel</span> <span class="o">=</span> <span class="n">wheel</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">manufacturer</span> <span class="o">=</span> <span class="n">manufacturer</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//copy constructor</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">wheel</span><span class="o">,</span> <span class="n">car</span><span class="o">.</span><span class="na">manufacturer</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Wheel</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">brand</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，上面的代码实现为浅拷贝，如果想要实现深拷贝，参考如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//copy constructor</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Wheel</span> <span class="n">wheel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Wheel</span><span class="o">();</span>
</span><span class='line'>  <span class="n">wheel</span><span class="o">.</span><span class="na">brand</span> <span class="o">=</span> <span class="n">car</span><span class="o">.</span><span class="na">wheel</span><span class="o">.</span><span class="na">brand</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">wheel</span> <span class="o">=</span> <span class="n">wheel</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">manufacturer</span> <span class="o">=</span> <span class="n">car</span><span class="o">.</span><span class="na">manufacturer</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了更加便捷，我们还可以为上述类增加一个静态的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Car</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Car</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Serializable实现深拷贝</h2>

<p>其实，使用序列化也可以实现对象的深拷贝。简略代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeepCopyExample</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">6098694917984051357L</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Child</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">DeepCopyExample</span> <span class="nf">copy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">DeepCopyExample</span> <span class="n">copy</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ByteArrayOutputStream</span> <span class="n">baos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>          <span class="n">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectOutputStream</span><span class="o">(</span><span class="n">baos</span><span class="o">);</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>          <span class="n">ByteArrayInputStream</span> <span class="n">bais</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>
</span><span class='line'>          <span class="n">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectInputStream</span><span class="o">(</span><span class="n">bais</span><span class="o">);</span>
</span><span class='line'>          <span class="n">copy</span> <span class="o">=</span> <span class="o">(</span><span class="n">DeepCopyExample</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，Child必须实现Serializable接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Child</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">6832122780722711261L</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Child</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Child [name=&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用示例兼测试代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DeepCopyExample</span> <span class="n">example</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DeepCopyExample</span><span class="o">();</span>
</span><span class='line'><span class="n">example</span><span class="o">.</span><span class="na">child</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Child</span><span class="o">(</span><span class="s">&quot;Example&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'><span class="n">DeepCopyExample</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">example</span><span class="o">.</span><span class="na">copy</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">copy</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">copy</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&quot;Copied&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;example.child=&quot;</span> <span class="o">+</span> <span class="n">example</span><span class="o">.</span><span class="na">child</span> <span class="o">+</span> <span class="s">&quot;;copy.child=&quot;</span> <span class="o">+</span> <span class="n">copy</span><span class="o">.</span><span class="na">child</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//输出结果：example.child=Child [name=Example];copy.child=Child [name=Copied]</span>
</span></code></pre></td></tr></table></div></figure>


<p>由输出结果来看，copy对象的child值修改不影响example对象的child值，即使用序列化可以实现对象的深拷贝。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.avajava.com/tutorials/lessons/how-do-i-perform-a-deep-clone-using-serializable.html">How do I perform a deep clone using Serializable?</a></li>
<li><a href="http://www.javapractices.com/topic/TopicAction.do?Id=12">Copy constructors</a></li>
</ul>


<h2>推荐一本书</h2>

<p><a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEwZRElMUASJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQMTA1wTWhYdS0IJRmtqe1NiNnklRmBhXwB4ORJBcVcREz5lDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhcHVB1SEwcaAGUbXhIBEg9THVgXABYGZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsUAxYOXRpYCltXWwg%3D">《Effective Java》</a>第11条即介绍谨慎使用clone。除此之外，本书还详细介绍了很多关于Java细节的知识，是Java程序员很值得阅读的一本书。本书也是经典的Jolt获奖作品，作者是Joshua Bloch大神。是一本深入研究Java的参考书籍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些快速提高Android开发的脚本与技巧（终端篇）]]></title>
    <link href="http://droidyue.com/blog/2016/05/02/android-development-bash-scripts/"/>
    <updated>2016-05-02T21:09:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/05/02/android-development-bash-scripts</id>
    <content type="html"><![CDATA[<p>正所谓“工欲善其事必先利其器”,一个好的工具或者技巧能让提升工作效率，起到事半功倍的效果。在这里斗胆列出一些窃以为一些可能快速提高Android日常开发的脚本，希望可以为大家提供一些好的工具，有帮助的思路。</p>

<!--more-->


<h2>打印Debug日志信息</h2>

<p>该脚本打印了包含崩溃，异常，dalvikvm信息，严格模式和网页CONSOLE等信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">#Explanations:</span>
</span><span class='line'><span class="c"># System.err to grep stacktrace information of catched exceptions</span>
</span><span class='line'><span class="c">#AndroidRuntime to grep stacktrace information of uncaughted runtime exceptions</span>
</span><span class='line'><span class="c">#MessageQueue to grep exceptions happended during MessageQueue</span>
</span><span class='line'><span class="c">#CONSOLE to grep console message releated with javascript console.info</span>
</span><span class='line'><span class="c">#dalvikvm informations about dalvik vm</span>
</span><span class='line'><span class="c">#StrictMode information about StrictMode warnings</span>
</span><span class='line'>adb logcat |grep --color<span class="o">=</span>always -E <span class="s2">&quot;System.err|AndroidRuntime|MessageQueue|CONSOLE|W/Bundle|dalvikvm|StrictMode&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看详细及最新: <a href="https://github.com/androidyue/DroidScripts/blob/master/shell/debugInfo.sh">https://github.com/androidyue/DroidScripts/blob/master/shell/debugInfo.sh</a></p>

<h2>打印某个应用的日志</h2>

<p>以下脚本为打印某个应用的日志，思路是将包名转为进程ip，然后过滤进程id即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c">#This script is aimed to grep logs by application(User should input a packageName and then we look up for the process ids then separate logs by process ids).</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">packageName</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="s">&quot;adb shell ps | grep </span><span class="si">%s</span><span class="s"> | awk &#39;{print $2}&#39;&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">packageName</span><span class="p">)</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'><span class="c">##for some applications,there are multiple processes,so we should get all the process id</span>
</span><span class='line'><span class="n">pid</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">filters</span> <span class="o">=</span> <span class="n">pid</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">pid</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">filters</span> <span class="o">=</span> <span class="n">filters</span> <span class="o">+</span>  <span class="s">&quot;|&quot;</span> <span class="o">+</span> <span class="n">pid</span>
</span><span class='line'>        <span class="c">#print &#39;command = %s;filters=%s&#39;%(command, filters)</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">filters</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="s">&#39;adb logcat | grep --color=always -E &quot;</span><span class="si">%s</span><span class="s">&quot; &#39;</span><span class="o">%</span><span class="p">(</span><span class="n">filters</span><span class="p">)</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">logcatPkg</span><span class="o">.</span><span class="na">py</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">tester</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Git push快捷脚本</h2>

<p>通常我们在做git push，我们的做法是<code>git push origin branch_name</code>，通常情况下branch_name即当前所在的分支。如下是一个简单的脚本，自动判断当前分支，你需要做的只是调用一下这个脚本即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding=utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">Popen</span><span class="p">,</span><span class="n">PIPE</span><span class="p">,</span><span class="n">STDOUT</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">system</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gpush</span><span class="p">():</span>
</span><span class='line'>    <span class="n">branchColorRule</span> <span class="o">=</span> <span class="n">readFromShell</span><span class="p">(</span><span class="s">&#39;git config color.branch&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s">&#39;always&#39;</span> <span class="o">==</span> <span class="n">branchColorRule</span><span class="p">):</span>
</span><span class='line'>        <span class="n">system</span><span class="p">(</span><span class="s">&#39;git config color.branch auto&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">getBranch</span> <span class="o">=</span> <span class="s">&quot;git branch | sed -n &#39;/\* /s///p&#39;&quot;</span>
</span><span class='line'>    <span class="n">gitBranch</span> <span class="o">=</span> <span class="n">readFromShell</span><span class="p">(</span><span class="n">getBranch</span><span class="p">)</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="s">&#39;git push origin </span><span class="si">%s</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">gitBranch</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">command</span>
</span><span class='line'>    <span class="n">system</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s">&#39;always&#39;</span> <span class="o">==</span> <span class="n">branchColorRule</span><span class="p">):</span>
</span><span class='line'>        <span class="n">system</span><span class="p">(</span><span class="s">&#39;git config color.branch always&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readFromShell</span><span class="p">(</span><span class="n">command</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">STDOUT</span><span class="p">,</span> <span class="n">close_fds</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="n">gpush</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看详细：<a href="https://github.com/androidyue/DroidScripts/blob/master/python/gpush.py">https://github.com/androidyue/DroidScripts/blob/master/python/gpush.py</a></p>

<h2>快速打开应用详情页</h2>

<p>如下就是App详情页，使用这个页，我们可以卸载，强制停止，清除缓存，数据等操作。
<img src="http://7xqzcv.com1.z0.glb.clouddn.com/app_details.jpg" alt="AppDetails" /></p>

<p>使用这个脚本，我们可以快速地进入这个页面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh </span>
</span><span class='line'>adb shell am start  -a <span class="s2">&quot;android.settings.APPLICATION_DETAILS_SETTINGS&quot;</span> -d <span class="s2">&quot;package:$1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash clearAppData.sh com.droidyue.akoi
</span></code></pre></td></tr></table></div></figure>


<p>查看详细及最新: <a href="https://github.com/androidyue/DroidScripts/blob/master/shell/clearAppData.sh">https://github.com/androidyue/DroidScripts/blob/master/shell/clearAppData.sh</a></p>

<h2>查找目录下的文件</h2>

<p>Unix中有一个很棒的查找工具，就是find，使用find，我们可以很快速查找某个目录下的的文件，支持通配符查找。在Android项目中，我们可以查找apk文件，图片文件等，另外加上xargs会变得更加强大
比如我们查找app目录下所有的apk文件，按照如下操作即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find app/ -name *.apk
</span><span class='line'><span class="c">##结果</span>
</span><span class='line'>app/build/outputs/apk/app-debug-unaligned.apk
</span><span class='line'>app/build/outputs/apk/app-debug.apk
</span></code></pre></td></tr></table></div></figure>


<p>如果我们查找到app目录下的所有apk文件，并删除，该怎么做呢，这时候就需要使用刚刚提到的xargs了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find app/ -name *.apk | xargs rm
</span></code></pre></td></tr></table></div></figure>


<p>xargs会将上一个命令的输出结果作为下一个命令的输入，如上操作就可以删除app目录下的所有apk文件。</p>

<h2>全文查找</h2>

<p>在Android中开发时，我们常常会遇到这样的问题，比如我们需要将一个内容为&#8221;Settings&#8221;的按钮调整padding，通常我的做法是这样的。</p>

<p>方法一：</p>

<ul>
<li>查找内容为Settings的字符串的name</li>
<li>然后根据得到的name查找所在的布局文件或代码文件</li>
</ul>


<p>方法二：</p>

<ul>
<li>使用DDMS的monitor查找view的id</li>
<li>然后根据id查找所在的布局文件或代码文件</li>
</ul>


<p>总的来说，以上两种方法都需要用到文件的全文检索，通常我们可以使用Android Studio完成，但是个人倾向于使用Terminal。</p>

<p>基本脚本如下，这是一个很通用的当前目录全文查找脚本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep --ignore-case -E your_keyword . -R --color<span class="o">=</span>always -n
</span></code></pre></td></tr></table></div></figure>


<p>上述命令对应的shell脚本为<a href="https://github.com/androidyue/DroidScripts/blob/master/shell/gfind.sh">gfind.sh</a></p>

<p>另外，还有一个专门为Android优化的全文查找，较上面速度提升将近多个数量级。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep  -E <span class="nv">$1</span> --exclude-dir<span class="o">={</span>.git,lib,.gradle,.idea,build,captures<span class="o">}</span> --exclude<span class="o">={</span>*.png,*.jpg,*.jar<span class="o">}</span>  . -R --color<span class="o">=</span>always -n
</span></code></pre></td></tr></table></div></figure>


<p>脚本地址：<a href="https://github.com/androidyue/DroidScripts/blob/master/shell/gfindx.sh">gfindx.sh</a></p>

<p>上面的脚本，排除了.git,lib,.gradle,.idea等文件夹下的文件，也排除了类似png,jpg,jar等文件的查找，大大加快了查找效率。</p>

<p>上述两个脚本的使用方法，比如我们想要查找app下的，包含TextView的文件，如下即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">11</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mi">44</span><span class="o">-</span><span class="n">androidyue</span><span class="o">~/</span><span class="n">AndroidStudioProjects</span><span class="o">/</span><span class="n">AndroidGsonSample</span><span class="o">/</span><span class="n">app$</span> <span class="n">gfindx</span><span class="o">.</span><span class="na">sh</span> <span class="n">TextView</span>
</span><span class='line'><span class="o">./</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">res</span><span class="o">/</span><span class="n">layout</span><span class="o">/</span><span class="n">activity_main</span><span class="o">.</span><span class="na">xml</span><span class="o">:</span><span class="mi">9</span><span class="o">:</span>    <span class="o">&lt;</span><span class="n">TextView</span> <span class="nl">android:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;Hello World!&quot;</span> <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：查找app目录，需要自行切换到app目录下然后进行查找。</p>

<h2>查看当前的Activity</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">adb</span> <span class="n">shell</span> <span class="n">dumpsys</span> <span class="n">window</span> <span class="n">windows</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">-</span><span class="n">E</span> <span class="err">&#39;</span><span class="n">mCurrentFocus</span><span class="o">|</span><span class="n">mFocusedApp</span><span class="err">&#39;</span> <span class="o">--</span><span class="n">color</span><span class="o">=</span><span class="n">always</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整脚本：<a href="https://github.com/androidyue/DroidScripts/blob/master/shell/dumpCurrentActivity.sh">dumpCurrentActivity.sh</a></p>

<p>使用示例，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">11</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="mi">34</span><span class="o">-</span><span class="n">androidyue</span><span class="o">~/</span><span class="n">osc_git</span><span class="o">/</span><span class="n">shell_works</span> <span class="o">(</span><span class="n">master</span><span class="o">)</span><span class="n">$</span> <span class="n">dumpCurrentActivity</span><span class="o">.</span><span class="na">sh</span>
</span><span class='line'>  <span class="n">mCurrentFocus</span><span class="o">=</span><span class="n">Window</span><span class="o">{</span><span class="n">f03392f</span> <span class="n">u0</span> <span class="n">com</span><span class="o">.</span><span class="na">netease</span><span class="o">.</span><span class="na">cloudmusic</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">netease</span><span class="o">.</span><span class="na">cloudmusic</span><span class="o">.</span><span class="na">activity</span><span class="o">.</span><span class="na">PlayerActivity</span><span class="o">}</span>
</span><span class='line'>  <span class="n">mFocusedApp</span><span class="o">=</span><span class="n">AppWindowToken</span><span class="o">{</span><span class="n">ae8bba4</span> <span class="n">token</span><span class="o">=</span><span class="n">Token</span><span class="o">{</span><span class="n">d3a37</span> <span class="n">ActivityRecord</span><span class="o">{</span><span class="mi">19</span><span class="n">df1b36</span> <span class="n">u0</span> <span class="n">com</span><span class="o">.</span><span class="na">netease</span><span class="o">.</span><span class="na">cloudmusic</span><span class="o">/.</span><span class="na">activity</span><span class="o">.</span><span class="na">PlayerActivity</span> <span class="n">t11318</span><span class="o">}}}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>用好alias</h2>

<p>在用终端时，如果我们经常使用cd命令到一个固定的文件目录下，这时候，我们就需要考虑做点事情来提高这种重复的效率了。</p>

<p>比如我们经常执行这个操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cd</span> <span class="o">~/</span><span class="n">Documents</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">XXXX</span>
</span></code></pre></td></tr></table></div></figure>


<p>简化提速的方法是使用alias，即为操作设置别名，在.bashrc文件加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">alias</span> <span class="n">cdProject</span><span class="o">=</span><span class="s">&quot;cd ~/Documents/Android/XXXX&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行<code>source ~/.bashrc</code>更新配置，从此以后使用cdProject就可以轻松切换了。</p>

<p>以上就是关于一些简单的Android相关的脚本，终端是个好东西，希望大家可以好好利用，提升效率。</p>

<h2>脚本仓库</h2>

<p>上面的脚本基本都存放于<a href="https://github.com/androidyue/DroidScripts">https://github.com/androidyue/DroidScripts</a>，欢迎贡献。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解Java中的注解]]></title>
    <link href="http://droidyue.com/blog/2016/04/24/look-into-java-annotation/"/>
    <updated>2016-04-24T22:06:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/04/24/look-into-java-annotation</id>
    <content type="html"><![CDATA[<p>在Java中，注解(Annotation)引入始于Java5，用来描述Java代码的元信息，通常情况下注解不会直接影响代码的执行，尽管有些注解可以用来做到影响代码执行。</p>

<h2>注解可以做什么</h2>

<p>Java中的注解通常扮演以下角色</p>

<ul>
<li>编译器指令</li>
<li>构建时指令</li>
<li>运行时指令</li>
</ul>


<!--more-->


<p>其中</p>

<ul>
<li>Java内置了三种编译器指令，本文后面部分会重点介绍</li>
<li>Java注解可以应用在构建时，即当你构建你的项目时。构建过程包括生成源码，编译源码，生成xml文件，打包编译的源码和文件到JAR包等。软件的构建通常使用诸如Apache Ant和Maven这种工具自动完成。这些构建工具会依照特定的注解扫描Java代码，然后根据这些注解生成源码或文件。</li>
<li>通常情况下，注解并不会出现在编译后的代码中，但是如果想要出现也是可以的。Java支持运行时的注解，使用Java的反射我们可以访问到这些注解，运行时的注解的目的通常是提供给程序和第三方API一些指令。</li>
</ul>


<h2>注解基础</h2>

<p>一个简单的Java注解类似与<code>@Entity</code>。其中<code>@</code>的意思是告诉编译器这是一个注解。而<code>Entity</code>则是注解的名字。通常在文件中，写法如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Entity</span> <span class="o">{</span> 
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>注解元素</h3>

<p>Java注解可以使用元素来进行设置一些值，注解中的元素类似于属性或者参数。定义包含元素的注解示例代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Entity</span> <span class="o">{</span> 
</span><span class='line'>  <span class="n">String</span> <span class="nf">tableName</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用包含元素的注解示例代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span><span class="o">(</span><span class="n">tableName</span> <span class="o">=</span> <span class="s">&quot;vehicles&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述注解的元素名称为<code>tableName</code>，设置的值为<code>vehicles</code>。没有元素的注解不需要使用括号。</p>

<p>如果注解包含多个元素，使用方法如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span><span class="o">(</span><span class="n">tableName</span> <span class="o">=</span> <span class="s">&quot;vehicles&quot;</span><span class="o">,</span> <span class="n">primaryKey</span> <span class="o">=</span> <span class="s">&quot;id&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果注解只有一个元素，通常我们的写法是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@InsertNew</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;yes&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这种情况下，当且仅当元素名为value,我们也可以简写，即不需要填写元素名<code>value</code>，效果如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@InsertNew</span><span class="o">(</span><span class="s">&quot;yes&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注解使用</h2>

<p>注解可以用来修饰代码中的这些元素</p>

<ul>
<li>类</li>
<li>接口</li>
<li>方法</li>
<li>方法参数</li>
<li>属性</li>
<li>局部变量</li>
</ul>


<p>一个完整的使用示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Vehicle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Persistent</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="n">vehicleName</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Getter</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getVehicleName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">vehicleName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setVehicleName</span><span class="o">(</span><span class="nd">@Optional</span> <span class="n">vehicleName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">vehicleName</span> <span class="o">=</span> <span class="n">vehicleName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span> <span class="nf">addVehicleNameToList</span><span class="o">(</span><span class="n">List</span> <span class="n">names</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Optional</span>
</span><span class='line'>        <span class="n">List</span> <span class="n">localNames</span> <span class="o">=</span> <span class="n">names</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">localNames</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">localNames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">localNames</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">getVehicleName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">localNames</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>内置的Java注解</h2>

<p>Java中有三种内置注解，这些注解用来为编译器提供指令。它们是</p>

<ul>
<li>@Deprecated</li>
<li>@Override</li>
<li>@SuppressWarnings</li>
</ul>


<h3>@Deprecated</h3>

<ul>
<li>可以用来标记类，方法，属性。</li>
<li>如果上述三种元素不再使用，使用@Deprecated注解</li>
<li>如果代码使用了@Deprecated注解的类，方法或属性，编译器会进行警告。</li>
</ul>


<p>@Deprecated使用很简单，如下为注解一个弃用的类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Deprecated</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyComponent</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们使用@Deprecated注解后，建议配合使用对应的@deprecated JavaDoc符号，并解释说明为什么这个类，方法或属性被弃用，已经替代方案是什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Deprecated</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  @deprecated This class is full of bugs. Use MyNewComponent instead.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyComponent</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Override</h2>

<p>@Override注解用来修饰对父类进行重写的方法。如果一个并非重写父类的方法使用这个注解，编译器将提示错误。</p>

<p>实际上在子类中重写父类或接口的方法，@Overide并不是必须的。但是还是建议使用这个注解，在某些情况下，假设你修改了父类的方法的名字，那么之前重写的子类方法将不再属于重写，如果没有@Overide，你将不会察觉到这个子类的方法。有了这个注解修饰，编译器则会提示你这些信息。</p>

<p>使用Override注解的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySuperClass</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doTheThing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Do the thing&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySubClass</span> <span class="kd">extends</span> <span class="n">MySuperClass</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doTheThing</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Do it differently&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@SuppressWarnings</h2>

<ul>
<li>@SuppressWarnings用来抑制编译器生成警告信息。</li>
<li>可以修饰的元素为类，方法，方法参数，属性，局部变量</li>
</ul>


<p>使用场景：当我们一个方法调用了弃用的方法或者进行不安全的类型转换，编译器会生成警告。我们可以为这个方法增加@SuppressWarnings注解，来抑制编译器生成警告。</p>

<p>注意：使用@SuppressWarnings注解，采用就近原则，比如一个方法出现警告，我们尽量使用@SuppressWarnings注解这个方法，而不是注解方法所在的类。虽然两个都能抑制编译器生成警告，但是范围越小越好，因为范围大了，不利于我们发现该类下其他方法的警告信息。</p>

<p>使用示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@SuppressWarnings</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodWithWarning</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建自己的注解</h2>

<p>在Java中，我们可以创建自己的注解，注解和类，接口文件一样定义在自己的文件里面。如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span>   <span class="nf">value</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span>   <span class="nf">name</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span>      <span class="nf">age</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="nf">newNames</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码定义了一个叫做MyAnnotation的注解，它有4个元素。再次强调一下，<code>@interface</code>这个关键字用来告诉java编译器这是一个注解。</p>

<p>仔细一看，你会发现，注解元素的定义很类似于接口的方法。这些元素有类型和名称。这些类型可以是</p>

<ul>
<li>原始数据类型</li>
<li>String</li>
<li>Class</li>
<li>annotation</li>
<li>枚举</li>
<li>一维数组</li>
</ul>


<p>如下为应用自定义的注解</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@MyAnnotation</span><span class="o">(</span>
</span><span class='line'>    <span class="n">value</span><span class="o">=</span><span class="s">&quot;123&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="s">&quot;Jakob&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">age</span><span class="o">=</span><span class="mi">37</span><span class="o">,</span>
</span><span class='line'>    <span class="n">newNames</span><span class="o">={</span><span class="s">&quot;Jenkov&quot;</span><span class="o">,</span> <span class="s">&quot;Peterson&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，我们需要为所有的注解元素设置值，一个都不能少。</p>

<h2>注解元素默认值</h2>

<p>对于注解中的元素，我们可以为其设置默认值，使用方法为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span>   <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span>   <span class="nf">name</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span>      <span class="nf">age</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="nf">newNames</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码，我们设置了value元素的默认值为空字符串。当我们在使用时，可以不设置value的值，即让value使用空字符串默认值。
使用示例代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@MyAnnotation</span><span class="o">(</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="s">&quot;Jakob&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">age</span><span class="o">=</span><span class="mi">37</span><span class="o">,</span>
</span><span class='line'>    <span class="n">newNames</span><span class="o">={</span><span class="s">&quot;Jenkov&quot;</span><span class="o">,</span> <span class="s">&quot;Peterson&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Retention</h2>

<p>@Retention是用来修饰注解的注解，使用这个注解，我们可以做到</p>

<ul>
<li>控制注解是否写入class文件</li>
<li>控制class文件中的注解是否在运行时可见</li>
</ul>


<p>控制很简单，使用使用以下三种策略之一即可。</p>

<ul>
<li>RetentionPolicy.SOURCE 表明注解仅存在源码之中，不存在.class文件，更不能运行时可见。常见的注解为@Override, @SuppressWarnings。</li>
<li>RetentionPolicy.CLASS 这是默认的注解保留策略。这种策略下，注解将存在与.class文件，但是不能被运行时访问。通常这种注解策略用来处于一些字节码级别的操作。</li>
<li>RetentionPolicy.RUNTIME 这种策略下可以被运行时访问到。通常情况下，我们都会结合反射来做一些事情。</li>
</ul>


<p>@Retention的使用示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.Retention</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.RetentionPolicy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span>   <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Target</h2>

<p>使用@Target注解，我们可以设定自定义注解可以修饰哪些java元素。简单示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.ElementType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.Target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Target</span><span class="o">({</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span>   <span class="nf">value</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的代码说明MyAnnotation注解只能修饰方法。</p>

<p>@Target可以选择的参数值有如下这些</p>

<ul>
<li>ElementType.ANNOTATION_TYPE（注：修饰注解）</li>
<li>ElementType.CONSTRUCTOR</li>
<li>ElementType.FIELD</li>
<li>ElementType.LOCAL_VARIABLE</li>
<li>ElementType.METHOD</li>
<li>ElementType.PACKAGE</li>
<li>ElementType.PARAMETER</li>
<li>ElementType.TYPE（注：任何类型，即上面的的类型都可以修饰）</li>
</ul>


<h2>@Inherited</h2>

<p>如果你想让一个类和它的子类都包含某个注解，就可以使用@Inherited来修饰这个注解。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">Inherited</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Inherited</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@MyAnnotation</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySuperClass</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySubClass</span> <span class="kd">extends</span> <span class="n">MySuperClass</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码的大致意思是</p>

<ol>
<li> 使用@Inherited修饰注解MyAnnotation</li>
<li> 使用MyAnnotation注解MySuperClass</li>
<li> 实现一个类MySubclass继承自MySuperClass</li>
</ol>


<p>通过以上几步，MySubClass也拥有了MyAnnotation注解。</p>

<p>关于Java中的注解，一些基本的概念就是这些。</p>

<h2>原文信息</h2>

<ul>
<li><a href="http://tutorials.jenkov.com/java/annotations.html">Java Annotations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机领域的日系书籍]]></title>
    <link href="http://droidyue.com/blog/2016/04/19/japanese-it-books/"/>
    <updated>2016-04-19T08:10:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/04/19/japanese-it-books</id>
    <content type="html"><![CDATA[<p>在计算机的设计里，很多经典的书籍多为欧美人所撰写，毕竟他们占据了英语这个优势。这里的主题不是推荐英文书籍，而是推荐几本日系的计算机图书。</p>

<!--more-->


<h2>为什么推荐日系</h2>

<p>首先，我读过几本日系的计算机相关的书，即《计算机是怎么样跑起来的》和《程序是怎么样跑起来的》，我觉得这两本书写的很浅显易懂，引人入胜。在我的观点里，能把一件事或者一个概念能用很浅显的方式描述出来的人必定对这件事真正研究透了。浅显易懂作为日系图书的一大特点，我觉得是有必要推荐的。</p>

<p>另外，日本也出了一个了不起的人物，他就是松本行弘，Ruby语言的创始人。至少在我眼中，他是一个很了不起的人物。Ruby语言很优美，有着很多优良的特性。再加上Ror框架的出现，Ruby更是扶摇直上，在2006年获得TIOBE年度编程语言。</p>

<h3>你不怕喷么</h3>

<p>确实，在国内，很多时候有些人接受不了说日本的好。</p>

<p>但是，技术是没有国界的。我认为程序员，比其他行业都渴望开放和共享，做技术要有宽广的胸怀，如果做不到，我们与置身局域网何异呢？</p>

<h2>GitHub入门与实践</h2>

<p> <img src="http://7jpolu.com1.z0.glb.clouddn.com/github_rumen.jpg" alt="Github入门与实践" /></p>

<p>本书从Git的基本知识和操作方法入手，详细介绍了GitHub的各种功能，GitHub与其他工具或服务的协作，使用GitHub的开发流程以及如何将GitHub引入到企业中。在讲解GitHub的代表功能Pull Request时，本书专门搭建了供各位读者实践的仓库，邀请各位读者进行Pull Request并共同维护。</p>

<p>查看详细:<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgFXGVgRBSJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIUBVcYXxIdS0IJRmtPQkJiL38bdWBuXzJNBnJkQUMwUBxlDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhcEwYQAGUbXhEKFABUHlsdAhEAZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBBAFVh9cCltXWwg%3D">GitHub入门与实践</a></p>

<h2>程序员的数学</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/chengxuyuan_de_shuxue.jpg" alt="程序员的数学" /></p>

<p>如果数学不好，是否可以成为一名程序员呢？答案是肯定的。 本书最适合：数学糟糕但又想学习编程的你。</p>

<p>没有晦涩的公式，只有好玩的数学题。帮你掌握编程所需的“数学思维”。</p>

<p>编程的基础是计算机科学，而计算机科学的基础是数学。因此，学习数学有助于巩固编程的基础，写出更健壮的程序。</p>

<p>本书面向程序员介绍了编程中常用的数学知识，借以培养初级程序员的数学思维。读者无需精通编程，也无需精通数学，只需具备四则运算和乘方等基础知识，就可以阅读本书。</p>

<p>书中讲 解了二进制计数法、逻辑、余数、排列组合、递归、指数爆炸、不可解问题等许多与编程密切相关的数学方法，分析了哥尼斯堡七桥问题、少年高斯求和方法、汉诺塔、斐波那契数列等经典问题和算法。引导读者深入理解编程中的数学方法和思路。</p>

<p>本书还对程序员和计算机的分工进行了有益的探讨。读完此书，你会对以程序为媒介的人机合作有更深刻的理解。</p>

<p>查看详细:<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgZdHlgRAyJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQITD1AYXxQdS0IJRmtQUWVFPV4ia2dWBCBtD2NDaGMnXx51Dh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhcEwYQAGUbXhEKFABUEloUChECZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVAxoCVh9aCltXWwg%3D">程序员的数学</a></p>

<h2>松本行弘的程序世界</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/songbenxinghong_de_chegnxu_shijie.jpg" alt="松本行弘的程序世界" /></p>

<p>本书是探索程序设计思想和方法的经典之作。作者为Ruby创始人松本行弘，Matz从全局的角度，利用大量的程序示例及图表，深刻阐述了Ruby编程语言的设计理念，并以独特的视角考察了与编程相关的各种技术。阅读本书不仅可以深入了解编程领域各个要素之间的关系，而且能够学到大师的思考方法。</p>

<p>查看详细:<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEw5WElMWCyJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQMbBFwTWBwdS0IJRmtzChVbS2wrfmBuYQJ%2BPm97El4wSzx1Dh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVGlMTARMFZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsUCxEOXRhSCltXWwg%3D">松本行弘的程序世界</a></p>

<h2>代码的未来</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/daima_de_weilai.jpg" alt="代码的未来" /></p>

<p>《代码的未来》是Ruby之父松本行弘的又一力作。作者对云计算、大数据时代下的各种编程语言以及相关技术进行了剖析，并对编程语言的未来发展趋势做出预测，内容涉及Go、VoltDB、node.js、CoffeeScript、Dart、MongoDB、摩尔定律、编程语言、多核、NoSQL等当今备受关注的话题。</p>

<p>查看详细：<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgRXHFsTAiJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIRBVIbXRUdS0IJRmtqCloHB0cvSGESRzdtE2x8eWVSbj9lDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhcHQAWAmUbXhEKFABVGFwUBRIAZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVARAAVR1bCltXWwg%3D">代码的未来</a></p>

<h2>图解TCP/IP</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/tujie_tcpip.jpg" alt="图解TCP/IP" /></p>

<p>这是一本图文并茂的网络管理技术书籍，旨在让广大读者理解TCP/IP的基本知识、掌握TCP/IP的基本技能。</p>

<p>书中讲解了网络基础知识、TCP/IP基础知识、数据链路、IP协议、IP协议相关技术、TCP与UDP、路由协议、应用协议、网络安全等内容，引导读者了解和掌握TCP/IP，营造一个安全的、使用放心的网络环境。</p>

<p>查看详细：<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgRRGV0VAyJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIRA1cdWxQdS0IJRmtNfGZPN1s7bGJqRyYeGnZQdmYxBVNlDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVGV8TABoHZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVARYFUxtaCltXWwg%3D">图解TCP/IP</a></p>

<h2>图解HTTP</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/tujie_http.jpg" alt="图解HTTP" /></p>

<p>本书对互联网基盘——HTTP协议进行了全面系统的介绍。作者由HTTP协议的发展历史娓娓道来，严谨细致地剖析了HTTP协议的结构，列举诸多常见通信场景及实战案例，最后延伸到Web安全、最新技术动向等方面。本书的特色为在讲解的同时，辅以大量生动形象的通信图例，更好地帮助读者深刻理解HTTP通信过程中客户端与服务器之间的交互情况。读者可通过本书快速了解并掌握HTTP协议的基础，前端工程师分析抓包数据，后端工程师实现REST API、实现自己的HTTP服务器等过程中所需的HTTP相关知识点本书均有介绍。</p>

<p>查看详细:<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgJQE14dAiJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIXAl0eUxUdS0IJRmtMa0pZJU5fa2FgVxFcOkF9G0BTZwRlDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVHl4UARoGZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBxcPUBNbCltXWwg%3D">图解HTTP</a></p>

<h2>自制编程语言</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/zhizhi_biancheng_yuyan.jpg" alt="自制编程语言" /></p>

<p>本书手把手地教读者用C语言制作两种编程语言：crowbar与Diksam。crowbar是运行分析树的无类型语言，Diksam是运行字节码的静态类型语言。这两种语言都具备四则运算、变量、条件分支、循环、函数定义、垃圾回收等功能，最终版则可以支持面向对象、异常处理等高级机制。所有源代码都提供下载，读者可以一边对照书中的说明一边调试源代码。这个过程对理解程序的运行机制十分有帮助。</p>

<p>查看详细：<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgVRGF4QCyJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIQA1YeXhwdS0IJRmtoR0pUXQUJcGdvQxdECFBAQVcjHTB1Dh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVH1McAxACZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVABYEUB5SCltXWwg%3D">自制编程语言</a></p>

<h2>计算机是怎样跑起来的</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/jisuanji_shi_zenyang_paoqilaide.jpg" alt="计算机是怎样跑起来的" /></p>

<p>本书倡导在计算机迅速发展、技术不断革新的今天，回归到计算机的基础知识上。通过探究计算机的本质，提升工程师对计算机的兴趣，在面对复杂的最新技术时，能够迅速掌握其要点并灵活运用。</p>

<p>本书以图配文，以计算机的三大原则为开端、相继介绍了计算机的结构、手工汇编、程序流程、算法、数据结构、面向对象编程、数据库、TCP/IP 网络、数据加密、XML、计算机系统开发以及SE 的相关知识。
图文并茂，通俗易懂，非常适合计算机爱好者和相关从业人员阅读。</p>

<p>查看详细：<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgBdE1kcBiJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIVD10ZUhEdS0IJRmsTUnReFBMaa2dXdR1LG2cEc0wBTlpDDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVHFMWBBUOZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBRoPVxJfCltXWwg%3D">计算机是怎样跑起来的</a></p>

<h2>程序是怎样跑起来的</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/chengxu_shi_zenyang_paoqilaide.jpg" alt="程序是怎样跑起来的" /></p>

<p>本书从计算机的内部结构开始讲起，以图配文的形式详细讲解了二进制、内存、数据压缩、源文件和可执行文件、操作系统和应用程序的关系、汇编语言、硬件控制方法等内容，目的是让读者了解从用户双击程序图标到程序开始运行之间到底发生了什么。同时专设了“如果是你，你会怎样介绍？”专栏，以小学生、老奶奶为对象讲解程序的运行原理，颇为有趣。本书图文并茂，通俗易懂，非常适合计算机爱好者及相关从业人员阅读。</p>

<p>查看详细：<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgBTHFwcACJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIVAVIcUhcdS0IJRmtTBxFOT1JFUmFaXxBrCw8AcGMRSy1lDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVHVIUAxAHZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBRQAUhJZCltXWwg%3D">程序是怎样跑起来的</a></p>

<h2>代码之髓</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423jw1f0rying080j209q09qt9j.jpg" alt="代码之髓" /></p>

<p>作者从编程语言设计的角度出发，围绕语言中共通或特有的核心概念，通过语言演变过程中的纵向比较和在多门语言中的横向比较，清晰地呈现了程序设计语言中函数、类型、作用域、类、继承等核心知识。本书旨在帮助读者更好地理解各种概念是因何而起，并在此基础上更好地判断为何使用、何时使用及怎样使用。同时，在阅读本书后，读者对今后不断出现的新概念的理解能力也将得到提升。</p>

<p>查看详细：<a href="http://union.click.jd.com/jdc?e=&amp;p=AyIHZR5aEQISA1AYUyUCEgNVGl0VACJDCkMFSjJLQhBaUAscSkIBR0ROVw1VC0dFFQIWB1QdWxcdS0IJRmtLHFoCHGg6YGdTfVUdKxJbT08wHyFlDh43Vx1TFgQSBFQaaxcAEgdcH1sUByI3NGlrR2zKsePD%2FqQexq3aztOCMhABXRhdFwEbAGUbXhEKFABVEloTBxMFZRw%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsVBhIGUxtZCltXWwg%3D">代码之髓</a></p>

<p>如果你想阅读英文的一些书籍，请查看如下两个链接</p>

<ul>
<li><a href="http://droidyue.com/blog/2015/07/04/six-books-every-programer-must-read/">程序员必读的六本书</a></li>
<li><a href="http://droidyue.com/blog/2014/11/30/java-programmer-must-read-these-9-books/">Java程序员必读的9本书</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个Android代码JIT友好度检测工具]]></title>
    <link href="http://droidyue.com/blog/2016/04/10/jit-friendly-checker-for-android/"/>
    <updated>2016-04-10T20:26:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/04/10/jit-friendly-checker-for-android</id>
    <content type="html"><![CDATA[<p>利用周末的时间，写了一个检测Android代码JIT友好度的工具，取个名字为DroidJitChecker。希望可以帮助大家快速发现有坏味道的代码，并且及时修正。</p>

<!--more-->


<h2>名词解释</h2>

<ul>
<li>JIT：JIT全称Just-in-time compilation。意思为实时编译，是JVM中一种优化技术，对频繁调用并且符合条件的方法进行优化将字节码翻译成机器代码，提升执行效率。</li>
<li>方法大小：每个方法的方法体实现都可用字节作为单位进行衡量，通常情况下，方法体越大，其方法大小也越大。</li>
<li>JIT友好：通常方法体实现越小越简单，越对JIT编译友好。</li>
</ul>


<h2>这是什么</h2>

<ul>
<li>这是一个检测Android（目录组织结构）代码JIT友好度的工具</li>
<li>该工具基于AdoptOpenJDK/jitwatch中的jarScan.sh进行组装</li>
<li>输出结果支持html，便于在浏览器中查看</li>
</ul>


<h2>前提准备</h2>

<ul>
<li>所检测Android项目可以支持Gradle编译成功</li>
<li>安装jitwatch套件</li>
<li>ruby运行环境</li>
</ul>


<h2>安装</h2>

<h3>安装jitwatch组件</h3>

<p>获取代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:AdoptOpenJDK/jitwatch.git</span></code></pre></td></tr></table></div></figure>


<p>编译<br/>
进入上面的repo目录，采用以下三种方法之一即可</p>

<p>ant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ant clean compile test run</span></code></pre></td></tr></table></div></figure>


<p>Maven</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean compile test exec:java</span></code></pre></td></tr></table></div></figure>


<p>Gradle</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gradlew clean build run</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p>获取本repo的代码，并打开config.ini文件修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[setup]
</span><span class='line'>jarScan = "/Users/androidyue/github/jitwatch/jarScan.sh"
</span><span class='line'>maxMethodSize = 325
</span><span class='line'>outputDir = "/tmp/DroidJitChecker/output_new/"</span></code></pre></td></tr></table></div></figure>


<p>修改说明</p>

<ul>
<li>jarScan 必须修改，修改成已经安装的的JarScan路径</li>
<li>maxMethodSize 无需更改，如更改请谨慎</li>
<li>输出目录，outputDir，建议修改为可以持续存在的目录</li>
</ul>


<h2>如何使用</h2>

<p>使用比较简单，打开终端，执行如下语句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby jitChecker.rb your_android_project jarTask
</span></code></pre></td></tr></table></div></figure>


<p>注意：jarTask是一个将工程的java文件编译成jar包的任务，可以通过执行<code>./gradlew tasks</code>  查看，然后选择以jar开头的任务即可。</p>

<h2>查看结果</h2>

<ul>
<li>检查结束后，会自动使用浏览器打开结果</li>
<li>结果文件路径也会输出到终端</li>
<li>结果文件名中包含了相关的jarTask信息，便于查找</li>
<li>结果内容，依照方法的字节大小，从大到小降序排列</li>
</ul>


<p>一个典型的内容示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MD4</span><span class="o">.</span><span class="na">mdfour64</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Package:</span><span class="n">com</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">utils</span>
</span><span class='line'><span class="nl">Parameters:</span><span class="kt">int</span><span class="o">[]</span>
</span><span class='line'><span class="nl">ByteSize:</span><span class="mi">1129</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>MD4.mdfour64 对JIT不友好的方法及其所属类</li>
<li>Package:com.app.utils 上述MD4所属的包</li>
<li>Parameters:int[] mdfour64方法接受的参数</li>
<li>ByteSize:1129 表示mdfour64方法持有的大小</li>
</ul>


<h2>如何解决</h2>

<ul>
<li>书写逻辑简单，职责单一的小方法</li>
<li>书写逻辑简单，职责单一的小方法</li>
<li>书写逻辑简单，职责单一的小方法</li>
</ul>


<h2>贡献代码</h2>

<p>任何有帮助的建议都欢迎。</p>

<p>以下代码贡献更收欢迎</p>

<ul>
<li>美化结果展示页面（HTML，CSS）</li>
</ul>


<h2>问题</h2>

<h3>问：字节量大的方法一定要修改么，修改后就能JIT编译么</h3>

<ul>
<li>答：字节量大的方法建议修改，非强制，修改后不一定就能JIT编译，因为对JIT优化并不意味着JIT就编译该方法，还需要其他因素，比如该方法的调用频率。所以这是一个你情我愿的事情。</li>
</ul>


<h3>为什么用Ruby</h3>

<ul>
<li>答：有了idea时很纠结，因为不确定用什么语言实现，尤其是在Python和ruby之间，为此问了不少同学，最后“一意孤行”决定用Ruby了，不喜欢Python的强制对齐，超级喜欢Ruby的字符串模板。Ruby很简单，很人性化，相信你会喜欢的。</li>
</ul>


<h2>源码</h2>

<ul>
<li><a href="https://github.com/androidyue/DroidJitChecker">DroidJitChecker@Github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为终端设置Shadowsocks代理]]></title>
    <link href="http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/"/>
    <updated>2016-04-04T20:34:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal</id>
    <content type="html"><![CDATA[<p>做开发的同学，应该都会经常接触终端，有些时候我们在终端会做一些网络操作，比如下载gradle包等，由于一些你懂我也懂的原因，某些网络操作不是那么理想，这时候我们就需要设置代理来自由地访问网络。</p>

<p>Shadowsocks是我们常用的代理工具，它使用socks5协议，而终端很多工具目前只支持http和https等协议，对socks5协议支持不够好，所以我们为终端设置shadowsocks的思路就是将socks协议转换成http协议，然后为终端设置即可。仔细想想也算是适配器模式的一种现实应用吧。</p>

<p>想要进行转换，需要借助工具，这里我们采用比较知名的polipo来实现。polipo是一个轻量级的缓存web代理程序。闲话休叙，让我们开始动手吧。</p>

<!--more-->


<h2>准备工作</h2>

<ul>
<li>首先需要配置好一个可用的shadowsocks，客户端下载地址：<a href="https://github.com/shadowsocks/shadowsocks/releases">https://github.com/shadowsocks/shadowsocks/releases</a></li>
<li>如果没有帐号，可以从<a href="http://www.pgfastss.org/in/aqjkzq9mw3">这里</a>购买。</li>
<li>安装和配置ss，请自行搜索解决。</li>
</ul>


<h2>安装</h2>

<p>Fedora安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install polipo</span></code></pre></td></tr></table></div></figure>


<p>Mac下使用Homebrew安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install polipo</span></code></pre></td></tr></table></div></figure>


<p>Ubuntu安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install polipo</span></code></pre></td></tr></table></div></figure>


<h2>修改配置(Linux)</h2>

<p>如下打开配置文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/polipo/config</span></code></pre></td></tr></table></div></figure>


<p>设置ParentProxy为Shadowsocks，通常情况下本机shadowsocks的地址如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Uncomment this if you want to use a parent SOCKS proxy:
</span><span class='line'>
</span><span class='line'>socksParentProxy = "localhost:1080"
</span><span class='line'>socksProxyType = socks5</span></code></pre></td></tr></table></div></figure>


<p>设置日志输出文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>logFile=/var/log/polipo
</span><span class='line'>logLevel=4</span></code></pre></td></tr></table></div></figure>


<h2>修改配置(Mac)</h2>

<p>设置每次登陆启动polipo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents</span></code></pre></td></tr></table></div></figure>


<p>修改文件<code>/usr/local/opt/polipo/homebrew.mxcl.polipo.plist</code>设置parentProxy</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>  &lt;dict&gt;
</span><span class='line'>    &lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;homebrew.mxcl.polipo&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>    &lt;true/&gt;
</span><span class='line'>    &lt;key&gt;KeepAlive&lt;/key&gt;
</span><span class='line'>    &lt;true/&gt;
</span><span class='line'>    &lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>    &lt;array&gt;
</span><span class='line'>        &lt;string&gt;/usr/local/opt/polipo/bin/polipo&lt;/string&gt;
</span><span class='line'>        &lt;string&gt;socksParentProxy=localhost:1080&lt;/string&gt;
</span><span class='line'>    &lt;/array&gt;
</span><span class='line'>    &lt;!-- Set `ulimit -n 20480`. The default OS X limit is 256, that's
</span><span class='line'>         not enough for Polipo (displays 'too many files open' errors).
</span><span class='line'>         It seems like you have no reason to lower this limit
</span><span class='line'>         (and unlikely will want to raise it). --&gt;
</span><span class='line'>    &lt;key&gt;SoftResourceLimits&lt;/key&gt;
</span><span class='line'>    &lt;dict&gt;
</span><span class='line'>      &lt;key&gt;NumberOfFiles&lt;/key&gt;
</span><span class='line'>      &lt;integer&gt;20480&lt;/integer&gt;
</span><span class='line'>    &lt;/dict&gt;
</span><span class='line'>  &lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改的地方是增加了<code>&lt;string&gt;socksParentProxy=localhost:1080&lt;/string&gt;</code></p>

<h2>启动（Linux）</h2>

<p>先关闭正在运行的polipo，然后再次启动</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service polipo stop
</span><span class='line'>sudo service polipo start</span></code></pre></td></tr></table></div></figure>


<h2>启动(Mac)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist
</span><span class='line'>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plis</span></code></pre></td></tr></table></div></figure>


<p>注意：请确保Shadowsocks正常工作。</p>

<h2>验证及使用</h2>

<p>安装完成就需要进行验证是否work。这里展示一个最简单的验证方法，打开终端，如下执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>07:56:24-androidyue/var/log$ curl ip.gs
</span><span class='line'>当前 IP：125.39.112.15 来自：中国天津天津 联通
</span><span class='line'>08:09:23-androidyue/var/log$ http_proxy=http://localhost:8123 curl ip.gs
</span><span class='line'>当前 IP：210.140.193.128 来自：日本日本</span></code></pre></td></tr></table></div></figure>


<p>如上所示，为某个命令设置代理，前面加上<code>http_proxy=http://localhost:8123</code> 后接命令即可。</p>

<p>注：8123是polipo的默认端口，如有需要，可以修改成其他有效端口。</p>

<h3>设置别名</h3>

<p>bash中有一个很好的东西，就是别名alias. Linux用户修改~/.bashrc，Mac用户修改~/.bash_profile文件，增加如下设置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias hp="http_proxy=http://localhost:8123"</span></code></pre></td></tr></table></div></figure>


<p>然后Linux用户执行<code>source ~/.bashrc</code>，Mac用户执行<code>source ~/.bash_profile</code></p>

<p>测试使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>20:39:39-androidyue~$ curl ip.gs
</span><span class='line'>当前 IP：125.39.112.14 来自：中国天津天津 联通
</span><span class='line'>20:39:44-androidyue~$ hp curl ip.gs
</span><span class='line'>当前 IP：210.140.193.128 来自：日本日本 
</span><span class='line'>20:39:48-androidyue~$ </span></code></pre></td></tr></table></div></figure>


<h3>当前会话全局设置</h3>

<p>如果嫌每次为每一个命令设置代理比较麻烦，可以为当前会话设置全局的代理。即使用<code>export http_proxy=http://localhost:8123</code>即可。 如果想撤销当前会话的http_proxy代理，使用 <code>unset http_proxy</code> 即可。
示例效果如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>21:29:49-androidyue~$ curl ip.gs
</span><span class='line'>当前 IP：125.39.112.14 来自：中国天津天津 联通
</span><span class='line'>21:29:52-androidyue~$ export http_proxy=http://localhost:8123
</span><span class='line'>21:30:07-androidyue~$ curl ip.gs
</span><span class='line'>当前 IP：210.140.193.128 来自：日本日本 
</span><span class='line'>21:30:12-androidyue~$ unset http_proxy
</span><span class='line'>21:30:37-androidyue~$ curl ip.gs
</span><span class='line'>当前 IP：125.39.112.14 来自：中国天津天津 联通</span></code></pre></td></tr></table></div></figure>


<p>如果想要更长久的设置代理，可以将<code>export http_proxy=http://localhost:8123</code>加入.bashrc或者.bash_profile文件</p>

<h3>设置Git代理</h3>

<p>复杂一些的设置Git代理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">git</span> <span class="n">clone</span> <span class="nl">https:</span><span class="c1">//android.googlesource.com/tools/repo --config http.proxy=localhost:8123</span>
</span><span class='line'>
</span><span class='line'><span class="n">Cloning</span> <span class="n">into</span> <span class="err">&#39;</span><span class="n">repo</span><span class="err">&#39;</span><span class="o">...</span>
</span><span class='line'><span class="nl">remote:</span> <span class="n">Counting</span> <span class="nl">objects:</span> <span class="mi">135</span><span class="o">,</span> <span class="n">done</span>
</span><span class='line'><span class="nl">remote:</span> <span class="n">Finding</span> <span class="nl">sources:</span> <span class="mi">100</span><span class="o">%</span> <span class="o">(</span><span class="mi">135</span><span class="o">/</span><span class="mi">135</span><span class="o">)</span>
</span><span class='line'><span class="nl">remote:</span> <span class="n">Total</span> <span class="mi">3483</span> <span class="o">(</span><span class="n">delta</span> <span class="mi">1956</span><span class="o">),</span> <span class="n">reused</span> <span class="mi">3483</span> <span class="o">(</span><span class="n">delta</span> <span class="mi">1956</span><span class="o">)</span>
</span><span class='line'><span class="n">Receiving</span> <span class="nl">objects:</span> <span class="mi">100</span><span class="o">%</span> <span class="o">(</span><span class="mi">3483</span><span class="o">/</span><span class="mi">3483</span><span class="o">),</span> <span class="mf">2.63</span> <span class="n">MiB</span> <span class="o">|</span> <span class="mi">492</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
</span><span class='line'><span class="n">Resolving</span> <span class="nl">deltas:</span> <span class="mi">100</span><span class="o">%</span> <span class="o">(</span><span class="mi">1956</span><span class="o">/</span><span class="mi">1956</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这样还是比较复杂，因为需要记忆的东西比较多，下面是一个更简单的实现</p>

<p>首先，在.bashrc或者.bash_profile文件加入这一句。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">gp</span><span class="o">=</span><span class="s">&quot; --config http.proxy=localhost:8123&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行source操作，更新当前bash配置。</p>

<p>更简单的使用git的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">git</span> <span class="n">clone</span>  <span class="nl">https:</span><span class="c1">//android.googlesource.com/tools/repo $gp</span>
</span><span class='line'>
</span><span class='line'><span class="n">Cloning</span> <span class="n">into</span> <span class="err">&#39;</span><span class="n">repo</span><span class="err">&#39;</span><span class="o">...</span>
</span><span class='line'><span class="nl">remote:</span> <span class="n">Counting</span> <span class="nl">objects:</span> <span class="mi">135</span><span class="o">,</span> <span class="n">done</span>
</span><span class='line'><span class="nl">remote:</span> <span class="n">Finding</span> <span class="nl">sources:</span> <span class="mi">100</span><span class="o">%</span> <span class="o">(</span><span class="mi">135</span><span class="o">/</span><span class="mi">135</span><span class="o">)</span>
</span><span class='line'><span class="nl">remote:</span> <span class="n">Total</span> <span class="mi">3483</span> <span class="o">(</span><span class="n">delta</span> <span class="mi">1956</span><span class="o">),</span> <span class="n">reused</span> <span class="mi">3483</span> <span class="o">(</span><span class="n">delta</span> <span class="mi">1956</span><span class="o">)</span>
</span><span class='line'><span class="n">Receiving</span> <span class="nl">objects:</span> <span class="mi">100</span><span class="o">%</span> <span class="o">(</span><span class="mi">3483</span><span class="o">/</span><span class="mi">3483</span><span class="o">),</span> <span class="mf">2.63</span> <span class="n">MiB</span> <span class="o">|</span> <span class="mi">483</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span><span class="o">,</span> <span class="n">done</span><span class="o">.</span>
</span><span class='line'><span class="n">Resolving</span> <span class="nl">deltas:</span> <span class="mi">100</span><span class="o">%</span> <span class="o">(</span><span class="mi">1956</span><span class="o">/</span><span class="mi">1956</span><span class="o">),</span> <span class="n">done</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>开始自由快速的开发吧。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android内存泄漏检测利器：LeakCanary]]></title>
    <link href="http://droidyue.com/blog/2016/03/28/android-leakcanary/"/>
    <updated>2016-03-28T07:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/03/28/android-leakcanary</id>
    <content type="html"><![CDATA[<h2>是什么？</h2>

<p>一言以蔽之：LeakCanary是一个<strong>傻瓜化</strong>并且可视化的内存泄露分析工具</p>

<h2>为什么需要LeakCanary？</h2>

<p>因为它简单，易于发现问题，人人可参与。</p>

<ul>
<li>简单：只需设置一段代码即可，打开应用运行一下就能够发现内存泄露。而MAT分析需要Heap Dump，获取文件，手动分析等多个步骤。</li>
<li>易于发现问题：在手机端即可查看问题即引用关系，而MAT则需要你分析，找到Path To GC Roots等关系。</li>
<li>人人可参与：开发人员，测试测试，产品经理基本上只要会用App就有可能发现问题。而传统的MAT方式，只有部分开发者才有精力和能力实施。</li>
</ul>


<!--more-->


<h2>如何集成</h2>

<p>尽量在app下的build.gradle中加入以下依赖</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> dependencies {
</span><span class='line'>   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1' // or 1.4-beta1
</span><span class='line'>   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1
</span><span class='line'>   testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1
</span><span class='line'> }</span></code></pre></td></tr></table></div></figure>


<p>在Application中加入类似如下的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>    <span class="n">LeakCanary</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里你就可以检测到Activity的内容泄露了。其实现原理是设置Application的ActivityLifecycleCallbacks方法监控所有Activity的生命周期回调。内部实现代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ActivityRefWatcher</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ActivityLifecycleCallbacks</span> <span class="n">lifecycleCallbacks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActivityLifecycleCallbacks</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityCreated</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityStarted</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityResumed</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityPaused</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityStopped</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivitySaveInstanceState</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">outState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityDestroyed</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ActivityRefWatcher</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">onActivityDestroyed</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Application</span> <span class="n">application</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">RefWatcher</span> <span class="n">refWatcher</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">installOnIcsPlus</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">,</span> <span class="n">RefWatcher</span> <span class="n">refWatcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="mi">14</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ActivityRefWatcher</span> <span class="n">activityRefWatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActivityRefWatcher</span><span class="o">(</span><span class="n">application</span><span class="o">,</span> <span class="n">refWatcher</span><span class="o">);</span>
</span><span class='line'>            <span class="n">activityRefWatcher</span><span class="o">.</span><span class="na">watchActivities</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>想要检测更多?</h2>

<p>首先我们需要获得一个RefWatcher，用来后续监控可能发生泄漏的对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">RefWatcher</span> <span class="n">sRefWatcher</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">sRefWatcher</span> <span class="o">=</span> <span class="n">LeakCanary</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">RefWatcher</span> <span class="nf">getRefWatcher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sRefWatcher</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>监控某个可能存在内存泄露的对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MyApplication</span><span class="o">.</span><span class="na">getRefWatcher</span><span class="o">().</span><span class="na">watch</span><span class="o">(</span><span class="n">sLeaky</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>哪些需要进行监控</h2>

<p>默认情况下，是对Activity进行了检测。另一个需要监控的重要对象就是Fragment实例。因为它和Activity实例一样可能持有大量的视图以及视图需要的资源（比如Bitmap）即在Fragment onDestroy方法中加入如下实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>        <span class="n">MyApplication</span><span class="o">.</span><span class="na">getRefWatcher</span><span class="o">().</span><span class="na">watch</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他也可以监控的对象</p>

<ul>
<li>BroadcastReceiver</li>
<li>Service</li>
<li>其他有生命周期的对象</li>
<li>直接间接持有大内存占用的对象（即Retained Heap值比较大的对象）</li>
</ul>


<h2>何时进行监控</h2>

<p>首先，我们需要明确什么是内存泄露，简而言之，某个对象在该释放的时候由于被其他对象持有没有被释放，因而造成了内存泄露。</p>

<p>因此，我们监控也需要设置<strong>在对象（很快）被释放的时候</strong>，如Activity和Fragment的onDestroy方法。</p>

<p>一个错误示例，比如监控一个Activity，放在onCreate就会大错特错了，那么你每次都会收到Activity的泄露通知。</p>

<h2>如何解决</h2>

<p>常用的解决方法思路如下</p>

<ul>
<li>尽量使用Application的Context而不是Activity的</li>
<li>使用弱引用或者软引用</li>
<li>手动设置null，解除引用关系</li>
<li>将内部类设置为static，不隐式持有外部的实例</li>
<li>注册与反注册成对出现，在对象合适的生命周期进行反注册操作。</li>
<li>如果没有修改的权限，比如系统或者第三方SDK，可以使用反射进行解决持有关系</li>
</ul>


<h2>加入例外</h2>

<p>有些特殊情况，我们需要忽略一些问题，这时候就需要添加例外规则。比如ExampleClass.exampleField会导致内存泄漏，我们想要忽略，如下操作即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ExampleApplication is defined in &quot;Customizing and using the no-op dependency&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DebugExampleApplication</span> <span class="kd">extends</span> <span class="n">ExampleApplication</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">RefWatcher</span> <span class="nf">installLeakCanary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ExcludedRefs</span> <span class="n">excludedRefs</span> <span class="o">=</span> <span class="n">AndroidExcludedRefs</span><span class="o">.</span><span class="na">createAppDefaults</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">instanceField</span><span class="o">(</span><span class="s">&quot;com.example.ExampleClass&quot;</span><span class="o">,</span> <span class="s">&quot;exampleField&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">LeakCanary</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">DisplayLeakService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">excludedRefs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何实现的</h2>

<p>LeakCanary实际上就是在本机上自动做了Heap dump，然后对生成的hprof文件分析，进行结果展示。和手工进行MAT分析步骤基本一致。</p>

<h2>如何不影响对外版APK</h2>

<p>是的，这个问题确实值得关注，因为LeakCanary确实是影响程序运行的，尤其是heap dump操作，不过好在这件事Square已经考虑了，即在我们增加依赖时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">debugCompile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">leakcanary</span><span class="o">:</span><span class="n">leakcanary</span><span class="o">-</span><span class="nl">android:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span> <span class="c1">// or 1.4-beta1</span>
</span><span class='line'><span class="n">releaseCompile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">leakcanary</span><span class="o">:</span><span class="n">leakcanary</span><span class="o">-</span><span class="n">android</span><span class="o">-</span><span class="n">no</span><span class="o">-</span><span class="nl">op:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span> <span class="c1">// or 1.4-beta1</span>
</span><span class='line'><span class="n">testCompile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">leakcanary</span><span class="o">:</span><span class="n">leakcanary</span><span class="o">-</span><span class="n">android</span><span class="o">-</span><span class="n">no</span><span class="o">-</span><span class="nl">op:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span> <span class="c1">// or 1.4-beta1</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中releaseCompile和testCompile这两个的依赖明显不同于debugCompile的依赖。它们的依赖属于NOOP操作。</p>

<p>NOOP，即No Operation Performed，无操作指令。常用的编译器技术会检测无操作指令并出于优化的目的将无操作指令剔除。</p>

<p>因而，只要配置好releaseCompile和testCompile的依赖，就无需担心对外版本的性能问题了。</p>

<h2>实践中的问题</h2>

<ul>
<li>如果targetSdkVersion为23，在6.0的机器上会存在问题，卡死，因为LeakCanary并没有很好支持<a href="http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/">Marshmallow运行时权限</a>，所以始终得不到sd卡权限，进而导致卡死。</li>
</ul>


<h2>注意</h2>

<ul>
<li>目前LeakCanary一次只能报一个泄漏问题，如果存在内存泄漏但不是你的模块，并不能说明这个模块没有问题。建议建议将非本模块的泄漏解决之后，再进行检测。</li>
</ul>


<h2>Anroid中内存泄漏相关文章</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/">避免Android中Context引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/">Android中Handler引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2014/11/29/why-onsharedpreferencechangelistener-was-not-called/">Google为何这样设计OnSharedPreferenceChangeListener</a></li>
<li><a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/">Google IO：Android内存管理主题演讲记录</a></li>
<li><a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">译文：理解Java中的弱引用</a></li>
<li><a href="http://droidyue.com/blog/2014/10/02/the-private-modifier-in-java/">细话Java：&#8221;失效&#8221;的private修饰符</a></li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="https://github.com/square/leakcanary">LeakCanary</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Study Jams:30天入门 Android 开发， Google 与你一起圆梦]]></title>
    <link href="http://droidyue.com/blog/2016/03/24/google-study-jams/"/>
    <updated>2016-03-24T22:07:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/03/24/google-study-jams</id>
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/8a41f469jw1f27y2nqh6ij21cw0iw77t.jpg" alt="StudyJams" /></p>

<blockquote><p>这里向技术小黑屋的各位读者推荐一个活动，Google Study Jams，它是Google官方推出的一个活动，目的是帮助大家更好地入门Android。不管你是零基础的小白，还是中学生，亦或者是有经验的开发者，你都可以加入，学习，合作，分享。强烈推荐这个活动，参加进来一起和小伙伴们交流，学习，进步吧。</p></blockquote>

<p>Android 设备已经随处可见，你想尝试一下在 Android 设备上的开发和创新吗？快来跟随 Google 的步伐，一起学习 Android 入门课吧！</p>

<!--more-->


<h2>Google Study Jams 活动介绍</h2>

<p>Study Jams 是一个学习 Google 在线课程的活动。该活动由学员自主发起课程学习小组，带领小组成员入门 Android 开发，最终将 Android App 上载至 Google Play 并与他人分享自己的学习历程。</p>

<!--more-->


<p>本年度 Study Jams 活动我们学习由 Google 倾情制作的课程 &ndash; Android Development for Beginners (面向初学者的 Android 开发课程)，我们的目标是希望带领零编程基础的任何人，了解并入门 Android 开发，通过自学，相互帮助，交流沟通，最终做出 App 上载到 Google Play 商店。</p>

<p><img src="http://ww3.sinaimg.cn/large/8a41f469jw1f27ya2j064j21cw0iwwfz.jpg" alt="HelloWord" /></p>

<p>Study Jams 活动是一个免费的，纯公益性的活动，任何人都可以参与学习，也可以组织身边的朋友们一起学习。活动形式可以选择线上和线下。Study Jams 活动得到了 Google 开发技术生态 团队 的大力支持，所有参与活动的学员和组织者，以及活动的推荐人，都可以得到相应的证书和小礼物作为奖励，可以到论坛下载详细的执行手册。</p>

<h2>课程预览视频</h2>

<p><embed src="http://static.video.qq.com/TPout.swf?vid=u0189bvpj48&auto=0" allowFullScreen="true" quality="high" height="480" width="100%" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"/></p>

<h2>课程中包含的 Googler 想对你说的话</h2>

<p><embed src="http://static.video.qq.com/TPout.swf?vid=q0189eptczk&auto=0" allowFullScreen="true" quality="high" height="480" width="100%" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"/></p>

<h2>请注意</h2>

<p><strong style="font-size:28px">请</strong>注意，这个活动<strong style="font-size:28px">不</strong><strong>欢迎独行侠</strong>，如果参与，你就需要付出时间与别人组队，解答问题，分享等。
同时，这个活动的受众群体是零编程基础的小白，如果你是一位有经验的开发者，活动参与过程中，请给予更多的包容和理解。</p>

<p><img src="http://ww1.sinaimg.cn/large/8a41f469jw1f27yaqt2kzj21cw0iwwjc.jpg" alt="StudyJams" /></p>

<p>如果你考虑清楚了那就请点击 <a href="https://gdgdocs.org/r/ox8hOv">这里</a> 报名吧！ 全国的 Android 初学者都在等你的加入，希望与你一起成长。</p>

<p>如果针对这个活动有任何问题，请联系我们的客服或者发送邮件到：
<a href="mailto:study-jams-china@google.com">study-jams-china@google.com</a></p>

<blockquote><p>顺便说一句，该课程字幕由谷创字幕组（前GDG字幕组）的热心志愿者翻译，如果你也想参与字幕组做 Google 技术课程的翻译，请联系：<a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x6c;&#117;&#x63;&#104;&#x65;&#x6e;&#x67;&#64;&#x67;&#x6f;&#x6f;&#103;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#x75;&#x63;&#104;&#x65;&#110;&#103;&#x40;&#x67;&#111;&#x6f;&#103;&#x6c;&#x65;&#46;&#99;&#x6f;&#x6d;</a> 如果能够附上一份可爱的简历，那就最好了。</p></blockquote>

<h2>微信公众号</h2>

<p>了解更多活动动态，请关注 Google StudyJams 活动的微信公众号</p>

<p><img src="http://ww1.sinaimg.cn/large/8a41f469jw1f2813be87vj2078078mxq.jpg" alt="Google StudyJams 微信公众号" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Java中的ThreadLocal]]></title>
    <link href="http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/"/>
    <updated>2016-03-13T20:21:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java</id>
    <content type="html"><![CDATA[<p>提到ThreadLocal，有些Android或者Java程序员可能有所陌生，可能会提出种种问题，它是做什么的，是不是和线程有关，怎么使用呢？等等问题，本文将总结一下我对ThreadLocal的理解和认识，希望让大家理解ThreadLocal更加透彻一些。</p>

<!--more-->


<h2>ThreadLocal是什么</h2>

<p>ThreadLocal是一个关于创建线程局部变量的类。</p>

<p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。</p>

<h2>Global &amp;&amp; Local</h2>

<p>上面的两个修饰看似矛盾，实则不然。</p>

<ul>
<li>Global 意思是在当前线程中，任何一个点都可以访问到ThreadLocal的值。</li>
<li>Local 意思是该线程的ThreadLocal只能被该线程访问，一般情况下其他线程访问不到。</li>
</ul>


<h2>用法简介</h2>

<h3>创建，支持泛型</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mStringThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>set方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mStringThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>get方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mStringThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的使用示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testThreadLocal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mStringThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="n">mStringThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mStringThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ThreadLocal初始值</h3>

<p>为ThreadLocal设置默认的get初始值，需要重写<code>initialValue</code>方法，下面是一段代码，我们将默认值修改成了线程的名字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">initialValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Android中的应用</h2>

<p>在Android中，Looper类就是利用了ThreadLocal的特性，保证每个线程只存在一个Looper对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;</span> <span class="n">sThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Looper</span><span class="o">&gt;();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">prepare</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">quitAllowed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">sThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Only one Looper may be created per thread&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">sThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="n">Looper</span><span class="o">(</span><span class="n">quitAllowed</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何实现</h2>

<p>为了更好的掌握ThreadLocal，我认为了解其内部实现是很有必要的，这里我们以set方法从起始看一看ThreadLocal的实现原理。</p>

<p>下面是ThreadLocal的set方法，大致意思为</p>

<ul>
<li>首先获取当前线程</li>
<li>利用当前线程作为句柄获取一个ThreadLocalMap的对象</li>
<li>如果上述ThreadLocalMap对象不为空，则设置值，否则创建这个ThreadLocalMap对象并设置值</li>
</ul>


<p>源码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ThreadLocalMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">map</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nf">createMap</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是一个利用Thread对象作为句柄获取ThreadLocalMap对象的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ThreadLocalMap</span> <span class="nf">getMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="na">threadLocals</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码获取的实际上是Thread对象的threadLocals变量，可参考下面代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Thread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/* ThreadLocal values pertaining to this thread. This map is maintained</span>
</span><span class='line'><span class="cm">     * by the ThreadLocal class. */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ThreadLocal</span><span class="o">.</span><span class="na">ThreadLocalMap</span> <span class="n">threadLocals</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而如果一开始设置，即ThreadLocalMap对象未创建，则新建ThreadLocalMap对象，并设置初始值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">createMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">T</span> <span class="n">firstValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="na">threadLocals</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocalMap</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">firstValue</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>总结：实际上ThreadLocal的值是放入了当前线程的一个ThreadLocalMap实例中，所以只能在本线程中访问，其他线程无法访问。</p>

<h2>对象存放在哪里</h2>

<p>在Java中，栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存。而堆内存中的对象对所有线程可见。堆内存中的对象可以被所有线程访问。</p>

<h3>问：那么是不是说ThreadLocal的实例以及其值存放在栈上呢？</h3>

<p>其实不是，因为ThreadLocal实例实际上也是被其创建的类持有（更顶端应该是被线程持有）。而ThreadLocal的值其实也是被线程实例持有。</p>

<p><strong>它们都是位于堆上，只是通过一些技巧将可见性修改成了线程可见。</strong></p>

<p>关于堆和栈的比较，请参考<a href="http://droidyue.com/blog/2014/12/07/differences-between-stack-and-heap-in-java/">Java中的堆和栈的区别</a></p>

<h2>真的只能被一个线程访问么</h2>

<p>既然上面提到了ThreadLocal只对当前线程可见，是不是说ThreadLocal的值只能被一个线程访问呢？</p>

<p>使用InheritableThreadLocal可以实现多个线程访问ThreadLocal的值。</p>

<p>如下，我们在主线程中创建一个InheritableThreadLocal的实例，然后在子线程中得到这个InheritableThreadLocal实例设置的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testInheritableThreadLocal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ThreadLocal</span> <span class="n">threadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InheritableThreadLocal</span><span class="o">();</span>
</span><span class='line'>    <span class="n">threadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;testInheritableThreadLocal =&quot;</span> <span class="o">+</span> <span class="n">threadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码输出的日志信息为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span> <span class="mi">5046</span><span class="o">):</span> <span class="n">testInheritableThreadLocal</span> <span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用InheritableThreadLocal可以将某个线程的ThreadLocal值在其子线程创建时传递过去。因为在线程创建过程中，有相关的处理逻辑。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Thread.java</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ThreadGroup</span> <span class="n">g</span><span class="o">,</span> <span class="n">Runnable</span> <span class="n">target</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                      <span class="kt">long</span> <span class="n">stackSize</span><span class="o">,</span> <span class="n">AccessControlContext</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//code goes here</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">inheritableThreadLocals</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">inheritableThreadLocals</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">ThreadLocal</span><span class="o">.</span><span class="na">createInheritedMap</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">inheritableThreadLocals</span><span class="o">);</span>
</span><span class='line'>        <span class="cm">/* Stash the specified stack size in case the VM cares */</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">stackSize</span> <span class="o">=</span> <span class="n">stackSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Set thread ID */</span>
</span><span class='line'>        <span class="n">tid</span> <span class="o">=</span> <span class="n">nextThreadID</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码就是在线程创建的时候，复制父线程的inheritableThreadLocals的数据。</p>

<h2>会导致内存泄露么</h2>

<p>有网上讨论说ThreadLocal会导致内存泄露，原因如下</p>

<ul>
<li>首先ThreadLocal实例被线程的ThreadLocalMap实例持有，也可以看成被线程持有。</li>
<li>如果应用使用了线程池，那么之前的线程实例处理完之后出于复用的目的依然存活</li>
<li>所以，ThreadLocal设定的值被持有，导致内存泄露。</li>
</ul>


<p>上面的逻辑是清晰的，可是ThreadLocal并不会产生内存泄露，因为ThreadLocalMap在选择key的时候，并不是直接选择ThreadLocal实例，而是ThreadLocal实例的弱引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">ThreadLocalMap</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* The entries in this hash map extend WeakReference, using</span>
</span><span class='line'><span class="cm">* its main ref field as the key (which is always a</span>
</span><span class='line'><span class="cm">* ThreadLocal object).  Note that null keys (i.e. entry.get()</span>
</span><span class='line'><span class="cm">* == null) mean that the key is no longer referenced, so the</span>
</span><span class='line'><span class="cm">* entry can be expunged from table.  Such entries are referred to</span>
</span><span class='line'><span class="cm">* as &quot;stale entries&quot; in the code that follows.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Entry</span> <span class="kd">extends</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">ThreadLocal</span><span class="o">&lt;?&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/** The value associated with this ThreadLocal. */</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Entry</span><span class="o">(</span><span class="n">ThreadLocal</span><span class="o">&lt;?&gt;</span> <span class="n">k</span><span class="o">,</span> <span class="n">Object</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以实际上从ThreadLocal设计角度来说是不会导致内存泄露的。关于弱引用，了解更多，请访问<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">译文：理解Java中的弱引用
</a></p>

<h2>使用场景</h2>

<ul>
<li>实现单个线程单例以及单个线程上下文信息存储，比如交易id等</li>
<li>实现线程安全，非线程安全的对象使用ThreadLocal之后就会变得线程安全，因为每个线程都会有一个对应的实例</li>
<li>承载一些线程相关的数据，避免在方法中来回传递参数</li>
</ul>


<p><strong>注意：Android的ThreadLocal与Java实现略有不同，但是原理是一致的</strong>。</p>

<h2>参考文章</h2>

<ul>
<li><a href="http://tutorials.jenkov.com/java-concurrency/threadlocal.html">Java ThreadLocal</a></li>
<li><a href="http://cs.oswego.edu/pipermail/concurrency-interest/2007-October/004456.html">Threadlocals and memory leaks in J2EE</a></li>
<li><a href="http://veerasundar.com/blog/2010/11/java-thread-local-how-to-use-and-code-sample/">Java Thread Local – How to use and code sample</a></li>
<li><a href="http://javarevisited.blogspot.hk/2012/05/how-to-use-threadlocal-in-java-benefits.html">ThreadLocal in Java &ndash; Example Program and Tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android签名相关知识整理]]></title>
    <link href="http://droidyue.com/blog/2016/03/06/summary-of-android-signing/"/>
    <updated>2016-03-06T16:17:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/03/06/summary-of-android-signing</id>
    <content type="html"><![CDATA[<p>不止一次有用到Android签名相关的知识，每次都几乎从零开始在Google上搜索找，不想在继续这样了，找了个时间好好整理了一下自己用到的一些碎片知识，于是乎放到这里，一是备忘，二是帮助别人。</p>

<!--more-->


<h2>从APK文件中获取签名信息</h2>

<h3>使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">keytool</span> <span class="o">-</span><span class="n">list</span> <span class="o">-</span><span class="n">printcert</span> <span class="o">-</span><span class="n">jarfile</span> <span class="n">your_apk_file</span>
</span></code></pre></td></tr></table></div></figure>


<h3>输出信息</h3>

<ul>
<li>签名Owner,Issuer等信息</li>
<li>签名的fingerprints,如md5及sha1等值</li>
<li>签名有效期等信息</li>
</ul>


<h3>示例效果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">16</span><span class="o">:</span><span class="mi">29</span> <span class="n">$</span> <span class="n">keytool</span> <span class="o">-</span><span class="n">list</span> <span class="o">-</span><span class="n">printcert</span> <span class="o">-</span><span class="n">jarfile</span> <span class="n">akoi_1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">apk</span>
</span><span class='line'><span class="n">Signer</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Signature:</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Owner:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="nl">Issuer:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="n">Serial</span> <span class="nl">number:</span> <span class="mi">11</span><span class="n">a8a4a3</span>
</span><span class='line'><span class="n">Valid</span> <span class="nl">from:</span> <span class="n">Tue</span> <span class="n">Feb</span> <span class="mi">10</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">2015</span> <span class="nl">until:</span> <span class="n">Sun</span> <span class="n">Jun</span> <span class="mi">13</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">3013</span>
</span><span class='line'><span class="n">Certificate</span> <span class="nl">fingerprints:</span>
</span><span class='line'>   <span class="nl">MD5:</span>  <span class="mi">46</span><span class="o">:</span><span class="nl">C5:BE:EF:B5:C9:</span><span class="mi">00</span><span class="o">:</span><span class="nl">E1:FA:</span><span class="mi">42</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">57</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="nl">CA:</span><span class="mi">15</span>
</span><span class='line'>   <span class="nl">SHA1:</span> <span class="nl">C1:</span><span class="mi">14</span><span class="o">:</span><span class="mi">5</span><span class="nl">D:</span><span class="mi">0</span><span class="nl">A:C2:BF:F6:</span><span class="mi">06</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="nl">AE:</span><span class="mi">2</span><span class="nl">C:</span><span class="mi">07</span><span class="o">:</span><span class="mi">12</span><span class="o">:</span><span class="mi">97</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="nl">C2:</span><span class="mi">1</span><span class="nl">B:</span><span class="mi">39</span><span class="o">:</span><span class="n">D1</span>
</span><span class='line'>   <span class="nl">SHA256:</span> <span class="mi">0</span><span class="nl">E:</span><span class="mi">88</span><span class="o">:</span><span class="mi">7</span><span class="nl">D:C2:</span><span class="mi">4</span><span class="nl">C:D6:</span><span class="mi">84</span><span class="o">:</span><span class="nl">A7:</span><span class="mi">58</span><span class="o">:</span><span class="nl">D4:</span><span class="mi">24</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:</span><span class="mi">9</span><span class="nl">D:</span><span class="mi">38</span><span class="o">:</span><span class="nl">F9:</span><span class="mi">05</span><span class="o">:</span><span class="mi">98</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:B2:A2:D7:CB:</span><span class="mi">0</span><span class="nl">F:</span><span class="mi">81</span><span class="o">:</span><span class="mi">74</span><span class="o">:</span><span class="mi">60</span><span class="o">:</span><span class="mi">5</span><span class="nl">B:</span><span class="mi">38</span><span class="o">:</span><span class="mi">89</span><span class="o">:</span><span class="nl">FF:</span><span class="mi">21</span><span class="o">:</span><span class="mi">1</span><span class="n">C</span>
</span><span class='line'>   <span class="n">Signature</span> <span class="n">algorithm</span> <span class="nl">name:</span> <span class="n">SHA256withRSA</span>
</span><span class='line'>   <span class="nl">Version:</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>从签名文件中获取签名信息</h2>

<h3>使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">keytool</span> <span class="o">-</span><span class="n">list</span> <span class="o">-</span><span class="n">v</span> <span class="o">-</span><span class="n">keystore</span> <span class="n">your_kestore_file</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，上述命令执行后，会提示输入密码，其实输入错误也没有关系，不影响结果。</p>

<h3>输出信息</h3>

<ul>
<li>签名Owner,Issuer等信息</li>
<li>签名的fingerprints,如md5及sha1等值</li>
<li>签名有效期等信息</li>
</ul>


<h3>示例效果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Keystore</span> <span class="nl">type:</span> <span class="n">JKS</span>
</span><span class='line'><span class="n">Keystore</span> <span class="nl">provider:</span> <span class="n">SUN</span>
</span><span class='line'>
</span><span class='line'><span class="n">Your</span> <span class="n">keystore</span> <span class="n">contains</span> <span class="mi">1</span> <span class="n">entry</span>
</span><span class='line'>
</span><span class='line'><span class="n">Alias</span> <span class="nl">name:</span> <span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span><span class='line'><span class="n">Creation</span> <span class="nl">date:</span> <span class="n">Feb</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">2015</span>
</span><span class='line'><span class="n">Entry</span> <span class="nl">type:</span> <span class="n">PrivateKeyEntry</span>
</span><span class='line'><span class="n">Certificate</span> <span class="n">chain</span> <span class="nl">length:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Certificate</span><span class="o">[</span><span class="mi">1</span><span class="o">]:</span>
</span><span class='line'><span class="nl">Owner:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="nl">Issuer:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="n">Serial</span> <span class="nl">number:</span> <span class="mi">11</span><span class="n">a8a4a3</span>
</span><span class='line'><span class="n">Valid</span> <span class="nl">from:</span> <span class="n">Tue</span> <span class="n">Feb</span> <span class="mi">10</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">2015</span> <span class="nl">until:</span> <span class="n">Sun</span> <span class="n">Jun</span> <span class="mi">13</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">3013</span>
</span><span class='line'><span class="n">Certificate</span> <span class="nl">fingerprints:</span>
</span><span class='line'>   <span class="nl">MD5:</span>  <span class="mi">46</span><span class="o">:</span><span class="nl">C5:BE:EF:B5:C9:</span><span class="mi">00</span><span class="o">:</span><span class="nl">E1:FA:</span><span class="mi">42</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">57</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="nl">CA:</span><span class="mi">15</span>
</span><span class='line'>   <span class="nl">SHA1:</span> <span class="nl">C1:</span><span class="mi">14</span><span class="o">:</span><span class="mi">5</span><span class="nl">D:</span><span class="mi">0</span><span class="nl">A:C2:BF:F6:</span><span class="mi">06</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="nl">AE:</span><span class="mi">2</span><span class="nl">C:</span><span class="mi">07</span><span class="o">:</span><span class="mi">12</span><span class="o">:</span><span class="mi">97</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="nl">C2:</span><span class="mi">1</span><span class="nl">B:</span><span class="mi">39</span><span class="o">:</span><span class="n">D1</span>
</span><span class='line'>   <span class="nl">SHA256:</span> <span class="mi">0</span><span class="nl">E:</span><span class="mi">88</span><span class="o">:</span><span class="mi">7</span><span class="nl">D:C2:</span><span class="mi">4</span><span class="nl">C:D6:</span><span class="mi">84</span><span class="o">:</span><span class="nl">A7:</span><span class="mi">58</span><span class="o">:</span><span class="nl">D4:</span><span class="mi">24</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:</span><span class="mi">9</span><span class="nl">D:</span><span class="mi">38</span><span class="o">:</span><span class="nl">F9:</span><span class="mi">05</span><span class="o">:</span><span class="mi">98</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:B2:A2:D7:CB:</span><span class="mi">0</span><span class="nl">F:</span><span class="mi">81</span><span class="o">:</span><span class="mi">74</span><span class="o">:</span><span class="mi">60</span><span class="o">:</span><span class="mi">5</span><span class="nl">B:</span><span class="mi">38</span><span class="o">:</span><span class="mi">89</span><span class="o">:</span><span class="nl">FF:</span><span class="mi">21</span><span class="o">:</span><span class="mi">1</span><span class="n">C</span>
</span><span class='line'>   <span class="n">Signature</span> <span class="n">algorithm</span> <span class="nl">name:</span> <span class="n">SHA256withRSA</span>
</span><span class='line'>   <span class="nl">Version:</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>重新签名APK</h2>

<p>在没有源码情况下，我们就能对apk进行更换签名。</p>

<h3>脚本</h3>

<ul>
<li><a href="https://apk-resigner.googlecode.com/svn/trunk/signapk.sh">signapk.sh</a></li>
<li><a href="http://7jpqsg.com1.z0.glb.clouddn.com/signapk.sh">备用地址</a></li>
</ul>


<h3>使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">bash</span> <span class="n">signapk</span><span class="o">.</span><span class="na">sh</span> <span class="n">your_apk_file</span> <span class="n">your_keystore_file</span> <span class="n">keystore_pass</span> <span class="n">keystore_alias</span>
</span></code></pre></td></tr></table></div></figure>


<h3>示例效果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">16</span><span class="o">:</span><span class="mi">57</span> <span class="n">$</span> <span class="n">bash</span> <span class="n">signapk</span><span class="o">.</span><span class="na">sh</span> <span class="n">weixin6313android740</span><span class="o">.</span><span class="na">apk</span> <span class="o">~/</span><span class="n">Documents</span><span class="o">/</span><span class="n">baidu_disk</span><span class="o">/</span><span class="err">百度云同步盘</span><span class="o">/</span><span class="n">droidapp</span><span class="o">/</span><span class="n">mykiki</span> <span class="mi">123456</span> <span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span><span class='line'><span class="n">param1</span> <span class="n">weixin6313android740</span><span class="o">.</span><span class="na">apk</span>
</span><span class='line'><span class="n">param2</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">androidyue</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">droidapp</span><span class="o">/</span><span class="n">mykiki</span>
</span><span class='line'><span class="n">param3</span> <span class="mi">123456</span>
</span><span class='line'><span class="n">param4</span> <span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span><span class='line'><span class="nl">deleting:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">MANIFEST</span><span class="o">.</span><span class="na">MF</span>
</span><span class='line'><span class="nl">deleting:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">SF</span>
</span><span class='line'><span class="nl">deleting:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">RSA</span>
</span><span class='line'>   <span class="nl">adding:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">MANIFEST</span><span class="o">.</span><span class="na">MF</span>
</span><span class='line'>   <span class="nl">adding:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">SF</span>
</span><span class='line'>   <span class="nl">adding:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">RSA</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="n">Verification</span> <span class="n">succesful</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的文件会放在当前目录，其文件名相对输入文件，增加了<code>signed_</code>前缀，比如对<code>weixin6313android740.apk</code>进行上述操作得到的输出文件是<code>signed_weixin6313android740.apk</code></p>

<h2>Gradle build生成签名APK</h2>

<p>想要在执行gradle build时生成指定签名的apk，需要在build.gradle中如下修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">signingConfigs</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;myrelease.keystore&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">storePassword</span> <span class="s">&quot;********&quot;</span>
</span><span class='line'>            <span class="n">keyAlias</span> <span class="s">&quot;******&quot;</span>
</span><span class='line'>            <span class="n">keyPassword</span> <span class="s">&quot;******&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="o">.</span><span class="na">release</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简易小工具，七牛Uploader for Octopress]]></title>
    <link href="http://droidyue.com/blog/2016/02/28/an-easy-tool-to-upload-file-to-qiniu-especially-for-octopress/"/>
    <updated>2016-02-28T17:15:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/02/28/an-easy-tool-to-upload-file-to-qiniu-especially-for-octopress</id>
    <content type="html"><![CDATA[<p>春节假期，带着电脑回家，蹭着邻居的网，除夕晚上用ruby写了一个简单的工具。安利一下，广而告之。</p>

<!--more-->


<h2>为什么写这个应用</h2>

<h3>为什么用七牛</h3>

<p>七牛是我比较看好的一个云存储，其国内国外有很多cdn，如果我把我的网站放到七牛上，打开速度应该会显著提升。</p>

<h3>为什么还自己写</h3>

<ul>
<li>七牛官方的qrsync不支持例外目录，会上传.git文件夹下的内容</li>
<li>七牛的qrsync更新策略不符合我的需求</li>
<li>自己有时间和能力</li>
</ul>


<h2>功能描述</h2>

<ul>
<li>暂时只支持对文件的上传和更新，不含删除和下载功能</li>
<li>尤其适合于Octopress网站</li>
</ul>


<h2>使用</h2>

<h3>创建授权信息文件</h3>

<p>从七牛后台 账号&mdash;>秘钥 中获取AccessKey和SecretKey分别填入下面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[auth]
</span><span class='line'>access_key = ""
</span><span class='line'>secret_key = ""</span></code></pre></td></tr></table></div></figure>


<p>将上述内容保存成文件<code>.qiniu.ini</code> 放在同步脚本的祖先目录上即可，也可以放在家目录。</p>

<p>举个例子，比如你的同步脚本放在<code>~/tools/notes/sync_dir/</code>下，你的配置文件，可以放在<code>~/</code>,<code>~/tools/</code>以及<code>~/tools/notes/</code>。</p>

<p>注意，不要将上述文件放同步脚本目录，以免信息泄露。</p>

<h3>同步</h3>

<p>使用方法如下，很简单，需要传入同步文件夹路径和bucket名称</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ruby</span> <span class="n">push2Qiniu</span><span class="o">.</span><span class="na">rb</span> <span class="n">dir_to_sync</span> <span class="n">bucket</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实现原理</h2>

<p>实现原理很简单，基本如下</p>

<ul>
<li>新文件 直接上传</li>
<li>已存在的文件，如果lastModified没有变化，不上传</li>
<li>已存在的文件，如果lastModified有变化，检测文件内容md5，如果和上一次不同，则上传，否则不上传。</li>
</ul>


<h2>和Octopress集成</h2>

<p>修改Octopress的Rakefile文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Default deploy task&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Check if preview posts exist, which should not be published</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;.preview-mode&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;## Found posts in preview mode, regenerating files ...&quot;</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;.preview-mode&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="ss">:generate</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="ss">:copydot</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">source_dir</span><span class="p">,</span> <span class="n">public_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="n">atom2rssDir</span> <span class="o">=</span> <span class="s1">&#39;~/osc_git/php_works/&#39;</span>
</span><span class='line'>  <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_default</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="sr">//</span><span class="err">在这里加入同步脚本执行</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>源码</h2>

<ul>
<li><a href="https://github.com/androidyue/Qiniu_Uploader">Qiniu_Uploader</a></li>
</ul>


<h2>使用七牛</h2>

<p>下面的是七牛的一位员工的QQ二维码，想要使用七牛（每月免费10G流量）并得到更多优惠，请联系她，注明来自技术小黑屋。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/qiniu_tina.jpg" alt="http://7jpolu.com1.z0.glb.clouddn.com/qiniu_tina.jpg" /></p>
]]></content>
  </entry>
  
</feed>
