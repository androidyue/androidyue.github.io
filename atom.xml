<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2022-03-24T08:23:44+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[忘了 Mac 访达吧，QSpace 文件管理器一个更比多个强]]></title>
    <link href="https://droidyue.com/blog/2022/03/24/quit-finder-and-use-qspace-in-mac-os/"/>
    <updated>2022-03-24T08:21:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/03/24/quit-finder-and-use-qspace-in-mac-os</id>
    <content type="html"><![CDATA[<p>注：QSpace 是我的一位超级优秀的前同事开发的，个人在软件发布之初就曾尝试，很不错，希望大家可以支持使用一下哈。</p>

<p>使用 Mac 的小伙伴，有多少人还在用原生的访达管理文件？虽然已经满足基本需求，但仍有一些槽点：不支持多视图查看、地址栏编辑不够直观、连接服务器仅只读等。</p>

<p>强烈安利一款单窗口多视图文件管理器：<strong>QSpace</strong>，拥有连接云服务器、右键增强、文件暂存等诸多实用自定义功能。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE1.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE1.png" /></p>

<p>同类产品 Path Finder，订阅一年就要支付约 190 元，而今天的 <strong>QSpace</strong> 买断只要 <strong>47 元</strong>起，爆款产品数码荔枝独家代理。点击[合作伙伴]<a href="https://store.lizhi.io/site/products/id/534?cid=wncr9wz5">专属优惠链接</a>，抢购就趁现在！新用户还能领券再省 5 元！</p>

<!--more-->


<h2>展开多文件夹操作</h2>

<p>一个窗口内，可划分出多个独立区域，同时展开多个文件夹。10+ 种布局方案任你选，不同路径下高效拖拽移动文件。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE2.gif" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE2.gif" /></p>

<p>每次都要打开一遍各个路径太麻烦？QSpace 支持将当前状态保存为工作区，下次快速恢复到工作状态。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE3.gif" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE3.gif" /></p>

<h2>更直观的地址栏</h2>

<p>在使用访达时，自带的路径栏是不是不够方便，复制编辑路径比较麻烦。</p>

<p>来试试 QSpace，你可以像浏览器的地址栏一样，自由复制、修改路径。并且支持自动补全，真心推荐！</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE4.gif" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE4.gif" /></p>

<p>鼠标移至路径节点旁的小三角，还支持快速选择其他位置，交互更方便。</p>

<h2>一键启动程序</h2>

<p>QSpace 也支持快速使用终端 &amp; 编辑器打开当前路径，与功能缺失的 MAS 商店版比，专业版支持 Hyper、Tabby 等多种终端应用。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE5.gif" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE5.gif" /></p>

<p>使用密钥登录的 SFTP 服务器，专业版还可以将云端路径快速在终端打开，非常方便。</p>

<p>QSpace 数码荔枝独家优惠，仅需 47 元起即可买断，比商店版多花两块钱，解锁更多高级完整的功能，点击[合作伙伴]<a href="https://store.lizhi.io/site/products/id/534?cid=wncr9wz5">专属优惠链接</a>，买买买！</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE6.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE6.png" /></p>

<h2>右键增强</h2>

<p>除了使用第三方工具定制右键，在 QSpace 同样可以实现右键功能增强。剪切、新建、彻底删除、计算哈希值等右键快速搞定……</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE7.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE7.png" /></p>

<p>QSpace 可高度自定义，打造你的专属文件管理器。拖拽即可快速添加或移除功能，简单又直观。</p>

<p>数码荔枝在售的<a href="https://store.lizhi.io/site/products/id/534?cid=wncr9wz5">专业版</a>，还支持开启 QSpace 桌面，不仅仅是在 QSpace 软件内，右键等诸多功能在桌面上也能用。</p>

<h2>扩展增强</h2>

<p>QSpace 还为用户提供了 4 款额外付费的扩展：连接服务器、批量重命名、文件暂存架和归档增强。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE8.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE8.png" /></p>

<p>原价 18 元解锁 4 款扩展，前往数码荔枝选购套装，相当于 15 元就能解锁。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE9.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE9.png" /></p>

<p>其中，<strong>归档增强</strong>扩展为限时免费，强烈推荐所有用户解锁，错过不再有！</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE10.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE10.png" /></p>

<p><strong>暂存架</strong>可以将本地文件或网络图片，拖拽暂存到一起，统一进行复制移动、分享、重命名等。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE11.gif" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE11.gif" /></p>

<p><strong>高级批量重命名</strong>，可以支持设定日期、宽度、高度等变量，支持正则表达式。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE12.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE12.png" /></p>

<p><strong>连接服务器</strong>扩展，支持 FTP、SFTP、SMB 等多种协议，可连接阿里、腾讯、七牛等对象存储，本地和云端轻松拖拽传输，无需再找传输软件了！</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE13.png" alt="https://asset.droidyue.com/image/lizhi_io/qspace/%E5%9B%BE13.png" /></p>

<hr />

<p>QSpace 爆款新品超高性价比，前往数码荔枝仅需 <strong>47 元</strong>即可买断专业版，加 <strong>15 元</strong>解锁 4 款高级扩展功能。相比同类产品，性价比超高！戳[合作伙伴]<a href="https://store.lizhi.io/site/products/id/534?cid=wncr9wz5">专属优惠链接</a>，买买买！</p>

<p>注：QSpace 是我的一位超级优秀的前同事开发的，个人在软件发布之初就曾尝试，很不错，希望大家可以支持使用一下哈。</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端下 history 展示时间信息]]></title>
    <link href="https://droidyue.com/blog/2022/03/21/show-bash-time-info-in-terminal/"/>
    <updated>2022-03-21T21:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/03/21/show-bash-time-info-in-terminal</id>
    <content type="html"><![CDATA[<p>经常使用终端的同学，最常用的命令之一可能就有 history， 它可以帮助我们查看执行过的终端命令的历史信息。</p>

<p>history 执行很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@raspberrypi:~ <span class="nv">$ </span><span class="nb">history</span>
</span><span class='line'><span class="nb">    </span>1  clear
</span><span class='line'>    2  ls
</span><span class='line'>    3  sudo apt update
</span><span class='line'>    4  df -h
</span><span class='line'>    5  sudo apt install vim
</span><span class='line'>    6  sudo reboot
</span><span class='line'>    7  clear
</span><span class='line'>    8  ls
</span><span class='line'>    9  sudo apt install vim
</span><span class='line'>   10  locale
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>但是有时候，我们想要获取一些关于历史信息更多的内容，比如 执行某条命令时的时间，来确定一些操作。</p>

<h2>针对 bash 这样设置</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;HISTTIMEFORMAT=&quot;%F %T &quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>然后再次执行即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">history</span>
</span><span class='line'><span class="nb">    </span>1  2022-02-06 21:55:32 clear
</span><span class='line'>    2  2022-02-06 21:55:32 ls
</span><span class='line'>    3  2022-02-06 21:55:32 sudo apt update
</span><span class='line'>    4  2022-02-06 21:55:32 df -h
</span><span class='line'>    5  2022-02-06 21:55:32 sudo apt install vim
</span><span class='line'>    6  2022-02-06 21:55:32 sudo reboot
</span><span class='line'>    7  2022-02-06 21:55:32 clear
</span><span class='line'>    8  2022-02-06 21:55:32 ls
</span><span class='line'>    9  2022-02-06 21:55:32 sudo apt install vim
</span><span class='line'>   10  2022-02-06 21:55:32 locale
</span></code></pre></td></tr></table></div></figure>


<p>但是对于使用了zsh 环境的终端（比如 ohmyzsh 等），上述的配置不生效，需要这样(history -i )使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nb">history</span> -i
</span><span class='line'>    1  2020-07-05 16:48  mv ~/Downloads/aaaaa.zip ./
</span><span class='line'>    2  2020-07-05 16:48  unzip aaaaa.zip
</span><span class='line'>    3  2020-07-03 21:58  <span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>http://127.0.0.1:1087;export <span class="nv">https_proxy</span><span class="o">=</span>http://127.0.0.1:1087;
</span><span class='line'>    4  2020-07-03 21:58  /bin/bash -c <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span>
</span><span class='line'>    5  2020-07-03 22:10  sh -c <span class="s2">&quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span>
</span><span class='line'>    6  2020-07-03 22:13  /bin/bash -c <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><span class="se">\n</span>
</span><span class='line'>    7  2020-07-03 22:44  <span class="nb">cd </span>OneDrive
</span></code></pre></td></tr></table></div></figure>



<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MBP touchbar 设置Fn 按键长期显示]]></title>
    <link href="https://droidyue.com/blog/2022/03/13/macbook-pro-show-fn-always-in-the-touchbar/"/>
    <updated>2022-03-13T10:38:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/03/13/macbook-pro-show-fn-always-in-the-touchbar</id>
    <content type="html"><![CDATA[<p>TouchBar 的出现确实让 MBP 酷炫了很多，但是对于我来说，总感觉有点华而不实，原因有二</p>

<ul>
<li>动态变化的 按钮 几乎没有用到</li>
<li>基础的Fn 按键 使用起来反而更加不方便。（比如 IDE 使用F3 查看Definition）</li>
</ul>


<p>好在系统设置提供了长期显示 Fn 的配置选项</p>

<!--more-->


<h3>设置方式</h3>

<p>选择系统设置(System Preferences)，选择 键盘(Keyboard) 如下设计即可</p>

<p><img src="https://asset.droidyue.com/image/2022/h1/mbp_touchbar_fn_keys.png" alt="mbp touchbar fn keys setting" /></p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flutter TabController 多次调用，导致切换异常问题]]></title>
    <link href="https://droidyue.com/blog/2022/03/06/flutter-tabcontroller-listener-called-multiple-times/"/>
    <updated>2022-03-06T22:13:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/03/06/flutter-tabcontroller-listener-called-multiple-times</id>
    <content type="html"><![CDATA[<p>Flutter  中，TabController 是连接 TabBar 与 TabBarView 的纽带，处理选中状态时必不可少的内容。</p>

<p>但是当我们在监听 TabController 时，会发现又多次调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="err">@</span><span class="n">override</span>
</span><span class='line'><span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">super</span><span class="p">.</span><span class="n">initState</span><span class="p">();</span>
</span><span class='line'> <span class="n">_tabController</span> <span class="o">=</span> <span class="n">TabController</span><span class="p">(</span><span class="nl">vsync:</span> <span class="k">this</span><span class="p">,</span> <span class="nl">length:</span> <span class="n">myTabs</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'> <span class="n">_tabController</span><span class="p">.</span><span class="n">addListener</span><span class="p">(()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">debugPrint</span><span class="p">(</span><span class="s1">&#39;initState currentIndex=</span><span class="si">${</span><span class="n">_tabController</span><span class="p">.</span><span class="n">index</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>对应的多次调用日志如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> +153 ms<span class="o">]</span> I/flutter <span class="o">(</span>13788<span class="o">)</span>: initState <span class="nv">currentIndex</span><span class="o">=</span>2
</span><span class='line'><span class="o">[</span> +344 ms<span class="o">]</span> I/flutter <span class="o">(</span>13788<span class="o">)</span>: initState <span class="nv">currentIndex</span><span class="o">=</span>2
</span><span class='line'><span class="o">[</span>+9932 ms<span class="o">]</span> I/ViewRootImpl@9e6d4e6<span class="o">[</span>MainActivity<span class="o">](</span>13788<span class="o">)</span>: ViewPostIme pointer 0
</span><span class='line'><span class="o">[</span>  +94 ms<span class="o">]</span> I/ViewRootImpl@9e6d4e6<span class="o">[</span>MainActivity<span class="o">](</span>13788<span class="o">)</span>: ViewPostIme pointer 1
</span><span class='line'><span class="o">[</span>   +5 ms<span class="o">]</span> I/flutter <span class="o">(</span>13788<span class="o">)</span>: initState <span class="nv">currentIndex</span><span class="o">=</span>0
</span><span class='line'><span class="o">[</span> +320 ms<span class="o">]</span> I/flutter <span class="o">(</span>13788<span class="o">)</span>: initState <span class="nv">currentIndex</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>但是为什么会调用两次呢，是bug（重复调用）还是 feature（其他用途），我们需要增加一个额外的信息打印。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="err">@</span><span class="n">override</span>
</span><span class='line'><span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">super</span><span class="p">.</span><span class="n">initState</span><span class="p">();</span>
</span><span class='line'> <span class="n">_tabController</span> <span class="o">=</span> <span class="n">TabController</span><span class="p">(</span><span class="nl">vsync:</span> <span class="k">this</span><span class="p">,</span> <span class="nl">length:</span> <span class="n">myTabs</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'> <span class="n">_tabController</span><span class="p">.</span><span class="n">addListener</span><span class="p">(()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">final</span> <span class="n">currentIndex</span> <span class="o">=</span> <span class="n">_tabController</span><span class="p">.</span><span class="n">index</span><span class="p">;</span>
</span><span class='line'>   <span class="kd">final</span> <span class="n">isIndexChanging</span> <span class="o">=</span> <span class="n">_tabController</span><span class="p">.</span><span class="n">indexIsChanging</span><span class="p">;</span>
</span><span class='line'>   <span class="n">debugPrint</span><span class="p">(</span><span class="s1">&#39;initState currentIndex=</span><span class="si">$</span><span class="n">currentIndex</span><span class="s1">;isIndexChanging=</span><span class="si">$</span><span class="n">isIndexChanging</span><span class="s1">&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加额外信息后的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>  +34 ms<span class="o">]</span> I/flutter <span class="o">(</span>13788<span class="o">)</span>: initState <span class="nv">currentIndex</span><span class="o">=</span>2;isIndexChanging<span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="o">[</span> +308 ms<span class="o">]</span> I/flutter <span class="o">(</span>13788<span class="o">)</span>: initState <span class="nv">currentIndex</span><span class="o">=</span>2;isIndexChanging<span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aha, 原来是这样。但是 isIndexChanging 是什么意思呢</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="c1">/// True while we&#39;re animating from [previousIndex] to [index] as a</span>
</span><span class='line'><span class="c1">/// consequence of calling [animateTo].</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// This value is true during the [animateTo] animation that&#39;s triggered when</span>
</span><span class='line'><span class="c1">/// the user taps a [TabBar] tab. It is false when [offset] is changing as a</span>
</span><span class='line'><span class="c1">/// consequence of the user dragging (and &quot;flinging&quot;) the [TabBarView].</span>
</span><span class='line'><span class="kt">bool</span> <span class="kd">get</span> <span class="n">indexIsChanging</span> <span class="o">=&gt;</span> <span class="n">_indexIsChangingCount</span> <span class="o">!=</span> <span class="m">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注释比较简单，大概的意思是</p>

<ul>
<li>当调用 animateTo 从 previousIndex 到 index 时 会返回true</li>
<li>animateTo 触发是通过  用户点击 TabBar 的 tab 触发</li>
<li>当TabBarView 处于 用户拖拽或者 flinging 后，返回false</li>
</ul>


<p>然后我又再次做了一些验证，下面是一些现象</p>

<ul>
<li>点击 TabBar 的 Tab 会触发两条回调,indexIsChanging 第一次是true，第二次为false</li>
<li>手势滑动TabBarView  只有一次回调，indexIsChanging 为 false</li>
<li>手势滑动TabBarView 不松开，不易产生回调，松开后才会产生。</li>
</ul>


<p>那我该怎么用</p>

<p>综合上面的现象和文档描述，我们在处理切换时，可以判断 indexIsChanging 为 false 后，使用index值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="err">@</span><span class="n">override</span>
</span><span class='line'><span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">super</span><span class="p">.</span><span class="n">initState</span><span class="p">();</span>
</span><span class='line'> <span class="n">_tabController</span> <span class="o">=</span> <span class="n">TabController</span><span class="p">(</span><span class="nl">vsync:</span> <span class="k">this</span><span class="p">,</span> <span class="nl">length:</span> <span class="n">myTabs</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'> <span class="n">_tabController</span><span class="p">.</span><span class="n">addListener</span><span class="p">(()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_tabController</span><span class="p">.</span><span class="n">indexIsChanging</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">//do your work</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在具体项目中，如果不进行indexIsChanging判断，可能回调至页面切换错乱，比如从第一个tab切到第三个tab，实际是切到了第二个tab。</p>

<p>按照上面的处理，进行indexIsChanging判断即可解决问题。</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flutter 中获取 TextField 中 text 内容]]></title>
    <link href="https://droidyue.com/blog/2022/02/27/how-to-get-textfiled-value-in-flutter/"/>
    <updated>2022-02-27T21:20:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/02/27/how-to-get-textfiled-value-in-flutter</id>
    <content type="html"><![CDATA[<p>在Flutter 中，TextField 是一个用来输入 文本的 控件。使用起来也很简单，比如这样，就可以轻松实现一个 TextField 来接收用户的输入内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">TextField</span><span class="p">(</span>
</span><span class='line'> <span class="nl">decoration:</span> <span class="kd">const</span> <span class="n">InputDecoration</span><span class="p">(</span>
</span><span class='line'>   <span class="nl">border:</span> <span class="n">OutlineInputBorder</span><span class="p">(),</span>
</span><span class='line'>   <span class="nl">labelText:</span> <span class="s1">&#39;Contact Name&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是 Flutter 是声明式 UI 编程，我们无法像 Android 里那样拿到 TextField 的实例，类似这样(<code>textFieldInstance.text</code>)获取到内部的输入内容。</p>

<p>不过，办法还是有的，只是略有不同而已。</p>

<!--more-->


<h2>onChange 监听，显式声明变量方式（不推荐）</h2>

<p>这种方式的思路大概如下</p>

<p>通过外部显式声明一个String 变量  textFieldText
利用 <code>TextField</code> 的 onChanged 回调接收变化后的输入内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">TextField</span><span class="p">(</span>
</span><span class='line'> <span class="nl">decoration:</span> <span class="kd">const</span> <span class="n">InputDecoration</span><span class="p">(</span>
</span><span class='line'>   <span class="nl">border:</span> <span class="n">OutlineInputBorder</span><span class="p">(),</span>
</span><span class='line'>   <span class="nl">labelText:</span> <span class="s1">&#39;Contact Name&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="p">),</span>
</span><span class='line'> <span class="nl">onChanged:</span> <span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">textFieldText</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'> <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这种实现方式有着两个明显的问题</p>

<ul>
<li>如果 TextField 带有初始文本，没有经过任何修改，则无法获取到对应的内容。</li>
<li>外部暴露 textFieldText 会使得业务侧有修改这个值的可能和风险。</li>
</ul>


<p>所以，上面的方式是严重不推荐的，不要使用。</p>

<h2>借助 TextEditingController</h2>

<p>这是官方文档推荐的方式，就是增加一个 TextEditingController. TextField 与 外部都通过这个 controller 进行连接。</p>

<h3>声明一个 TextEditingController 实例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">final</span> <span class="n">TextEditingController</span> <span class="n">_nameController</span> <span class="o">=</span> <span class="n">TextEditingController</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>将TextEditingController 实例 传入到 TextField 中</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">TextField</span><span class="p">(</span>
</span><span class='line'> <span class="nl">controller:</span> <span class="n">_nameController</span><span class="p">,</span>
</span><span class='line'> <span class="nl">decoration:</span> <span class="kd">const</span> <span class="n">InputDecoration</span><span class="p">(</span>
</span><span class='line'>   <span class="nl">border:</span> <span class="n">OutlineInputBorder</span><span class="p">(),</span>
</span><span class='line'>   <span class="nl">labelText:</span> <span class="s1">&#39;Contact Name&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>通过 TextEditingController 获取 Text</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="nl">floatingActionButton:</span> <span class="n">FloatingActionButton</span><span class="p">(</span>
</span><span class='line'> <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">debugPrint</span><span class="p">(</span><span class="s1">&#39;textfield.value(TextEditingController)=</span><span class="si">${</span><span class="n">_nameController</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">},</span>
</span><span class='line'> <span class="nl">tooltip:</span> <span class="s1">&#39;Increment&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">print</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 TextEditingController 能够完美地处理 第一种 onChanged + 变量 的潜在的问题。这也是 Flutter 官方推荐的技术方案。</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 终端下获取文件的绝对路径]]></title>
    <link href="https://droidyue.com/blog/2022/02/21/find-file-absolute-path-in-terminal/"/>
    <updated>2022-02-21T21:26:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/02/21/find-file-absolute-path-in-terminal</id>
    <content type="html"><![CDATA[<h2>greadlink</h2>

<p>greadlink 是一个系统自带的处理文件路径的命令，它的用法如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>greadlink -f file_name
</span></code></pre></td></tr></table></div></figure>


<p>示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>greadlink -f /tmp
</span><span class='line'>/private/tmp
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>Realpath</h2>

<p>realpath 是我比较常用的获取绝对路径的工具，它需要使用homebrew 进行安装后方可使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install coreutils
</span></code></pre></td></tr></table></div></figure>


<p>示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>realpath double_overflow.apk
</span><span class='line'>/private/tmp/double_overflow.apk
</span></code></pre></td></tr></table></div></figure>



<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flutter 轻松实现动态更新 ListView]]></title>
    <link href="https://droidyue.com/blog/2022/02/13/flutter-update-listview-dynamically/"/>
    <updated>2022-02-13T22:24:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/02/13/flutter-update-listview-dynamically</id>
    <content type="html"><![CDATA[<p>在 App 开发过程中，ListView 是 比较很常见的控件，用来处理 列表类的数据展示。当然 Flutter 也是支持的，由于 Flutter 是归属于声明式 UI 编程，其处理起来要更加的简单与便捷。</p>

<!--more-->


<p>本文将通过一个极简单的例子来说明一下 如何 实现动态更新数据。 在贴代码之前，先介绍一些概念和内容</p>

<h3>数据集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">final</span> <span class="n">_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Andrew&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Charles&#39;</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">_counter</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>新的数据Item <code>'Someone($_counter)'</code> 会被触发加入到 _names 数组中。</p>

<h3>触发器</h3>

<p>通常触发加载数据是分页数据加载完成，这里我们使用一个 <code>FloatingActionButton</code> 的点击操作等价模拟。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="nl">floatingActionButton:</span> <span class="n">FloatingActionButton</span><span class="p">(</span>
</span><span class='line'> <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">_names</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Someone(</span><span class="si">$</span><span class="n">_counter</span><span class="s1">)&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="n">_counter</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'> <span class="p">},</span>
</span><span class='line'> <span class="nl">tooltip:</span> <span class="s1">&#39;Add TimeStamp&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">add</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<h3>展示视图</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">Expanded</span><span class="p">(</span>
</span><span class='line'> <span class="nl">child:</span> <span class="n">ListView</span><span class="p">.</span><span class="n">builder</span><span class="p">(</span>
</span><span class='line'>     <span class="nl">itemCount:</span> <span class="n">_names</span><span class="p">.</span><span class="n">length</span><span class="p">,</span>
</span><span class='line'>     <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
</span><span class='line'>           <span class="nl">width:</span> <span class="kt">double</span><span class="p">.</span><span class="n">infinity</span><span class="p">,</span>
</span><span class='line'>           <span class="nl">height:</span> <span class="m">50</span><span class="p">,</span>
</span><span class='line'>           <span class="nl">alignment:</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">center</span><span class="p">,</span>
</span><span class='line'>           <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="n">_names</span><span class="p">[</span><span class="n">index</span><span class="p">]));</span>
</span><span class='line'>     <span class="p">}),</span>
</span><span class='line'><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码</p>

<p>需要Expanded 包裹 ListView 确保空间展示填充
使用 ListView.builder 方法实现 ListView</p>

<p>总体来说，Flutter 中实现 ListView 数据动态添加和展示，真的很便捷，少去了传统UI 编程中显式的 Adapter 等内容，编码效率提升不少。</p>

<p>完整代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">import</span> <span class="s1">&#39;package:flutter/material.dart&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">runApp</span><span class="p">(</span><span class="kd">const</span> <span class="n">MyApp</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyApp</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
</span><span class='line'> <span class="kd">const</span> <span class="n">MyApp</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// This widget is the root of your application.</span>
</span><span class='line'> <span class="err">@</span><span class="n">override</span>
</span><span class='line'> <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">MaterialApp</span><span class="p">(</span>
</span><span class='line'>     <span class="nl">title:</span> <span class="s1">&#39;Flutter Demo&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nl">theme:</span> <span class="n">ThemeData</span><span class="p">(</span>
</span><span class='line'>       <span class="nl">primarySwatch:</span> <span class="n">Colors</span><span class="p">.</span><span class="n">blue</span><span class="p">,</span>
</span><span class='line'>     <span class="p">),</span>
</span><span class='line'>     <span class="nl">home:</span> <span class="kd">const</span> <span class="n">MyHomePage</span><span class="p">(</span><span class="nl">title:</span> <span class="s1">&#39;Flutter Demo Home Page&#39;</span><span class="p">),</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
</span><span class='line'> <span class="kd">const</span> <span class="n">MyHomePage</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">,</span> <span class="n">required</span> <span class="k">this</span><span class="p">.</span><span class="n">title</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">final</span> <span class="kt">String</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="err">@</span><span class="n">override</span>
</span><span class='line'> <span class="n">State</span><span class="o">&lt;</span><span class="n">MyHomePage</span><span class="o">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="n">_MyHomePageState</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">_MyHomePageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">MyHomePage</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'> <span class="kd">final</span> <span class="n">_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Andrew&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="s1">&#39;Charles&#39;</span><span class="p">];</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">_counter</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="err">@</span><span class="n">override</span>
</span><span class='line'> <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
</span><span class='line'>     <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
</span><span class='line'>       <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="n">widget</span><span class="p">.</span><span class="n">title</span><span class="p">),</span>
</span><span class='line'>     <span class="p">),</span>
</span><span class='line'>     <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>       <span class="nl">children:</span> <span class="p">[</span>
</span><span class='line'>         <span class="n">Expanded</span><span class="p">(</span>
</span><span class='line'>           <span class="nl">child:</span> <span class="n">ListView</span><span class="p">.</span><span class="n">builder</span><span class="p">(</span>
</span><span class='line'>               <span class="nl">itemCount:</span> <span class="n">_names</span><span class="p">.</span><span class="n">length</span><span class="p">,</span>
</span><span class='line'>               <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
</span><span class='line'>                     <span class="nl">width:</span> <span class="kt">double</span><span class="p">.</span><span class="n">infinity</span><span class="p">,</span>
</span><span class='line'>                     <span class="nl">height:</span> <span class="m">50</span><span class="p">,</span>
</span><span class='line'>                     <span class="nl">alignment:</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">center</span><span class="p">,</span>
</span><span class='line'>                     <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="n">_names</span><span class="p">[</span><span class="n">index</span><span class="p">]));</span>
</span><span class='line'>               <span class="p">}),</span>
</span><span class='line'>         <span class="p">),</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>     <span class="p">),</span>
</span><span class='line'>     <span class="nl">floatingActionButton:</span> <span class="n">FloatingActionButton</span><span class="p">(</span>
</span><span class='line'>       <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">_names</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Someone(</span><span class="si">$</span><span class="n">_counter</span><span class="s1">)&#39;</span><span class="p">);</span>
</span><span class='line'>           <span class="n">_counter</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>         <span class="p">});</span>
</span><span class='line'>       <span class="p">},</span>
</span><span class='line'>       <span class="nl">tooltip:</span> <span class="s1">&#39;Add TimeStamp&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">add</span><span class="p">),</span>
</span><span class='line'>     <span class="p">),</span> <span class="c1">// This trailing comma makes auto-formatting nicer for build methods.</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上。</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android/iOS 终端快速截屏技巧]]></title>
    <link href="https://droidyue.com/blog/2022/02/06/screenshot-for-android-and-ios-devices/"/>
    <updated>2022-02-06T19:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/02/06/screenshot-for-android-and-ios-devices</id>
    <content type="html"><![CDATA[<p>传统的方式进行截屏大概是这样：</p>

<ul>
<li>使用手机截屏按钮截屏</li>
<li>将截屏软件通过 通讯软件（微信和飞书等）发到电脑上</li>
</ul>


<p>但是这其中需要在手机上安装软件可能就不是十分的便捷和高效。</p>

<p>其实有更加边界的方式处理截屏。这其中有两种方式适用于安卓，一种方式适用于 iOS 设备。</p>

<!--more-->


<h3>adb Android 真机截屏</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">filename</span><span class="o">=</span>/tmp/screen_<span class="k">$(</span>date +%s<span class="k">)</span>.png
</span><span class='line'>adb <span class="nb">exec</span>-out screencap -p &gt; <span class="nv">$filename</span>
</span><span class='line'>
</span><span class='line'>open <span class="nv">$filename</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的脚本内容大概有这样几步</p>

<ul>
<li>进行截图，保存到制定的目录下</li>
<li>将上一步生成的截图文件，自动大概</li>
</ul>


<p>最后，用户只需要执行一次 复制粘贴即可。</p>

<h3>Android/iOS 截屏</h3>

<p>有一种更通用的截图方式，适用于 Android 和 iOS 设备，其原理就是利用 flutter 的 screenshot 命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>mkdir /tmp/flt_pj
</span><span class='line'><span class="nb">cd</span> /tmp/flt_pj
</span><span class='line'>flutter create .
</span><span class='line'><span class="nv">filename</span><span class="o">=</span>/tmp/screen_<span class="k">$(</span>date +%s<span class="k">)</span>.png
</span><span class='line'>flutter screenshot --out<span class="o">=</span><span class="nv">$filename</span>
</span><span class='line'>open <span class="nv">$filename</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这个脚本有一些小问题就是 需要创建 flutter 工程，但是耗时还是可以接收的。</p>

<p>以上脚本内容，保存成文件，执行即可。</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android/Flutter 工程快速查找依赖和配置的脚本]]></title>
    <link href="https://droidyue.com/blog/2022/02/03/android-flutter-project-find-dep-and-config-in-a-very-fast-way/"/>
    <updated>2022-02-03T20:52:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/02/03/android-flutter-project-find-dep-and-config-in-a-very-fast-way</id>
    <content type="html"><![CDATA[<p>进行文件内容查找也是我们比较常做的事情，这里介绍两个比较常用的指定扩展名查找内容的脚本。</p>

<p>以上两个脚本均用于终端，非IDE，超级轻量快捷。</p>

<!--more-->


<h2>查找 gradle</h2>

<p>对于 Gradle 文件中，我们可以用来过滤查询某个以来的内容，这可能最适合 Android 程序员了。</p>

<p>脚本内容（保存为gradleSearch.sh ）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>find . -name "*.gradle" | xargs grep -E -n --color=always "$1"</span></code></pre></td></tr></table></div></figure>


<p>执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> gradleSearch.sh kotlin
</span><span class='line'>./android/app/build.gradle:25:apply plugin: 'kotlin-android'
</span><span class='line'>./android/app/build.gradle:53:    kotlinOptions {
</span><span class='line'>./android/app/build.gradle:216:    resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
</span><span class='line'>./android/build.gradle:2:    ext.kotlin_version = '1.5.31'
</span><span class='line'>./android/build.gradle:13:        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
</span><span class='line'>grep: ./android/.gradle: Is a directory</span></code></pre></td></tr></table></div></figure>


<h2>查找yaml</h2>

<p>对于 Flutter 工程来说，它使用了yaml 管理一些配置和依赖存放。我们使用下面的脚本可以精准地过滤我们想要的内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>find . -name "*.yaml" | xargs grep -E -n --color=always "$1"</span></code></pre></td></tr></table></div></figure>


<p>执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yamlSearch.sh bloc
</span><span class='line'>./pubspec.yaml:297:  bloc:
</span><span class='line'>./pubspec.yaml:299:      name: bloc</span></code></pre></td></tr></table></div></figure>



<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个检测 json 合法性的脚本]]></title>
    <link href="https://droidyue.com/blog/2022/01/23/how-to-check-json-validity-in-ruby/"/>
    <updated>2022-01-23T20:38:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/01/23/how-to-check-json-validity-in-ruby</id>
    <content type="html"><![CDATA[<p>越来越多的配置都是使用 json 的格式，当我们修改好，最好是进行一下 json 合法性校验。</p>

<p>我们可以使用下面的脚本进行校验。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_json_valid</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span> <span class="o">||</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">JSON</span><span class="p">:</span><span class="ss">:ParserError</span><span class="p">,</span> <span class="no">TypeError</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">is_json_valid</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;json is valid(</span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">)&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p></p>

<h2>进行一些验证</h2>

<h3>验证错误文件1 （非json 文件）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /tmp/bad_json.json
</span><span class='line'>123
</span><span class='line'>checkJson.rb /tmp/bad_json.json
</span><span class='line'>json is valid<span class="o">(</span><span class="nb">false</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证错误文件2 (json文件，但是引号错误)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /tmp/bad_json_1.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s1">&#39;aaa&#39;</span>: <span class="s2">&quot;b&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>checkJson.rb /tmp/bad_json_1.json
</span><span class='line'>json is valid<span class="o">(</span><span class="nb">false</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证错误文件3（空文件）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /tmp/empty.txt
</span><span class='line'>
</span><span class='line'>checkJson.rb /tmp/empty.txt
</span><span class='line'>json is valid<span class="o">(</span><span class="nb">false</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证正确文件1 （空JsonObject）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /tmp/good_json_1.json
</span><span class='line'><span class="o">{}</span>
</span><span class='line'>checkJson.rb /tmp/good_json_1.json
</span><span class='line'>json is valid<span class="o">(</span><span class="nb">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证正确文件2（空 JsonArray）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> cat /tmp/good_json_2.json
</span><span class='line'><span class="o">[]</span>
</span><span class='line'>checkJson.rb /tmp/good_json_2.json
</span><span class='line'>json is valid<span class="o">(</span><span class="nb">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证正确文件3 （正常数据）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /tmp/good_json_3.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>checkJson.rb /tmp/good_json_3.json
</span><span class='line'>json is valid<span class="o">(</span><span class="nb">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>



<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flutter(Dart) 中将 2022-01-05 09:33:44 +0000 UTC 转成 datetime ]]></title>
    <link href="https://droidyue.com/blog/2022/01/16/flutter-dart-parse-date-string-into-datetime/"/>
    <updated>2022-01-16T21:37:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/01/16/flutter-dart-parse-date-string-into-datetime</id>
    <content type="html"><![CDATA[<p>在日常的开发中，进行日期转换是比较常用的。但是对于新接触 Flutter 的话，对这个日期<code>2022-01-05 09:33:44 +0000 UTC</code> 使用<code>DateTime.parse</code>直接转换，会有问题，如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;2022-01-05 09:33:44 +0000 UTC&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们运行后，会得到这样的崩溃stacktrace</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">Unhandled</span> <span class="nl">exception:</span>
</span><span class='line'><span class="nl">FormatException:</span> <span class="n">Invalid</span> <span class="n">date</span> <span class="n">format</span>
</span><span class='line'><span class="m">2022</span><span class="o">-</span><span class="m">01</span><span class="o">-</span><span class="m">05</span> <span class="m">09</span><span class="o">:</span><span class="m">33</span><span class="o">:</span><span class="m">44</span> <span class="o">+</span><span class="m">0000</span> <span class="n">UTC</span>
</span><span class='line'><span class="err">#</span><span class="m">0</span>      <span class="n">DateTime</span><span class="p">.</span><span class="n">parse</span> <span class="p">(</span><span class="nl">dart:</span><span class="n">core</span><span class="o">/</span><span class="n">date_time</span><span class="p">.</span><span class="nl">dart:</span><span class="m">330</span><span class="o">:</span><span class="m">7</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span><span class="m">1</span>      <span class="n">testDateFormat</span> <span class="p">(</span><span class="nl">file:</span><span class="c1">///Users/xxx/IdeaProjects/dart_sample/bin/dart_sample.dart:38:18)</span>
</span><span class='line'><span class="err">#</span><span class="m">2</span>      <span class="n">main</span> <span class="p">(</span><span class="nl">file:</span><span class="c1">///Users/xxx/IdeaProjects/dart_sample/bin/dart_sample.dart:26:3)</span>
</span><span class='line'><span class="err">#</span><span class="m">3</span>      <span class="n">_delayEntrypointInvocation</span><span class="p">.</span><span class="o">&lt;</span><span class="n">anonymous</span> <span class="n">closure</span><span class="o">&gt;</span> <span class="p">(</span><span class="nl">dart:</span><span class="n">isolate</span><span class="o">-</span><span class="n">patch</span><span class="o">/</span><span class="n">isolate_patch</span><span class="p">.</span><span class="nl">dart:</span><span class="m">295</span><span class="o">:</span><span class="m">32</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span><span class="m">4</span>      <span class="n">_RawReceivePortImpl</span><span class="p">.</span><span class="n">_handleMessage</span> <span class="p">(</span><span class="nl">dart:</span><span class="n">isolate</span><span class="o">-</span><span class="n">patch</span><span class="o">/</span><span class="n">isolate_patch</span><span class="p">.</span><span class="nl">dart:</span><span class="m">192</span><span class="o">:</span><span class="m">12</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p></p>

<p>然而，要解决这个问题，需要使用一个新的pub dependency 来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dependencies:
</span><span class='line'> intl: ^0.17.0
</span></code></pre></td></tr></table></div></figure>


<p>然后使用这样的转换即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">final</span> <span class="n">time</span> <span class="o">=</span> <span class="s1">&#39;2022-01-05 09:33:44 +0000 UTC&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">DateFormat</span><span class="p">(</span><span class="s1">&#39;yyyy-MM-dd HH:mm:ss&#39;</span><span class="p">).</span><span class="n">parseUTC</span><span class="p">(</span><span class="n">time</span><span class="p">));</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">DateFormat</span><span class="p">(</span><span class="s1">&#39;yyyy-MM-dd HH:mm:ssZ&#39;</span><span class="p">).</span><span class="n">parseUTC</span><span class="p">(</span><span class="n">time</span><span class="p">));</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">DateFormat</span><span class="p">(</span><span class="s1">&#39;yyyy-MM-dd HH:mm:ssZ&#39;</span><span class="p">).</span><span class="n">parseUTC</span><span class="p">(</span><span class="s1">&#39;2022-01-09 22:19:40.993584 +0800 CST m=+0.000077758&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>



<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 清理优化工具 MacBooster 限时特惠，终生版 7 折低至 41.3 元起]]></title>
    <link href="https://droidyue.com/blog/2022/01/09/mac-booster-app/"/>
    <updated>2022-01-09T19:39:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/01/09/mac-booster-app</id>
    <content type="html"><![CDATA[<p>Mac 用户越来越多，针对 Mac 的病毒木马也逐渐出现了，Mac 电脑无需安全优化工具的历史似乎已成为过去。但部分清理工具升级迭代快，价格也很昂贵。</p>

<p>今天给大家推荐一款价格实惠、功能强大的 macOS 系统清理优化工具：MacBooster。一站式清理、查杀病毒及残余文件，优化系统加速运行。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE1.png" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE1.png" /></p>

<!--more-->


<h2>一键系统清理</h2>

<p>普通的清理工具都只是对软件缓存进行清除，而 MacBooster 支持对软件残余、破损登录项、iOS 设备系统更新等 20 类垃圾文件进行清理。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE2.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE2.PNG" /></p>

<p>分类清晰明了，能快速定位垃圾文件位置，杜绝误删问题。同时 MacBooster 还支持老旧 / 大文件的扫描查找，揪出占用磁盘空间的罪魁祸首。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE3.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE3.PNG" /></p>

<p>软件自带重复文件及相似图片清理工具，安装 MacBooster 相当于拥有了：清理工具 CleanMyMac + 重复文件搜寻工具 Gemini。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE4.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE4.PNG" /></p>

<p>此外，MacBooster 还带有软件强力卸载的功能，自动深度扫描，彻底根除各种偏好设定、支持文档等关联文件。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE5.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE5.PNG" /></p>

<p>一个 MacBooster 兼备多种功能，一站式解决文件占用空间的各种问题，限时折后只需 41.3 元起。<a href="https://store.lizhi.io/site/products/id/32?cid=wncr9wz5">点击购买</a></p>

<h2>系统优化功能强</h2>

<p>MacBooster 的优化功能可谓面面俱到，无论是内存、硬盘还是启动项，它都可进行专属优化。</p>

<p>Turbo Boost 功能会通过优化磁盘、修复磁盘权限来有效加速电脑，内存清理则可释放运存空间减少卡顿。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE6.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE6.PNG" /></p>

<p>而 MacBooster 的开机启动项优化功能，会将众多隐藏的开机启动服务找出，并将控制权交给用户处理。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE7.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE7.PNG" /></p>

<p>搭配在菜单栏上的 MacBooster Mini 小工具，随时获取内存占用以及网络信息，快捷进行清理加速。</p>

<h2>安全防护也在行</h2>

<p>清理优化不只是在问题出现后进行，提前预防更重要！MacBooster 的安全防护功能就是 Mac 设备的保护伞。</p>

<p>软件可扫描病毒及恶意软件，强力移除顽固软件或文件。可在线获取病毒库数据更新，防止电脑受到各类新式病毒的威胁。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE8.PNG" alt="https://asset.droidyue.com/image/lizhi_io/mac_booster/%E5%9B%BE8.PNG" /></p>

<p>而且 MacBooster 自带隐私保护工具，能清除浏览器中的历史记录以及 Cookies，抹去 App 痕迹和最近文件访问记录，充分保护用户的隐私安全。</p>

<p>MacBooster 具备优秀清理优化工具的一切要素，售价也亲民，只需 41.3 元起，即可带走这款多合一的优化利器，助你轻松管理 Mac 设备！<a href="https://store.lizhi.io/site/products/id/32?cid=wncr9wz5">点击购买</a></p>

<hr />

<p>即日起至 2022 年 1 月 11 日，数码荔枝国货之光大促活动火热进行中，还有 Seer、BitDock 、优效日历、Snipaste 等 40+ 精选国产软件优惠低至 6 折起，众多优秀的国产软件值得被看见，快去前往<a href="https://store.lizhi.io/site/search_list?order_by=2&amp;word=&amp;coupon_uuid=0&amp;category_id=62&amp;cid=wncr9wz5">大促专区</a>买买买吧！</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 上优秀的虚拟机软件 Parallels Desktop]]></title>
    <link href="https://droidyue.com/blog/2022/01/09/mac-parallels-desktop-best-app/"/>
    <updated>2022-01-09T19:32:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/01/09/mac-parallels-desktop-best-app</id>
    <content type="html"><![CDATA[<p>使用 Mac 电脑，我们有时会碰到一些只在 Windows 平台下运行的软件。开发者们也时常会遇到安全性未知的软件，这时一个不影响工作环境的系统就很重要。</p>

<p>除了安装双系统，虚拟机就是解决上述这些问题的利器之一。而在 macOS 平台下，Parallels Desktop 可是虚拟机工具的不错选择。它是 macOS 平台性能首屈一指的虚拟机工具，软件搭载了各种常见和使用的工具，让您在 Mac 和 Windows 中能够很好地完成日常任务。</p>

<p>现在购买，享有优惠，具体请查看这里<a href="https://store.lizhi.io/site/products/id/92?cid=wncr9wz5">Parallels Desktop 17 &ndash; Mac 上优秀的虚拟机软件 PD 激活码 赠送Win11</a></p>

<!--more-->


<h3>不同系统，同时运行</h3>

<p>无需为了切换平台而复杂地安装双系统，无需为了转换系统而麻烦的开关机。拥有 Parallels Desktop，你就能在边使用 Mac 时，同时运行 Windows 或 Linux。</p>

<h3>更新及时，支持新特性</h3>

<p>Parallels Desktop 随时关注 Apple 最新操作系统版本发布及功能，能够迅速支持系统的各种特性。同时为 Windows 的各项功能也快速跟进，杜绝因虚拟机内系统更新，导致不兼容而长时间无法使用的问题。</p>

<h3>虚拟机性能强劲</h3>

<p>启动 Windows 和应用程序的速度媲美物理机，启动 Parallels Desktop 也能快速响应。快速启动所需系统环境，无需一直转圈等待。</p>

<h3>多种环境专属优化</h3>

<p>专为生产力、游戏、设计、开发等需求进行优化，Office 365 集成等功能让使用虚拟机变得简单高效。</p>

<h3>更好用的 Touch Bar 工具</h3>

<p>使用 Parallels Tools 来支持 Touch Bar 直接处理虚拟机内任务，支持众多软件的快捷操作。同时可自定义快捷启动方式，让 Touch Bar 在虚拟机环境下更加好用。</p>

<p>现在购买，享有优惠，具体请查看这里<a href="https://store.lizhi.io/site/products/id/92?cid=wncr9wz5">Parallels Desktop 17 &ndash; Mac 上优秀的虚拟机软件 PD 激活码 赠送Win11</a></p>

<h2>关于 Parallels 超便捷的视频演示</h2>

<p>Parallels Desktop 包含几十个出色的功能，因此在 Mac 上运行 Windows 时，您将获得最佳体验。</p>

<h3>在融合 (Coherence) 模式下使用 Windows</h3>

<p>您可以将 Windows 与 macOS 设定为无缝融合，就像它们只是一个操作系统的不同部分。
<video style="width:100%"   autoplay controls >
  <source src="https://asset.droidyue.com/image/lizhi_io/parallel/Coherence.mp4" type="video/mp4">
</video></p>

<h3>拖放</h3>

<p>将 Mac 中的任何文件、图像甚至截屏预览拖放到 Windows 应用程序中。
<video style="width:100%"   autoplay controls >
  <source src="https://asset.droidyue.com/image/lizhi_io/parallel/drag_and_drop.mp4" type="video/mp4">
</video></p>

<h3>在 Windows 中查看 Mac 文件</h3>

<p>Windows 桌面显示 macOS 桌面中的项，而 Windows 的“我的文档”文件夹包含 Mac 的“文档”文件夹中存储的项。</p>

<p><video style="width:100%"   autoplay controls >
  <source src="https://asset.droidyue.com/image/lizhi_io/parallel/see_mac_files_in_windows.mp4" type="video/mp4">
</video></p>

<h3>并行查看 Windows 和 macOS</h3>

<p>进入 Windows 的全屏模式，在 macOS 和 Windows 之间滑动——并行访问这两个世界的最佳方式。
<video style="width:100%"   autoplay controls >
  <source src="https://asset.droidyue.com/image/lizhi_io/parallel/windows_macOS_side-by-side.mp4" type="video/mp4">
</video></p>

<p>现在购买，享有优惠，具体请查看这里或者扫描下方的二维码 <a href="https://store.lizhi.io/site/products/id/92?cid=wncr9wz5">Parallels Desktop 17 &ndash; Mac 上优秀的虚拟机软件 PD 激活码 赠送Win11</a></p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/parallel/Parallels%20Desktop_qrcode.jpeg?v=12222" alt="https://asset.droidyue.com/image/lizhi_io/parallel/Parallels%20Desktop_qrcode.jpeg" /></p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 终端下 实现 安装 ipa 包到 iPhone 真机]]></title>
    <link href="https://droidyue.com/blog/2022/01/03/how-to-install-ipa-on-iphone-in-terminal/"/>
    <updated>2022-01-03T21:54:00+08:00</updated>
    <id>https://droidyue.com/blog/2022/01/03/how-to-install-ipa-on-iphone-in-terminal</id>
    <content type="html"><![CDATA[<p>最近处理 Flutter 的开发工作，开始尝试使用 iOS 作为日常的真机调试工作。对于一个原技术栈为 Android的人来说，发现 iOS 有很多不太方便的地方。比如如何在 Mac 电脑上安装 ipa包到 iPhone 上。</p>

<p>相比来说，Android 提供了adb 可以很快捷的在 终端上执行安装。而iOS 我也希望有一个可以在终端上实现安装ipa的方式，摸索了一下，终于发现了一个可行的技术方案。</p>

<!--more-->


<p></p>

<p>这个可行的技术方案就是 ideviceinstaller，它是一个终端管理 iOS 设备上app 和存档的工具。</p>

<h2>进行安装</h2>

<p>Mac 下使用 HomeBrew 安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ideviceinstaller</span></code></pre></td></tr></table></div></figure>


<h2>安装一个app</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ideviceinstaller -i ~/Downloads/hahaha.ipa
</span><span class='line'>WARNING: could not locate iTunesMetadata.plist in archive!
</span><span class='line'>WARNING: could not locate Payload/Runner.app/SC_Info/Runner.sinf in archive!
</span><span class='line'>Copying '~/Downloads/hahaha.ipa' to device... DONE.
</span><span class='line'>Installing 'com.hahaha.app'
</span><span class='line'>Install: CreatingStagingDirectory (5%)
</span><span class='line'>Install: ExtractingPackage (15%)
</span><span class='line'>Install: InspectingPackage (20%)
</span><span class='line'>Install: TakingInstallLock (20%)
</span><span class='line'>Install: PreflightingApplication (30%)
</span><span class='line'>Install: InstallingEmbeddedProfile (30%)
</span><span class='line'>Install: VerifyingApplication (40%)
</span><span class='line'>Install: CreatingContainer (50%)
</span><span class='line'>Install: InstallingApplication (60%)
</span><span class='line'>Install: PostflightingApplication (70%)
</span><span class='line'>Install: SandboxingApplication (80%)
</span><span class='line'>Install: GeneratingApplicationMap (90%)
</span><span class='line'>Install: Complete</span></code></pre></td></tr></table></div></figure>


<h2>列举当前设备上的 apps</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  /tmp ideviceinstaller --list-apps
</span><span class='line'>
</span><span class='line'>CFBundleIdentifier, CFBundleVersion, CFBundleDisplayName
</span><span class='line'>com.google.Authenticator, "3.3.6000", "Authenticator"
</span><span class='line'>com.apple.Numbers, "7357.0.149", "Numbers"
</span><span class='line'>com.apple.mobilegarageband, "5189", "GarageBand"
</span><span class='line'>com.apple.clips, "5405.83", "Clips"
</span><span class='line'>com.apple.iMovie, "5177", "iMovie"
</span><span class='line'>com.apple.store.Jolly, "5.14.0.761", "Apple Store"
</span><span class='line'>com.apple.Pages, "7357.0.149", "Pages"
</span><span class='line'>com.apple.Keynote, "7357.0.149", "Keynote"
</span><span class='line'>com.tencent.xin, "8.0.16.35", "WeChat"</span></code></pre></td></tr></table></div></figure>


<h2>移除一个app</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ideviceinstaller --uninstall com.hahaha.app
</span><span class='line'>Uninstalling 'com.hahaha.app'
</span><span class='line'>Uninstall: RemovingApplication (50%)
</span><span class='line'>Uninstall: GeneratingApplicationMap (90%)
</span><span class='line'>Uninstall: Complete</span></code></pre></td></tr></table></div></figure>


<h2>Github 地址</h2>

<ul>
<li><a href="https://github.com/libimobiledevice/ideviceinstaller">https://github.com/libimobiledevice/ideviceinstaller</a></li>
</ul>


<p>一条小广告：这里有一个软件，让你的 Mac 就能轻松读写常见 NTFS 硬盘 / U 盘，点击这个链接 <a href="https://droidyue.com/blog/2021/03/07/mac-ntfs-assistant-to-write-files-to-disk/">https://droidyue.com/blog/2021/03/07/mac-ntfs-assistant-to-write-files-to-disk/</a></p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨平台 Markdown 编辑器 Typora 独家上架数码荔枝，新用户券后仅需 81 元]]></title>
    <link href="https://droidyue.com/blog/2021/12/25/markdown-editor-typora-at-low-price/"/>
    <updated>2021-12-25T14:54:00+08:00</updated>
    <id>https://droidyue.com/blog/2021/12/25/markdown-editor-typora-at-low-price</id>
    <content type="html"><![CDATA[<p>Typora 是一款广受好评的桌面 Markdown 编辑器，经过长达 6 年的测试，Typora 近期正式发布 1.0 版本，终于进入正式版时代并开启付费模式。</p>

<p>Typora 被老朋友数码荔枝评为国货之光，并带来优惠活动，现仅需 86 元即可买断当前版本，新注册用户领券还可立减 5 元，仅需 81 元！<a href="https://store.lizhi.io/site/products/id/520?cid=wncr9wz5">点击购买</a></p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE1.png?v=111223355532" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE1.png" /></p>

<!--more-->


<h2>实时预览格式</h2>

<p>Typora 是一款适配 Windows / macOS / Linux 平台的 Markdown 编辑器，编辑实时预览标记格式，所见即所得，轻巧而强大。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE2.png" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE2.png" /></p>

<p>作为一款优秀的 Markdown 编辑器，它具备完善的 Markdown 语法，支持插入多级标题、代码、超链接、表格公式等。亦可一键切换源代码模式，实现高效排版。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE3.gif" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE3.gif" /></p>

<h2>侧边栏大纲目录</h2>

<p>想要修改文段？通过隐藏式的侧边栏可展示大纲目录，快速跳转章节。而文件树列表功能可切换到其它文章编写，非常方便。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE4.gif" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE4.gif" /></p>

<p>官网购买不方便？数码荔枝独家授权代理，一样可以买到正版软件，下单即收授权码，激活更方便！<a href="https://store.lizhi.io/site/products/id/520?cid=wncr9wz5">点击购买</a></p>

<h2>灵活支持各图床</h2>

<p>在粘贴或拖拽图片到写作窗口时，Typora 还能绑定 iPic、PicGo 等图床工具将其上传。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE5.gif" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE5.gif" /></p>

<p>并且支持 Custom Command，方便集成更多第三方插件，对于博客作者来说会方便不少。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE6.png" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE6.png" /></p>

<h2>多种扩展语法</h2>

<p>Typora 还支持插入 LaTeX 公式、绘制序列图 / 流程图，各种语言代码块皆可高亮显示，满足更多专业人士的高阶需求。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE7.png" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE7.png" /></p>

<p>还提供了专注模式 / 打字机模式、字数统计、符号补全等众多写作优化功能。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE8.gif" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE8.gif" /></p>

<p>功能完善却不冗杂，简洁优雅的写作体验，你的桌面需要这样一款文本编辑器，心动就快前往体验吧。趁活动买下更优惠！<a href="https://store.lizhi.io/site/products/id/520?cid=wncr9wz5">点击前往</a></p>

<h2>自定义主题</h2>

<p>Typora 提供了数种风格主题，还可修改 CSS 文件，自定义专属主题样式，文字创作更舒适。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE9.PNG" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE9.PNG" /></p>

<p>除此之外，Typora 的高度自定义也体现在语法偏好设置上，支持设置是否采取严格模式、扩展语法、智能标点等等。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE10.PNG" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE10.PNG" /></p>

<p>加上多格式导出及跨平台支持，Typora 的写作体验无疑是数一数二的。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE11.png" alt="https://asset.droidyue.com/image/lizhi_io/typora/%E5%9B%BE11.png" /></p>

<hr />

<p>Typora 简洁优雅又不失强大，无论是 Markdown 入门用户还是精通 MD 语法的老手，都能在这里体会到数字写作的魅力。</p>

<p>2021.12.23 ~ 2022.1.11，数码荔枝国货之光年底大促火热进行中，新注册用户券后购买 Typora 仅需 81 元，快为你的电脑装备这款优秀的文本编辑器吧！<a href="https://store.lizhi.io/site/products/id/520?cid=wncr9wz5">点击购买</a></p>

<p>除此之外，还有格志日记、MarginNote、Snipaste、白描、潮汐等 40+ 精选国产软件优惠低至 6 折起，马上前往<a href="https://store.lizhi.io/site/search_list?order_by=2&amp;word=&amp;coupon_uuid=0&amp;category_id=62&amp;cid=wncr9wz5">大促专区</a>买买买！</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack 设置代li]]></title>
    <link href="https://droidyue.com/blog/2021/12/25/set-proxy-for-slack/"/>
    <updated>2021-12-25T14:19:00+08:00</updated>
    <id>https://droidyue.com/blog/2021/12/25/set-proxy-for-slack</id>
    <content type="html"><![CDATA[<p>Slack 作为一个不错的团队协作沟通工具，被很多的团队采用。但是有时候网络并不是那么的好，需要让 Slack 走带理</p>

<p>但是 Slack 并没有提供 可视化的设置界面和选项。</p>

<p>不过经过一些摸索，发现还是有一些办法的。</p>

<!--more-->


<h3>可行的技术方案</h3>

<ul>
<li>Slack &mdash;proxy-server=&ldquo;your_proxy_address&rdquo;</li>
</ul>


<h3>实施步骤</h3>

<ul>
<li>打开~/.bashrc(或~/.zshrc)</li>
<li>添加别名设置到上述文件中  alias slackWithProxy=&ldquo;cd /tmp/ &amp;&amp; nohup /Applications/Slack.app/Contents/MacOS/Slack &mdash;proxy-server=&#8221;<a href="http://127.0.0.1:1087">http://127.0.0.1:1087</a>&rdquo; &amp;&#8221;</li>
<li>source ~/.bashrc(或 source ~/.zshrc)</li>
<li>在终端输入 slackWithProxy 即可OK。</li>
</ul>

<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synergy 为你的键鼠升个级，一套键盘鼠标轻松控制多台电脑！]]></title>
    <link href="https://droidyue.com/blog/2021/12/25/synergy-one-mouse-and-keyboard-could-control-more-desktops/"/>
    <updated>2021-12-25T11:30:00+08:00</updated>
    <id>https://droidyue.com/blog/2021/12/25/synergy-one-mouse-and-keyboard-could-control-more-desktops</id>
    <content type="html"><![CDATA[<p>如果你的桌子上放置了多台电脑，为了分别控制每台设备，最常规的操作就是为每一台都插上一套键鼠，而此时你的桌面也被多个键盘鼠标占去了很大一部分空间。</p>

<p>不仅看起来凌乱，放在一起还不太容易区分哪套键鼠控制哪个设备。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE1.png?v=111" alt="111" /></p>

<p>今天要分享的 Synergy，不需要添置硬件、反复插拔键鼠，纯软件实现一套键盘鼠标连接控制多台电脑。不管你的键盘鼠标是什么品牌 / 型号，有线或是无线，甚至笔记本键盘、触控板都能直接用。</p>

<!--more-->


<h2>多台电脑一套键鼠</h2>

<p>将鼠标移向屏幕边缘即可无缝切换控制，键盘也会自动跟随鼠标切换到其他设备上，就像拓展屏幕之间移动鼠标一样简单。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE2.png" alt="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE2.png" /></p>

<p>基础版支持连接 3 台设备，升级专业版可享受 15 台设备无缝切换控制。</p>

<p>中国特惠价基础版 <strong>59</strong> 元，专业版也仅需 <strong>99</strong> 元，不用额外买几百元的跨屏鼠标，Synergy 让手上的设备直接升级为跨屏键鼠。点击<a href="https://store.lizhi.io/site/products/id/511?cid=wncr9wz5">优惠链接</a>前往购买～</p>

<h2>使用简单便捷</h2>

<p>虽说界面汉化不是很到位，但需要设置的地方也不是很多，没有很高的学习成本。</p>

<p>只需在所有的设备上安装 Synergy，选择插入键鼠的设备作为服务端，其余作为客户端并填入服务端的 IP 地址，连接成功即可使用。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE3.png" alt="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE3.png" /></p>

<p>软件很贴心地列出了当前设备的 IP 地址，填写和客户端同一网段的 IP 更方便。</p>

<h2>跨平台操控</h2>

<p>打破系统间壁垒，装有 Win / Mac / Linux / 树莓派不同系统的设备，也能轻松实现键鼠共享。Synergy 从 Win 切换到 Mac 时可自动切换 WIN 和 CMD 键，使用 CMD + C 这类快捷键更方便。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE4.png" alt="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE4.png" /></p>

<p>Synergy 还可实现跨设备剪贴板共享，不同系统的电脑之间复制粘贴文字，数据共享大大提升工作效率。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE5.png" alt="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE5.png" /></p>

<p>来数码荔枝购买享中国特惠价，仅需 <strong>59</strong> 元起，即可体验一台设备控制多台多台电脑的便利，点击<a href="https://store.lizhi.io/site/products/id/511?cid=wncr9wz5">优惠链接</a>前往购买～</p>

<h2>自由切换控制</h2>

<p>设备太多移动很麻烦？你还能设置快捷键用于快速切换控制某台设备。对于游戏玩家，游戏全屏时也无需担心，因操作幅度太大将鼠标移走，只需设置一个快捷键将键鼠锁定到当前设备，带给你更好的游戏体验。</p>

<p><img src="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE6.png" alt="https://asset.droidyue.com/image/lizhi_io/synergy/%E5%9B%BE6.png" /></p>

<p>各设备间仅需局域网即可连接控制，高速的本地网络，无需考虑宽带速度限制，连接更快延迟更低。</p>

<p>Synergy 使用过程中不连接互联网，数据交换私密安全。购买专业版，还能享受安全程度更高的 TLS / SSL 加密。</p>

<hr />

<p>Synergy 新品上架数码荔枝，基础版中国优惠价 <strong>59</strong> 元，专业版也仅需 <strong>99</strong> 元。简简单单将你的普通键盘鼠标，升级为支持跨屏控制的键鼠，相比花费百元添置新设备更划算。</p>

<p>如果你正好有控制多台电脑的需求，一定要进来看看！优惠链接：<a href="https://store.lizhi.io/site/products/id/511?cid=wncr9wz5">https://store.lizhi.io/site/products/id/511?cid=wncr9wz5</a></p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flutter/Dart 获取当前的 stacktrace]]></title>
    <link href="https://droidyue.com/blog/2021/12/09/how-to-get-current-stacktrace-in-dart-flutter/"/>
    <updated>2021-12-09T07:51:00+08:00</updated>
    <id>https://droidyue.com/blog/2021/12/09/how-to-get-current-stacktrace-in-dart-flutter</id>
    <content type="html"><![CDATA[<h2>出现异常时获取 stacktrace</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">void</span> <span class="n">_printException</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>   <span class="m">1</span> <span class="o">~/</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">print</span><span class="p">(</span><span class="s1">&#39;_printException </span><span class="si">$</span><span class="n">e</span><span class="s1">; </span><span class="si">$</span><span class="n">s</span><span class="s1">&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的 stacktrace 日志信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="n">_printException</span> <span class="n">IntegerDivisionByZeroException</span><span class="p">;</span> <span class="err">#</span><span class="m">0</span>      <span class="kt">int</span><span class="p">.</span><span class="o">~/</span> <span class="p">(</span><span class="nl">dart:</span><span class="n">core</span><span class="o">-</span><span class="n">patch</span><span class="o">/</span><span class="kt">int</span><span class="n">egers</span><span class="p">.</span><span class="nl">dart:</span><span class="m">30</span><span class="o">:</span><span class="m">7</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span><span class="m">1</span>      <span class="n">_printException</span> <span class="p">(</span><span class="nl">file:</span><span class="c1">///Users/androidyue/Documents/self_host/dart_current_stacktrace/bin/dart_current_stacktrace.dart:10:7)</span>
</span><span class='line'><span class="err">#</span><span class="m">2</span>      <span class="n">main</span> <span class="p">(</span><span class="nl">file:</span><span class="c1">///Users/androidyue/Documents/self_host/dart_current_stacktrace/bin/dart_current_stacktrace.dart:3:3)</span>
</span><span class='line'><span class="err">#</span><span class="m">3</span>      <span class="n">_delayEntrypointInvocation</span><span class="p">.</span><span class="o">&lt;</span><span class="n">anonymous</span> <span class="n">closure</span><span class="o">&gt;</span> <span class="p">(</span><span class="nl">dart:</span><span class="n">isolate</span><span class="o">-</span><span class="n">patch</span><span class="o">/</span><span class="n">isolate_patch</span><span class="p">.</span><span class="nl">dart:</span><span class="m">281</span><span class="o">:</span><span class="m">32</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span><span class="m">4</span>      <span class="n">_RawReceivePortImpl</span><span class="p">.</span><span class="n">_handleMessage</span> <span class="p">(</span><span class="nl">dart:</span><span class="n">isolate</span><span class="o">-</span><span class="n">patch</span><span class="o">/</span><span class="n">isolate_patch</span><span class="p">.</span><span class="nl">dart:</span><span class="m">184</span><span class="o">:</span><span class="m">12</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>非异常出现时获取 stacktrace</h2>

<p>如果只是想获取当前 stacktrace，比如用来确定某些方法的执行调用场景。</p>

<ol>
<li>可以通过人为制造 异常 的方式来进行输出打印。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">void</span> <span class="n">_printCurrentStacktrace</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">throw</span> <span class="s1">&#39;printCurrentStacktrace&#39;</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">print</span><span class="p">(</span><span class="s1">&#39;_printCurrentStacktrace;</span><span class="si">$</span><span class="n">s</span><span class="s1">&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>不人为制造异常得到 stacktrace（使用<code>StackTrace.current</code>）</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kt">void</span> <span class="n">_printCurrentStacktraceV2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">print</span><span class="p">(</span><span class="s1">&#39;_printCurrentStacktraceV2 </span><span class="si">${</span><span class="n">StackTrace</span><span class="p">.</span><span class="n">current</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Flutter SDK 中的 Dart SDK]]></title>
    <link href="https://droidyue.com/blog/2021/11/21/use-dart-sdk-in-flutter-sdk/"/>
    <updated>2021-11-21T21:30:00+08:00</updated>
    <id>https://droidyue.com/blog/2021/11/21/use-dart-sdk-in-flutter-sdk</id>
    <content type="html"><![CDATA[<p>由于 Flutter 是基于 Dart 的UI开发框架，在 Flutter SDK 中是包含了 Dart SDK的。</p>

<p>一般 Dart 的sdk 的路径为 <code>your_flutter_dir/bin/cache/dart-sdk</code> 将上面的 your_flutter_dir 替换为本机真实的路径即可。</p>

<p>比如： /Users/xxx/Documents/bin/flutter/bin/cache/dart-sdk</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edge 浏览器 复制 URL 问题解决]]></title>
    <link href="https://droidyue.com/blog/2021/11/14/edge-browser-copy-url-issue/"/>
    <updated>2021-11-14T21:08:00+08:00</updated>
    <id>https://droidyue.com/blog/2021/11/14/edge-browser-copy-url-issue</id>
    <content type="html"><![CDATA[<p>微软的 edge 浏览器作为第二浏览器在使用，目前发现唯一不好的，就是复制链接的时候，内容不对。</p>

<p>我的预计是复制网址本身，而不是标题和网址等内容，想要实现这一需求，也很简单。</p>

<h3>步骤：</h3>

<p>Preferences &ndash;>  Share, Copy and Paster &ndash;> URL copy &amp; paste format default 选择 Plain Text 即可。</p>
<br/><img src="https://asset.droidyue.com/image/2020_05/droidyue_gzh_green_png.png"  class="no_boarder_class" style="max-width:100%" /><br/>]]></content>
  </entry>
  
</feed>
