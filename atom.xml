<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2020-04-08T22:21:02+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[未合并分支不怕丢,一个脚本快速搞定]]></title>
    <link href="https://droidyue.com/blog/2020/04/05/a-quick-script-to-view-all-unmerged-branches/"/>
    <updated>2020-04-05T21:20:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/04/05/a-quick-script-to-view-all-unmerged-branches</id>
    <content type="html"><![CDATA[<p>我们使用 git 作为 版本控制工具，极大的提高了效率，但是随着业务的增多和自身对于提交内容原子性的要求，往往会产生很多的分支，这就难免有时候，在发版的时候，某些分支被遗忘提交，造成功能丢失等问题。</p>

<p>因而如果保证分支多而且不忘记合并，是一个我们需要解决的问题。</p>

<ul>
<li>单纯靠人为挨个去看，肯定是不行的</li>
<li>如果有程序化处理就靠谱多了</li>
</ul>


<!--more-->


<p>是的，git有一个这样的功能呢，比如我们想要查看是否有分支没有合并进入develop</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch --no-merged develop
</span></code></pre></td></tr></table></div></figure>


<p>是的，这能解决问题，但是比如我们迁出了预发布分支(pre_release)，有的分支合并到了pre_release(但没有合并到develop), 上面的查找就不太合适了。</p>

<p>所以我们需要的是</p>

<ul>
<li>能进行基于多个分支未合并的分支去交集</li>
<li>支持自定义的忽略某些分支出现在未合并分支列表</li>
</ul>


<p>于是有了下面的脚本</p>

<h2>脚本内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getUnmergedBranches</span><span class="p">(</span><span class="n">targetBranch</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="sb">`git branch --no-merged </span><span class="si">#{</span><span class="n">targetBranch</span><span class="si">}</span><span class="sb">`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">sub</span>  <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">strip</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">branchesUnmergedToPreRelease</span> <span class="o">=</span> <span class="n">getUnmergedBranches</span><span class="p">(</span><span class="s1">&#39;origin/pre_release&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="p">(</span><span class="n">getUnmergedBranches</span><span class="p">(</span><span class="s1">&#39;origin/develop&#39;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">branchesUnmergedToPreRelease</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">branch</span><span class="o">|</span> <span class="o">!</span><span class="n">branch</span><span class="o">.</span><span class="n">start_with?</span> <span class="s2">&quot;unmerge_ignore_&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的脚本做的是</p>

<ul>
<li>获取未合并进入<code>origin/develop</code>的分支集合 A</li>
<li>获取未合并进入<code>origin/pre_release</code>的分支集合 B</li>
<li>对于上面的 分支集合 A 和 B 取交集 得到 分支集合 C</li>
<li>在分支集合 C 中提出 自定义忽略分支（以<code>unmerge_ignore_</code>开头）</li>
</ul>


<h2>脚本使用示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~:/  ruby unmergedBranches.rb
</span><span class='line'>checkstyle
</span><span class='line'>error_prone
</span><span class='line'>file_chooser_webview
</span><span class='line'>image_loading
</span><span class='line'>jduan_inter_webview_messaging
</span><span class='line'>jduan_webview_client_refactor
</span><span class='line'>migration_to_androidx
</span><span class='line'>upgrade_gradle_1106
</span><span class='line'>upgrade_gradle_3.2.0
</span><span class='line'>upgrade_suppport_28.0.0
</span><span class='line'>video_preload
</span></code></pre></td></tr></table></div></figure>


<h2>忽略某个分支，不作为unmerged 分支内容</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please input the branch to unmerge-ignore&quot;</span>
</span><span class='line'><span class="n">targetBranch</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;You want to ignore this branch:</span><span class="si">#{</span><span class="n">targetBranch</span><span class="si">}</span><span class="s2">, Are you sure? (input yes)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">confirm</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">confirm</span> <span class="o">==</span> <span class="s2">&quot;yes&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">newBranchName</span> <span class="o">=</span> <span class="s2">&quot;unmerge_ignore_</span><span class="si">#{</span><span class="n">targetBranch</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git branch -m </span><span class="si">#{</span><span class="n">targetBranch</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">newBranchName</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;changed </span><span class="si">#{</span><span class="n">targetBranch</span><span class="si">}</span><span class="s2"> into </span><span class="si">#{</span><span class="n">newBranchName</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用上面的脚本，就能够以命令交互的形式忽略某个分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~:/ ruby ignoreBranchWhenUnmerged.rb
</span><span class='line'>Please input the branch to unmerge-ignore
</span><span class='line'>new_account_sys
</span><span class='line'>You want to ignore this branch:new_account_sys, Are you sure? <span class="o">(</span>input yes<span class="o">)</span>
</span><span class='line'>yes
</span><span class='line'>changed new_account_sys into unmerge_ignore_new_account_sys
</span></code></pre></td></tr></table></div></figure>


<p>以上.</p>

<h2>更多内容推荐</h2>

<ul>
<li><a href="https://droidyue.com/blog/categories/jiao-ben/">更多脚本高效工具</a></li>
<li><a href="https://droidyue.com/ninki/">小黑屋优质内容</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[INSTALL PARSE FAILED UNEXPECTED EXCEPTION 问题]]></title>
    <link href="https://droidyue.com/blog/2020/03/30/install-parse-failed-unexpected-exception/"/>
    <updated>2020-03-30T20:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/30/install-parse-failed-unexpected-exception</id>
    <content type="html"><![CDATA[<p>顺手整理一个之前记录未文字输出的老问题，使用adb install爆出的问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb install -r -d <span class="s2">&quot;2.8.5-475.apk&quot;</span>
</span><span class='line'>adb: failed to install 2.8.5-475.apk: Failure <span class="o">[</span>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION:
</span><span class='line'>Failed to parse /data/app/vmdl981460948.tmp/base.apk: AndroidManifest.xml<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>原因</h2>

<p>apk在传入过程中出现错误，所以导致了该问题出现</p>

<h2>解决方案</h2>

<p>重新传输没有问题的apk包。</p>

<h2>怎么验证apk包没有问题</h2>

<ul>
<li>发送者发apk，顺带着apk的md5值</li>
<li>接收端接收apk，并校验apk的md5值是否与发送者的一致。</li>
</ul>


<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派 gitlab问题整理]]></title>
    <link href="https://droidyue.com/blog/2020/03/29/install-gitlab-on-raspberry-pi-issues/"/>
    <updated>2020-03-29T20:15:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/29/install-gitlab-on-raspberry-pi-issues</id>
    <content type="html"><![CDATA[<h2>E: Unable to locate package gitlab-ce</h2>

<ul>
<li>不要使用<code>sudo curl -sS https://packages.gitlab.com/install/repositories/gitlab/raspberry-pi2/script.deb.sh | sudo bash</code></li>
<li>替换使用这个<code>sudo curl -sS https://packages.gitlab.com/install/repositories/gitlab/raspberry-pi2/script.deb.sh | sudo os=raspbian dist=jessie bash</code></li>
<li>然后执行<code>sudo apt install gitlab-ce</code></li>
</ul>


<!--more-->


<h2>E: The package gitlab-ce needs to be reinstalled, but I can&rsquo;t find an archive for it.</h2>

<ul>
<li>执行<code>sudo dpkg --remove --force-all  gitlab-ce</code></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/2767#note_54628738">https://gitlab.com/gitlab-org/omnibus-gitlab/issues/2767#note_54628738</a></li>
<li><a href="https://askubuntu.com/questions/868064/e-the-package-ubuntu-mono-needs-to-be-reinstalled-but-i-cant-find-an-archive/868227#868227">https://askubuntu.com/questions/868064/e-the-package-ubuntu-mono-needs-to-be-reinstalled-but-i-cant-find-an-archive/868227#868227</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些关于微信分享的建议规范]]></title>
    <link href="https://droidyue.com/blog/2020/03/29/wechat-share-standard/"/>
    <updated>2020-03-29T19:51:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/29/wechat-share-standard</id>
    <content type="html"><![CDATA[<p>实话讲，微信的文档真的是差强人意，除了让人难以忍受的代码使用截图展示外，其中关于一些分享的规范也不好找。</p>

<p>还好借助Google，找到了一些规范，涉及缩略图和文字个数等。</p>

<!--more-->


<p><img src="https://asset.droidyue.com/image/2019_07/wechat_timeline_link_share.png" alt="wechat_timeline_link_share" /></p>

<p><img src="https://asset.droidyue.com/image/2019_07/wechat_session_link_share.png" alt="wechat_session_link_share" /></p>

<p>当然为了验证权威性，大家可以访问这两个地址的图片。</p>

<ul>
<li><a href="http://wximg.qq.com/wxp/wxmoment-doc/images/2-4-2.png">http://wximg.qq.com/wxp/wxmoment-doc/images/2-4-2.png</a></li>
<li><a href="http://wximg.qq.com/wxp/wxmoment-doc/images/2-4-1.png">http://wximg.qq.com/wxp/wxmoment-doc/images/2-4-1.png</a></li>
</ul>


<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复ssh 首次登录树莓派失败的问题]]></title>
    <link href="https://droidyue.com/blog/2020/03/29/ssh-raspberrypi-failure/"/>
    <updated>2020-03-29T19:46:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/29/ssh-raspberrypi-failure</id>
    <content type="html"><![CDATA[<p>默认情况下，树莓派不支持ssh登录，需要做一些简单的处理</p>

<p>解决方法很简单</p>

<ul>
<li>在Mac或者linux电脑上，使用终端进入<code>cd /Volumes/disk_of_raspberry</code></li>
<li>创建一个文件，叫做ssh,<code>touch ssh</code></li>
</ul>


<!--more-->


<p>完整的代码大概是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /Volumes/disk_of_raspberry
</span><span class='line'>touch ssh
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuc 设置断电后自动开机]]></title>
    <link href="https://droidyue.com/blog/2020/03/29/auto-on-after-power-failure-nuc/"/>
    <updated>2020-03-29T17:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/29/auto-on-after-power-failure-nuc</id>
    <content type="html"><![CDATA[<h2>步骤</h2>

<ul>
<li>开机 看到启动界面后（多次）按 F2 进入BIOS</li>
<li>进入Power Tab  向下滑动Secondary Power Settings区域</li>
<li>找到 After Power Failure 选择Power On</li>
<li>按 F10 保存并退出即可。</li>
</ul>


<!--more-->


<p>相关图
<img src="https://asset.droidyue.com/image/2020_03/nuc_after_power_off.png" alt="https://asset.droidyue.com/image/2020_03/nuc_after_power_off.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KotlinTips asType 快捷转换]]></title>
    <link href="https://droidyue.com/blog/2020/03/29/kotlintips-as-type/"/>
    <updated>2020-03-29T17:15:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/29/kotlintips-as-type</id>
    <content type="html"><![CDATA[<h3>作用</h3>

<ul>
<li>更加流畅地，一气呵成进行类型转换</li>
</ul>


<!--more-->


<h3>代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 将一种类型转换为另一种类型,如果类型转换不允许，返回null</span>
</span><span class='line'><span class="cm"> * */</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">asType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testAsType</span><span class="p">(</span><span class="n">charSequence</span><span class="p">:</span> <span class="n">CharSequence</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//书写不流畅，需要回到开始出增加()</span>
</span><span class='line'>  <span class="p">(</span><span class="n">charSequence</span> <span class="k">as</span><span class="p">?</span> <span class="n">String</span><span class="p">)?.</span><span class="n">length</span>
</span><span class='line'>  <span class="c1">//一气呵成书写</span>
</span><span class='line'>  <span class="n">charSequence</span><span class="p">?.</span><span class="n">asType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">length</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>reified</h3>

<ul>
<li><a href="https://droidyue.com/blog/2019/07/28/kotlin-reified-generics/">使用Kotlin Reified 让泛型更简单安全</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KotlinTips elvis 快速返回]]></title>
    <link href="https://droidyue.com/blog/2020/03/29/kotlin-tips-elvis-return/"/>
    <updated>2020-03-29T17:11:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/29/kotlin-tips-elvis-return</id>
    <content type="html"><![CDATA[<h3>作用</h3>

<ul>
<li>在方法初始部分，对于值不符合预期，快速返回不再继续执行</li>
</ul>


<!--more-->


<h3>代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">testElvisReturn</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//如果值不符合预期(null)，直接返回</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">firstCommand</span> <span class="p">=</span> <span class="n">commands</span><span class="p">?.</span><span class="n">firstOrNull</span><span class="p">()</span> <span class="p">?:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">firstCommand</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;ADD&quot;</span> <span class="p">-&gt;</span> <span class="s">&quot;Add something&quot;</span>
</span><span class='line'>        <span class="s">&quot;DELETE&quot;</span> <span class="p">-&gt;</span> <span class="s">&quot;Delete something&quot;</span>
</span><span class='line'>        <span class="s">&quot;UPDATE&quot;</span> <span class="p">-&gt;</span> <span class="s">&quot;Update something&quot;</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">&quot;Find something&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KotlinTips: getValueSafely 安全取值]]></title>
    <link href="https://droidyue.com/blog/2020/03/22/kotlin-tips-get-value-safely/"/>
    <updated>2020-03-22T18:52:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/22/kotlin-tips-get-value-safely</id>
    <content type="html"><![CDATA[<h3>作用</h3>

<ul>
<li>安全取值，增加稳定性</li>
<li>规避繁琐的显式try-catch处理</li>
</ul>


<!--more-->


<h3>代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 安全的获取值的信息，其过程中发生异常会自动处理，返回null</span>
</span><span class='line'><span class="cm"> * getValueAction 取值操作，可能发生异常</span>
</span><span class='line'><span class="cm"> * */</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">getValueSafely</span><span class="p">(</span><span class="n">getValueAction</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">T</span><span class="p">?):</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">getValueAction</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证一番</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testGetValueSafely</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">value1</span> <span class="p">=</span> <span class="n">getValueSafely</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span><span class="p">/</span> <span class="m">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">value2</span> <span class="p">=</span> <span class="n">getValueSafely</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span> <span class="p">+</span> <span class="m">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">value1</span><span class="p">.</span><span class="n">printLog</span><span class="p">()</span>
</span><span class='line'>  <span class="n">value2</span><span class="p">.</span><span class="n">printLog</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>执行日志</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="m">03</span><span class="p">-</span><span class="m">21</span> <span class="m">16</span><span class="p">:</span><span class="m">55</span><span class="p">:</span><span class="m">05.649</span>  <span class="m">5072</span>  <span class="m">5072</span> <span class="n">I</span> <span class="n">KotlinTips</span><span class="p">:</span> <span class="k">null</span>
</span><span class='line'><span class="m">03</span><span class="p">-</span><span class="m">21</span> <span class="m">16</span><span class="p">:</span><span class="m">55</span><span class="p">:</span><span class="m">05.649</span>  <span class="m">5072</span>  <span class="m">5072</span> <span class="n">I</span> <span class="n">KotlinTips</span><span class="p">:</span> <span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关于 KotlinTips</h2>

<p>KotlinTips是一个关于Kotlin编码技巧的一个系列，希望通过轻量简单的形式介绍能对大家有帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信支付 核心业务应用工程师(深圳/广州) 招聘内推]]></title>
    <link href="https://droidyue.com/blog/2020/03/22/wechat-payment-server-jobs/"/>
    <updated>2020-03-22T16:33:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/22/wechat-payment-server-jobs</id>
    <content type="html"><![CDATA[<p>本招聘来自腾讯支付项目组直招,具体内容如下</p>

<!--more-->


<p><img src="https://asset.droidyue.com/image/2020_03/wechat_payment_jobs.png" alt="https://asset.droidyue.com/image/2020_03/wechat_payment_jobs.png" /></p>

<h3>注</h3>

<ul>
<li>简历投递备注增加来自技术小黑屋,通过率更高.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术小黑屋投稿开放了]]></title>
    <link href="https://droidyue.com/blog/2020/03/21/contribute-to-droidyue-dot-com/"/>
    <updated>2020-03-21T15:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/03/21/contribute-to-droidyue-dot-com</id>
    <content type="html"><![CDATA[<p>为了传播更好的有价值内容,本博客开放投稿功能.</p>

<h2>技术小黑屋的优势</h2>

<ul>
<li>开发者头条(toutiao.io) 第一大非官方独家号维护者(4w+订阅者)</li>
<li>掘金网站知名内容贡献者</li>
<li>全网知名的安卓博主博客</li>
<li>RSS 订阅 Feedly 中文技术博客订阅者较多</li>
<li>受众广,以Java,Android,Kotlin语言使用者为主</li>
</ul>


<!--more-->


<h2>投稿者权益</h2>

<ul>
<li>网站展示,转载文章底部增加公众号二维码曝光导流</li>
<li>技术小黑屋公众号转发</li>
<li>技术小黑屋博客其他位置曝光处理(后期增加)</li>
</ul>


<h2>投稿展示</h2>

<ul>
<li>文章开始部分和结束部分展示授权转载文案</li>
<li>文章底部可以展示源链接或公众号二维码</li>
</ul>


<h2>联系方式</h2>

<ul>
<li>邮箱:duanjianhuabiz#gmail.com   (手动替换#为@)</li>
<li>微信: xiangwang123456ziyou 留言备注</li>
<li>或扫描下面二维码</li>
</ul>


<p><img src="https://asset.droidyue.com/image/2020/03/jishuxiaoheiwu_zhuli.jpeg" alt="https://asset.droidyue.com/image/2020/03/jishuxiaoheiwu_zhuli.jpeg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 下 wget 设置代理]]></title>
    <link href="https://droidyue.com/blog/2020/02/29/set-proxy-for-wget/"/>
    <updated>2020-02-29T20:41:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/29/set-proxy-for-wget</id>
    <content type="html"><![CDATA[<p>Linux进行网络下载,基本上是wget或者curl,比如我们这样去进行请求,如果没有代理,是访问不了的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>androidyue@in-house-ubuntu:/tmp<span class="nv">$ </span>wget google.com
</span><span class='line'>--2020-03-01 11:53:14--  http://google.com/
</span><span class='line'>Resolving google.com <span class="o">(</span>google.com<span class="o">)</span>... 46.82.174.69, 93.46.8.90
</span><span class='line'>Connecting to google.com <span class="o">(</span>google.com<span class="o">)</span>|46.82.174.69|:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... Read error <span class="o">(</span>Connection reset by peer<span class="o">)</span> in headers.
</span><span class='line'>Retrying.
</span><span class='line'>
</span><span class='line'>--2020-03-01 11:53:15--  <span class="o">(</span>try: 2<span class="o">)</span>  http://google.com/
</span><span class='line'>Connecting to google.com <span class="o">(</span>google.com<span class="o">)</span>|46.82.174.69|:80...
</span></code></pre></td></tr></table></div></figure>


<p>所以,我们想要实现一些功能,需要为wget设置代理.方法很简单</p>

<!--more-->


<h2>方法一:参数设置</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -e <span class="nv">http_proxy</span><span class="o">=</span>192.168.1.8:1611 google.com
</span><span class='line'>
</span><span class='line'>--2020-03-01 11:53:55--  http://google.com/
</span><span class='line'>Connecting to 192.168.1.8:1611... connected.
</span><span class='line'>Proxy request sent, awaiting response... 301 Moved Permanently
</span><span class='line'>Location: http://www.google.com/ <span class="o">[</span>following<span class="o">]</span>
</span><span class='line'>--2020-03-01 11:53:57--  http://www.google.com/
</span><span class='line'>Reusing existing connection to 192.168.1.8:1611.
</span><span class='line'>Proxy request sent, awaiting response... 200 OK
</span><span class='line'>Length: unspecified <span class="o">[</span>text/html<span class="o">]</span>
</span><span class='line'>Saving to: ‘index.html’
</span><span class='line'>
</span><span class='line'>index.html                               <span class="o">[</span> &lt;<span class="o">=</span>&gt;                                                                 <span class="o">]</span>  12.56K  --.-KB/s    in 0s
</span><span class='line'>
</span><span class='line'>2020-03-01 11:54:01 <span class="o">(</span>160 MB/s<span class="o">)</span> - ‘index.html’ saved <span class="o">[</span>12863<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法二:配置文件设置</h3>

<h3>进入家目录</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/
</span></code></pre></td></tr></table></div></figure>


<h3>创建.wgetrc配置文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim .wgetrc
</span></code></pre></td></tr></table></div></figure>


<h3>设置代理</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">http_proxy</span> <span class="o">=</span> http://your_proxy:port
</span><span class='line'><span class="nv">https_proxy</span> <span class="o">=</span> http://your_proxy:port
</span><span class='line'><span class="nv">proxy_user</span> <span class="o">=</span> user
</span><span class='line'><span class="nv">proxy_password</span> <span class="o">=</span> password
</span><span class='line'><span class="nv">use_proxy</span> <span class="o">=</span> on
</span><span class='line'><span class="nb">wait</span> <span class="o">=</span> 15
</span></code></pre></td></tr></table></div></figure>


<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派安装jdk 8 ]]></title>
    <link href="https://droidyue.com/blog/2020/02/23/install-jdk-on-raspberry-pi/"/>
    <updated>2020-02-23T17:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/23/install-jdk-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt update
</span><span class='line'>sudo apt install openjdk-8-jdk openjdk-8-jre
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复 LC_CTYPE LC_ALL 设置问题]]></title>
    <link href="https://droidyue.com/blog/2020/02/23/fix-lc-ctype-lc-all-cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory-issue/"/>
    <updated>2020-02-23T17:12:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/23/fix-lc-ctype-lc-all-cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory-issue</id>
    <content type="html"><![CDATA[<h2>错误日志</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>locale: Cannot <span class="nb">set </span>LC_CTYPE to default locale: No such file or directory
</span><span class='line'>locale: Cannot <span class="nb">set </span>LC_ALL to default locale: No such file or directory
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>修复方式</h2>

<p>第一步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get purge locales
</span></code></pre></td></tr></table></div></figure>


<p>第二步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude install locales
</span></code></pre></td></tr></table></div></figure>


<p>第三部</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dpkg-reconfigure locales
</span></code></pre></td></tr></table></div></figure>


<p>如果出现选择locale时，选择<code>en-us-utf-8</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Webview 后台播放音视频实现]]></title>
    <link href="https://droidyue.com/blog/2020/02/09/play-audio-or-video-background-in-webview-app-android/"/>
    <updated>2020-02-09T20:49:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/02/09/play-audio-or-video-background-in-webview-app-android</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<ul>
<li>我们使用WebView播放音乐或视频（比如油管视频）</li>
<li>前台播放一直很正常，但是比较费电</li>
<li>进入后台后就会暂停播放</li>
<li>所以需求就是我们想要App在后台时同样播放音视频</li>
</ul>


<!--more-->


<h2>解决方法</h2>

<ul>
<li>重写onWindowVisibilityChanged方法，让网页任然感觉像是在前台执行。</li>
</ul>


<h2>关键代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onWindowVisibilityChanged</span><span class="o">(</span><span class="nl">visibility:</span> <span class="n">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onWindowVisibilityChanged</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;BackgroundMediaWebView&quot;</span><span class="o">,</span> <span class="s">&quot;onWindowVisibilityChanged &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;visibility=${toReadableVisibility(visibility)}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当App 进入后台（按Home键），visibility会变成Gone</li>
<li>我们强制调用<code>super.onWindowVisibilityChanged(View.VISIBLE)</code>会保持WebView继续播放音视频</li>
</ul>


<h2>完整代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">webviewvisibilitychangedsample</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.AttributeSet</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebView</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">BackgroundMediaWebView</span> <span class="nd">@JvmOverloads</span> <span class="n">constructor</span><span class="o">(</span>
</span><span class='line'>    <span class="nl">context:</span> <span class="n">Context</span><span class="o">,</span> <span class="nl">attrs:</span> <span class="n">AttributeSet</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span> <span class="nl">defStyleAttr:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">)</span> <span class="o">:</span> <span class="n">WebView</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">fun</span> <span class="nf">onWindowVisibilityChanged</span><span class="o">(</span><span class="nl">visibility:</span> <span class="n">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onWindowVisibilityChanged</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;BackgroundMediaWebView&quot;</span><span class="o">,</span> <span class="s">&quot;onWindowVisibilityChanged &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;visibility=${toReadableVisibility(visibility)}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">fun</span> <span class="nf">toReadableVisibility</span><span class="o">(</span><span class="nl">visibility:</span> <span class="n">Int</span><span class="o">):</span> <span class="n">String</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">when</span><span class="o">(</span><span class="n">visibility</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span> <span class="o">-&gt;</span> <span class="s">&quot;Visible&quot;</span>
</span><span class='line'>            <span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span> <span class="o">-&gt;</span> <span class="s">&quot;Invisible&quot;</span>
</span><span class='line'>            <span class="n">View</span><span class="o">.</span><span class="na">GONE</span> <span class="o">-&gt;</span> <span class="s">&quot;Gone&quot;</span>
</span><span class='line'>            <span class="k">else</span> <span class="o">-&gt;</span> <span class="s">&quot;Unknown&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>完整示例项目</h2>

<ul>
<li><a href="https://github.com/androidyue/WebViewVisibilityChangedSample">https://github.com/androidyue/WebViewVisibilityChangedSample</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下实现超快捷切换DNS]]></title>
    <link href="https://droidyue.com/blog/2020/01/28/a-script-to-change-dns-on-mac-os/"/>
    <updated>2020-01-28T14:39:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/01/28/a-script-to-change-dns-on-mac-os</id>
    <content type="html"><![CDATA[<p>在有些情况下，我们需要切换DNS来实现一些处理。但是频繁的进入设置-网络 的确很麻烦，于是再次朝着脚本的思路想了想，发现还是可以实现的。下面的脚本就能便捷的实现切换WIFI的DNS并验证。</p>

<!--more-->


<h2>changeToGoogleDns.sh</h2>

<p>该脚本的内容切换DNS为信用值很高的Google DNS 8.8.8.8。虽然Google被墙，但是这个DNS地址还是可以用的。而且这也算是我主要使用的DNS。</p>

<p>对应的脚本内容为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>networksetup -setdnsservers Wi-Fi 8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<h2>changeTo114Dns.sh</h2>

<p>114的DNS也是一种选择，但是我几乎不用，可以作为一种选择。</p>

<p>对应的脚本内容为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>networksetup -setdnsservers Wi-Fi 114.114.114.114
</span></code></pre></td></tr></table></div></figure>


<h2>dumpWifiDNS.sh</h2>

<p>设置完成DNS之后，需要做的通常是验证以下，下面是验证DNS设置结果的脚本的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>networksetup -getdnsservers Wi-Fi
</span></code></pre></td></tr></table></div></figure>


<p>简单执行以下就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  scripts dumpWifiDNS.sh
</span><span class='line'>8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<h2>其他酷酷的脚本</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/12/15/translate-words-in-terminal/">终端依赖者福利：终端也能实现翻译功能了</a></li>
<li><a href="https://droidyue.com/blog/2019/12/08/display-img-in-ternimal/">Mac 下在终端直接查看图片</a></li>
<li><a href="https://droidyue.com/blog/2019/10/27/view-ssl-certificate-in-terminal/">在终端使用脚本查看网站 SSL 证书信息</a></li>
<li><a href="https://droidyue.com/blog/categories/jiao-ben/">更多脚本</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Checkstyle file name 异常的问题]]></title>
    <link href="https://droidyue.com/blog/2020/01/12/fix-checkstyle-file-name-issue/"/>
    <updated>2020-01-12T20:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/01/12/fix-checkstyle-file-name-issue</id>
    <content type="html"><![CDATA[<p>Checkstyle是一款很棒的工具，用来发现很多编码风格的问题。还不了解的同学可以移步这里<a href="https://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/">Android代码规范利器： Checkstyle</a>查看。</p>

<p>但是在使用Checkstyle时，却出现了一些问题，就是file元素的name不是我们当前执行checkstyle任务的路径。</p>

<!--more-->


<p>举个例子，比如</p>

<ul>
<li>我们执行<code>./gradlew checkstyle</code>时项目的路径为<code>~/Document/aProject</code></li>
<li>但是报告输出的file name属性为<code>/tmp/aProject/Commonxxxx/src/main/java/com/xxxx/core/adapter/xxxxxx.java</code>，基础路径为<code>/tmp/aProject</code></li>
</ul>


<p>具体的相关报告的输出结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;checkstyle</span> <span class="na">version=</span><span class="s">&quot;6.19&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;/tmp/aProject/Commonxxxx/src/main/java/com/xxxx/core/adapter/xxxxxx.java&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;26&quot;</span> <span class="na">column=</span><span class="s">&quot;37&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Member name &amp;apos;mHeaderViews&amp;apos; must match pattern &amp;apos;^[a-z][a-z0-9][a-zA-Z0-9]*$&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;27&quot;</span> <span class="na">column=</span><span class="s">&quot;37&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Member name &amp;apos;mFootViews&amp;apos; must match pattern &amp;apos;^[a-z][a-z0-9][a-zA-Z0-9]*$&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;30&quot;</span> <span class="na">column=</span><span class="s">&quot;23&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Member name &amp;apos;mContext&amp;apos; must match pattern &amp;apos;^[a-z][a-z0-9][a-zA-Z0-9]*$&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;error</span> <span class="na">line=</span><span class="s">&quot;62&quot;</span> <span class="na">severity=</span><span class="s">&quot;warning&quot;</span> <span class="na">message=</span><span class="s">&quot;Overload methods should not be split. Previous overloaded method located at line &amp;apos;52&amp;apos;.&quot;</span> <span class="na">source=</span><span class="s">&quot;com.puppycrawl.tools.checkstyle.checks.coding.OverloadMethodsDeclarationOrderCheck&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原因</h2>

<p>原因是使用了gralde的build cache导致的。</p>

<h2>解决方法</h2>

<p>执行时不使用gralde build cache</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew --no-build-cache checkstyle
</span></code></pre></td></tr></table></div></figure>


<h2>相关文章推荐</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
<li><a href="https://droidyue.com/blog/2017/04/09/error-prone-tool-for-java-and-android/">Error-prone,Google出品的Java和Android Bug分析利器</a></li>
<li><a href="https://droidyue.com/blog/categories/gradle/">更多gradle文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 处理位操作Flag 快捷方法]]></title>
    <link href="https://droidyue.com/blog/2020/01/05/kotlin-flag-extension-methods/"/>
    <updated>2020-01-05T20:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2020/01/05/kotlin-flag-extension-methods</id>
    <content type="html"><![CDATA[<p>一般涉及到标记位相关的操作，我们都会使用位运算，无论你是从Java转到Kotlin，还是全新使用Kotlin，进行位运算处理Flag都会感到疑问，该怎么处理呢。</p>

<!--more-->


<p>这里简单整理了几个方法，文件名为(FlagExt.kt)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@file</span><span class="p">:</span><span class="n">JvmName</span><span class="p">(</span><span class="s">&quot;FlagUtil&quot;</span><span class="p">)</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 添加flag</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="n">Int</span><span class="p">.</span><span class="n">addFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="n">or</span> <span class="n">flag</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 移除flag</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="n">Int</span><span class="p">.</span><span class="n">removeFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="n">and</span> <span class="n">flag</span><span class="p">.</span><span class="n">inv</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 检查是否包含flag</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="n">Int</span><span class="p">.</span><span class="n">hasFlag</span><span class="p">(</span><span class="n">flag</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span> <span class="n">and</span> <span class="n">flag</span> <span class="p">==</span> <span class="n">flag</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如下是验证代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">flags</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">FLAG_AUTO_REBOOT</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;flags.hasAutoRebootFlag=${flags.hasFlag(FLAG_AUTO_REBOOT)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flags</span> <span class="p">=</span> <span class="n">flags</span><span class="p">.</span><span class="n">addFlag</span><span class="p">(</span><span class="n">FLAG_AUTO_REBOOT</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;flags.hasAutoRebootFlag(afterAdded)=${flags.hasFlag(FLAG_AUTO_REBOOT)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flags</span> <span class="p">=</span> <span class="n">flags</span><span class="p">.</span><span class="n">removeFlag</span><span class="p">(</span><span class="n">FLAG_AUTO_REBOOT</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;flags.hasAutoRebootFlag(afterRemoved)=${flags.hasFlag(FLAG_AUTO_REBOOT)}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * result:</span>
</span><span class='line'><span class="cm">     * flags.hasAutoRebootFlag=false</span>
</span><span class='line'><span class="cm">     * flags.hasAutoRebootFlag(afterAdded)=true</span>
</span><span class='line'><span class="cm">     * flags.hasAutoRebootFlag(afterRemoved)=false</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">flags</span><span class="o">.</span><span class="na">hasAutoRebootFlag</span><span class="o">=</span><span class="kc">false</span>
</span><span class='line'><span class="n">flags</span><span class="o">.</span><span class="na">hasAutoRebootFlag</span><span class="o">(</span><span class="n">afterAdded</span><span class="o">)=</span><span class="kc">true</span>
</span><span class='line'><span class="n">flags</span><span class="o">.</span><span class="na">hasAutoRebootFlag</span><span class="o">(</span><span class="n">afterRemoved</span><span class="o">)=</span><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建Linux服务，轻松管理（自启动，恢复）进程]]></title>
    <link href="https://droidyue.com/blog/2019/12/29/create-a-linux-service-with-systemd/"/>
    <updated>2019-12-29T20:08:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/29/create-a-linux-service-with-systemd</id>
    <content type="html"><![CDATA[<p>有这样一个场景，在一台服务器上，我们想要启动一个简单的网络文件服务器，用来提供给内网的用户下载。</p>

<p>这里，我们使用ruby启动一个服务</p>

<ul>
<li>使用<code>ruby -run -ehttpd /home/webbuild/easy_file_server/  -p8000</code>启动文件服务器</li>
<li>使用<code>ruby -run -ehttpd /home/webbuild/easy_file_server/  -p8000 &amp;</code> 将该进程设置为后台执行</li>
<li>为了防止挂起，我们还需要使用nohup处理。像这样<code>nohup ruby -run -ehttpd /home/webbuild/easy_file_server/  -p8000 &amp;</code></li>
</ul>


<p>如上面设置一番，基本上可以工作了。</p>

<!--more-->


<p>但是还有一些问题，比如</p>

<ul>
<li>进程意外停止了，无法自动启动</li>
<li>服务器重启，该进程也不会自动启动</li>
</ul>


<p>那么我们有没有什么好的办法解决呢，答案是有的。就是下面介绍的使用systemd创建Linux 服务的方式解决。</p>

<h2>创建服务Unit文件</h2>

<p>创建一个服务文件，比如这里叫做<code>vim /etc/systemd/system/apk_server.service</code>(可以将apk_server替换为你希望的名称)</p>

<p>内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Unit</span><span class="o">]</span>
</span><span class='line'><span class="no">Description</span><span class="o">=</span><span class="no">APK</span> <span class="no">Server</span> <span class="no">Service</span>
</span><span class='line'><span class="no">StartLimitIntervalSec</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="o">[</span><span class="no">Service</span><span class="o">]</span>
</span><span class='line'><span class="no">Type</span><span class="o">=</span><span class="n">simple</span>
</span><span class='line'><span class="no">Restart</span><span class="o">=</span><span class="n">always</span>
</span><span class='line'><span class="no">RestartSec</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="no">User</span><span class="o">=</span><span class="n">root</span>
</span><span class='line'><span class="no">ExecStart</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span> <span class="o">-</span><span class="n">run</span> <span class="o">-</span><span class="n">ehttpd</span> <span class="sr">/home/</span><span class="n">webbuild</span><span class="o">/</span><span class="n">easy_file_server</span><span class="o">/</span>  <span class="o">-</span><span class="n">p8000</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="no">Install</span><span class="o">]</span>
</span><span class='line'><span class="no">WantedBy</span><span class="o">=</span><span class="n">multi</span><span class="o">-</span><span class="n">user</span><span class="o">.</span><span class="n">target</span>
</span></code></pre></td></tr></table></div></figure>


<p>重点可能需要替换的有</p>

<ul>
<li>Description 该服务的描述信息</li>
<li>User 填写真实的用户名称，也可以填写root不修改。</li>
<li>ExecStart 必须替换为你需要执行的命令。</li>
</ul>


<h2>基本搞定了</h2>

<h3>启动服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl start apk_server.service
</span></code></pre></td></tr></table></div></figure>


<h3>停止服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl stop apk_server.service
</span></code></pre></td></tr></table></div></figure>


<h3>重新启动服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl restart apk_server.service
</span></code></pre></td></tr></table></div></figure>


<h3>设置开启自启动</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl <span class="nb">enable </span>apk_server.service
</span><span class='line'>//执行结果
</span><span class='line'>Created symlink /etc/systemd/system/multi-user.target.wants/apk_server.service → /etc/systemd/system/apk_server.service.
</span></code></pre></td></tr></table></div></figure>


<h2>其他字段解释</h2>

<ul>
<li>StartLimitIntervalSec 启动频率限制，设置为0</li>
<li>Restart=always  当进程退出后自动重启</li>
<li>RestartSec 重启延迟时间，单位为毫秒</li>
<li>WantedBy 自动启动相关参数</li>
</ul>


<h2>查看服务状态</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl status apk_server.service
</span><span class='line'>● apk_server.service - APK Server Service
</span><span class='line'>   Loaded: loaded <span class="o">(</span>/etc/systemd/system/apk_server.service; disabled; vendor preset: disabled<span class="o">)</span>
</span><span class='line'>   Active: active <span class="o">(</span>running<span class="o">)</span> since Fri 2019-12-xx 22:06:40 CST; 9s ago
</span><span class='line'> Main PID: 17802 <span class="o">(</span>ruby<span class="o">)</span>
</span><span class='line'>    Tasks: 2 <span class="o">(</span>limit: 26213<span class="o">)</span>
</span><span class='line'>   Memory: 15.8M
</span><span class='line'>   CGroup: /system.slice/apk_server.service
</span><span class='line'>           └─17802 ruby -run -ehttpd /home/webbuild/easy_file_server/ -p8000
</span><span class='line'>
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Started APK Server Service.
</span><span class='line'>localhost.localdomain env<span class="o">[</span>17802<span class="o">]</span>: <span class="o">[</span>2019-12-xx 22:06:40<span class="o">]</span> INFO  WEBrick 1.4.2
</span><span class='line'>localhost.localdomain env<span class="o">[</span>17802<span class="o">]</span>: <span class="o">[</span>2019-12-xx 22:06:40<span class="o">]</span> INFO  ruby 2.5.3 <span class="o">(</span>2018-10-18<span class="o">)</span> <span class="o">[</span>x86_64-linux<span class="o">]</span>
</span><span class='line'>localhost.localdomain env<span class="o">[</span>17802<span class="o">]</span>: <span class="o">[</span>2019-12-xx 22:06:40<span class="o">]</span> INFO  WEBrick::HTTPServer#start: <span class="nv">pid</span><span class="o">=</span>17802 <span class="nv">port</span><span class="o">=</span>8000
</span></code></pre></td></tr></table></div></figure>


<h2>配置更新</h2>

<p>当我们修改了之前的service文件后，会得到的提示</p>

<blockquote><p>Warning: The unit file, source configuration file or drop-ins of apk_server.service changed on disk. Run &lsquo;systemctl daemon-reload&rsquo; to reload units.</p></blockquote>

<p>所以，当我们每次修改后，都需要执行<code>systemctl daemon-reload</code>确保配置生效。</p>

<h2>排查错误</h2>

<h3>查找错误信息</h3>

<p>可以使用使用两种方法</p>

<ul>
<li>第一种是<code>systemctl status</code>，上面介绍的</li>
<li>第二种是<code>journalctl</code></li>
</ul>


<h4>journalctl</h4>

<p>journalctl相对提供的日志会更多一些，使用方法也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>journalctl -u coo_code_review.service --no-pager --reverse
</span></code></pre></td></tr></table></div></figure>


<p>对应的日志就能看到了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Failed with result <span class="s1">&#39;exit-code&#39;</span>.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Service <span class="nv">RestartSec</span><span class="o">=</span>1s expired, scheduling restart.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Scheduled restart job, restart counter is at 52.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Stopped Coo Code Review Service.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Started Coo Code Review Service.
</span></code></pre></td></tr></table></div></figure>


<h3>code=exited, status=217/USER</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apk_server.service - APK Server Service
</span><span class='line'>   Loaded: loaded <span class="o">(</span>/etc/systemd/system/apk_server.service; disabled; vendor preset: disabled<span class="o">)</span>
</span><span class='line'>   Active: activating <span class="o">(</span>auto-restart<span class="o">)</span> <span class="o">(</span>Result: <span class="nb">exit</span>-code<span class="o">)</span> since Fri 2019-12-20 14:03:12 CST; 409ms ago
</span><span class='line'>  Process: 17535 <span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/env bash /root/startApkServer.sh <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>217/USER<span class="o">)</span>
</span><span class='line'> Main PID: 17535 <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>217/USER<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常的错误原因是上面配置中的User设置的用户名不对。更新正确即可</p>

<h3>设置工作目录</h3>

<p>很多是否我们的命令会是这样</p>

<ul>
<li>进入一个目录</li>
<li>然后执行命令</li>
</ul>


<p>但是当我们这样设置<code>ExecStart=/usr/bin/env cd your_dir &amp;&amp; ruby -run -ehttpd easy_file_server/  -p8000</code>是有问题的。好在可以这样设置工作目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Unit</span><span class="o">]</span>
</span><span class='line'><span class="no">Description</span><span class="o">=</span><span class="no">APK</span> <span class="no">Server</span> <span class="no">Service</span>
</span><span class='line'><span class="no">StartLimitIntervalSec</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="o">[</span><span class="no">Service</span><span class="o">]</span>
</span><span class='line'><span class="no">Type</span><span class="o">=</span><span class="n">simple</span>
</span><span class='line'><span class="no">Restart</span><span class="o">=</span><span class="n">always</span>
</span><span class='line'><span class="no">RestartSec</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="no">User</span><span class="o">=</span><span class="n">root</span>
</span><span class='line'><span class="no">WorkingDirectory</span><span class="o">=</span><span class="sr">/root/</span><span class="n">your_dir</span>
</span><span class='line'><span class="no">ExecStart</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span> <span class="o">-</span><span class="n">run</span> <span class="o">-</span><span class="n">ehttpd</span> <span class="sr">/home/</span><span class="n">webbuild</span><span class="o">/</span><span class="n">easy_file_server</span><span class="o">/</span>  <span class="o">-</span><span class="n">p8000</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="no">Install</span><span class="o">]</span>
</span><span class='line'><span class="no">WantedBy</span><span class="o">=</span><span class="n">multi</span><span class="o">-</span><span class="n">user</span><span class="o">.</span><span class="n">target</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过增加<code>WorkingDirectory=/root/your_dir</code>可以解决问题。</p>

<h3>设置环境变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>xxxxx Service
</span><span class='line'><span class="nv">StartLimitIntervalSec</span><span class="o">=</span>0
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>simple
</span><span class='line'><span class="nv">Restart</span><span class="o">=</span>always
</span><span class='line'><span class="nv">RestartSec</span><span class="o">=</span>1
</span><span class='line'><span class="nv">User</span><span class="o">=</span>root
</span><span class='line'><span class="nv">Environment</span><span class="o">=</span><span class="s2">&quot;ANDROID_HOME=/opt/android-sdk-linux&quot;</span>
</span><span class='line'><span class="nv">WorkingDirectory</span><span class="o">=</span>/root/automan/xxx
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/env bash /root/automan/xxx/gradlew run
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></code></pre></td></tr></table></div></figure>


<p>使用上面的代码，我们就增加了<code>ANDROID_HOME=/opt/android-sdk-linux</code>这个环境变量。</p>

<p>如果是多个环境变量，设置多行<code>Environment="ANDROID_HOME=/opt/android-sdk-linux"</code>就行</p>

<h3>203/EXEC 错误</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: Started Coo Code Review Service.
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Main process exited, <span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>203/EXEC
</span><span class='line'>localhost.localdomain systemd<span class="o">[</span>1<span class="o">]</span>: coo_code_review.service: Failed with result <span class="s1">&#39;exit-code&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>解决方法,增加<code>/usr/bin/env</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ExecStart</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">bash</span> <span class="sr">/root/</span><span class="n">automan</span><span class="o">/</span><span class="n">xxxxx</span><span class="o">/</span><span class="n">gradlew</span> <span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxHttp 一款让你眼前一亮的 Http 请求框架]]></title>
    <link href="https://droidyue.com/blog/2019/12/28/rxhttp-an-awesome-library-mixed-with-rxjava-and-okhttp/"/>
    <updated>2019-12-28T15:15:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/12/28/rxhttp-an-awesome-library-mixed-with-rxjava-and-okhttp</id>
    <content type="html"><![CDATA[<blockquote><p>本文系 RxHttp作者不怕天黑 向本博客投稿，并授权在本站发表。</p></blockquote>

<h1>1、前言</h1>

<p>RxHttp在今年4月份一经推出，就受到了广大Android 开发者的喜爱，截止本文发表在github上已有<a href="https://github.com/liujingxing/RxHttp">1100+star</a>，为此，我自己也建个RxHttp&amp;RxLife 的群（群号：378530627）目前群里也有将近120号人，里面有不少小伙伴提了很多有价值的创意，才使得RxHttp一直坚持走到了现在，在此，感谢大家的喜爱。</p>

<!--more-->


<p>这期间，一直有人问我，retrofit不香吗？之前不知道该如何回答这个问题，现在我想说，香！！retrofit无疑是目前综合得分最高的选手，但它也有它的不足。</p>

<p>RxHttp相较于retrofit，功能上，两者均能实现，并无多大差异，更多的差异体现功能的使用上，也就是易用性，如对文件上传/下载/进度监听的操作上，RxHttp用及简的API，可以说碾压retrofit；另外在baseUrl、公共参数/请求头、请求加解密等功能上的易用性都要优于retrofit；然而这些，个人觉得都不算什么，个人觉得RxHttp最大的优势在于它近乎为0的上手成本、及简的API以及高扩展性，看完这篇文章，相信你会有同感。</p>

<p>那RxHttp就没有缺点吗？有，那就是它的稳定性目前还不如retrofit，毕竟RxHttp刚出道8个月，且全部是我一个人在维护，当然，并不是说RxHttp不稳定，RxHttp未开源前，在我司的项目已经使用了近2年，接着今年4月份将其开源，至今大大小小已迭代20多个版本，目前用的人也不在少数，可以说很稳定了。</p>

<h1>2、简介</h1>

<p>RxHttp是基于OkHttp的二次封装，并与RxJava做到无缝衔接，一条链就能发送任意请求。主要优势如下：</p>

<p>  <strong>1. 支持Gson、Xml、ProtoBuf、FastJson等第三方数据解析工具</strong></p>

<p>  <strong>2. 支持Get、Post、Put、Delete等任意请求方式，可自定义请求方式</strong></p>

<p>  <strong>3. 支持在Activity/Fragment/View/ViewModel/任意类中，自动关闭请求</strong></p>

<p>  <strong>4. 支持统一加解密，且可对单个请求设置是否加解密</strong></p>

<p>  <strong>5. 支持添加公共参数/头部，且可对单个请求设置是否添加公共参数/头部</strong></p>

<p>  <strong>6. 史上最优雅的实现文件上传/下载及进度的监听，且支持断点下载</strong></p>

<p>  <strong>7. 史上最优雅的对错误统一处理，且不打破Lambda表达式</strong></p>

<p>  <strong>8. 史上最优雅的处理多个BaseUrl及动态BaseUrl</strong></p>

<p>  <strong>9. 史上最优雅的处理网络缓存</strong></p>

<p>  <strong>10. 30秒即可上手，学习成本极低</strong></p>

<p><strong>gradle依赖</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="nl">rxhttp:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="c1">//注解处理器，生成RxHttp类，即可一条链发送请求</span>
</span><span class='line'><span class="n">annotationProcessor</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">rxhttp</span><span class="o">-</span><span class="nl">compiler:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="c1">//管理RxJava及生命周期，Activity/Fragment 销毁，自动关闭未完成的请求</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxlife</span><span class="o">:</span><span class="nl">rxlife:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//非必须 根据自己需求选择Converter  RxHttp默认内置了GsonConverter</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">jackson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">fastjson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">protobuf:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">simplexml:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：kotlin用户，请使用kapt替代annotationProcessor</code></p>

<p>缓存功能，请查看：<a href="https://juejin.im/post/5dff3c2de51d45582c27cea6">RxHttp 全网Http缓存最优解</a></p>

<h1>3、使用</h1>

<h2>3.1、准备工作</h2>

<p>RxHttp 要求项目使用Java 8，请在 app 的 build.gradle 文件中添加以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">compileOptions</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sourceCompatibility</span> <span class="n">JavaVersion</span><span class="o">.</span><span class="na">VERSION_1_8</span>
</span><span class='line'>    <span class="n">targetCompatibility</span> <span class="n">JavaVersion</span><span class="o">.</span><span class="na">VERSION_1_8</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，再Rebuild一下项目（通过Rebuild生成RxHttp类），就可以开始RxHttp的入坑之旅</p>

<h2>3.2、配置默认的BaseUrl</h2>

<p>通过<code>@DefaultDomain</code>注解配置默认域名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Url</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@DefaultDomain</span> <span class="c1">//设置为默认域名</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">&quot;https://www.wanandroid.com/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此步骤是非必须的，这里先介绍<code>@DefaultDomain</code>注解的用法，更多有关域名的介绍，请查看本文3.6章节&mdash;&mdash;多域名/动态域名</p>

<h2>3.3、请求三部曲</h2>

<p>先来看看如何发送一个最简单的请求，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://...&quot;</span><span class="o">)</span>  <span class="c1">//第一步, 通过get、postXxx、putXxx等方法，确定请求类型         </span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>           <span class="c1">//第二步, 通过asXxx系列方法，确定返回数据类型    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>     <span class="c1">//第三步, 订阅回调(此步骤同RxJava订阅观察者)</span>
</span><span class='line'>        <span class="c1">//请求成功                                         </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                                         </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，不用怀疑，就是这么简单，重要的事情说3遍</p>

<p><strong>任意请求，任意返回数据类型，皆遵循请求三部曲</strong></p>

<p><strong>任意请求，任意返回数据类型，皆遵循请求三部曲</strong></p>

<p><strong>任意请求，任意返回数据类型，皆遵循请求三部曲</strong></p>

<p>到这，你已经掌握了<a href="https://github.com/liujingxing/RxHttp">RxHttp</a>的精髓，我们只需牢记请求三部曲，使用RxHttp就会得心应手。</p>

<h3>3.3.1、第一部曲：确定请求类型</h3>

<p>RxHttp内部共提供了14个请求方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>              <span class="c1">//get请求    参数拼接在url后面</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">head</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>             <span class="c1">//head请求   参数拼接在url后面</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>         <span class="c1">//post请求   参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>         <span class="c1">//post请求   参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>    <span class="c1">//post请求   参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">putForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>          <span class="c1">//put请求    参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">putJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>          <span class="c1">//put请求    参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">putJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>     <span class="c1">//put请求    参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">patchForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>        <span class="c1">//patch请求  参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">patchJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>        <span class="c1">//patch请求  参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">patchJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>   <span class="c1">//patch请求  参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">deleteForm</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>       <span class="c1">//delete请求 参数以{application/x-www-form-urlencoded}形式提交</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">deleteJson</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>       <span class="c1">//delete请求 参数以{application/json; charset=utf-8}形式提交，发送Json对象</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">deleteJsonArray</span><span class="o">(</span><span class="n">String</span><span class="o">)</span>  <span class="c1">//delete请求 参数以{application/json; charset=utf-8}形式提交，发送Json数组</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上14个请求方法你会发现，其实就6个类型，分别对应是Get、Head、Post、Put、Patch、Delete方法，只是其中Post、Put、Patch、Delete各有3个方法有不同形式的提交方式，只需要根据自己的需求选择就好。</p>

<p>如以上方法还不能满足你的需求，我们还可以通过<code>@Param</code>注解自定义请求方法，有关注解的使用，本文后续会详细介绍。</p>

<p><code>注：当调用xxxForm方法发送请求时，通过setMultiForm()方法或者调用addFile(String, File)添加文件时，内部会自动将参数以{multipart/form-data}方式提交</code></p>

<p><strong>添加参数/请求头</strong></p>

<p>确定请求方法后，我们就可以调用一系列<code>addXxx()</code>方法添加参数/请求头，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>       <span class="c1">//发送get请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;())</span>     <span class="c1">//通过Map添加多个参数</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;deviceType&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">)</span>     <span class="c1">//添加请求头</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>任意请求，都可调用以上3个方法添加参数/请求头，当然，在不同的请求方式下，也会有不同的addXxx方法供开发者调用。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//postJson请求方法下会有更多addAll等方法可供调用</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postJson</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span> <span class="c1">//发送post Json请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonObject</span><span class="o">())</span>   <span class="c1">//通过json对象添加多个参数</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="s">&quot;{\&quot;height\&quot;:180,\&quot;weight\&quot;:70}&quot;</span><span class="o">)</span> <span class="c1">//通过json字符串添加多个参数</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//postForm请求方法下会有一系列addFile方法可供调用</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>  <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/1.png&quot;</span><span class="o">))</span> <span class="c1">//添加单个文件</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;fileList&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;())</span> <span class="c1">//添加多个文件</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上只列出了几个常用的addXxx方法，更多方法请下载源码体验。</p>

<h3>3.3.2、第二部曲：确定返回数据类型</h3>

<p>添加好参数/请求头后，正式进入第二部曲，确定返回数据类型，我们通过<code>asXxx</code>方法确定返回类型，比如，我们要返回一个Student对象，就可以通过<code>asObject(Class&lt;T&gt;)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>  <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里就能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要返回Student对象列表，则可以通过<code>asList(Class&lt;T&gt;)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>  <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>       <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里就能拿到 Student对象列表               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>解析<code>Response&lt;T&gt;</code>类型数据</strong></p>

<p>然而，现实开发中，大多数人的接口，返回的数据结构都类似下面的这个样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span>    <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span>      <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//这里省略get、set方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于这种数据结构，按传统的写法，每次都要对code做判断，如果有100个请求，就要判断100次，真的会逼死强迫症患者。</p>

<p>RxHttp对于这种情况，给出完美的答案，比如<code>Response&lt;T&gt;</code>里面的T代表一个Student对象，则可以通过<code>asResponse(Class&lt;T&gt;)</code>方法获取，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponse</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<code>Response&lt;T&gt;</code>里面的T代表一个<code>List&lt;Student&gt;</code>列表对象，则可以通过<code>asResponseList(Class&lt;T&gt;)</code>方法获取，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到List&lt;Student&gt;列表对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多时候，我们的列表数据是分页的，类似下面的数据结构</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;code&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;msg&quot;</span><span class="o">:</span> <span class="s">&quot;&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;data&quot;</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>        <span class="s">&quot;totalPage&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;list&quot;</span><span class="o">:</span> <span class="o">[]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，调用RxHttp的<code>asResponsePageList(Class&lt;T&gt;)</code>方法依然可以完美解决，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponsePageList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回PageList&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到PageList&lt;Student&gt;列表对象 </span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">totalPage</span> <span class="o">=</span> <span class="n">pageList</span><span class="o">.</span><span class="na">getTotalPage</span><span class="o">();</span>   <span class="c1">//总页数</span>
</span><span class='line'>       <span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="n">pageList</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>  <span class="c1">//单页列表数据        </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这，估计很多人会问我：</p>

<ul>
<li>你的code在哪里判断的？</li>
<li>我的code是100或者其它值才代表正确，怎么改？</li>
<li>我的<code>Response&lt;T&gt;</code>类里面的字段名，跟你的都不一样，怎么该？</li>
<li>你这成功的时候直接返回<code>Response&lt;T&gt;</code>里面的T，那我还要拿到code做其他的判断，执行不同业务逻辑，怎么办？</li>
</ul>


<p>这里可以先告诉大家，<code>asResponse(Class&lt;T&gt;)</code>、<code>asResponseList(Class&lt;T&gt;)</code>、<code>asResponsePageList(Class&lt;T&gt;)</code>这3个方法并不是RxHttp内部提供的，而是通过自定义解析器生成，里面的code判断、<code>Response&lt;T&gt;</code>类都是开发者自定义的，如何自定义解析器，请查看本文5.1章节&mdash;&mdash;自定义Parser。</p>

<p>接着回答第4个问题，如何拿到code做其他的业务逻辑判断，很简单，我们只需用<code>OnError</code>接口处理错误回调即可，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponse</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>     <span class="c1">//注意，这里要用OnError接口，其中error是一个ErrorInfo对象  </span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>        <span class="c1">//拿到code字段，此时就可以对code做判断，执行不同的业务逻辑 </span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="na">getErrorCode</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">errorMsg</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="na">getErrorMsg</span><span class="o">()</span>  <span class="c1">//拿到msg字段             </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：上面的OnError接口并非是RxHttp内部提供的，而是自定义的，在Demo里可以找到</code></p>

<p>以上介绍的5个asXxx方法，可以说基本涵盖80%以上的业务场景，接下来我们看看RxHttp都提供了哪些asXxx方法，如下：<img src="https://asset.droidyue.com/image/2019_12/rxhttp_as_methods.png" alt="" />
RxHttp内部共提供了<code>23</code>个<code>asXXX</code>方法，其中：</p>

<ul>
<li>有7个是返回基本类型的包装类型，如：asInteger、asBoolean、asLong等等；</li>
<li>还有7个是返回对象类型，如：asString、asBitmap、asList、asMap(3个)以及最常用<code>asObject</code>方法；</li>
<li>剩下9个是<code>asParser(Parser&lt;T&gt;)</code>、    <code>asUpload</code>系列方法及<code>asDownload</code>系列方法。</li>
</ul>


<p>duang、duang、duang !!! 划重点，这里我可以告诉大家，其实前面的14个方法，最终都是通过<code>asParser(Parser&lt;T&gt;)</code>方法实现的，具体实现过程，这里先跳过，后续会详细讲解。</p>

<h3>3.3.3、第三部曲：订阅回调</h3>

<p>这一步就很简单了，在第二部曲中，asXxx方法会返回<code>Observable&lt;T&gt;</code>对象，没错，就是RxJava内部的<code>Observable&lt;T&gt;</code>对象，此时我们便可通过<code>subscribe</code>系列方法订阅回调，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//不处理任何回调</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>    <span class="c1">//不订阅任何回调</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//仅订阅成功回调</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到List&lt;Student&gt;列表对象               </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//订阅成功与失败回调</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponseList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回List&lt;Student&gt;类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到List&lt;Student&gt;列表对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//等等，省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，我们还可以订阅请求开始/结束的回调，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(</span><span class="n">disposable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求开始，当前在主线程回调</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="o">.</span><span class="na">doFinally</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求结束，当前在主线程回调</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//感知生命周期</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调，当前在主线程回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调，当前在主线程回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这，请求三部曲介绍完毕，接着，将介绍其它常用的功能</p>

<h2>3.4、初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//设置debug模式，默认为false，设置为true后，发请求，过滤&quot;RxHttp&quot;能看到请求日志</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">debug</span><span class="o">)</span>
</span><span class='line'><span class="c1">//非必须,只能初始化一次，第二次将抛出异常</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">okHttpClient</span><span class="o">)</span>
</span><span class='line'><span class="c1">//或者，调试模式下会有日志输出</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">okHttpClient</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">debug</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此步骤是非必须的，如需要添加拦截器等其他业务需求，则可调用<code>init</code>方法进行初始化，不初始化或者传入<code>null</code>即代表使用默认OkHttpClient对象，建议在Application中初始化，默认的OkHttpClient对象在HttpSender类中可以找到，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">OkHttpClient</span> <span class="nf">getDefaultOkHttpClient</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">X509TrustManager</span> <span class="n">trustAllCert</span> <span class="o">=</span> <span class="k">new</span> <span class="n">X509TrustManagerImpl</span><span class="o">();</span>
</span><span class='line'>    <span class="n">SSLSocketFactory</span> <span class="n">sslSocketFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SSLSocketFactoryImpl</span><span class="o">(</span><span class="n">trustAllCert</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">connectTimeout</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">readTimeout</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeTimeout</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">sslSocketFactory</span><span class="o">(</span><span class="n">sslSocketFactory</span><span class="o">,</span> <span class="n">trustAllCert</span><span class="o">)</span> <span class="c1">//添加信任证书                  </span>
</span><span class='line'>        <span class="o">.</span><span class="na">hostnameVerifier</span><span class="o">((</span><span class="n">hostname</span><span class="o">,</span> <span class="n">session</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">//忽略host验证                   </span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然初始化是非必须的，但是建议大家传入自定义的OkHttpClient对象，一来，自定义的OkHttpClient能最大化满足自身的业务；二来，随着RxHttp版本的升级，默认的OkHttpClient可能会发生变化(虽然可能性很小)，故建议自定义OkHttpClient对象传入RxHttp。</p>

<h2>3.5、公共参数/请求头</h2>

<p>RxHttp支持为所有的请求添加公共参数/请求头，当然，如果你希望某个请求不添加公共参数/请求头，也是支持的，而且非常简单。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setOnParamAssembly</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Param</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Param</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//此方法在子线程中执行，即请求发起线程</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isGet</span><span class="o">())</span> <span class="o">{</span>     <span class="c1">//可根据请求类型添加不同的参数</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">isPost</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;versionName&quot;</span><span class="o">,</span> <span class="s">&quot;1.0.0&quot;</span><span class="o">)</span><span class="c1">//添加公共参数</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;deviceType&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">);</span> <span class="c1">//添加公共请求头</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要调用<code>RxHttp.setOnParamAssembly(Function)</code>方法，并传入一个Function接口对象，每次发起请求，都会回调该接口。</p>

<p>当然，如果希望某个请求不回调该接口，即不添加公共参数/请求头，则可以调用<code>setAssemblyEnabled(boolean)</code>方法，并传入false即可，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>       <span class="c1">//get请求 </span>
</span><span class='line'>    <span class="o">.</span><span class="na">setAssemblyEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>   <span class="c1">//设置是否添加公共参数/头部，默认为true    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回字符串数据    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>            <span class="c1">//这里的s为String类型</span>
</span><span class='line'>        <span class="c1">//请求成功                                         </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                                         </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.6、多域名/动态域名</h2>

<p><strong>3.6.1、多域名</strong></p>

<p>现实开发中，我们经常会遇到多个域名的情况，其中1个为默认域名，其它为非默认域名，对于这种情况，RxHttp提供了<code>@DefaultDomain()</code>、<code>@Domain()</code>这两个注解来标明默认域名和非默认域名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Url</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@DefaultDomain</span><span class="o">()</span> <span class="c1">//设置为默认域名</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">&quot;https://www.wanandroid.com/&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Domain</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;BaseUrlBaidu&quot;</span><span class="o">)</span> <span class="c1">//非默认域名，并取别名为BaseUrlBaidu</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">baidu</span> <span class="o">=</span> <span class="s">&quot;https://www.baidu.com/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Domain</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;BaseUrlGoogle&quot;</span><span class="o">)</span> <span class="c1">//非默认域名，并取别名为BaseUrlGoogle</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">google</span> <span class="o">=</span> <span class="s">&quot;https://www.google.com/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>@Domain()</code>注解标注非默认域名，就会在RxHttp类中生成<code>setDomainToXxxIfAbsent()</code>方法，其中Xxx就是注解中取的别名。</p>

<p>上面我们使用了两个<code>@Domain()</code>注解，此时(需要Rebuild一下项目)就会在RxHttp类中生成<code>setDomainToBaseUrlBaiduIfAbsent()</code>、<code>setDomainToBaseUrlGoogleIfAbsent()</code>这两方法，此时发请求，我们就可以使用指定的域名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//使用默认域名，则无需添加任何额外代码</span>
</span><span class='line'><span class="c1">//此时 url = &quot;https://www.wanandroid.com/service/...&quot; </span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//手动输入域名，此时 url = &quot;https://www.mi.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;https://www.mi.com/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//手动输入域名时，若再次指定域名，则无效</span>
</span><span class='line'><span class="c1">//此时 url = &quot;https://www.mi.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;https://www.mi.com/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setDomainToBaseUrlBaiduIfAbsent</span><span class="o">()</span>  <span class="c1">//此时指定Baidu域名无效</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用谷歌域名，此时 url = &quot;https://www.google.com/service/...&quot;       </span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setDomainToBaseUrlGoogleIfAbsent</span><span class="o">()</span> <span class="c1">//指定使用Google域名</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上案例，可以知道，RxHttp共有3种指定域名的方式，按优先级排名分别是：手动输入域名 > 指定非默认域名 > 使用默认域名。</p>

<p><strong>3.6.2、动态域名</strong></p>

<p>现实开发中，也会有动态域名切换的需求，如域名被封、或者需要根据服务端下发的域名去配置，这对于RxHttp来说简直就是 so easy !!! 我们只需要对BaseUrl重新赋值，此时发请求便会立即生效，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//此时 url = &quot;https://www.wanandroid.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Url</span><span class="o">.</span><span class="na">baseUrl</span> <span class="o">=</span> <span class="s">&quot;https://www.qq.com&quot;</span><span class="o">;</span> <span class="c1">//动态更改默认域名，改完立即生效，非默认域名同理</span>
</span><span class='line'><span class="c1">//此时 url = &quot;https://www.qq.com/service/...&quot;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.7、关闭请求</h2>

<p>我们知道，在Activity/Fragment中发起请求，如果页面销毁时，请求还未结束，就会有内存泄漏的危险，因此，我们需要在页面销毁时，关闭一些还未完成的请求，RxHttp提供了两种关闭请求的方式，分别是自动+手动。</p>

<p><strong>3.7.1、自动关闭请求</strong></p>

<p>自动关闭请求，需要引入本人开源的另一个库<a href="https://github.com/liujingxing/RxLife">RxLife</a>，先来看看如何用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//以下代码均在FragmentActivty/Fragment中调用</span>
</span><span class='line'>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="c1">//页面销毁、自动关闭请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//或者</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="c1">//页面销毁、自动关闭请求 并且在主线程回调观察者</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//kotlin用户，请使用life或lifeOnMain方法，如下：</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">life</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="c1">//页面销毁、自动关闭请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//或者</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">lifeOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="c1">//页面销毁、自动关闭请求 并且在主线程回调观察者</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的<code>this</code>为<code>LifecycleOwner</code>接口对象，我们的FragmentActivity/Fragment均实现了这个接口，所有我们在FragmentActivity/Fragment中可以直接传<code>this</code>。
对<code>RxLife</code>不了解的同学请查看<a href="https://juejin.im/post/5cf3e1235188251c064815f1">RxLife 史上最优雅的管理RxJava生命周期</a>，这里不详细讲解。</p>

<p><strong>3.7.2、手动关闭请求</strong></p>

<p>手动关闭请求，我们只需要在订阅回调的时候拿到Disposable对象，通过该对象可以判断请求是否结束，如果没有，就可以关闭请求，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//订阅回调，可以拿到Disposable对象</span>
</span><span class='line'><span class="n">Disposable</span> <span class="n">disposable</span> <span class="o">=</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">disposable</span><span class="o">.</span><span class="na">isDisposed</span><span class="o">())</span> <span class="o">{</span>  <span class="c1">//判断请求有没有结束</span>
</span><span class='line'>    <span class="n">disposable</span><span class="o">.</span><span class="na">dispose</span><span class="o">();</span>       <span class="c1">//没有结束，则关闭请求</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.8、文件上传/下载/进度监听</h2>

<p>RxHttp可以非常优雅的实现上传/下载及进度的监听，是骡子是马，拉出来溜溜</p>

<p><strong>3.8.1上传</strong></p>

<p>通过addFile系列方法添加文件，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span> <span class="c1">//发送Form表单形式的Post请求  </span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/1.png&quot;</span><span class="o">))</span>  <span class="c1">//添加单个文件      </span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;fileList&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;())</span>   <span class="c1">//通过List对象，添加多个文件     </span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传成功                                     </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传失败                                     </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过asUpload系列方法监听上传进度，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span> <span class="c1">//发送Form表单形式的Post请求                                    </span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/1.png&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">addFile</span><span class="o">(</span><span class="s">&quot;file2&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;xxx/2.png&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asUpload</span><span class="o">(</span><span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传进度回调,0-100，仅在进度有更新时才会回调                                                  </span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100                   </span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已上传的字节大小                   </span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要上传的总字节大小                    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>   <span class="c1">//指定回调(进度/成功/失败)线程,不指定,默认在请求所在线程回调                                           </span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传成功                                                                       </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传失败                                                                       </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，跟上传的代码相比，我们仅仅是使用了<code>asUpload(Consumer, Scheduler)</code>方法替换<code>asString()</code>方法，第一个参数是进度监听接口，每当进度有更新时，都会回调该接口，第二个参数是指定回调的线程，这里我们指定了在UI线程中回调。</p>

<p><strong>3.8.2、下载</strong></p>

<p>下载使用<code>asDownload(String)</code>方法，传入本地路径即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">//文件存储路径</span>
</span><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">)</span> <span class="c1">//注意这里使用asDownload操作符，并传入本地路径</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载成功,回调文件下载路径</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.8.3、带进度下载</strong></p>

<p>带进度下载使用<code>asDownload(String,Consumer,Scheduler)</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">//文件存储路径</span>
</span><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">,</span> <span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载进度回调,0-100，仅在进度有更新时才会回调，最多回调101次，最后一次回调文件存储路径</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已下载的字节大小</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要下载的总字节大小</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span><span class="c1">//s为String类型，这里为文件存储路径</span>
</span><span class='line'>        <span class="c1">//下载完成，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.8.4、断点下载</strong></p>

<p><code>断点下载</code>相较于<code>下载</code>，仅需要调用<code>setRangeHeader(long startIndex, long endIndex)</code>方法传入开始及结束位置即可（结束位置不传默认为文件末尾），其它没有任何差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="s">&quot;Miaobo.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">destPath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span> <span class="c1">//已下载的文件长度</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setRangeHeader</span><span class="o">(</span><span class="n">length</span><span class="o">)</span>  <span class="c1">//设置开始下载位置，结束位置默认为文件末尾</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型</span>
</span><span class='line'>        <span class="c1">//下载成功，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.8.5、带进度断点下载</strong></p>

<p><code>带进度断点下载</code>相较于<code>带进度下载</code>仅需要调用<code>setRangeHeader</code>方法传入开始及结束位置即可（结束位置不传默认为文件末尾），其它没有任何差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="s">&quot;Miaobo.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">destPath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span> <span class="c1">//已下载的文件长度</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setRangeHeader</span><span class="o">(</span><span class="n">length</span><span class="o">)</span>  <span class="c1">//设置开始下载位置，结束位置默认为文件末尾</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">,</span> <span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载进度回调,0-100，仅在进度有更新时才会回调</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已下载的字节大小</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要下载的总字节大小</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型</span>
</span><span class='line'>        <span class="c1">//下载成功，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：</code>上面带进度断点下载中，返回的进度会从0开始，如果需要衔接上次下载的进度，则调用<code>asDownload(String,long,Consumer,Scheduler)</code>方法传入上次已经下载好的长度(第二个参数)，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">destPath</span> <span class="o">=</span> <span class="n">getExternalCacheDir</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="s">&quot;Miaobo.apk&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">destPath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span> <span class="c1">//已下载的文件长度</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://update.9158.com/miaolive/Miaolive.apk&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setRangeHeader</span><span class="o">(</span><span class="n">length</span><span class="o">)</span>  <span class="c1">//设置开始下载位置，结束位置默认为文件末尾</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asDownload</span><span class="o">(</span><span class="n">destPath</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">progress</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载进度回调,0-100，仅在进度有更新时才会回调</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">currentProgress</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span> <span class="c1">//当前进度 0-100</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getCurrentSize</span><span class="o">();</span> <span class="c1">//当前已下载的字节大小</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="n">progress</span><span class="o">.</span><span class="na">getTotalSize</span><span class="o">();</span>     <span class="c1">//要下载的总字节大小</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型</span>
</span><span class='line'>        <span class="c1">//下载成功，处理相关逻辑</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//下载失败，处理相关逻辑</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.9、超时设置</h2>

<p><strong>3.9.1、设置全局超时</strong></p>

<p>RxHttp内部默认的读、写、连接超时时间均为10s，如需修改，请自定义OkHttpClient对象，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//设置读、写、连接超时时间为15s</span>
</span><span class='line'><span class="n">OkHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">connectTimeout</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">readTimeout</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">writeTimeout</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">client</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.9.2、为单个请求设置超时</strong></p>

<p>为单个请求设置超时，使用的是RxJava的<code>timeout(long timeout, TimeUnit timeUnit)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">timeout</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span><span class="c1">//设置总超时时间为5s</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//感知生命周期，并在主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注：这里设置的总超时时间要小于全局读、写、连接超时时间之和，否则无效</strong></p>

<h2>3.10、设置Converter</h2>

<p><strong>3.10.1、设置全局Converter</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="n">FastJsonConverter</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setConverter</span><span class="o">(</span><span class="n">converter</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.10.2、为请求设置单独的Converter</strong></p>

<p>首先需要在任意public类中通过@Converter注解声明Converter，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RxHttpManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Converter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;XmlConverter&quot;</span><span class="o">)</span> <span class="c1">//指定Converter名称</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">IConverter</span> <span class="n">xmlConverter</span> <span class="o">=</span> <span class="n">XmlConverter</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，rebuild 一下项目，就在自动在RxHttp类中生成<code>setXmlConverter()</code>方法，随后就可以调用此方法为单个请求指定Converter，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setXmlConverter</span><span class="o">()</span>   <span class="c1">//指定使用XmlConverter，不指定，则使用全局的Converter</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">NewsDataXml</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//感知生命周期，并在主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">dataXml</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.11、请求加解密</h2>

<p><strong>3.11.1、加密</strong></p>

<p>请求加密，需要自定义Param，非常简单，详情请查看本文5.2章节&mdash;&mdash;自定义Param</p>

<p><strong>3.11.2、解密</strong></p>

<p>有些时候，请求会返回一大串的密文，此时就需要将密文转化为明文，直接来看代码，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//设置数据解密/解码器                                               </span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">setResultDecoder</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//每次请求成功，都会回调这里，并传入请求返回的密文   </span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="n">decode</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>   <span class="c1">//将密文解密成明文，解密逻辑自己实现</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">plaintext</span><span class="o">;</span>    <span class="c1">//返回明文                                   </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，通过<code>RxHttp.setResultDecoder(Function&lt;String, String&gt;)</code>静态方法，传入一个接口对象，此接口会在每次请求成功的时候被回调，并传入请求返回的密文，只需要将密文解密后返回即可。</p>

<p>然而，有些请求是不需求解密的，此时就可以调用<code>setDecoderEnabled(boolean)</code>方法，并传入false即可，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">setDecoderEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>  <span class="c1">//设置本次请求不需要解密，默认为true</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">pageList</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">(</span><span class="n">OnError</span><span class="o">)</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.12、指定请求/回调线程</h2>

<p>RxHttp默认在Io线程执行请求，也默认在Io线程回调，即默认在同一Io线程执行请求并回调，当然，我们也可以指定请求/回调所在线程。</p>

<p><strong>3.12.1、指定请求所在线程</strong></p>

<p>我们可以调用一些列subscribeXxx方法指定请求所在线程，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//指定请求所在线程，需要在第二部曲前任意位置调用，第二部曲后调用无效</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribeOnCurrent</span><span class="o">()</span> <span class="c1">//指定在当前线程执行请求，即同步执行，</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//其它subscribeXxx方法</span>
</span><span class='line'><span class="n">subscribeOnIo</span><span class="o">()</span>   <span class="c1">//RxHttp默认的请求线程</span>
</span><span class='line'><span class="n">subscribeOnSingle</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOnNewThread</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOnComputation</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOnTrampoline</span><span class="o">()</span>
</span><span class='line'><span class="n">subscribeOn</span><span class="o">(</span><span class="n">Scheduler</span><span class="o">)</span> <span class="c1">//自定义请求线程</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上使用的皆是RxJava的线程调度器，不熟悉的请自行查阅相关资料，这里不做详细介绍。</p>

<p><strong>3.12.2、指定回调所在线程</strong></p>

<p>指定回调所在线程，依然使用RxJava的线程调度器，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//指定回调所在线程，需要在第二部曲后调用</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span> <span class="c1">//指定在主线程回调</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//s为String类型，主线程回调</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.13、 Retrofit用户</h2>

<p>时常会有童鞋问我，我是Retrofit用户，喜欢把接口写在一个类里，然后可以直接调用，RxHttp如何实现？其实，这个问题压根就不是问题，在介绍第二部曲的时候，我们知道，使用asXxx方法后，就会返回<code>Observable&lt;T&gt;</code>对象，因此，我们就可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpWrapper</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;&gt;</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;page&quot;</span><span class="o">,</span> <span class="n">page</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//随后在其它地方就可以直接调用</span>
</span><span class='line'><span class="n">HttpWrapper</span><span class="o">.</span><span class="na">getStudent</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="n">RxLife</span><span class="o">.</span><span class="na">asOnMain</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>  <span class="c1">//主线程回调，并在页面销毁自动关闭请求(如果还未关闭的话)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">students</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="c1">//学生列表</span>
</span><span class='line'>        <span class="c1">//成功回调</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//失败回调</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，封装的时候返回<code>Observable&lt;T&gt;</code>对象即可。</p>

<p>还有的同学问，我们获取列表的接口，页码是和url拼接在一起的，Retrofit可以通过占位符，那RxHttp又如何实现？简单，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpWrapper</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//单个占位符</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/%d/...&quot;</span><span class="o">,</span> <span class="n">page</span><span class="o">)</span>  <span class="c1">//使用标准的占位符协议</span>
</span><span class='line'>            <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//多个占位符</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="nf">getStudent</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RxHttp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/%1$d/%2$d/...&quot;</span><span class="o">,</span> <span class="n">page</span><span class="o">,</span> <span class="n">count</span><span class="o">)</span>  <span class="c1">//使用标准的占位符协议</span>
</span><span class='line'>            <span class="o">.</span><span class="na">asObject</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一点跟Retrofit不同，Retrofit是通过注解指定占位符的，而RxHttp是使用标准的占位符，我们只需要在url中声明占位符，随后在传入url的后面，带上对应的参数即可。</p>

<h1>4、原理剖析</h1>

<h2>4.1、工作流程</h2>

<p>在RxHttp有4个重要的角色，分别是：</p>

<ul>
<li>Param：RxHttp类中所有添加的参数/请求头/文件都交由它处理，它最终目的就是为了构建一个Request对象</li>
<li>HttpSender ：它负责从Param对象中拿到Request对象，从而执行请求，最终返回Response对象</li>
<li>Parser：它负责将HttpSender返回的Response对象，解析成我们期望的实体类对象，也就是泛型T</li>
<li>RxHttp：它像一个管家，指挥前面3个角色做事情，当然，它也有自己的事情要做，比如：请求线程的调度，BaseUrl的处理、允许开发者自定义API等等</li>
</ul>


<p>为此，我画了一个流程图，可以直观的了解到RxHttp的大致工作流程
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_workflow.png" alt="在这里插入图片描述" /></p>

<p>我想应该很好理解，RxHttp要做的事情，就是把添加的参数/请求头等全部丢给Param处理，自己啥事也不敢；随后将Param交给HttpSender，让它去执行请求，执行完毕，返回Response对象；接着又将Response对象丢给Parser去做数据解析工作，并返回实体类对象T；最后，将T通过回调传给开发者，到此，一个请求就处理完成。</p>

<h2>4.2、Param</h2>

<p>首先，附上一张Param类的继承关系图
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_class_hierachy.png" alt="" />
下面将从上往下对上图中的类做个简单的介绍：</p>

<ul>
<li>IHeaders：接口类，里面定义了一系列addHeader方法</li>
<li>IParam：接口类，里面定义了add(String,Object)、addAll(Map)等方法，</li>
<li>IRequest：接口类，里面定义了一系列getXxx方法，通过这些方法最终构建一个Request对象</li>
<li>Param：接口类，是一个空接口，继承了前面3个接口，里面有一系列静态方法可以获取到Param的具体实现类</li>
<li>AbstractParam：Param接口的抽象实现类，实现了Param接口的所有方法</li>
<li>IFile：接口类，里面定义了一系列addFile方法</li>
<li>IUploadLengthLimit：接口类，里面就定义了一个checkLength()方法，用于限制文件上传大小</li>
<li>NoBodyParam：Param的具体实现类，Get、Head请求就是通过该类去实现的</li>
<li>JsonParam：Param的具体实现类，调用RxHttp.xxxJson(String)请求方法时，内部就是通过该类去实现的</li>
<li>JsonArrayParam：Param的具体实现类，调用RxHttp.xxxJsonArray(String)请求方法时，内部就是通过该类去实现的</li>
<li>FormParam：Param的具体实现类，同时又实现了IFile、IUploadLengthLimit两个接口，调用RxHttp.xxxForm(String)请求方法时，内部就是通过该类去实现的</li>
</ul>


<h2>4.3、HttpSender</h2>

<p>HttpSender可以把它理解为请求发送者，里面声明OkHttpClient对象和一系列静态方法，我们来简单看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">HttpSender</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">OkHttpClient</span> <span class="n">mOkHttpClient</span><span class="o">;</span> <span class="c1">//只能初始化一次,第二次将抛出异常</span>
</span><span class='line'>    <span class="c1">//处理化OkHttpClient对象</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">okHttpClient</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mOkHttpClient</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;OkHttpClient can only be initialized once&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mOkHttpClient</span> <span class="o">=</span> <span class="n">okHttpClient</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//通过Param对象同步执行一个请求</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Response</span> <span class="nf">execute</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">param</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Call</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">getOkHttpClient</span><span class="o">(),</span> <span class="n">param</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//所有的请求，最终都会调此方法拿到Call对象，然后执行请求</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Call</span> <span class="nf">newCall</span><span class="o">(</span><span class="n">OkHttpClient</span> <span class="n">client</span><span class="o">,</span> <span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">param</span> <span class="o">=</span> <span class="n">RxHttpPlugins</span><span class="o">.</span><span class="na">onParamAssembly</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">param</span> <span class="k">instanceof</span> <span class="n">IUploadLengthLimit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">((</span><span class="n">IUploadLengthLimit</span><span class="o">)</span> <span class="n">param</span><span class="o">).</span><span class="na">checkLength</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">param</span><span class="o">.</span><span class="na">buildRequest</span><span class="o">();</span>  <span class="c1">//通过Param拿到Request对象</span>
</span><span class='line'>        <span class="n">LogUtil</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">newCall</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们重点看下<code>newCall(OkHttpClient, Param)</code>方法，该方法第一行就是为Param添加公共参数；然后判断Param有没有实现IUploadLengthLimit接口，有的话，检查文件上传大小，超出大小，则抛出IO异常；接着就是通过Param拿到Request对象；最后拿到Call对象，就可以发送一个请求。</p>

<h2>4.4、Parser</h2>

<p>先看下Parser继承结构图
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_parser.png" alt="在这里插入图片描述" />
这里对上图中的类做个简单的介绍</p>

<ul>
<li>Parser：接口类，里面定义了一个<code>T onParse(Response)</code>方法，输入Response对象，输出实体类对象T</li>
<li>AbstractParser：抽象类，里面没有任何具体实现，主要作用是在构造方法内获取泛型类型</li>
<li>SimpleParser：是一个万能的解析器，可以解析任意数据结构，RxHttp内置的大部分asXxx方法，内部就是通过该解析器实现的</li>
<li>ListParser：是一个列表解析器，可以解析任意列表数据，内置<code>asList(Class&lt;T&gt;)</code>方法，就是通过该解析器实现的</li>
<li>MapParser：是一个Map解析器，可以解析任意Map数据类型，内置的asMap系列方法，就是通过该解析器实现的</li>
<li>BitmapParser：是一个Bitmap解析器，通过该解析器可以获得一个Bitmap对象，asBitmap()方法内部就是通过该解析器实现的</li>
<li>DownloadParser：文件下载解析器，用于文件下载，内置的一系列asDownload方法就是通过该解析器实现的</li>
</ul>


<h1>5、扩展</h1>

<h2>5.1、自定义Parser</h2>

<p>前面第二部曲中，我们介绍了一系列asXxx方法，通过该系列方法可以很方便的指定数据返回类型，特别是自定义的<code>asResponse(Class&lt;T&gt;)</code>、<code>asResponseList(Class&lt;T&gt;)</code>、<code>asResponsePageList(Class&lt;T&gt;)</code>这3个方法，将<code>Reponse&lt;T&gt;</code>类型数据，处理的简直不要太完美，下面我们就来看看如何自定义Parser。</p>

<p>源码永远是最好的学习方式，在学习自定义Parser前，我们不妨先看看内置的Parser是如何实现的</p>

<p><strong>SimPleParser</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，SimpleParser除了构造方法，就剩一个onParser方法，该方法是在Parser接口中定义的，再来看看具体的实现<code>convert(Response, Type)</code>，这个方法也是在Parser接口中定义的，并且有默认的实现，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Parser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//输入Response 输出T</span>
</span><span class='line'>    <span class="n">T</span> <span class="nf">onParse</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//对Http返回的结果，转换成我们期望的实体类对象</span>
</span><span class='line'>    <span class="k">default</span> <span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">R</span> <span class="n">convert</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">,</span> <span class="n">Type</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ResponseBody</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ExceptionHelper</span><span class="o">.</span><span class="na">throwIfFatal</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>  <span class="c1">//这里内部会判断code&lt;200||code&gt;=300 时，抛出异常</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">onResultDecoder</span> <span class="o">=</span> <span class="n">isOnResultDecoder</span><span class="o">(</span><span class="n">response</span><span class="o">);</span> <span class="c1">//是否需要对返回的数据进行解密</span>
</span><span class='line'>        <span class="n">LogUtil</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">onResultDecoder</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="n">getConverter</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>        <span class="c1">//取出转换器</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">converter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">body</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">onResultDecoder</span><span class="o">);</span> <span class="c1">//对数据进场转换</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//省略若干方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，非常的简单，输入Response对象和泛型类型Type，内部就通过IConverter接口转换为我们期望的实体类对象并返回。</p>

<p>到这，我想大家应该就多少有点明白了，自定义Parser，无非就是继承AbstractParser，然后实现onParser方法即可，那我们来验证一下，我们来看看内置ListParser是不是这样实现的，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//拿到泛型类型</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，跟SimpleParser解析器几乎是一样的实现，不同是的，这里将我们输入的泛型T与List组拼为一个新的泛型类型，最终返回<code>List&lt;T&gt;</code>对象。</p>

<p>现在，我们就可以来自定义Parser了，先来自定义ResponseParser，用来处理<code>Response&lt;T&gt;</code>数据类型，先看看数据结构:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span>    <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">T</span>      <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//这里省略get、set方法</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自定义ResponseParser代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//通过@Parser注解，为解析器取别名为Response，此时就会在RxHttp类生成asResponse(Class&lt;T&gt;)方法</span>
</span><span class='line'><span class="nd">@Parser</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Response&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">okhttp3</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//获取泛型类型</span>
</span><span class='line'>        <span class="n">Response</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">t</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span> <span class="c1">//获取data字段</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">t</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span><span class="c1">//这里假设code不等于0，代表数据不正确，抛出异常</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ParseException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()),</span> <span class="n">data</span><span class="o">.</span><span class="na">getMsg</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，非常的简单，首先将我们输入泛型和自定义的<code>Response&lt;T&gt;</code>类组拼成新的泛型类型，随后通过<code>convert(Response, Type)</code>方法得到<code>Response&lt;T&gt;</code>对象，接着又对code及T做了判断，如果不正确就抛出异常，最后返回T。</p>

<p>估计这里有人会问，我怎么用这个解析器呢？相信不少小伙伴以及发现了，我们在ResponseParser类名上面用了<code>@Parser</code>注解，只要用了该注解，就会在RxHttp自动生成<code>asXxx(Class&lt;T&gt;)</code>方法，其中Xxx就是我们在<code>@Parser</code>注解中为解析器取的别名，这里取别名为Response，所以便会在RxHttp类中自动生成<code>asResponse(Class&lt;T&gt;)</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">asResponse</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">asParser</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseParser</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，该方法内部又调用了<code>asParser(Parser&lt;T&gt;)</code>方法，并传入了ResponseParser，因此，我们有两种方式使用自定义的ResponseParser，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//第一种方式，使用@parser注解生成的asResponse方法</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asResponse</span><span class="o">(</span><span class="n">Student</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第二种方式，直接使用asParser(Parser&lt;T&gt;)方法</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>   <span class="c1">//发送post表单请求</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asParser</span><span class="o">(</span><span class="k">new</span> <span class="n">ResponseParser</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;(){})</span>    <span class="c1">//返回Student类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">student</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功，这里能拿到 Student对象               </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上两种方式，除了写法上的区别，其它都一样，用哪种，看个人喜好，但还是建议使用第一种方式，不仅写法简单，也降低了耦合。</p>

<p>这里最后再贴上ResponseListParser、ResponsePageListParser的源码，原理都是一样的，代码实现也差不多，就不再详解
<strong>ResponseListParser</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Parser</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ResponseList&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseListParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">okhttp3</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">List</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//获取泛型类型</span>
</span><span class='line'>        <span class="n">Response</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span> <span class="c1">//获取data字段</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">list</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">//code不等于0，说明数据不正确，抛出异常</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ParseException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()),</span> <span class="n">data</span><span class="o">.</span><span class="na">getMsg</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>ResponsePageListParser</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Parser</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ResponsePageList&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponsePageListParser</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractParser</span><span class="o">&lt;</span><span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//省略构造方法</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">onParse</span><span class="o">(</span><span class="n">okhttp3</span><span class="o">.</span><span class="na">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">ParameterizedTypeImpl</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">PageList</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mType</span><span class="o">);</span> <span class="c1">//获取泛型类型</span>
</span><span class='line'>        <span class="n">Response</span><span class="o">&lt;</span><span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">PageList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pageList</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span> <span class="c1">//获取data字段</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pageList</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">//code不等于0，说明数据不正确，抛出异常</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ParseException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getCode</span><span class="o">()),</span> <span class="n">data</span><span class="o">.</span><span class="na">getMsg</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">pageList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5.2、自定义Param</h2>

<p>自定义Param，想较于自定义Parser，要更加的简单，我们只需根据自己的需求，继承NoBodyParam、FormParam、JsonParam等，增加或者重写方法即可，比如我们有以下3种情况，需要自定义Param，如下：</p>

<ul>
<li>postForm请求，需要将所有添加的参数，拼接在一起，随后加密，最后将加密的字符串添加到请求头中</li>
<li>postJson请求，需要将所有的参数，也就是json字符串加密后再发送出去</li>
<li>FormParam里面的API不够用，我要自定义API</li>
</ul>


<h4>5.2.1、postForm请求加密</h4>

<p>这种情况，我们需要继承FormParam，并重写getRequestBody()方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Param</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;postEncryptForm&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostEncryptFormParam</span> <span class="kd">extends</span> <span class="n">FormParam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PostEncryptFormParam</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>  <span class="c1">//Method.POST代表post请求</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">RequestBody</span> <span class="nf">getRequestBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里拿到你添加的所有参数</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">KeyValuePair</span><span class="o">&gt;</span> <span class="n">keyValuePairs</span> <span class="o">=</span> <span class="n">getKeyValuePairs</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">encryptStr</span> <span class="o">=</span> <span class="s">&quot;加密后的字符串&quot;</span><span class="o">;</span>  <span class="c1">//根据上面拿到的参数，自行实现加密逻辑</span>
</span><span class='line'>        <span class="n">addHeader</span><span class="o">(</span><span class="s">&quot;encryptStr&quot;</span><span class="o">,</span> <span class="n">encryptStr</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getRequestBody</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2.2、postJson请求加密</h4>

<p>这种情况，我们需要继承JsonParam，也重写getRequestBody()方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Param</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;postEncryptJson&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostEncryptJsonParam</span> <span class="kd">extends</span> <span class="n">JsonParam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PostEncryptFormParam</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">RequestBody</span> <span class="nf">getRequestBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里拿到你添加的所有参数</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">getParams</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">encryptStr</span> <span class="o">=</span> <span class="s">&quot;加密后的字符串&quot;</span><span class="o">;</span>  <span class="c1">//根据上面拿到的参数，自行实现解密逻辑</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RequestBody</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">MEDIA_TYPE_JSON</span><span class="o">,</span> <span class="n">encryptStr</span><span class="o">);</span>  <span class="c1">//发送加密后的字符串</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2.3、自定义API</h4>

<p>我们继承FormParam，并新增两个test方法`，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Param</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;postTestForm&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostTestFormParam</span> <span class="kd">extends</span> <span class="n">FormParam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PostEncryptFormParam</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PostEncryptFormParam</span> <span class="nf">test</span><span class="o">(</span><span class="kt">long</span> <span class="n">a</span><span class="o">,</span> <span class="kt">float</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里的业务逻辑自行实现</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PostEncryptFormParam</span> <span class="nf">test1</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//这里的业务逻辑自行实现</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.2.4、使用自定义的Param</h4>

<p>同样的问题，我们怎么用这3个自定义的Param呢？我想大多数人在类名前发现类<code>@Param</code>注解，并为Param取了别名。那这个又有什么作用呢？
答案揭晓，只要在自定的Param上使用了<code>@Param</code>注解，并取了别名，就会在RxHttp类自动生成一个跟别名一样的方法，在上面我们自定义了3个Param，并分别取别名为postEncryptForm、postEncryptJson、postTestForm，此时就会在RxHttp类中生成<code>postEncryptForm(String)</code>、<code>postEncryptJsonString)</code>、<code>postTestForm(String)</code>这3个方法，我们在RxHttp这个类中来看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RxHttp$PostEncryptFormParam</span> <span class="n">postEncryptForm</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RxHttp$PostEncryptFormParam</span><span class="o">(</span><span class="k">new</span> <span class="n">PostEncryptFormParam</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RxHttp$PostEncryptJsonParam</span> <span class="n">postEncryptJson</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RxHttp$PostEncryptJsonParam</span><span class="o">(</span><span class="k">new</span> <span class="n">PostEncryptJsonParam</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RxHttp$PostTestFormParam</span> <span class="n">postTestForm</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RxHttp$PostTestFormParam</span><span class="o">(</span><span class="k">new</span> <span class="n">PostTestFormParam</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发请求时，只需要调用对应的方法就好，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送加密的postForm请求</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postEncryptForm</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回String类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//发送加密的postJson请求</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postEncryptJson</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>          <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回String类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>那我自定义的API如何调用呢，so easy!!!!，选择对应的请求方法后，就可以直接调用，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送加密的postJson请求</span>
</span><span class='line'><span class="n">RxHttp</span><span class="o">.</span><span class="na">postTestJson</span><span class="o">(</span><span class="s">&quot;/service/...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="mi">100L</span><span class="o">,</span> <span class="mf">99.99</span><span class="n">F</span><span class="o">)</span>          <span class="c1">//调用自定义的API</span>
</span><span class='line'>    <span class="o">.</span><span class="na">test1</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">,</span> <span class="mf">88.88</span><span class="n">D</span><span class="o">)</span>    <span class="c1">//调用自定义的API</span>
</span><span class='line'>    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">)</span>         <span class="c1">//添加参数，可调用多次</span>
</span><span class='line'>    <span class="o">.</span><span class="na">asString</span><span class="o">()</span>                  <span class="c1">//返回String类型</span>
</span><span class='line'>    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求成功    </span>
</span><span class='line'>    <span class="o">},</span> <span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//请求失败                </span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5.3、自定义Converter</h2>

<p>RxHttp内部默认使用来GsonConverter，并且额外提供了4个Converter，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//非必须 根据自己需求选择Converter  RxHttp默认内置了GsonConverter</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">jackson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">fastjson:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">protobuf:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rxjava</span><span class="o">.</span><span class="na">rxhttp</span><span class="o">:</span><span class="n">converter</span><span class="o">-</span><span class="nl">simplexml:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.3.1、自定义TestConverter</h4>

<p>即使这样，RxHttp也无法保证满足所有的业务需求，为此，我们可以选择自定义Converter，自定义Converter需要继承IConverter接口，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestConverter</span> <span class="kd">implements</span> <span class="n">IConverter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 请求成功后会被回调</span>
</span><span class='line'><span class="cm">     * @param body             ResponseBody</span>
</span><span class='line'><span class="cm">     * @param type             泛型类型</span>
</span><span class='line'><span class="cm">     * @param onResultDecoder  是否需要对结果进行解码/解密</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">convert</span><span class="o">(</span><span class="n">ResponseBody</span> <span class="n">body</span><span class="o">,</span> <span class="n">Type</span> <span class="n">type</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">onResultDecoder</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//自行实现相关逻辑</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * json请求前会被回调，需要自行根据泛型T创建RequestBody对象，并返回</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">RequestBody</span> <span class="n">convert</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//自行实现相关逻辑</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上两个convert方法根据自身业务需求自行实现，可以参考RxHttp提供FastJsonConverter、SimpleXmlConverter等Converter</p>

<h4>5.3.2、怎么用Converter</h4>

<p>请查看本文3.10章节&mdash;&mdash;设置Converter</p>

<h1>6、小技巧</h1>

<p>在这教大家一个小技巧，由于使用RxHttp发送请求都遵循请求三部曲，故我们可以在android studio 设置代码模版,如下<img src="https://asset.droidyue.com/image/2019_12/rxhttp_android_studio.png" alt="在这里插入图片描述" />
如图设置好后，写代码时，输入rp,就会自动生成模版，如下：
<img src="https://asset.droidyue.com/image/2019_12/rxhttp_coding.gif" alt="在这里插入图片描述" /></p>

<h1>7、小结</h1>

<p>到这，RxHttp常用功能介绍完毕，你会发现，一切都是那么的美好，无论你是get、post、加密请求、自定义解析器，还是文件上传/下载/进度监听等等，皆遵循请求三部曲。特别是对<code>Response&lt;T&gt;</code>类型数据处理，可以说是天衣无缝，我们无需每次都判断code，直接就可以拿到T，简直了。。。</p>

<p>最后，喜欢的，请给本文点个赞，如果可以，还请给个<a href="https://github.com/liujingxing/RxHttp">star</a>，创作不易，感激不尽。🙏🙏🙏</p>
]]></content>
  </entry>
  
</feed>
