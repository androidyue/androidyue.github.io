<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="http://droidyue.com/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2016-03-06T19:53:47+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android签名相关知识整理]]></title>
    <link href="http://droidyue.com/blog/2016/03/06/summary-of-android-signing/"/>
    <updated>2016-03-06T16:17:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/03/06/summary-of-android-signing</id>
    <content type="html"><![CDATA[<p>不止一次有用到Android签名相关的知识，每次都几乎从零开始在Google上搜索找，不想在继续这样了，找了个时间好好整理了一下自己用到的一些碎片知识，于是乎放到这里，一是备忘，二是帮助别人。</p>

<!--more-->


<h2>从APK文件中获取签名信息</h2>

<h3>使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">keytool</span> <span class="o">-</span><span class="n">list</span> <span class="o">-</span><span class="n">printcert</span> <span class="o">-</span><span class="n">jarfile</span> <span class="n">your_apk_file</span>
</span></code></pre></td></tr></table></div></figure>


<h3>输出信息</h3>

<ul>
<li>签名Owner,Issuer等信息</li>
<li>签名的fingerprints,如md5及sha1等值</li>
<li>签名有效期等信息</li>
</ul>


<h3>示例效果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">16</span><span class="o">:</span><span class="mi">29</span> <span class="n">$</span> <span class="n">keytool</span> <span class="o">-</span><span class="n">list</span> <span class="o">-</span><span class="n">printcert</span> <span class="o">-</span><span class="n">jarfile</span> <span class="n">akoi_1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">apk</span>
</span><span class='line'><span class="n">Signer</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Signature:</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Owner:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="nl">Issuer:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="n">Serial</span> <span class="nl">number:</span> <span class="mi">11</span><span class="n">a8a4a3</span>
</span><span class='line'><span class="n">Valid</span> <span class="nl">from:</span> <span class="n">Tue</span> <span class="n">Feb</span> <span class="mi">10</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">2015</span> <span class="nl">until:</span> <span class="n">Sun</span> <span class="n">Jun</span> <span class="mi">13</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">3013</span>
</span><span class='line'><span class="n">Certificate</span> <span class="nl">fingerprints:</span>
</span><span class='line'>   <span class="nl">MD5:</span>  <span class="mi">46</span><span class="o">:</span><span class="nl">C5:BE:EF:B5:C9:</span><span class="mi">00</span><span class="o">:</span><span class="nl">E1:FA:</span><span class="mi">42</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">57</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="nl">CA:</span><span class="mi">15</span>
</span><span class='line'>   <span class="nl">SHA1:</span> <span class="nl">C1:</span><span class="mi">14</span><span class="o">:</span><span class="mi">5</span><span class="nl">D:</span><span class="mi">0</span><span class="nl">A:C2:BF:F6:</span><span class="mi">06</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="nl">AE:</span><span class="mi">2</span><span class="nl">C:</span><span class="mi">07</span><span class="o">:</span><span class="mi">12</span><span class="o">:</span><span class="mi">97</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="nl">C2:</span><span class="mi">1</span><span class="nl">B:</span><span class="mi">39</span><span class="o">:</span><span class="n">D1</span>
</span><span class='line'>   <span class="nl">SHA256:</span> <span class="mi">0</span><span class="nl">E:</span><span class="mi">88</span><span class="o">:</span><span class="mi">7</span><span class="nl">D:C2:</span><span class="mi">4</span><span class="nl">C:D6:</span><span class="mi">84</span><span class="o">:</span><span class="nl">A7:</span><span class="mi">58</span><span class="o">:</span><span class="nl">D4:</span><span class="mi">24</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:</span><span class="mi">9</span><span class="nl">D:</span><span class="mi">38</span><span class="o">:</span><span class="nl">F9:</span><span class="mi">05</span><span class="o">:</span><span class="mi">98</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:B2:A2:D7:CB:</span><span class="mi">0</span><span class="nl">F:</span><span class="mi">81</span><span class="o">:</span><span class="mi">74</span><span class="o">:</span><span class="mi">60</span><span class="o">:</span><span class="mi">5</span><span class="nl">B:</span><span class="mi">38</span><span class="o">:</span><span class="mi">89</span><span class="o">:</span><span class="nl">FF:</span><span class="mi">21</span><span class="o">:</span><span class="mi">1</span><span class="n">C</span>
</span><span class='line'>   <span class="n">Signature</span> <span class="n">algorithm</span> <span class="nl">name:</span> <span class="n">SHA256withRSA</span>
</span><span class='line'>   <span class="nl">Version:</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>从签名文件中获取签名信息</h2>

<h3>使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">keytool</span> <span class="o">-</span><span class="n">list</span> <span class="o">-</span><span class="n">v</span> <span class="o">-</span><span class="n">keystore</span> <span class="n">your_kestore_file</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，上述命令执行后，会提示输入密码，其实输入错误也没有关系，不影响结果。</p>

<h3>输出信息</h3>

<ul>
<li>签名Owner,Issuer等信息</li>
<li>签名的fingerprints,如md5及sha1等值</li>
<li>签名有效期等信息</li>
</ul>


<h3>示例效果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Keystore</span> <span class="nl">type:</span> <span class="n">JKS</span>
</span><span class='line'><span class="n">Keystore</span> <span class="nl">provider:</span> <span class="n">SUN</span>
</span><span class='line'>
</span><span class='line'><span class="n">Your</span> <span class="n">keystore</span> <span class="n">contains</span> <span class="mi">1</span> <span class="n">entry</span>
</span><span class='line'>
</span><span class='line'><span class="n">Alias</span> <span class="nl">name:</span> <span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span><span class='line'><span class="n">Creation</span> <span class="nl">date:</span> <span class="n">Feb</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">2015</span>
</span><span class='line'><span class="n">Entry</span> <span class="nl">type:</span> <span class="n">PrivateKeyEntry</span>
</span><span class='line'><span class="n">Certificate</span> <span class="n">chain</span> <span class="nl">length:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Certificate</span><span class="o">[</span><span class="mi">1</span><span class="o">]:</span>
</span><span class='line'><span class="nl">Owner:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="nl">Issuer:</span> <span class="n">CN</span><span class="o">=</span><span class="n">Andrew</span> <span class="n">Wallace</span><span class="o">,</span> <span class="n">OU</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">O</span><span class="o">=</span><span class="n">droidyue</span><span class="o">.</span><span class="na">com</span><span class="o">,</span> <span class="n">L</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">ST</span><span class="o">=</span><span class="n">Beijing</span><span class="o">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">86</span>
</span><span class='line'><span class="n">Serial</span> <span class="nl">number:</span> <span class="mi">11</span><span class="n">a8a4a3</span>
</span><span class='line'><span class="n">Valid</span> <span class="nl">from:</span> <span class="n">Tue</span> <span class="n">Feb</span> <span class="mi">10</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">2015</span> <span class="nl">until:</span> <span class="n">Sun</span> <span class="n">Jun</span> <span class="mi">13</span> <span class="mi">18</span><span class="o">:</span><span class="mi">07</span><span class="o">:</span><span class="mi">43</span> <span class="n">CST</span> <span class="mi">3013</span>
</span><span class='line'><span class="n">Certificate</span> <span class="nl">fingerprints:</span>
</span><span class='line'>   <span class="nl">MD5:</span>  <span class="mi">46</span><span class="o">:</span><span class="nl">C5:BE:EF:B5:C9:</span><span class="mi">00</span><span class="o">:</span><span class="nl">E1:FA:</span><span class="mi">42</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">57</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="nl">CA:</span><span class="mi">15</span>
</span><span class='line'>   <span class="nl">SHA1:</span> <span class="nl">C1:</span><span class="mi">14</span><span class="o">:</span><span class="mi">5</span><span class="nl">D:</span><span class="mi">0</span><span class="nl">A:C2:BF:F6:</span><span class="mi">06</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="nl">AE:</span><span class="mi">2</span><span class="nl">C:</span><span class="mi">07</span><span class="o">:</span><span class="mi">12</span><span class="o">:</span><span class="mi">97</span><span class="o">:</span><span class="mi">58</span><span class="o">:</span><span class="nl">C2:</span><span class="mi">1</span><span class="nl">B:</span><span class="mi">39</span><span class="o">:</span><span class="n">D1</span>
</span><span class='line'>   <span class="nl">SHA256:</span> <span class="mi">0</span><span class="nl">E:</span><span class="mi">88</span><span class="o">:</span><span class="mi">7</span><span class="nl">D:C2:</span><span class="mi">4</span><span class="nl">C:D6:</span><span class="mi">84</span><span class="o">:</span><span class="nl">A7:</span><span class="mi">58</span><span class="o">:</span><span class="nl">D4:</span><span class="mi">24</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:</span><span class="mi">9</span><span class="nl">D:</span><span class="mi">38</span><span class="o">:</span><span class="nl">F9:</span><span class="mi">05</span><span class="o">:</span><span class="mi">98</span><span class="o">:</span><span class="mi">1</span><span class="nl">E:B2:A2:D7:CB:</span><span class="mi">0</span><span class="nl">F:</span><span class="mi">81</span><span class="o">:</span><span class="mi">74</span><span class="o">:</span><span class="mi">60</span><span class="o">:</span><span class="mi">5</span><span class="nl">B:</span><span class="mi">38</span><span class="o">:</span><span class="mi">89</span><span class="o">:</span><span class="nl">FF:</span><span class="mi">21</span><span class="o">:</span><span class="mi">1</span><span class="n">C</span>
</span><span class='line'>   <span class="n">Signature</span> <span class="n">algorithm</span> <span class="nl">name:</span> <span class="n">SHA256withRSA</span>
</span><span class='line'>   <span class="nl">Version:</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>重新签名APK</h2>

<p>在没有源码情况下，我们就能对apk进行更换签名。</p>

<h3>脚本</h3>

<ul>
<li><a href="https://apk-resigner.googlecode.com/svn/trunk/signapk.sh">signapk.sh</a></li>
<li><a href="http://7jpqsg.com1.z0.glb.clouddn.com/signapk.sh">备用地址</a></li>
</ul>


<h3>使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">bash</span> <span class="n">signapk</span><span class="o">.</span><span class="na">sh</span> <span class="n">your_apk_file</span> <span class="n">your_keystore_file</span> <span class="n">keystore_pass</span> <span class="n">keystore_alias</span>
</span></code></pre></td></tr></table></div></figure>


<h3>示例效果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">16</span><span class="o">:</span><span class="mi">57</span> <span class="n">$</span> <span class="n">bash</span> <span class="n">signapk</span><span class="o">.</span><span class="na">sh</span> <span class="n">weixin6313android740</span><span class="o">.</span><span class="na">apk</span> <span class="o">~/</span><span class="n">Documents</span><span class="o">/</span><span class="n">baidu_disk</span><span class="o">/</span><span class="err">百度云同步盘</span><span class="o">/</span><span class="n">droidapp</span><span class="o">/</span><span class="n">mykiki</span> <span class="mi">123456</span> <span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span><span class='line'><span class="n">param1</span> <span class="n">weixin6313android740</span><span class="o">.</span><span class="na">apk</span>
</span><span class='line'><span class="n">param2</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">androidyue</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">droidapp</span><span class="o">/</span><span class="n">mykiki</span>
</span><span class='line'><span class="n">param3</span> <span class="mi">123456</span>
</span><span class='line'><span class="n">param4</span> <span class="n">droidyue</span><span class="o">.</span><span class="na">com</span>
</span><span class='line'><span class="nl">deleting:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">MANIFEST</span><span class="o">.</span><span class="na">MF</span>
</span><span class='line'><span class="nl">deleting:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">SF</span>
</span><span class='line'><span class="nl">deleting:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">RSA</span>
</span><span class='line'>   <span class="nl">adding:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">MANIFEST</span><span class="o">.</span><span class="na">MF</span>
</span><span class='line'>   <span class="nl">adding:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">SF</span>
</span><span class='line'>   <span class="nl">adding:</span> <span class="n">META</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">DROIDYUE</span><span class="o">.</span><span class="na">RSA</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="n">Verification</span> <span class="n">succesful</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的文件会放在当前目录，其文件名相对输入文件，增加了<code>signed_</code>前缀，比如对<code>weixin6313android740.apk</code>进行上述操作得到的输出文件是<code>signed_weixin6313android740.apk</code></p>

<h2>Gradle build生成签名APK</h2>

<p>想要在执行gradle build时生成指定签名的apk，需要在build.gradle中如下修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">signingConfigs</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;myrelease.keystore&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">storePassword</span> <span class="s">&quot;********&quot;</span>
</span><span class='line'>            <span class="n">keyAlias</span> <span class="s">&quot;******&quot;</span>
</span><span class='line'>            <span class="n">keyPassword</span> <span class="s">&quot;******&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="o">.</span><span class="na">release</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简易小工具，七牛Uploader for Octopress]]></title>
    <link href="http://droidyue.com/blog/2016/02/28/an-easy-tool-to-upload-file-to-qiniu-especially-for-octopress/"/>
    <updated>2016-02-28T17:15:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/02/28/an-easy-tool-to-upload-file-to-qiniu-especially-for-octopress</id>
    <content type="html"><![CDATA[<p>春节假期，带着电脑回家，蹭着邻居的网，除夕晚上用ruby写了一个简单的工具。安利一下，广而告之。</p>

<!--more-->


<h2>为什么写这个应用</h2>

<h3>为什么用七牛</h3>

<p>七牛是我比较看好的一个云存储，其国内国外有很多cdn，如果我把我的网站放到七牛上，打开速度应该会显著提升。</p>

<h3>为什么还自己写</h3>

<ul>
<li>七牛官方的qrsync不支持例外目录，会上传.git文件夹下的内容</li>
<li>七牛的qrsync更新策略不符合我的需求</li>
<li>自己有时间和能力</li>
</ul>


<h2>功能描述</h2>

<ul>
<li>暂时只支持对文件的上传和更新，不含删除和下载功能</li>
<li>尤其适合于Octopress网站</li>
</ul>


<h2>使用</h2>

<h3>创建授权信息文件</h3>

<p>从七牛后台 账号&mdash;>秘钥 中获取AccessKey和SecretKey分别填入下面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[auth]
</span><span class='line'>access_key = ""
</span><span class='line'>secret_key = ""</span></code></pre></td></tr></table></div></figure>


<p>将上述内容保存成文件<code>.qiniu.ini</code> 放在同步脚本的祖先目录上即可，也可以放在家目录。</p>

<p>举个例子，比如你的同步脚本放在<code>~/tools/notes/sync_dir/</code>下，你的配置文件，可以放在<code>~/</code>,<code>~/tools/</code>以及<code>~/tools/notes/</code>。</p>

<p>注意，不要将上述文件放同步脚本目录，以免信息泄露。</p>

<h3>同步</h3>

<p>使用方法如下，很简单，需要传入同步文件夹路径和bucket名称</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ruby</span> <span class="n">push2Qiniu</span><span class="o">.</span><span class="na">rb</span> <span class="n">dir_to_sync</span> <span class="n">bucket</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实现原理</h2>

<p>实现原理很简单，基本如下</p>

<ul>
<li>新文件 直接上传</li>
<li>已存在的文件，如果lastModified没有变化，不上传</li>
<li>已存在的文件，如果lastModified有变化，检测文件内容md5，如果和上一次不同，则上传，否则不上传。</li>
</ul>


<h2>和Octopress集成</h2>

<p>修改Octopress的Rakefile文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Default deploy task&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Check if preview posts exist, which should not be published</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;.preview-mode&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;## Found posts in preview mode, regenerating files ...&quot;</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;.preview-mode&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="ss">:generate</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="ss">:copydot</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">source_dir</span><span class="p">,</span> <span class="n">public_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="n">atom2rssDir</span> <span class="o">=</span> <span class="s1">&#39;~/osc_git/php_works/&#39;</span>
</span><span class='line'>  <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_default</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="sr">//</span><span class="err">在这里加入同步脚本执行</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>源码</h2>

<ul>
<li><a href="https://github.com/androidyue/Qiniu_Uploader">Qiniu_Uploader</a></li>
</ul>


<h2>使用七牛</h2>

<p>下面的是七牛的一位员工的QQ二维码，想要使用七牛（每月免费10G流量）并得到更多优惠，请联系她，注明来自技术小黑屋。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/qiniu_tina.jpg" alt="http://7jpolu.com1.z0.glb.clouddn.com/qiniu_tina.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于获取当前Activity的一些思考]]></title>
    <link href="http://droidyue.com/blog/2016/02/21/thinking-of-getting-the-current-activity-in-android/"/>
    <updated>2016-02-21T20:53:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/02/21/thinking-of-getting-the-current-activity-in-android</id>
    <content type="html"><![CDATA[<p>在Android开发过程中，我们有时候需要获取当前的Activity实例，比如弹出Dialog操作，必须要用到这个。关于如何实现由很多种思路，这其中有的简单，有的复杂，这里简单总结一下个人的一些经验吧。</p>

<!--more-->


<h2>反射</h2>

<p>反射是我们经常会想到的方法，思路大概为</p>

<p>  1 获取ActivityThread中所有的ActivityRecord <br/>
  2 从ActivityRecord中获取状态不是<code>pause</code>的Activity并返回</p>

<p>一个使用反射来实现的代码大致如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Activity</span> <span class="nf">getActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">activityThreadClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">activityThreadClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;android.app.ActivityThread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">activityThread</span> <span class="o">=</span> <span class="n">activityThreadClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;currentActivityThread&quot;</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Field</span> <span class="n">activitiesField</span> <span class="o">=</span> <span class="n">activityThreadClass</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;mActivities&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">activitiesField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Map</span> <span class="n">activities</span> <span class="o">=</span> <span class="o">(</span><span class="n">Map</span><span class="o">)</span> <span class="n">activitiesField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">activityThread</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">activityRecord</span> <span class="o">:</span> <span class="n">activities</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Class</span> <span class="n">activityRecordClass</span> <span class="o">=</span> <span class="n">activityRecord</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Field</span> <span class="n">pausedField</span> <span class="o">=</span> <span class="n">activityRecordClass</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;paused&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pausedField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">pausedField</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="n">activityRecord</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Field</span> <span class="n">activityField</span> <span class="o">=</span> <span class="n">activityRecordClass</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;activity&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">activityField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Activity</span> <span class="n">activity</span> <span class="o">=</span> <span class="o">(</span><span class="n">Activity</span><span class="o">)</span> <span class="n">activityField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">activityRecord</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">activity</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchFieldException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而这种方法并不是很推荐，主要是有以下的不足：</p>

<ul>
<li>反射通常会比较慢</li>
<li>不稳定性，这个才是不推荐的原因，Android框架代码存在修改的可能性，谁要无法100%保证<code>mActivities</code>，<code>paused</code>固定不变。所以可靠性不是完全可靠。</li>
</ul>


<h2>Activity基类</h2>

<p>既然反射不是很可靠，那么有一种比较可靠的方式，就是使用Activity基类。</p>

<p>在Activity的<code>onResume</code>方法中，将当前的Activity实例保存到一个变量中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseActivity</span> <span class="kd">extends</span> <span class="n">Activity</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="n">MyActivityManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">setCurrentActivity</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而，这一种方法也不仅完美，因为这种方法是基于约定的，所以必须每个Activity都继承BaseActivity，如果一旦出现没有继承BaseActivity的就可能有问题。</p>

<h2>回调方法</h2>

<p>介绍了上面两种不是尽善尽美的方法，这里实际上还是有一种更便捷的方法，那就是通过Framework提供的回调来实现。</p>

<p>Android自 API 14开始引入了一个方法，即Application的<code>registerActivityLifecycleCallbacks</code>方法，用来监听所有Activity的生命周期回调，比如<code>onActivityCreated</code>,<code>onActivityResumed</code>等。</p>

<p>So，一个简单的实现如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">registerActivityLifecycleCallbacks</span><span class="o">(</span><span class="k">new</span> <span class="n">ActivityLifecycleCallbacks</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityCreated</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityStarted</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityResumed</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">MyActivityManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">setCurrentActivity</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityPaused</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityStopped</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivitySaveInstanceState</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">outState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityDestroyed</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而，金无足赤人无完人，这种方法唯一的遗憾就是只支持API 14即其以上。不过还在现在大多数设备都满足了这个要求。</p>

<h3>为什么是弱引用</h3>

<p>可能有人会带着疑问看到这里，MyActivityManager是个什么鬼，好，我们现在看一下这个类的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivityManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MyActivityManager</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyActivityManager</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;</span> <span class="n">sCurrentActivityWeakRef</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">MyActivityManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">MyActivityManager</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Activity</span> <span class="nf">getCurrentActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Activity</span> <span class="n">currentActivity</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sCurrentActivityWeakRef</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentActivity</span> <span class="o">=</span> <span class="n">sCurrentActivityWeakRef</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">currentActivity</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCurrentActivity</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sCurrentActivityWeakRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;(</span><span class="n">activity</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类，实现了当前Activity的设置和获取。</p>

<p>那么为什么要使用弱引用持有Activity实例呢？</p>

<p>其实最主要的目的就是避免内存泄露，因为使用默认的强引用会导致Activity实例无法释放，导致内存泄露的出现。详细了解弱引用，请参考本文<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">译文：理解Java中的弱引用</a></p>

<h2>Demo源码</h2>

<ul>
<li><a href="https://github.com/androidyue/GetCurrentActivityDemo">GetCurrentActivityDemo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的首个Chrome扩展发布了]]></title>
    <link href="http://droidyue.com/blog/2016/01/31/my-first-chrome-extension/"/>
    <updated>2016-01-31T17:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/01/31/my-first-chrome-extension</id>
    <content type="html"><![CDATA[<p>忙活了有一段时间，零零散散的写了一个Chrome扩展。这里发发一篇文章安利一下。</p>

<!--more-->


<h2>怎样的一个扩展呢</h2>

<p>它是一个Gmail 过滤器辅助工具，使用这个扩展可以轻松的创建邮件过滤器。</p>

<h2>有图有真相</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1f0it0nbx2pj21400o9gxa.jpg" alt="gmail filter helper" /></p>

<h2>如何下载</h2>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/gmail-filter-helper/iodbdhjpfeokiciiicojjkpffcjnioda">Chrome Store</a></li>
<li><a href="http://7jpqsg.com1.z0.glb.clouddn.com/GmailFilterHelper.crx">大中华局域网用户下载地址</a></li>
</ul>


<h2>为什么写这个扩展</h2>

<p>还是那个原因，自己遇到了不爽与痛点。</p>

<p>我是一个重度的Gmail用户，工作的邮箱使用Gmail托管。而是用邮箱最大的烦恼就是处理垃圾邮件。好在Gmail支持创建过滤器来永久地过滤这些垃圾邮件。</p>

<p>创建一个Filter大致的流程是这样的</p>

<p>  1.复制过滤规则（通常为邮件地址）<br/>
  2.点击创建Filter按钮<br/>
  3.将过滤规则填入Filter条件框中<br/>
  4.点击创建规则</p>

<p>然而，这实际上是一个重复的步骤，偶尔一次还好，多次就不那么OK了。</p>

<p>好在，我是一个程序员（虽然不是一个前端攻城狮），但是还是花了周末的一个下午写出了这个应用的雏形。再加上后续的修修改改就成了这个样子。</p>

<h2>开源么</h2>

<p>当然开源，原因如下</p>

<ul>
<li>个人能力和精力毕竟有限</li>
<li>希望通过社区的力量推动这个扩展持续发展</li>
</ul>


<p>所以，如果你有想法的话，可以访问这个Github地址</p>

<p><a href="https://github.com/androidyue/Gmail-Helper-Filter">https://github.com/androidyue/Gmail-Helper-Filter</a></p>

<h2>贡献力量</h2>

<p>除了开源贡献代码外，如果你有想法，也可以共享力量，比如</p>

<ul>
<li>提需求</li>
<li>提bug</li>
<li>分享本文或扩展</li>
<li>捐赠（下面那个红色按钮）</li>
</ul>


<h2>感谢</h2>

<ul>
<li>再次感谢我的御用设计师 大麦 帮我制作logo。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊一聊Android 6.0的运行时权限]]></title>
    <link href="http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/"/>
    <updated>2016-01-17T20:40:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission</id>
    <content type="html"><![CDATA[<p>Android 6.0，代号棉花糖，自发布伊始，其主要的特征运行时权限就很受关注。因为这一特征不仅改善了用户对于应用的使用体验，还使得应用开发者在实践开发中需要做出改变。</p>

<p>没有深入了解运行时权限的开发者通常会有很多疑问，比如什么是运行时权限，哪些是运行时的权限，我的应用是不是会在6.0系统上各种崩溃呢，如何才能支持运行时权限机制呢。本文讲尝试回答这一些问题，希望读者阅读完成之后，都能找到较为完美的答案。</p>

<!--more-->


<h2>权限一刀切</h2>

<p>在6.0以前的系统，都是权限一刀切的处理方式，<strong>只要用户安装，Manifest申请的权限都会被赋予，并且安装后权限也撤销不了</strong>。<br/>
这种情况下，当我们从Google Play安装一个应用，在安装之前会得到这样的权限提示信息。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/pre-marshmallow-permission.jpg" alt="Permission" /></p>

<p>当上述对话框弹出后，用户只有两种选择：</p>

<ul>
<li>我信任你，即使有敏感权限</li>
<li>你一个**应用，要这个权限干嘛，我还是不安装了。</li>
</ul>


<p>所以，这种一刀切的处理方式还是有弊端的，我们没有办法只允许某些权限或者拒绝某些权限。</p>

<h2>棉花糖运行时权限</h2>

<p>从棉花糖开始，Android系统引入了新的权限机制，即本文要讲的运行时权限。</p>

<p>何为运行时权限呢？举个栗子，以某个需要拍照的应用为例，当运行时权限生效时，其Camera权限不是在安装后赋予，而是在应用运行的时候进行请求权限（比如当用户按下”相机拍照“按钮后）看到的效果则是这样的</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/marshmallow-permission.png" alt="Requesting Camera Permission" /></p>

<p>接下来，对于Camera权限的处理完全权交给用户。是不是有点像苹果系统的处理呢，不要说这是抄袭，暂且称为师夷长技以制夷。</p>

<h2>权限的分组</h2>

<p>Android中有很多权限，但并非所有的权限都是敏感权限，于是6.0系统就对权限进行了分类，一般为下述几类</p>

<ul>
<li>正常(Normal Protection)权限</li>
<li>危险(Dangerous)权限</li>
<li>特殊(Particular)权限</li>
<li>其他权限（一般很少用到）</li>
</ul>


<h2>正常权限</h2>

<p>正常权限具有如下的几个特点</p>

<ul>
<li>对用户隐私没有较大影响或者不会打来安全问题。</li>
<li>安装后就赋予这些权限，<strong>不需要显示提醒用户，用户也不能取消这些权限</strong>。</li>
</ul>


<h3>正常权限列表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ACCESS_LOCATION_EXTRA_COMMANDS</span>
</span><span class='line'><span class="n">ACCESS_NETWORK_STATE</span>
</span><span class='line'><span class="n">ACCESS_NOTIFICATION_POLICY</span>
</span><span class='line'><span class="n">ACCESS_WIFI_STATE</span>
</span><span class='line'><span class="n">BLUETOOTH</span>
</span><span class='line'><span class="n">BLUETOOTH_ADMIN</span>
</span><span class='line'><span class="n">BROADCAST_STICKY</span>
</span><span class='line'><span class="n">CHANGE_NETWORK_STATE</span>
</span><span class='line'><span class="n">CHANGE_WIFI_MULTICAST_STATE</span>
</span><span class='line'><span class="n">CHANGE_WIFI_STATE</span>
</span><span class='line'><span class="n">DISABLE_KEYGUARD</span>
</span><span class='line'><span class="n">EXPAND_STATUS_BAR</span>
</span><span class='line'><span class="n">GET_PACKAGE_SIZE</span>
</span><span class='line'><span class="n">INTERNET</span>
</span><span class='line'><span class="n">KILL_BACKGROUND_PROCESSES</span>
</span><span class='line'><span class="n">MODIFY_AUDIO_SETTINGS</span>
</span><span class='line'><span class="n">NFC</span>
</span><span class='line'><span class="n">READ_SYNC_SETTINGS</span>
</span><span class='line'><span class="n">READ_SYNC_STATS</span>
</span><span class='line'><span class="n">RECEIVE_BOOT_COMPLETED</span>
</span><span class='line'><span class="n">REORDER_TASKS</span>
</span><span class='line'><span class="n">REQUEST_INSTALL_PACKAGES</span>
</span><span class='line'><span class="n">SET_TIME_ZONE</span>
</span><span class='line'><span class="n">SET_WALLPAPER</span>
</span><span class='line'><span class="n">SET_WALLPAPER_HINTS</span>
</span><span class='line'><span class="n">TRANSMIT_IR</span>
</span><span class='line'><span class="n">USE_FINGERPRINT</span>
</span><span class='line'><span class="n">VIBRATE</span>
</span><span class='line'><span class="n">WAKE_LOCK</span>
</span><span class='line'><span class="n">WRITE_SYNC_SETTINGS</span>
</span><span class='line'><span class="n">SET_ALARM</span>
</span><span class='line'><span class="n">INSTALL_SHORTCUT</span>
</span><span class='line'><span class="n">UNINSTALL_SHORTCUT</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的权限基本设计的是关于网络，蓝牙，时区，快捷方式等方面，只要在Manifest指定了这些权限，就会被授予，并且不能撤销。</p>

<h2>特殊权限</h2>

<p>这里讲特殊权限提前讲一下，因为这个相对来说简单一些。</p>

<p>特殊权限，顾名思义，就是一些特别敏感的权限，在Android系统中，主要由两个</p>

<ul>
<li>SYSTEM_ALERT_WINDOW，设置悬浮窗，进行一些黑科技</li>
<li>WRITE_SETTINGS  修改系统设置</li>
</ul>


<p>关于上面两个特殊权限的授权，做法是使用<code>startActivityForResult</code>启动授权界面来完成。</p>

<h3>请求SYSTEM_ALERT_WINDOW</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_CODE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span>  <span class="kt">void</span> <span class="nf">requestAlertWindowPermission</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Settings</span><span class="o">.</span><span class="na">ACTION_MANAGE_OVERLAY_PERMISSION</span><span class="o">);</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;package:&quot;</span> <span class="o">+</span> <span class="n">getPackageName</span><span class="o">()));</span>
</span><span class='line'>    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">REQUEST_CODE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQUEST_CODE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Settings</span><span class="o">.</span><span class="na">canDrawOverlays</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onActivityResult granted&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码需要注意的是</p>

<ul>
<li>使用Action <code>Settings.ACTION_MANAGE_OVERLAY_PERMISSION</code>启动隐式Intent</li>
<li>使用<code>"package:" + getPackageName()</code>携带App的包名信息</li>
<li>使用<code>Settings.canDrawOverlays</code>方法判断授权结果</li>
</ul>


<h3>请求WRITE_SETTINGS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_CODE_WRITE_SETTINGS</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">requestWriteSettings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Settings</span><span class="o">.</span><span class="na">ACTION_MANAGE_WRITE_SETTINGS</span><span class="o">);</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;package:&quot;</span> <span class="o">+</span> <span class="n">getPackageName</span><span class="o">()));</span>
</span><span class='line'>    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">REQUEST_CODE_WRITE_SETTINGS</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQUEST_CODE_WRITE_SETTINGS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Settings</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">canWrite</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onActivityResult write settings granted&quot;</span> <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码需要注意的是</p>

<ul>
<li>使用Action <code>Settings.ACTION_MANAGE_WRITE_SETTINGS</code> 启动隐式Intent</li>
<li>使用<code>"package:" + getPackageName()</code>携带App的包名信息</li>
<li>使用<code>Settings.System.canWrite</code>方法检测授权结果</li>
</ul>


<p>注意：关于这两个特殊权限，一般不建议应用申请。</p>

<h2>危险权限</h2>

<p>危险权限实际上才是运行时权限主要处理的对象，这些权限可能引起隐私问题或者影响其他程序运行。Android中的危险权限可以归为以下几个分组：</p>

<ul>
<li>CALENDAR</li>
<li>CAMERA</li>
<li>CONTACTS</li>
<li>LOCATION</li>
<li>MICROPHONE</li>
<li>PHONE</li>
<li>SENSORS</li>
<li>SMS</li>
<li>STORAGE</li>
</ul>


<p>各个权限分组与其具体的权限，可以参考下图：</p>

<p><img src="http://ww4.sinaimg.cn/large/6a195423jw1ezwpc11cs0j20hr0majwm.jpg" alt="Permission Groups and detailed permissions" /></p>

<h2>必须要支持运行时权限么</h2>

<p>目前应用实际上是可以不需要支持运行时权限的，但是最终肯定还是需要支持的，只是时间问题而已。</p>

<p>想要不支持运行时权限机制很简单，只需要将<code>targetSdkVersion</code>设置低于23就可以了，意思是告诉系统，我还没有完全在API 23（6.0）上完全搞定，不要给我启动新的特性。</p>

<h2>不支持运行时权限会崩溃么</h2>

<p>可能会，但不是那种一上来就噼里啪啦崩溃不断的那种。</p>

<p>如果你的应用将<code>targetSdkVersion</code>设置低于23，那么在6.0的系统上不会为这个应用开启运行时权限机制，即按照以前的一刀切方式处理。</p>

<h3>然而有点糟糕的是</h3>

<p>6.0系统提供了一个应用权限管理界面，界面长得是这样的</p>

<p><img src="http://ww2.sinaimg.cn/large/6a195423jw1ezwqnmjhcdj20u01hc40k.jpg" width="300"></p>

<p>既然是可以管理，用户就能取消权限，当一个不支持运行时权限的应用某项权限被取消时</p>

<p><img src="http://ww4.sinaimg.cn/large/6a195423jw1ezwqaftmpgj20u01hc77e.jpg" width="300"></p>

<p>系统会弹出一个对话框提醒撤销的危害，如果用户执意撤销，会带来如下的反应</p>

<ul>
<li>如果你的程序正在运行，则会被杀掉。</li>
<li>当你的应用再次运行时，可能出现崩溃</li>
</ul>


<p>为什么会可能崩溃的，比如下面这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TelephonyManager</span> <span class="n">telephonyManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">TelephonyManager</span><span class="o">)</span><span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">TELEPHONY_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">deviceId</span> <span class="o">=</span> <span class="n">telephonyManager</span><span class="o">.</span><span class="na">getDeviceId</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">deviceId</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mLastDeviceId</span><span class="o">))</span> <span class="o">{</span><span class="c1">//This may cause NPE</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用户撤消了获取DeviceId的权限，那么再次运行时,deviceId就是null，如果程序后续处理不当，就会出现崩溃。</p>

<h2>该来的还得来</h2>

<p>6.0的运行时权限，我们最终都是要支持的，通常我们需要使用如下的API</p>

<ul>
<li><strong>int checkSelfPermission(String permission)</strong> 用来检测应用是否已经具有权限</li>
<li><strong>void requestPermissions(String[] permissions, int requestCode)</strong>  进行请求单个或多个权限</li>
<li><strong>void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)</strong> 用户对请求作出响应后的回调</li>
</ul>


<p>以一个请求Camera权限为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!(</span><span class="n">checkSelfPermission</span><span class="o">(</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">CAMERA</span><span class="o">)</span> <span class="o">==</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">PERMISSION_GRANTED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestCameraPermission</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_PERMISSION_CAMERA_CODE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">requestCameraPermission</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">requestPermissions</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">CAMERA</span><span class="o">},</span> <span class="n">REQUEST_PERMISSION_CAMERA_CODE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRequestPermissionsResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">permissions</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">grantResults</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onRequestPermissionsResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">permissions</span><span class="o">,</span> <span class="n">grantResults</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQUEST_PERMISSION_CAMERA_CODE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">grantResult</span> <span class="o">=</span> <span class="n">grantResults</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">granted</span> <span class="o">=</span> <span class="n">grantResult</span> <span class="o">==</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">PERMISSION_GRANTED</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onRequestPermissionsResult granted=&quot;</span> <span class="o">+</span> <span class="n">granted</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常情况下，我们会得到这样的一个对话框</p>

<p><img src="http://ww1.sinaimg.cn/large/6a195423jw1ezwtttfjp1j20u01hc0vr.jpg" width="300"></p>

<p><strong>当用户选择允许，我们就可以在onRequestPermissionsResult方法中进行响应的处理，比如打开摄像头</strong><br/>
<strong>当用户拒绝，你的应用可能就开始危险了</strong></p>

<p>当我们再次尝试申请权限时，弹出的对话框和之前有点不一样了，主要表现为多了一个checkbox。如下图</p>

<p><img src="http://ww1.sinaimg.cn/large/6a195423jw1ezwtz1ljjgj20u01hcad8.jpg" width="300"></p>

<p>当用户勾选了”不再询问“拒绝后，你的程序基本这个权限就Game Over了。</p>

<p>不过，你还有一丝希望，那就是再出现上述的对话框之前做一些说明信息，比如你使用这个权限的目的（一定要坦白）。</p>

<p>shouldShowRequestPermissionRationale这个API可以帮我们判断接下来的对话框是否包含”不再询问“选择框。</p>

<h3>一个标准的流程</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!(</span><span class="n">checkSelfPermission</span><span class="o">(</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">READ_CONTACTS</span><span class="o">)</span> <span class="o">==</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">PERMISSION_GRANTED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">shouldShowRequestPermissionRationale</span><span class="o">(</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">READ_CONTACTS</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;Please grant the permission this time&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">requestReadContactsPermission</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onClick granted&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如何批量申请</h3>

<p>批量申请权限很简单，只需要字符串数组放置多个权限即可。如请求代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_CODE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">requestMultiplePermissions</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">permissions</span> <span class="o">=</span> <span class="o">{</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">WRITE_EXTERNAL_STORAGE</span><span class="o">,</span> <span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">READ_PHONE_STATE</span><span class="o">};</span>
</span><span class='line'>    <span class="n">requestPermissions</span><span class="o">(</span><span class="n">permissions</span><span class="o">,</span> <span class="n">REQUEST_CODE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的界面效果是
<img src="http://ww2.sinaimg.cn/large/6a195423jw1ezxulzbeu2j20iq0ggt9y.jpg" alt="Multiple Requesting Permissions" /></p>

<p>注意：间隔较短的多个权限申请建议设置成单次多个权限申请形式，避免弹出多个对话框，造成不太好的视觉效果。</p>

<h3>申请这么多权限岂不是很累</h3>

<p>其实你不需要每个权限都去显式申请，举一个例子，如果你的应用授权了读取联系人的权限，那么你的应用也是被赋予了写入联系人的权限。因为读取联系人和写入联系人这两个权限都属于联系人权限分组，所以一旦组内某个权限被允许，该组的其他权限也是被允许的。</p>

<h2>注意事项</h2>

<h3>API问题</h3>

<p>由于checkSelfPermission和requestPermissions从API 23才加入，低于23版本，需要在运行时判断 或者使用Support Library v4中提供的方法</p>

<ul>
<li>ContextCompat.checkSelfPermission</li>
<li>ActivityCompat.requestPermissions</li>
<li>ActivityCompat.shouldShowRequestPermissionRationale</li>
</ul>


<h3>多系统问题</h3>

<p>当我们支持了6.0必须也要支持4.4，5.0这些系统，所以需要在很多情况下，需要有两套处理。比如Camera权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">isMarshmallow</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">requestPermission</span><span class="o">();</span><span class="c1">//然后在回调中处理</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">useCamera</span><span class="o">();</span><span class="c1">//低于6.0直接使用Camera</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>两个权限</h2>

<p>运行时权限对于应用影响比较大的权限有两个，他们分别是</p>

<ul>
<li>READ_PHONE_STATE</li>
<li>WRITE_EXTERNAL_STORAGE/READ_EXTERNAL_STORAGE</li>
</ul>


<p>其中READ_PHONE_STATE用来获取deviceID，即IMEI号码。这是很多统计依赖计算设备唯一ID的参考。如果新的权限导致读取不到，避免导致统计的异常。建议在完全支持运行时权限之前，将对应的值写入到App本地数据中，对于新安装的，可以采取其他策略减少对统计的影响。</p>

<p>WRITE_EXTERNAL_STORAGE/READ_EXTERNAL_STORAGE这两个权限和外置存储（即sdcard）有关，对于下载相关的应用这一点还是比较重要的，我们应该尽可能的说明和引导用户授予该权限。</p>

<h2>些许建议</h2>

<ul>
<li>不要使用多余的权限，新增权限时要慎重</li>
<li>使用Intent来替代某些权限，如拨打电话（和你的产品经理PK去吧）</li>
<li>对于使用权限获取的某些值，比如deviceId，尽量本地存储，下次访问直接使用本地的数据值</li>
<li>注意，由于用户可以撤销某些权限，所以不要使用应用本地的标志位来记录是否获取到某权限。</li>
</ul>


<h2>注意</h2>

<p>即使支持了运行时权限，也要在Manifest声明，因为市场应用会根据这个信息和硬件设备进行匹配，决定你的应用是否在该设备上显示。</p>

<h2>是否支持运行时权限</h2>

<p>个人觉得Marshmallow的运行时权限对于用户来说绝对是一个好东西，但是目前想要支持需要做的事情还是比较多的。</p>

<p>对于一个有很多依赖的宿主应用，想要做到支持还是有一些工作量的，因为你的权限申请受制于依赖。</p>

<p>建议在短期内暂时可以不考虑支持该运行时权限机制,等时机成熟或者简单易用的第三方库完善之后再支持也未尝不可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复Android中Navigation Bar遮挡PopupWindow的问题]]></title>
    <link href="http://droidyue.com/blog/2016/01/10/android-navigation-bar-popupwindow-issue/"/>
    <updated>2016-01-10T14:41:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/01/10/android-navigation-bar-popupwindow-issue</id>
    <content type="html"><![CDATA[<p>最近遇到了一个问题，关于Navigation Bar遮挡PopupWindow的问题，问题不难，粗略做一点总结。</p>

<!--more-->


<h2>现象描述</h2>

<ul>
<li>问题应该出现在5.0 Lollipop版本及以上</li>
<li>遮挡的现象如下图,Navigation Bar位于了PopupWindow的上层，明显是一种问题。</li>
</ul>


<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/navigation_issue.png" alt="Android Navigation Bar Issue" /></p>

<h2>我的实现代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">showPopupWindow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mPopupWindow</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">View</span> <span class="n">contentView</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">popup_window_content</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>          <span class="n">mPopupWindow</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PopupWindow</span><span class="o">(</span><span class="n">contentView</span><span class="o">,</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span><span class="mi">500</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPopupWindow</span><span class="o">.</span><span class="na">setBackgroundDrawable</span><span class="o">(</span><span class="k">new</span> <span class="n">BitmapDrawable</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">mPopupWindow</span><span class="o">.</span><span class="na">showAtLocation</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">contentContainer</span><span class="o">),</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">BOTTOM</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>其实和具体的实现代码没有关系</strong>，重点是修改主题style。</p>

<h2>修改style</h2>

<p>修改v21/styles.xml(如没有，可以创建),将<code>android:windowDrawsSystemBarBackgrounds</code>修改为<code>false</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;AppTheme.NoActionBar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowActionBar&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;windowNoTitle&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:windowDrawsSystemBarBackgrounds&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:statusBarColor&quot;</span><span class="nt">&gt;</span>@android:color/transparent<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>修改好的效果</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/navigation_bar_good.png" alt="Good PopupWindow" /></p>

<h2>更佳的方法</h2>

<p>感谢来自Github的网友提出了一个更优秀的方案。很简单，设置如下代码即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">popupWindow</span><span class="o">.</span><span class="na">setSoftInputMode</span><span class="o">(</span><span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">SOFT_INPUT_ADJUST_RESIZE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：这个方法不会影响到状态栏的颜色改变，而第一种方法会。</p>

<h2>demo源码</h2>

<p><a href="https://github.com/androidyue/Navigation-Bar-Issue-Demo">Navigation Bar Issue Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术小黑屋的2015年]]></title>
    <link href="http://droidyue.com/blog/2015/12/29/bye-2015-hi-2016/"/>
    <updated>2015-12-29T22:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/12/29/bye-2015-hi-2016</id>
    <content type="html"><![CDATA[<p>2015年还差几天就要走了，2016年即将来到。每每辞旧迎新，必会睹物生情，有所思考。本文记录这一年的小小经历，以及近期的一些想法与感悟。</p>

<!--more-->


<h2>小事记</h2>

<h3>个人</h3>

<ul>
<li>4月，受Infoq邀请参加线下沙龙专题讨论，第一次被邀请参加线下活动，从此算是与Infoq有了不解之缘。</li>
<li>5月，成为了Infoq的译者，开始尝试翻译Java 和 Android的技术文章，我的英语终于可以如此直接“变现”。</li>
<li>9月，帝都Android小伙伴线下面基，认识了秋百万，扔物线，Android笔记，胡凯等优秀的开发者。</li>
<li>10月，MDCC再次面基，见到了Trinea，Cracker高爷，Rx教父大头鬼，Offer收割机潇涧，陈启超等Android界大牛。</li>
<li>11月，受邀为GDG(Google Developer Groups)做分享，实现了第一次公开场合的线下分享(三年前我在SAE公开课台下在想我何时登台分享)。当天在北航会场见到了脉脉不得语和邓老师。</li>
<li>12月，参加了Infoq ArchSummit闭门会议，收益匪浅。</li>
</ul>


<h3>博客</h3>

<ul>
<li>成为了开发者头条的第二大主题的创建者，仅次于官方。</li>
<li>月IP从原来的7788涨到了现在的24813</li>
<li>8月，一篇文章登陆了抽屉网热榜，创造了一个最多221人同时在线的记录。</li>
<li>收到了两份广告合作，也算是个人知识变现的一种突破了。</li>
</ul>


<p>总的来说博客终于从原来的零星访问进入了快速发展期，两年来的持续产出算是得到了回报。</p>

<h2>真实想法</h2>

<h3>盛名之下，其实难副</h3>

<p>自从小黑屋博客日益被人阅读，很多的读者加我微信，微博上很多人发东西也时不时的@我，加入各种群后一句句的“欢迎大牛”的问候语，瞬间有一种被捧杀的感觉。</p>

<p><strong>其实，我不是大牛，只是一个喜欢写东西进行分享的人而已。</strong></p>

<p>因为这一年，我遇见了很多优秀的人，百万哥曾经有一段话这样描述</p>

<blockquote><p>这些人，我能说什么呢，技术都不错，拿着几十上百万的年薪且品味良好，谈吐优雅，志趣也高。健身，阅读，音乐，品酒，社交。让我想起，优秀的人在每个方面都是优秀的。</p></blockquote>

<p>认识这些人真是一种幸运，而我要做的唯有见贤思齐，努力学习不落后。</p>

<h3>心之所向</h3>

<p>经历了这一年，渐渐地对以后的理想生活有了更清楚的想象，大概是这个样子</p>

<blockquote><p>不为生活所困，专心的写东西，分享帮助别人</p></blockquote>

<p>没错，这对于现在的我来说是一个乌托邦，因为我还没有实现财务自由。但我一直在努力，这个博客其实就是我的一个知识变现的试验。路漫漫其修远兮，吾将上下而求索，以此自勉再合适不过了。</p>

<h3>雾霾侵扰</h3>

<p>我是一个比较惜命的人，平时外出都戴口罩防护，然而近期雾霾久久不散，身体也出现了一些反应，一种撕心裂肺的疼痛。渐渐地离开北京的想法开始出现了。虽然这种力量很小，但是我也不得不开始有所思考这个问题了。sigh&hellip;</p>

<h3>其他问题</h3>

<ul>
<li>这一年读书少了，没有太重视，一直都在忙忙碌碌，却没能静下心来阅读几本书。</li>
<li>这一年过得患得患失，没有失去什么，但也没有什么斩获。</li>
</ul>


<h2>新的一年</h2>

<p>新的一年，为自己设定一些目标，让自己有方向和动力</p>

<ul>
<li>博客内容尝试加入轻量级的文章</li>
<li>抽出早上的时间来读书</li>
<li>尝试突破自己，不再患得患失，做一些改变</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Android中工作者线程的思考]]></title>
    <link href="http://droidyue.com/blog/2015/12/20/worker-thread-in-android/"/>
    <updated>2015-12-20T10:47:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/12/20/worker-thread-in-android</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/android-worker-thread">http://www.infoq.com/cn/articles/android-worker-thread</a> 如需转载，请与 InfoQ 中文站联系。</p>

<h2>摘要</h2>

<p>在Android开发过程中，我们经常使用工作者线程，如AsyncTask和线程池。然而我们经常使用的这些工作者线程存在哪些不易察觉的问题呢，关于工作者线程有哪些优化呢，文本将逐一介绍并回答这些问题。</p>

<p>本文系2015 北京 GDG Devfest分享内容文章。</p>

<p>在Android中，我们或多或少使用了工作者线程，比如Thread，AsyncTask，HandlerThread，甚至是自己创建的线程池，使用工作者线程我们可以将耗时的操作从主线程中移走。然而在Android系统中为什么存在工作者线程呢，常用的工作者线程有哪些不易察觉的问题呢，关于工作者线程有哪些优化的方面呢，本文将一一解答这些问题。</p>

<!--more-->


<h2>工作者线程的存在原因</h2>

<ul>
<li>因为Android的UI单线程模型，所有的UI相关的操作都需要在主线程(UI线程)执行</li>
<li>Android中各大组件的生命周期回调都是位于主线程中，使得主线程的职责更重</li>
<li>如果不使用工作者线程为主线程分担耗时的任务，会造成应用卡顿，严重时可能出现ANR(Application Not Responding),即程序未响应。</li>
</ul>


<p>因而，在Android中使用工作者线程显得势在必行，如一开始提到那样，在Android中工作者线程有很多，接下来我们将围绕AsyncTask，HandlerThread等深入研究。</p>

<h2>AsyncTask</h2>

<p>AsyncTask是Android框架提供给开发者的一个辅助类，使用该类我们可以轻松的处理异步线程与主线程的交互，由于其便捷性，在Android工程中，AsyncTask被广泛使用。然而AsyncTask并非一个完美的方案，使用它往往会存在一些问题。接下来将逐一列举AsyncTask不容易被开发者察觉的问题。</p>

<h3>AsyncTask与内存泄露</h3>

<p>内存泄露是Android开发中常见的问题，只要开发者稍有不慎就有可能导致程序产生内存泄露，严重时甚至可能导致OOM(OutOfMemory，即内存溢出错误)。AsyncTask也不例外，也有可能造成内存泄露。</p>

<p>以一个简单的场景为例：
在Activity中，通常我们这样使用AsyncTask</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Activity</span>
</span><span class='line'><span class="k">new</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Void</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//some code</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码使用的匿名内存类创建AsyncTask实例，然而在Java中，<code>非静态内存类会隐式持有外部类的实例引用</code>，上面例子AsyncTask创建于Activity中，因而会隐式持有Activity的实例引用。</p>

<p>而在AsyncTask内部实现中,mFuture同样使用匿名内部类创建对象，而mFuture会作为执行任务加入到任务执行器中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">WorkerRunnable</span><span class="o">&lt;</span><span class="n">Params</span><span class="o">,</span> <span class="n">Result</span><span class="o">&gt;</span> <span class="n">mWorker</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">AsyncTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mFuture</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;(</span><span class="n">mWorker</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">done</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//some code</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而mFuture加入任务执行器，实际上是放入了一个静态成员变量SERIAL_EXECUTOR指向的对象SerialExecutor的一个ArrayDeque类型的集合中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Executor</span> <span class="n">SERIAL_EXECUTOR</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SerialExecutor</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SerialExecutor</span> <span class="kd">implements</span> <span class="n">Executor</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ArrayDeque</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">mTasks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="kd">final</span> <span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTasks</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//fake code</span>
</span><span class='line'>                <span class="n">r</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当任务处于排队状态，则Activity实例引用被静态常量SERIAL_EXECUTOR 间接持有。</p>

<p>在通常情况下，当设备发生屏幕旋转事件，当前的Activity被销毁，新的Activity被创建，以此完成对布局的重新加载。</p>

<p>而本例中，当屏幕旋转时，处于排队的AsyncTask由于其对Activity实例的引用关系，导致这个Activity不能被销毁，其对应的内存不能被GC回收，因而就出现了内存泄露问题。</p>

<p>关于如何避免内存泄露，我们可以使用静态内部类 + 弱引用的形式解决。</p>

<h3>cancel的问题</h3>

<p>AsyncTask作为任务，是支持调用者取消任务的，即允许我们使用AsyncTask.canncel()方法取消提交的任务。然而其实cancel并非真正的起作用。</p>

<p>首先，我们看一下cancel方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">cancel</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">mayInterruptIfRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mCancelled</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mFuture</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="n">mayInterruptIfRunning</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>cancel方法接受一个boolean类型的参数，名称为<code>mayInterruptIfRunning</code>，意思是是否可以打断正在执行的任务。</p>

<p>当我们调用cancel(false)，不打断正在执行的任务，对应的结果是</p>

<ul>
<li>处于doInBackground中的任务不受影响，继续执行</li>
<li>任务结束时不会去调用<code>onPostExecute</code>方法，而是执行<code>onCancelled</code>方法</li>
</ul>


<p>当我们调用cancel(true)，表示打断正在执行的任务，会出现如下情况：</p>

<ul>
<li>如果doInBackground方法处于阻塞状态，如调用Thread.sleep,wait等方法，则会抛出InterruptedException。</li>
<li>对于某些情况下，有可能无法打断正在执行的任务</li>
</ul>


<p>如下，就是一个cancel方法无法打断正在执行的任务的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Void</span><span class="o">,</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Void</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">loop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="n">loop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;doInBackground after interrupting the loop&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span><span class="c1">//确保AsyncTask任务执行</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子，如果想要使cancel正常工作需要在循环中，需要在循环条件里面同时检测<code>isCancelled()</code>才可以。</p>

<h3>串行带来的问题</h3>

<p>Android团队关于AsyncTask执行策略进行了多次修改，修改大致如下：
  * 自最初引入到Donut(1.6)之前，任务串行执行
  * 从Donut到GINGERBREAD_MR1(2.3.4),任务被修改成了并行执行
  * 从HONEYCOMB（3.0）至今，任务恢复至串行，但可以设置<code>executeOnExecutor()</code>实现并行执行。</p>

<p>然而AsyncTask的串行实际执行起来是这样的逻辑</p>

<ul>
<li>由串行执行器控制任务的初始分发</li>
<li>并行执行器一次执行单个任务，并启动下一个</li>
</ul>


<p>在AsyncTask中，并发执行器实际为ThreadPoolExecutor的实例，其CORE_POOL_SIZE为当前设备CPU数量+1，MAXIMUM_POOL_SIZE值为CPU数量的2倍 + 1。</p>

<p>以一个四核手机为例，当我们持续调用AsyncTask任务过程中</p>

<ul>
<li>在AsyncTask线程数量小于CORE_POOL_SIZE(5个)时，会启动新的线程处理任务，不重用之前空闲的线程</li>
<li>当数量超过CORE_POOL_SIZE(5个)，才开始重用之前的线程处理任务</li>
</ul>


<p>但是由于AsyncTask属于默认线性执行任务，导致并发执行器总是处于某一个线程工作的状态，因而造成了ThreadPool中其他线程的浪费。同时由于AsyncTask中并不存在allowCoreThreadTimeOut(boolean)的调用，所以ThreadPool中的核心线程即使处于空闲状态也不会销毁掉。</p>

<h2>Executors</h2>

<p>Executors是Java API中一个快速创建线程池的工具类，然而在它里面也是存在问题的。</p>

<p>以Executors中获取一个固定大小的线程池方法为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ExecutorService</span> <span class="nf">newFixedThreadPool</span><span class="o">(</span><span class="kt">int</span> <span class="n">nThreads</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="n">nThreads</span><span class="o">,</span> <span class="n">nThreads</span><span class="o">,</span><span class="mi">0L</span><span class="o">,</span>
</span><span class='line'>        <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">,</span><span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面代码实现中，CORE_POOL_SIZE和MAXIMUM_POOL_SIZE都是同样的值，如果把nThreads当成核心线程数，则无法保证最大并发，而如果当做最大并发线程数，则会造成线程的浪费。因而Executors这样的API导致了我们无法在最大并发数和线程节省上做到平衡。</p>

<p>为了达到最大并发数和线程节省的平衡，建议自行创建ThreadPoolExecutor，根据业务和设备信息确定CORE_POOL_SIZE和MAXIMUM_POOL_SIZE的合理值。</p>

<h2>HandlerThread</h2>

<p>HandlerThread是Android中提供特殊的线程类，使用这个类我们可以轻松创建一个带有Looper的线程，同时利用Looper我们可以结合Handler实现任务的控制与调度。以Handler的post方法为例，我们可以封装一个轻量级的任务处理器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="nf">LightTaskManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HandlerThread</span> <span class="n">workerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;LightTaskThread&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">workerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">workerThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">post</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">run</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">run</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postAtFrontOfQueue</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postAtFrontOfQueue</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postDelayed</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">delay</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postAtTime</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">,</span> <span class="kt">long</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postAtTime</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">time</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在本例中，我们可以按照如下规则提交任务</p>

<ul>
<li>post 提交优先级一般的任务</li>
<li>postAtFrontOfQueue 将优先级较高的任务加入到队列前端</li>
<li>postAtTime 指定时间提交任务</li>
<li>postDelayed 延后提交优先级较低的任务</li>
</ul>


<p>上面的轻量级任务处理器利用HandlerThread的单一线程 + 任务队列的形式，可以处理类似本地IO（文件或数据库读取）的轻量级任务。在具体的处理场景下，可以参考如下做法：</p>

<ul>
<li>对于本地IO读取，并显示到界面，建议使用postAtFrontOfQueue</li>
<li>对于本地IO写入，不需要通知界面，建议使用postDelayed</li>
<li>一般操作，可以使用post</li>
</ul>


<h2>线程优先级调整</h2>

<p>在Android应用中，将耗时任务放入异步线程是一个不错的选择，那么为异步线程调整应有的优先级则是一件锦上添花的事情。众所周知，线程的并行通过CPU的时间片切换实现，对线程优先级调整，最主要的策略就是降低异步线程的优先级，从而使得主线程获得更多的CPU资源。</p>

<p>Android中的线程优先级和Linux系统进程优先级有些类似，其值都是从-20至19。其中Android中，开发者可以控制的优先级有：</p>

<ul>
<li><code>THREAD_PRIORITY_DEFAULT</code>，默认的线程优先级，值为0</li>
<li><code>THREAD_PRIORITY_LOWEST</code>，最低的线程级别，值为19</li>
<li><code>THREAD_PRIORITY_BACKGROUND</code> 后台线程建议设置这个优先级，值为10</li>
<li><code>THREAD_PRIORITY_MORE_FAVORABLE</code> 相对<code>THREAD_PRIORITY_DEFAULT</code>稍微优先，值为-1</li>
<li><code>THREAD_PRIORITY_LESS_FAVORABLE</code> 相对<code>THREAD_PRIORITY_DEFAULT</code>稍微落后一些，值为1</li>
</ul>


<p>为线程设置优先级也比较简单，通用的做法是在run方法体的开始部分加入下列代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">priority</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常设置优先级的规则如下：</p>

<ul>
<li>一般的工作者线程，设置成<code>THREAD_PRIORITY_BACKGROUND</code></li>
<li>对于优先级很低的线程，可以设置<code>THREAD_PRIORITY_LOWEST</code></li>
<li>其他特殊需求，视业务应用具体的优先级</li>
</ul>


<h2>总结</h2>

<p>在Android中工作者线程如此普遍，然而潜在的问题也不可避免，建议在开发者使用工作者线程时，从工作者线程的数量和优先级等方面进行审视，做到较为合理的使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 中 SQLite 性能优化]]></title>
    <link href="http://droidyue.com/blog/2015/12/13/android-sqlite-tuning/"/>
    <updated>2015-12-13T17:38:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/12/13/android-sqlite-tuning</id>
    <content type="html"><![CDATA[<p>数据库是应用开发中常用的技术，在Android应用中也不例外。Android默认使用了SQLite数据库，在应用程序开发中，我们使用最多的无外乎增删改查。纵使操作简单，也有可能出现查找数据缓慢，插入数据耗时等情况，如果出现了这种问题，我们就需要考虑对数据库操作进行优化了。本文将介绍一些实用的数据库优化操作，希望可以帮助大家更好地在开发过程中使用数据库。</p>

<!--more-->


<h2>建立索引</h2>

<p>很多时候，我们都听说，想要查找快速就建立索引。这句话没错，数据表的索引类似于字典中的拼音索引或者部首索引。</p>

<h3>索引的解释</h3>

<p>重温一下我们小时候查字典的过程：</p>

<ul>
<li>对于已经知道拼音的字，比如<code>中</code>这个字，我们只需要在拼音索引里面找到<code>zhong</code>，就可以确定这个字在词典中的页码。</li>
<li>对于不知道拼音的字，比如<code>欗</code>这个字，我们只需要在部首索引里面查找这个字，就能找到确定这个字在词典中的页码。</li>
</ul>


<p>没错，索引做的事情就是这么简单，使得我们不需要查找整个数据表就可以实现快速访问。</p>

<h3>建立索引</h3>

<p>创建索引的基本语法如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE INDEX index_name ON table_name;</span></code></pre></td></tr></table></div></figure>


<p>创建单列索引</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE INDEX index_name ON table_name (column_name);</span></code></pre></td></tr></table></div></figure>


<h3>索引真的好么</h3>

<p>毋庸置疑，索引加速了我们检索数据表的速度。然而正如西方谚语 &ldquo;There are two sides of a coin&#8221;，索引亦有缺点：</p>

<ul>
<li>对于增加，更新和删除来说，使用了索引会变慢，比如你想要删除字典中的一个字，那么你同时也需要删除这个字在拼音索引和部首索引中的信息。</li>
<li>建立索引会增加数据库的大小，比如字典中的拼音索引和部首索引实际上是会增加字典的页数，让字典变厚的。</li>
<li>为数据量比较小的表建立索引，往往会事倍功半。</li>
</ul>


<p>所以使用索引需要考虑实际情况进行利弊权衡，对于查询操作量级较大，业务对要求查询要求较高的，还是推荐使用索引的。</p>

<h2>编译SQL语句</h2>

<p>SQLite想要执行操作，需要将程序中的sql语句编译成对应的SQLiteStatement，比如<code>select * from record</code>这一句，被执行100次就需要编译100次。对于批量处理插入或者更新的操作，我们可以使用显式编译来做到重用SQLiteStatement。</p>

<p>想要做到重用SQLiteStatement也比较简单，基本如下：</p>

<ul>
<li>编译sql语句获得SQLiteStatement对象，参数使用<code>?</code>代替</li>
<li>在循环中对SQLiteStatement对象进行具体数据绑定，bind方法中的index从1开始，不是0</li>
</ul>


<p>请参考如下简单的使用代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertWithPreCompiledStatement</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;INSERT INTO &quot;</span> <span class="o">+</span> <span class="n">TableDefine</span><span class="o">.</span><span class="na">TABLE_RECORD</span> <span class="o">+</span> <span class="s">&quot;( &quot;</span> <span class="o">+</span> <span class="n">TableDefine</span><span class="o">.</span><span class="na">COLUMN_INSERT_TIME</span> <span class="o">+</span> <span class="s">&quot;) VALUES(?)&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">SQLiteStatement</span>  <span class="n">statement</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">compileStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">statement</span><span class="o">.</span><span class="na">clearBindings</span><span class="o">();</span>
</span><span class='line'>        <span class="n">statement</span><span class="o">.</span><span class="na">bindLong</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>        <span class="n">statement</span><span class="o">.</span><span class="na">executeInsert</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>显式使用事务</h2>

<p>在Android中，无论是使用SQLiteDatabase的insert,delete等方法还是execSQL都开启了事务，来确保每一次操作都具有原子性，使得结果要么是操作之后的正确结果，要么是操作之前的结果。</p>

<p>然而事务的实现是依赖于名为rollback journal文件，借助这个临时文件来完成原子操作和回滚功能。既然属于文件，就符合Unix的文件范型(Open-Read/Write-Close)，因而对于批量的修改操作会出现反复打开文件读写再关闭的操作。然而好在，我们可以显式使用事务，将批量的数据库更新带来的journal文件打开关闭降低到1次。</p>

<p>具体的实现代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertWithTransaction</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ContentValues</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContentValues</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">count</span><span class="o">++</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">values</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">COLUMN_INSERT_TIME</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>            <span class="n">db</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">TABLE_RECORD</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">values</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>          <span class="n">db</span><span class="o">.</span><span class="na">setTransactionSuccessful</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">endTransaction</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中，如果没有异常抛出，我们则认为事务成功，调用<code>db.setTransactionSuccessful();</code>确保操作真实生效。如果在此过程中出现异常，则批量数据一条也不会插入现有的表中。</p>

<h2>查询数据优化</h2>

<p>对于查询的优化，除了建立索引以外，有以下几点微优化的建议</p>

<h3>按需获取数据列信息</h3>

<p>通常情况下，我们处于自己省时省力的目的，对于查找使用类似这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">badQuery</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">TABLE_RECORD</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中上面方法的第二个参数类型为String[]，意思是返回结果参考的colum信息，传递null表明需要获取全部的column数据。这里建议大家传递真实需要的字符串数据对象表明需要的列信息，这样做效率会有所提升。</p>

<h3>提前获取列索引</h3>

<p>当我们需要遍历cursor时，我们通常的做法是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">badQueryWithLoop</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">TABLE_RECORD</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">COLUMN_INSERT_TIME</span><span class="o">},</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">insertTime</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">COLUMN_INSERT_TIME</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如果我们将获取ColumnIndex的操作提到循环之外，效果会更好一些，修改后的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">goodQueryWithLoop</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">TABLE_RECORD</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">COLUMN_INSERT_TIME</span><span class="o">},</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">insertTimeColumnIndex</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">TableDefine</span><span class="o">.</span><span class="na">COLUMN_INSERT_TIME</span><span class="o">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">insertTime</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="n">insertTimeColumnIndex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">cursor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ContentValues的容量调整</h2>

<p>SQLiteDatabase提供了方便的ContentValues简化了我们处理列名与值的映射，ContentValues内部采用了HashMap来存储Key-Value数据，ContentValues的初始容量是8，如果当添加的数据超过8之前，则会进行双倍扩容操作，因此建议对ContentValues填入的内容进行估量，设置合理的初始化容量，减少不必要的内部扩容操作。</p>

<h2>及时关闭Cursor</h2>

<p>使用数据库，比较常见的就是忘记关闭Cursor。关于如何发现未关闭的Cursor，我们可以使用StrictMode，详细请戳这里<a href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/">Android性能调优利器StrictMode</a></p>

<h2>耗时异步化</h2>

<p>数据库的操作，属于本地IO，通常比较耗时，如果处理不好，很容易导致<a href="http://droidyue.com/blog/2015/07/18/anr-in-android/">ANR</a>,因此建议将这些耗时操作放入异步线程中处理，这里推荐一个单线程 + 任务队列形式处理的<a href="http://droidyue.com/blog/2015/11/08/make-use-of-handlerthread/">HandlerThread</a>实现异步化。</p>

<h2>源码下载</h2>

<p>示例源码，存放在Github，地址为<a href="https://github.com/androidyue/AndroidSQLiteTuningDemo">AndroidSQLiteTuningDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android处理崩溃的一些实践]]></title>
    <link href="http://droidyue.com/blog/2015/12/06/practise-about-crash-in-android/"/>
    <updated>2015-12-06T22:47:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/12/06/practise-about-crash-in-android</id>
    <content type="html"><![CDATA[<p>对于任何程序来说，崩溃都是一件很难避免的事情，当然Android程序也不例外。在Android程序中，引起崩溃的多属于运行时异常或者错误，对于这些异常我们很难做到类似Checked Exception那样显式捕获，因而最终导致了程序崩溃。本文讲介绍一些如何处理崩溃的实践，比如收集崩溃的stacktrace，甚至如何避免出现程序已停止的对话框。</p>

<!--more-->


<h2>如何收集崩溃信息</h2>

<p>收集崩溃信息，可以更好的修复问题，增强程序的稳定性。Android中的崩溃收集沿用了Java的收集机制，实现起来比较简单。</p>

<h3>1.实现UncaughtExceptionHandler</h3>

<p>我们需要实现UncaughtExceptionHandler接口中的<code>uncaughtException</code>方法。该方法体中最常见的操作就是读取崩溃的stacktrace信息，然后上报到服务器数据便于开发者分析。实现代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleUncaughtExceptionHandler</span> <span class="kd">implements</span> <span class="n">Thread</span><span class="o">.</span><span class="na">UncaughtExceptionHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;SimpleUncaughtExceptionHandler&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">uncaughtException</span><span class="o">(</span><span class="n">Thread</span> <span class="n">thread</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//读取stacktrace信息</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Writer</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="n">printWriter</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">errorReport</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;uncaughtException errorReport=&quot;</span> <span class="o">+</span> <span class="n">errorReport</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，还建议携带以下信息发送到服务器，帮助更快定位和重现问题。</p>

<ul>
<li>设备唯一ID（基于IMEI或者Android ID等），方便根据用户提供的id，查找崩溃的stacktrace</li>
<li>设备语言与区域 方便重现</li>
<li>应用的版本号</li>
<li>设备的系统版本</li>
<li>设备类型，如平板，手机，TV等</li>
<li>崩溃发生的时间等</li>
</ul>


<h3>注册默认的异常处理</h3>

<p>注册默认的异常处理就是最后的一步，很简单，通常建议放在Application的onCreate方法中进行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DroidApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;DroidApplication&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onCreate&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">setDefaultUncaughtExceptionHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleUncaughtExceptionHandler</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>验证</h3>

<p>当我们刻意触发一个NullPointerException时，过滤日志<code>adb logcat | grep SimpleUncaughtExceptionHandler</code>类似如下信息，则说明成功了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span> <span class="n">uncaughtException</span> <span class="n">errorReport</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">avoidforceclosedemo</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">avoidforceclosedemo</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onClick</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">29</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">View</span><span class="o">.</span><span class="na">performClick</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">4470</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">View</span><span class="n">$PerformClick</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">18593</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">733</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">95</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">157</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5867</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invokeNative</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Method</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">515</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">858</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">674</span><span class="o">)</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">SimpleUncaughtExceptionHandler</span><span class="o">(</span><span class="mi">22469</span><span class="o">):</span>  <span class="n">at</span> <span class="n">dalvik</span><span class="o">.</span><span class="na">system</span><span class="o">.</span><span class="na">NativeStart</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>不出现应用崩溃对话框</h2>

<p>在Android崩溃的时候，我们都会看到类似这样的对话框</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/app_crash.png" alt="app crash" /></p>

<p>然而，实际上有些情况下是不需要展示这个对话框的，一个常用的例子，我的程序中一个不太重要的推送服务采用了单独的进程，当这个进程崩溃时，实际上是可以允许不让用户感知的。</p>

<p>如果我们采取主进程仍弹出对话框，其他进程不弹出的策略，那么我们的问题，可以总结成如下三个</p>

<ul>
<li>如何判断进程为主进程还是其他进程，或者某个进程</li>
<li>如何在某些进程不弹出应用崩溃对话框</li>
<li>如何在主进程弹出崩溃对话框</li>
</ul>


<p>既然问题来了，我们就开动挖掘机深挖吧。</p>

<h3>进程判定</h3>

<p>进行进程判定也比较容易，首先我们需要获得进程名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getProcessName</span><span class="o">(</span><span class="n">Context</span> <span class="n">appContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">currentProcessName</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ActivityManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">)</span> <span class="n">appContext</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ACTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">.</span><span class="na">RunningAppProcessInfo</span> <span class="n">processInfo</span> <span class="o">:</span> <span class="n">manager</span><span class="o">.</span><span class="na">getRunningAppProcesses</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processInfo</span><span class="o">.</span><span class="na">pid</span> <span class="o">==</span> <span class="n">pid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentProcessName</span> <span class="o">=</span> <span class="n">processInfo</span><span class="o">.</span><span class="na">processName</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">currentProcessName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断主进程，则对比进程名是否和包名相同即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAppContext</span><span class="o">.</span><span class="na">getPackageName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">processName</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断为某个进程，在mainifest这样这样声明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">service</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;.DroidService&quot;</span> <span class="nl">android:</span><span class="n">process</span><span class="o">=</span><span class="s">&quot;:service&quot;</span><span class="o">&gt;&lt;/</span><span class="n">service</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其对应的完整进程名为<code>com.droidyue.avoidforceclosedemo:service</code>，我们判断可以使用如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="s">&quot;com.droidyue.avoidforceclosedemo:service&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">processName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>不弹框的处理</h3>

<p>不弹框的需要做的就是不调用Android默认的异常处理，当异常出现时，收集完信息，执行进程kill即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>主进程保持弹窗的处理</h3>

<p>想要保持弹窗也比较容易，就是调用Android默认的异常处理。</p>

<p>首先需要获得Android默认的异常处理，在设置自定的异常处理之前，将Android默认处理保存起来。如下是在自定义异常处理的构造方法中获取Android默认处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">DroidUncaughtExceptionHandler</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mDefaultExceptionHandler</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">getDefaultUncaughtExceptionHandler</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在异常处理方法uncaughtException中调用如下方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mDefaultExceptionHandler</span><span class="o">.</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">thread</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，如果你的应用崩溃后，不调用Android默认的异常处理，也不进行杀死进程，则进程处于不可交互，即UI点击无响应状态。</p>

<h2>源码</h2>

<p>本示例源码，存放在Github，地址为<a href="https://github.com/androidyue/AvoidForceCloseDemo">AvoidForceCloseDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入探索Java 8 Lambda表达式]]></title>
    <link href="http://droidyue.com/blog/2015/11/28/article-java-8-lambdas-a-peek-under-the-hood/"/>
    <updated>2015-11-28T19:05:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/11/28/article-java-8-lambdas-a-peek-under-the-hood</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/Java-8-Lambdas-A-Peek-Under-the-Hood">http://www.infoq.com/cn/articles/Java-8-Lambdas-A-Peek-Under-the-Hood</a>。如需转载，请与 InfoQ 中文站联系。</p>

<h2>正文</h2>

<p>2014年3月，Java 8发布，Lambda表达式作为一项重要的特性随之而来。或许现在你已经在使用Lambda表达式来书写简洁灵活的代码。比如，你可以使用Lambda表达式和新增的流相关的API，完成如下的大量数据的查询处理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int total = invoices.stream()
</span><span class='line'>                    .filter(inv -&gt; inv.getMonth() == Month.JULY)
</span><span class='line'>                    .mapToInt(Invoice::getAmount)
</span><span class='line'>                    .sum();</span></code></pre></td></tr></table></div></figure>


<p>上面的示例代码描述了如何从一打发票中计算出7月份的应付款总额。其中我们使用Lambda表达式过滤出7月份的发票，使用方法引用来提取出发票的金额。</p>

<!--more-->


<p>到这里，你可能会对Java编译器和JVM内部如何处理Lambda表达式和方法引用比较好奇。可能会提出这样的问题，Lambda表达式会不会就是匿名内部类的语法糖呢？毕竟上面的示例代码可以使用匿名内部类实现，将Lambda表达式的方法体实现移到匿名内部类对应的方法中即可，但是我们并不赞成这样做。如下为匿名内部类实现版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int total = invoices.stream()
</span><span class='line'>                    .filter(new Predicate&lt;Invoice&gt;() {
</span><span class='line'>                        @Override
</span><span class='line'>                        public boolean test(Invoice inv) {
</span><span class='line'>                            return inv.getMonth() == Month.JULY;
</span><span class='line'>                        }
</span><span class='line'>                    })
</span><span class='line'>                    .mapToInt(new ToIntFunction&lt;Invoice&gt;() {
</span><span class='line'>                        @Override
</span><span class='line'>                        public int applyAsInt(Invoice inv) {
</span><span class='line'>                            return inv.getAmount();
</span><span class='line'>                        }
</span><span class='line'>                    })
</span><span class='line'>                    .sum();</span></code></pre></td></tr></table></div></figure>


<p>本文将会介绍为什么Java编译器没有采用内部类的形式处理Lambda表达式，并解密Lambda表达式和方法引用的内部实现。接着介绍字节码生成并简略分析Lambda表达式理论上的性能。最后，我们将讨论一下实践中Lambda表达式的性能问题。</p>

<h2>为什么匿名内部类不好？</h2>

<p>实际上，匿名内部类存在着影响应用性能的问题。</p>

<p>首先，编译器会为每一个匿名内部类创建一个类文件。创建出来的类文件的名称通常按照这样的规则 ClassName$1， 其中ClassName就是匿名内部类定义所属的类的名称，ClassName后面需要接上$符合和数字。生成如此多的文件就会带来问题，因为类在使用之前需要加载类文件并进行验证，这个过程则会影响应用的启动性能。类文件的加载很有可能是一个耗时的操作，这其中包含了磁盘IO和解压JAR文件。</p>

<p>假设Lambda表达式翻译成匿名内部类，那么每一个Lambda表达式都会有一个对应的类文件。随着匿名内部类进行加载，其必然要占用JVM中的元空间（从Java 8开始永久代的一种替代实现）。如果匿名内部类的方法被JIT编译成机器代码，则会存储到代码缓存中。同时，匿名内部类都需要实例化成独立的对象。以上关于匿名内部类的种种会使得应用的内存占用增加。因此我们有必要引入新的缓存机制减少过多的内存占用，这也就意味着我们需要引入某种抽象层。</p>

<p>最重要的，一旦Lambda表达式使用了匿名内部类实现，就会限制了后续Lambda表达式实现的更改，降低了其随着JVM改进而改进的能力。</p>

<p>我们看一下下面的这段代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.function.Function;
</span><span class='line'>public class AnonymousClassExample {
</span><span class='line'>    Function&lt;String, String&gt; format = new Function&lt;String, String&gt;() {
</span><span class='line'>        public String apply(String input){
</span><span class='line'>            return Character.toUpperCase(input.charAt(0)) + input.substring(1);
</span><span class='line'>        }
</span><span class='line'>    };
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>使用这个命令我们可以检查任何类文件生成的字节码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javap -c -v ClassName </span></code></pre></td></tr></table></div></figure>


<p>示例中使用Function创建的匿名内部类对应的字节码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0: aload_0       
</span><span class='line'>1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V
</span><span class='line'>4: aload_0       
</span><span class='line'>5: new           #2 // class AnonymousClassExample$1
</span><span class='line'>8: dup           
</span><span class='line'>9: aload_0       
</span><span class='line'>10: invokespecial #3 // Method AnonymousClass$1."&lt;init&gt;":(LAnonymousClassExample;)V
</span><span class='line'>13: putfield      #4 // Field format:Ljava/util/function/Function;
</span><span class='line'>16: return  </span></code></pre></td></tr></table></div></figure>


<p>上述字节码的含义如下：</p>

<ul>
<li>第5行，使用字节码操作new创建了类型AnonymousClassExample$1的一个对象，同时将新创建的对象的的引用压入栈中。</li>
<li>第8行，使用dup操作复制栈上的引用。</li>
<li>第10行，上面的复制的引用被指令invokespecial消耗使用，用来初始化匿名内部类实例。</li>
<li>第13行，栈顶依旧是创建的对象的引用，这个引用通过putfield指令保存到AnonymousClassExample类的format属性中。</li>
</ul>


<p>AnonymousClassExample$1就是由编译器生成的匿名内部类的名称。如果想更加验证的话，你可以检查AnonymousClassExample$1这个类文件，你会发现这个类就是Function接口的实现。</p>

<p>将Lambda表达式翻译成匿名内部类会限制以后可能进行的优化（比如缓存）。因为一旦使用了翻译成匿名内部类形式，那么Lambda表达式则和匿名内部类的字节码生成机制绑定。因而，Java语言和JVM工程师需要设计一个稳定并且具有足够信息的二进制表示形式来支持以后的JVM实现策略。下面的部分将介绍不使用匿名内部类机制，Lambda表达式是如何工作的。</p>

<h2>Lambdas表达式和invokedynamic</h2>

<p>为了解决前面提到的担心，Java语言和JVM工程师决定将翻译策略推迟到运行时。利用Java 7引入的invokedynamic字节码指令我们可以高效地完成这一实现。将Lambda表达式转化成字节码只需要如下两步：</p>

<p>1.生成一个invokedynamic调用点，也叫做Lambda工厂。当调用时返回一个Lambda表达式转化成的<a href="http://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html">函数式接口</a>实例。</p>

<p>2.将Lambda表达式的方法体转换成方法供invokedynamic指令调用。</p>

<p>为了阐明上述的第一步，我们这里举一个包含Lambda表达式的简单类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.function.Function;
</span><span class='line'>
</span><span class='line'>public class Lambda {
</span><span class='line'>    Function&lt;String, Integer&gt; f = s -&gt; Integer.parseInt(s);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>查看上面的类经过编译之后生成的字节码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0: aload_0
</span><span class='line'>1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V
</span><span class='line'>4: aload_0
</span><span class='line'>5: invokedynamic #2, 0 // InvokeDynamic
</span><span class='line'>                  #0:apply:()Ljava/util/function/Function;
</span><span class='line'>10: putfield #3 // Field f:Ljava/util/function/Function;
</span><span class='line'>13: return</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，方法引用的编译稍微有点不同，因为javac不需要创建一个合成的方法，javac可以直接访问该方法。</p>

<p>Lambda表达式转化成字节码的第二步取决于Lambda表达式是否为对变量捕获。Lambda表达式方法体需要访问外部的变量则为对变量捕获，反之则为对变量不捕获。</p>

<p>对于不进行变量捕获的Lambda表达式，其方法体实现会被提取到一个与之具有相同签名的静态方法中，这个静态方法和Lambda表达式位于同一个类中。比如上面的那段Lambda表达式会被提取成类似这样的方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static Integer lambda$1(String s) {
</span><span class='line'>    return Integer.parseInt(s);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，这里的$1并不是代表内部类，这里仅仅是为了展示编译后的代码而已。</p>

<p>对于捕获变量的Lambda表达式情况有点复杂，同前面一样Lambda表达式依然会被提取到一个静态方法中，不同的是被捕获的变量同正常的参数一样传入到这个方法中。在本例中，采用通用的翻译策略预先将被捕获的变量作为额外的参数传入方法中。比如下面的示例代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int offset = 100;
</span><span class='line'>Function&lt;String, Integer&gt; f = s -&gt; Integer.parseInt(s) + offset; </span></code></pre></td></tr></table></div></figure>


<p>对应的翻译后的实现方法为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static Integer lambda$1(int offset, String s) {
</span><span class='line'>    return Integer.parseInt(s) + offset;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是编译器对于Lambda表达式的翻译策略并非固定的，因为这样invokedynamic可以使编译器在后期使用不同的翻译实现策略。比如，被捕获的变量可以放入数组中。如果Lambda表达式用到了类的实例的属性，其对应生成的方法可以是实例方法，而不是静态方法，这样可以避免传入多余的参数。</p>

<h2>性能分析</h2>

<p>Lambda表达式最主要的优势表现在性能方面，虽然使用它很轻松的将很多行代码缩减成一句，但是其内部实现却不这么简单。下面对内部实现的每一步进行性能分析。</p>

<p>第一步就是连接，对应的就是我们上面提到的Lambda工厂。这一步相当于匿名内部类的类加载过程。来自Oracle的Sergey Kuksenko发布过相关的<a href="http://www.google.com/url?q=http%3A%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjvmls2013kuksen-2014088.pdf&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNEvk_uT2Gf5fi6oU2cBm29FJ9X0ZA">性能报告</a>，并且他也在2013 <a href="https://www.google.com/url?q=https%3A%2F%2Fmedianetwork.oracle.com%2Fvideo%2Fplayer%2F2623576348001&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHq8XfMibI94INM3Zl8UGzk-kKbew">JVM语言大会</a>就该话题做过<a href="http://www.oracle.com/technetwork/java/jvmls2013kuksen-2014088.pdf">分享</a>。报告表明，Lambda工厂的预热准备需要消耗时间，并且这个过程比较慢。伴随着更多的调用点连接，代码被频繁调用后（比如被JIT编译优化）性能会提升。另一方面如果连接处于不频繁调用的情况，那么Lambda工厂方式也会比匿名内部类加载要快，最高可达100倍。</p>

<p>第二步就是捕获变量。正如我们前面提到的，如果是不进行捕获变量，这一步会自动进行优化，避免在基于Lambda工厂实现下额外创建对象。对于匿名内部类而言，这一步对应的是创建外部类的实例，为了优化内部类这一步的问题，我们需要手动的修改代码，如创建一个对象，并将它设置给一个静态的属性。如下述代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Hoisted Function</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">parseInt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">arg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage:</span>
</span><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">parseInt</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="err">“</span><span class="mi">123</span><span class="err">”</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三部就是真实方法的调用。在这一步中匿名内部类和Lambda表达式执行的操作相同，因此没有性能上的差别。不进行捕获的Lambda表达式要比进行static优化过的匿名内部类较优。进行变量捕获的Lambda表达式和匿名内部类表达式性能大致相同。</p>

<p>在这一节中，我们明显可以看到Lambda表达式的实现表现良好，匿名内部类通常需要我们手动的进行优化来避免额外对象生成，而对于不进行变量捕获的Lambda表达式，JVM已经为我们做好了优化。</p>

<h2>实践中的性能分析</h2>

<p>理解了Lambda的性能模型很是重要，但是实际应用中的总体性能如何呢？我们在使用Java 8 编写了一些软件项目，一般都取得了很好的效果。非变量捕获的Lambda表达式给我们带来了很大的帮助。这里有一个很特殊的例子描述了关于优化方向的一些有趣的问题。</p>

<p>这个例子的场景是代码需要运行在一个要求GC暂定时间越少越好的系统上。因而我们需要避免创建大量的对象。在这个工程中，我们使用了大量的Lambda表达式来实现回调处理。然而在这些使用Lambda实现的回调中很多并没有捕获局部变量，而是需要引用当前类的变量或者调用当前类的方法。然而目前仍需要对象分配。下面就是我们提到的例子的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">MessageProcessor</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">processMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">obj</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">NewClient</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">processNewClient</span><span class="o">((</span><span class="n">NewClient</span><span class="o">)</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有一个简单的办法解决这个问题，我们将Lambda表达式的代码提前到构造方法中，并将其赋值给一个成员属性。在调用点我们直接引用这个属性即可。下面就是修改后的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Msg</span><span class="o">&gt;</span> <span class="n">handler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">MessageProcessor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">NewClient</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">processNewClient</span><span class="o">((</span><span class="n">NewClient</span><span class="o">)</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">processMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而上面的修改后代码给却给整个工程带来了一个严重的问题：性能分析表明，这种修改产生很大的对象申请，其产生的内存申请在总应用的60%以上。</p>

<p>类似这种无关上下文的优化可能带来其他问题。</p>

<p>  1.纯粹为了优化的目的，使用了非惯用的代码写法，可读性会稍差一些。<br/>
  2.内存分配方面的问题，示例中为MessageProcessor增加了一个成员属性，使得MessageProcessor对象需要申请更大的内存空间。Lambda表达式的创建和捕获位于构造方式中，使得MessageProcessor的构造方法调用缓慢一些。</p>

<p>我们遇到这种情况，需要进行内存分析，结合合理的业务用例来进行优化。有些情况下，我们使用成员属性确保为经常调用的Lambda表达式只申请一个对象，这样的缓存策略大有裨益。任何性能调优的科学的方法都可以进行尝试。</p>

<p>上述的方法也是其他程序员对Lambda表达式进行优化应该使用的。书写整洁，简单，函数式的代码永远是第一步。任何优化，如上面的提前代码作为成员属性，都必须结合真实的具体问题进行处理。变量捕获并申请对象的Lambda表达式并非不好，就像我们我们写出<code>new Foo()</code>代码并非一无是处一样。</p>

<p>除此之外，我们想要写出最优的Lambda表达式，常规书写很重要。如果一个Lambda表达式用来表示一个简单的方法，并且没有必要对上下文进行捕获，大多数情况下，一切以简单可读即可。</p>

<h2>总结</h2>

<p>在这片文章中，我们研究了Lambda表达式不是简单的匿名内部类的语法糖，为什么匿名内部类不是Lambda表达式的内部实现机制以及Lambda表达式的具体实现机制。对于大多数情况来说，Lambda表达式要比匿名内部类性能更优。然而现状并非完美，基于测量驱动优化，我们仍然有很大的提升空间。</p>

<p>Lambda表达式的这种实现形式并非Java 8 所有。Scala曾经通过生成匿名内部类的形式支持Lambda表达式。在Scala 2.12版本，Lambda的实现形式替换为Java 8中的Lambda 工厂机制。后续其他可以在JVM上运行的语言也可能支持Lambda的这种机制。</p>

<h2>关于作者</h2>

<p>Richard Warburton是一位资深专家，善于技术攻坚。最近，他写了一个关于<a href="http://tinyurl.com/java8lambdas">Java 8 Lambda表达式</a>的书，由O&#8217;Reilly出版，同时他也在<a href="http://java8training.com/">java8training</a>网站为Java程序员教授函数式编程。他涉猎的领域相当广泛，如数据分析，静态分析，编译器和网络协议等领域。他是伦敦Java协会的Leader，并举办OpenJdk hack活动。他进行了多次演讲，曾在Devoxx, JavaOne, JFokus, Devoxx UK, Geecon, Oredev, JAX London 和 Codemotion等会议做分享。除上述之外，他还是Warwick大学的计算机科学博士。</p>

<p>Raoul-Gabriel Urma是剑桥大学计算机科学的博士生。他也是Manning出版社出版的<a href="http://manning.com/urma/">Java 8 in Action: Lambdas, streams, and functional-style programming</a>的联合作者。他发表过10多篇论文，也在国际会议做过20多场分享。他既在诸如Google，eBay，Oracle和Goldman Sachs这样的大公司工作过，也参与过小的创业公司。Raoul也是皇家艺术协会的一员。他的Twitter是@raoulUK。</p>

<p>Mario Fusco是来自Red Hat的高级软件工程师，他的工作是开发Drools核心开发和JBoss规则引擎。他有着相当丰富的Java经验，参与并领导了很多业界企业级的项目。他的兴趣是函数式编程和领域专用语言。由于对着两项的热爱，他创建了一个叫做lambdaj的开源库，目的是提供一个管理集合的Java DSL实现，使得使用更加函数式编码化。他的Twitter ID是@mariofusco。</p>

<p><strong>查看英文原文：</strong><a href="http://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood">Java 8 Lambdas &ndash; A Peek Under the Hood</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的逗比瞬间 最终番]]></title>
    <link href="http://droidyue.com/blog/2015/11/15/funny-programmer-finale/"/>
    <updated>2015-11-15T22:08:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/11/15/funny-programmer-finale</id>
    <content type="html"><![CDATA[<p>小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。</p>

<!--more-->


<h2>听到市场同事说要亲自解决一个技术问题</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1ey20e3k0qog20dw08b1jc.gif"></p>

<h2>演示之前，我的程序每隔半个小时崩溃一次</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1ey20fauaedg205u032wrt.gif"></p>

<h2>终于，我的脚本跑起来了</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1ey20g26lcyg206804ox6p.gif"></p>

<h2>项目经理认为我可以一个人搞定这个项目，结果。。。</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1ey20h0ia9gg207s063x6s.gif"></p>

<h2>当需求再三被更改后</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1ey20hvak68g209z06yx6p.gif"></p>

<h2>被问及某个功能到底有没有测，我的反应</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ey20iidltqg20dw065naa.gif"></p>

<h2>被告知，必须要支持IE6，sigh</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1ey20ja4mgog208c08c4pc.gif"></p>

<h2>程序员的逗比瞬间全系列</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series">程序员的逗比瞬间（第一季）</a></li>
<li><a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series">程序员的逗比瞬间（第二季）</a></li>
<li><a href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/?droid_refer=series">程序员的逗比瞬间（第三季）</a></li>
<li><a href="http://droidyue.com/blog/2015/11/15/funny-programmer-finale/?droid_refer=series">程序员的逗比瞬间 最终番</a></li>
</ul>


<p>本文参考自<a href="http://howtodoinjava.com/2013/04/07/life-of-a-programmer-in-pictures-part-4/">http://howtodoinjava.com/2013/04/07/life-of-a-programmer-in-pictures-part-4/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解 Android 中的 HandlerThread]]></title>
    <link href="http://droidyue.com/blog/2015/11/08/make-use-of-handlerthread/"/>
    <updated>2015-11-08T22:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/11/08/make-use-of-handlerthread</id>
    <content type="html"><![CDATA[<p>HandlerThread是Android API提供的一个便捷的类，使用它我们可以快速的创建一个带有Looper的线程，有了Looper这个线程，我们又可以生成Handler，那么HandlerThread是什么，可以做什么呢，有哪些奇技淫巧可以被我们利用呢？</p>

<!--more-->


<h2>实现原理</h2>

<p>在介绍原理之前，我们先使用普通的Thread来创建一个Handler，创建的过程大致如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">createManualThreadWithHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>            <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现很简单，在目标线程内如下配置</p>

<ul>
<li>调用Looper.prepare 创建与当前线程绑定的Looper实例</li>
<li>使用上面创建的Looper生成Handler实例</li>
<li>调用Looper.loop()实现消息循环</li>
</ul>


<p>明白上面的实现步骤，HandlerThread的实现也就简单了，其实现为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mTid</span> <span class="o">=</span> <span class="n">Process</span><span class="o">.</span><span class="na">myTid</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mLooper</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">();</span>
</span><span class='line'>      <span class="n">notifyAll</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">mPriority</span><span class="o">);</span>
</span><span class='line'>    <span class="n">onLooperPrepared</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mTid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>确实很简单，无需赘述。</p>

<h2>Handler原理</h2>

<p>要理解Handler的原理，理解如下几个概念即可茅塞顿开。</p>

<ul>
<li>Message 意为消息，发送到Handler进行处理的对象，携带描述信息和任意数据。</li>
<li>MessageQueue 意为消息队列，Message的集合。</li>
<li>Looper 有着一个很难听的中文名字，消息泵，用来从MessageQueue中抽取Message，发送给Handler进行处理。</li>
<li>Handler 处理Looper抽取出来的Message。</li>
</ul>


<h2>如何使用</h2>

<p>HandlerThread使用起来很容易，首先需要进行初始化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="nf">LightTaskManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HandlerThread</span> <span class="n">workerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;LightTaskThread&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">workerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">workerThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：上面的<code>workerThread.start();</code>必须要执行。</p>

<p>至于如何使用HandlerThread来执行任务，主要是调用Handler的API</p>

<ul>
<li>使用post方法提交任务，postAtFrontOfQueue将任务加入到队列前端，postAtTime指定时间提交任务，postDelayed延后提交任务。</li>
<li>使用sendMessage方法可以发送消息，sendMessageAtFrontOfQueue将该消息放入消息队列前端，sendMessageAtTime 指定时间发送消息，sendMessageDelayed延后提交消息。</li>
</ul>


<p>通过包裹Handler API，我们可以实现如下代码(仅post相关方法):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">post</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">run</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">run</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postAtFrontOfQueue</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postAtFrontOfQueue</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postDelayed</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">delay</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postAtTime</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">,</span> <span class="kt">long</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">postAtTime</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">time</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>控制优先级</h2>

<p>了解到如何使用之外，关于HandlerThread的使用需要上升一个界别，那就是优化。这里的优化主要是合理调整HandlerThread的优先级。</p>

<p>HandlerThread的默认优先级是<code>Process.THREAD_PRIORITY_DEFAULT</code>,具体值为0。线程的优先级的取值范围为-20到19。优先级高的获得的CPU资源更多，反之则越少。-20代表优先级最高，19最低。0位于中间位置，但是作为工作线程的HandlerThread没有必要设置这么高的优先级，因而需要我们降低其优先级。</p>

<h3>可控制的优先级</h3>

<ul>
<li>THREAD_PRIORITY_DEFAULT，默认的线程优先级，值为0。</li>
<li>THREAD_PRIORITY_LOWEST，最低的线程级别，值为19。</li>
<li>THREAD_PRIORITY_BACKGROUND 后台线程建议设置这个优先级，值为10。</li>
<li>THREAD_PRIORITY_MORE_FAVORABLE 相对THREAD_PRIORITY_DEFAULT稍微优先，值为-1。</li>
<li>THREAD_PRIORITY_LESS_FAVORABLE 相对THREAD_PRIORITY_DEFAULT稍微落后一些，值为1。</li>
</ul>


<p>以上的这些优先级都是可以在程序中设置的，除此之外还有不可控的优先级均有系统进行自动调整。</p>

<h3>如何修改权限</h3>

<p>最通用的就是在run方法中，加入合理的设置优先级代码，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Runnable</span> <span class="n">run</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_BACKGROUND</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'><span class="n">LightTaskManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="n">run</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述方法不仅适用于HandlerThread，也可以适用于其他的线程。</p>

<p>除此之外，HandlerThread的构造方法也提供了设置优先级的功能。用法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HandlerThread</span> <span class="n">workerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;LightTaskThread&quot;</span><span class="o">,</span> <span class="n">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_BACKGROUND</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于设置优先级，系统的AsyncTask已经开始进行了默认设置，将线程的优先级设置成THREAD_PRIORITY_BACKGROUND了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">AsyncTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mWorker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WorkerRunnable</span><span class="o">&lt;</span><span class="n">Params</span><span class="o">,</span> <span class="n">Result</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Result</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mTaskInvoked</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_BACKGROUND</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//noinspection unchecked</span>
</span><span class='line'>            <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">doInBackground</span><span class="o">(</span><span class="n">mParams</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Binder</span><span class="o">.</span><span class="na">flushPendingCommands</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">postResult</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Android中线程的调度详情，请参考<a href="">剖析Android中进程与线程调度之nice</a></p>

<h2>应用场景</h2>

<p>我们可以使用HandlerThread处理本地IO读写操作（数据库，文件），因为本地IO操作大多数的耗时属于毫秒级别，对于单线程 + 异步队列的形式 不会产生较大的阻塞。因此在这个HandlerThread中不适合加入网络IO操作。</p>

<p>对于本地IO读取操作，我们可以使用postAtFrontOfQueue方法，快速将读取操作加入队列前端执行，必要时返回给主线程更新UI。示例场景，从数据库中读取数据展现在ListView中。注意读取也是需要花费一定时间，推荐在数据展示之前有必要的用户可感知进度提示。</p>

<p>对于本地IO写操作，根据具体情况，选择post或者postDelayed方法执行。比如SharedPreference commit，或者文件写入操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Android Log的一些思考]]></title>
    <link href="http://droidyue.com/blog/2015/11/01/thinking-about-android-log/"/>
    <updated>2015-11-01T17:09:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/11/01/thinking-about-android-log</id>
    <content type="html"><![CDATA[<p>在日常的Android开发中，日志打印是一项必不可少的操作，我们通过分析打印的日志可以分析程序的运行数据和情况。然而使用日志打印的正确姿势又是怎样呢，如何屏蔽日志信息输出呢，本文将逐一进行回答。</p>

<!--more-->


<h2>哪些形式</h2>

<h3>System.out.println</h3>

<p>这是标准的Java输出方法，相信很多公司都不提倡使用，这里进行列举，目的是为了提醒大家不用。</p>

<h3>Android Log</h3>

<p>Android自身提供了一个日志工具类，那就是android.util.Log。使用很简单，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onCreate&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TAG选取</h2>

<h3>选用人名</h3>

<p>关于TAG的选取，很多人都曾采用人名的形式，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;andy&quot;</span><span class="o">,</span> <span class="s">&quot;onCreate&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样做的目标一是为了过滤方便，当一个人在写一个模块多个文件时，使用这个形式，过滤起来很容易帮助理解程序的执行情况。另外的目的就是为了表明日志周围代码的作者姓甚名谁。</p>

<p>然而，我却不推荐这种人名作为TAG的形式。原因如下</p>

<ul>
<li>以人名作为关键字过滤，不易确定产生日志的类文件</li>
<li>随着某个人模块实现的增加，过滤人名易产生来自其他模块的干扰信息。</li>
</ul>


<h3>动态选取</h3>

<p>还有一种选取LOGTAG的方式，就是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="n">DroidSettings</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样使用，得到的LOGTAG的值就是DroidSettings，然而并非如此，当DroidSettings这个类进行了混淆之后，类名变成了类似a,b,c这样的名称，LOGTAG则不再是DroidSettings这个值了。这样可能造成的问题就是，内部混淆有日志的包，我们去过滤DroidSettings 却永远得不到任何信息。</p>

<h3>推荐的记录形式</h3>

<p>推荐的形式就是以字符串字面量形式去设置LOGTAG。如下，在DroidSettings类中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;DroidSettings&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>优雅打印日志的姿势</h3>

<p>什么才是打印日志的优雅姿势是，我认为一条好的日志需要包含以下三点</p>

<ul>
<li>这条日志所在的类，我们通过LOGTAG可以表示</li>
<li>这条日志所在的方法，需要加入方法名的字符串</li>
<li>必要的其他信息，比如参数或者局部变量。</li>
</ul>


<p>结合三点，下面是一个符合规则的简单示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span>  <span class="nf">getBookName</span><span class="o">(</span><span class="kt">int</span> <span class="n">bookId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">bookName</span> <span class="o">=</span> <span class="n">mBooks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bookId</span><span class="o">);</span>
</span><span class='line'>    <span class="n">DroidLog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;getBookName bookId=&quot;</span> <span class="o">+</span> <span class="n">bookId</span> <span class="o">+</span> <span class="s">&quot;;bookName=&quot;</span> <span class="o">+</span> <span class="n">bookName</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bookName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，包含了所在类（LOGTAG），方法名(getBookName)， 参数(bookId)，局部变量(bookName)。必要的信息都展示了出来，对于了解程序运行很有帮助。</p>

<h2>屏蔽日志输出</h2>

<p>在Android中进行屏蔽日志，有两种实现形式，一种是在编译期屏蔽，另一种则是从运行时进行屏蔽，后者相对比较常见，从后向前介绍。</p>

<h3>运行时屏蔽</h3>

<p>在运行时屏蔽日志，通常的做法是创建一个自定义的类，比如叫做DroidLog</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DroidLog</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">ENABLE_LOG</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">i</span><span class="o">(</span><span class="n">String</span> <span class="n">tag</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ENABLE_LOG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">android</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在编码时，我们调用DroidLog.i方法来记录日志，然后在打包时，修改ENABLE_LOG的值为false，这样就能屏蔽了日志输出。</p>

<p>然后运行时屏蔽的方案实际上有一点小问题，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">dumpDebugInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DroidLog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;sdkVersion=&quot;</span> <span class="o">+</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">+</span> <span class="s">&quot;; Locale=&quot;</span> <span class="o">+</span> <span class="n">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然上面的日志不会打印，但是<code>"sdkVersion=" + Build.VERSION.SDK_INT + "; Locale=" + Locale.getDefault()</code>这段字符串拼接语句却实实在在执行了。总的来说，还是会产生一些影响。</p>

<p>关于字符串拼接的细节，可以阅读<a href="http://droidyue.com/blog/2014/08/30/java-details-string-concatenation/">Java细节：字符串的拼接</a></p>

<h2>编译期屏蔽</h2>

<p>既然运行时屏蔽存在问题，那么是否可以提前到编译期进行屏蔽呢，答案是肯定的。这里我们就使用了Proguard的一个小功能。</p>

<p>assumenosideeffects从英文单词上去理解，意思为 假设没有副作用。该功能属于优化的一种方式，该功能常常用来处理日志打印，比如我们想要屏蔽掉来自DroidLog的日志打印。
在混淆的配置文件中，加入下列代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">assumenosideeffects</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">logdemo</span><span class="o">.</span><span class="na">DroidLog</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">i</span><span class="o">(...);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而仅仅处理DroidLog是不够的，因为我们无法保证团队其他成员是否使用了原生的android.utils.Log来进行日志打印（尽管有编码约束）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">assumenosideeffects</span> <span class="kd">class</span> <span class="nc">android</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Log</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">d</span><span class="o">(...);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">e</span><span class="o">(...);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">i</span><span class="o">(...);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">v</span><span class="o">(...);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">println</span><span class="o">(...);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">w</span><span class="o">(...);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">wtf</span><span class="o">(...);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般写到这里，基本可以结束，但是我们还需要探究一下，编译期屏蔽是否和运行时屏蔽一样有着同样的问题呢？ 我们接下来证明<br/>
首先，我们选用这段代码作为例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span> <span class="o">;</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dumpDebugInfo</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">dumpDebugInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Locale</span> <span class="n">defaultLocale</span> <span class="o">=</span> <span class="n">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">();</span>
</span><span class='line'>        <span class="n">DroidLog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;sdkVersion=&quot;</span> <span class="o">+</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">+</span> <span class="s">&quot;; Locale=&quot;</span> <span class="o">+</span> <span class="n">defaultLocale</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改混淆文件proguard-project.txt，启用混淆处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">assumenosideeffects</span> <span class="kd">class</span> <span class="nc">android</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Log</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">d</span><span class="o">(...);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">i</span><span class="o">(...);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">v</span><span class="o">(...);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="n">assumenosideeffects</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">logdemo</span><span class="o">.</span><span class="na">DroidLog</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="o">***</span> <span class="n">i</span><span class="o">(...);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后使用Eclipse的导出功能，生成指定签名的APK包，运行必然没有日志输出。</p>

<p>接下来对生成的APK包进行反编译，得到的smali文件。查看MainActivity.smali。</p>

<p>注意：Proguard进行优化，发生了内联操作，讲dumpDebugInfo的方法体实现提取到onCreate方法中。</p>

<p>onCreate方法体中没有任何关于<code>DroidLog.i</code>方法的调用，但是<code>"sdkVersion=" + Build.VERSION.SDK_INT + "; Locale=" + defaultLocale</code>对应的字符串拼接操作依然存在。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">virtual</span> <span class="n">methods</span>
</span><span class='line'><span class="o">.</span><span class="na">method</span> <span class="kd">protected</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Landroid</span><span class="o">/</span><span class="n">os</span><span class="o">/</span><span class="n">Bundle</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>    <span class="o">.</span><span class="na">locals</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="kd">super</span> <span class="o">{</span><span class="n">p0</span><span class="o">,</span> <span class="n">p1</span><span class="o">},</span> <span class="n">Landroid</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">Activity</span><span class="o">;-&gt;</span><span class="n">onCreate</span><span class="o">(</span><span class="n">Landroid</span><span class="o">/</span><span class="n">os</span><span class="o">/</span><span class="n">Bundle</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">const</span> <span class="n">v0</span><span class="o">,</span> <span class="mh">0x7f030017</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="n">virtual</span> <span class="o">{</span><span class="n">p0</span><span class="o">,</span> <span class="n">v0</span><span class="o">},</span> <span class="n">Lcom</span><span class="o">/</span><span class="n">droidyue</span><span class="o">/</span><span class="n">logdemo</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">;-&gt;</span><span class="n">setContentView</span><span class="o">(</span><span class="n">I</span><span class="o">)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="kd">static</span> <span class="o">{},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Locale</span><span class="o">;-&gt;</span><span class="n">getDefault</span><span class="o">()</span><span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Locale</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">move</span><span class="o">-</span><span class="n">result</span><span class="o">-</span><span class="n">object</span> <span class="n">v0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span><span class="o">-</span><span class="n">instance</span> <span class="n">v1</span><span class="o">,</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">const</span><span class="o">-</span><span class="n">string</span> <span class="n">v2</span><span class="o">,</span> <span class="s">&quot;sdkVersion=&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="n">direct</span> <span class="o">{</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;-&gt;&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sget</span> <span class="n">v2</span><span class="o">,</span> <span class="n">Landroid</span><span class="o">/</span><span class="n">os</span><span class="o">/</span><span class="n">Build$VERSION</span><span class="o">;-&gt;</span><span class="nl">SDK_INT:</span><span class="n">I</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="n">virtual</span> <span class="o">{</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;-&gt;</span><span class="n">append</span><span class="o">(</span><span class="n">I</span><span class="o">)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">move</span><span class="o">-</span><span class="n">result</span><span class="o">-</span><span class="n">object</span> <span class="n">v1</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">const</span><span class="o">-</span><span class="n">string</span> <span class="n">v2</span><span class="o">,</span> <span class="s">&quot;; Locale=&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="n">virtual</span> <span class="o">{</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;-&gt;</span><span class="n">append</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">move</span><span class="o">-</span><span class="n">result</span><span class="o">-</span><span class="n">object</span> <span class="n">v1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="n">virtual</span> <span class="o">{</span><span class="n">v1</span><span class="o">,</span> <span class="n">v0</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;-&gt;</span><span class="n">append</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">move</span><span class="o">-</span><span class="n">result</span><span class="o">-</span><span class="n">object</span> <span class="n">v0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">invoke</span><span class="o">-</span><span class="n">virtual</span> <span class="o">{</span><span class="n">v0</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;-&gt;</span><span class="n">toString</span><span class="o">()</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span><span class="o">-</span><span class="kt">void</span>
</span><span class='line'><span class="o">.</span><span class="na">end</span> <span class="n">method</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，无论是运行时日志屏蔽还是编译期，message参数上发生的字符串拼接都依然存在。但是编译期屏蔽减少了方法调用（即方法进出栈操作），理论上编译期屏蔽日志更优。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优秀的英文技术博客]]></title>
    <link href="http://droidyue.com/blog/2015/10/24/great-english-programming-blog/"/>
    <updated>2015-10-24T16:54:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/10/24/great-english-programming-blog</id>
    <content type="html"><![CDATA[<p>技术是没有国界的，想要学习先进的技术就不能仅仅局限于中文博客。本着<code>独乐乐不如众</code>的原则，这里分享几个本人一直订阅的英文博客。主要涉及的技术为Java或Android。</p>

<!--more-->


<h2>阅读之前</h2>

<p>请科学上网访问这些博客！<br/>
请科学上网访问这些博客！<br/>
请科学上网访问这些博客！</p>

<p>(重要的事情说三遍，某宁快给我打广告费！)</p>

<h3>JavaRevisited</h3>

<ul>
<li>技术点：Java 底层与细节研究</li>
<li>示例文章：How classloader works in Java? ||  Why Enum as Singleton is better in Java?  ||  Why String is Immutable or Final in Java?</li>
<li>地址：<a href="http://javarevisited.blogspot.com/">http://javarevisited.blogspot.com/</a></li>
</ul>


<h3>Android Design Patterns</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：Activitys, Threads, &amp; Memory Leaks || How to Leak a Context: Handlers &amp; Inner Classes</li>
<li>地址：<a href="http://www.androiddesignpatterns.com/">http://www.androiddesignpatterns.com/</a></li>
</ul>


<h3>The Cheese Factory</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：Everything every Android Developer must know about new Android&rsquo;s Runtime Permission</li>
<li>地址：<a href="http://inthecheesefactory.com/blog/en">http://inthecheesefactory.com/blog/en</a></li>
</ul>


<h3>Android Developers</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：不用列举，这是Google Android开发官方博客</li>
<li>地址：<a href="http://android-developers.blogspot.com/">http://android-developers.blogspot.com/</a></li>
</ul>


<h3>UDI COHEN</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：Speed up your app</li>
<li>地址：<a href="http://blog.udinic.com/">http://blog.udinic.com/</a></li>
</ul>


<h3>jdamcd</h3>

<ul>
<li>技术点：Android，RxJava</li>
<li>示例文章：Async Android</li>
<li>地址：<a href="http://jdam.cd/async-android/">http://jdam.cd/async-android/</a></li>
</ul>


<h3>JamesDBloom</h3>

<ul>
<li>技术点：JVM</li>
<li>示例文章：Java Code To Byte Code || JVM Internals</li>
<li>地址：<a href="http://blog.jamesdbloom.com/">http://blog.jamesdbloom.com/</a></li>
</ul>


<h3>gomo wiki</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：Scheduling in Android || Android Security</li>
<li>地址：<a href="https://github.com/keesj/gomo/wiki">https://github.com/keesj/gomo/wiki</a></li>
</ul>


<h3>CodePath Android Cliffnotes</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：Using the RecyclerView || Material Design Primer</li>
<li>地址：<a href="https://guides.codepath.com/android">https://guides.codepath.com/android</a></li>
</ul>


<h3>Grokking Android</h3>

<ul>
<li>技术点：Android</li>
<li>示例文章：Why use Observable.create() and not just inherit from Observable?</li>
<li><a href="http://www.grokkingandroid.com/">http://www.grokkingandroid.com/</a></li>
</ul>


<h3>Antonio Leiva</h3>

<ul>
<li>技术点：Android，Kotlin</li>
<li>示例文章：API request in Android the easy way using Kotlin || Layout animations on RecyclerView</li>
<li><a href="http://antonioleiva.com/">http://antonioleiva.com/</a></li>
</ul>


<p>后续发现新的有干货的歪果仁博客，会继续补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的逗比瞬间(第三季)]]></title>
    <link href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/"/>
    <updated>2015-10-17T18:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/10/17/funny-programmer-season-three</id>
    <content type="html"><![CDATA[<p>小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。</p>

<!--more-->


<h2>紧急修复线上的一个大bug</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1ex4aby63xlg208c05s1ky.gif"></p>

<h2>突然发现自己改的是线上代码，立马更正回来</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4ae1gie0g207f05q1kx.gif"></p>

<h2>看到自己很久之前写的代码</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4af9zb07g20dw07tx6p.gif"></p>

<h2>当读到市场人员写的技术文章，哈哈哈</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1ex4agll4rag20cf0781ky.gif"></p>

<h2>修改代码，发现自己当时没写注释</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1ex4ahmttmgg20dw06vnol.gif"></p>

<h2>撞见客户和市场在扯淡，于是我。。。</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4aik43u2g208705dnpd.gif"></p>

<h2>得知某人修复一个bug居然提交了500多个文件</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1ex4aje5emvg208w06oe82.gif"></p>

<h2>没有经过分析就开始撸代码的后果</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4aknaaglg208c05fu10.gif"></p>

<h2>原文参考</h2>

<ul>
<li><a href="http://howtodoinjava.com/2013/04/01/life-of-a-programmer-in-pictures-part-3/">http://howtodoinjava.com/2013/04/01/life-of-a-programmer-in-pictures-part-3/</a></li>
</ul>


<h2>程序员的逗比瞬间全系列</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series">程序员的逗比瞬间（第一季）</a></li>
<li><a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series">程序员的逗比瞬间（第二季）</a></li>
<li><a href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/?droid_refer=series">程序员的逗比瞬间（第三季）</a></li>
<li><a href="http://droidyue.com/blog/2015/11/15/funny-programmer-finale/?droid_refer=series">程序员的逗比瞬间 最终番</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android性能调优利器StrictMode]]></title>
    <link href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/"/>
    <updated>2015-09-26T20:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode</id>
    <content type="html"><![CDATA[<p>作为Android开发，日常的开发工作中或多或少要接触到性能问题，比如我的Android程序运行缓慢卡顿，并且常常出现ANR对话框等等问题。既然有性能问题，就需要进行性能优化。正所谓工欲善其事，必先利其器。一个好的工具，可以帮助我们发现并定位问题，进而有的放矢进行解决。本文主要介绍StrictMode 在Android 应用开发中的应用和一些问题。</p>

<!--more-->


<h2>什么是StrictMode</h2>

<p>StrictMode意思为严格模式，是用来检测程序中违例情况的开发者工具。最常用的场景就是检测主线程中本地磁盘和网络读写等耗时的操作。</p>

<h3>严在哪里</h3>

<p>既然叫做严格模式，那么又严格在哪些地方呢？<br/>
在Android中，主线程，也就是UI线程，除了负责处理UI相关的操作外，还可以执行文件读取或者数据库读写操作（从Android 4.0 开始，网络操作禁止在主线程中执行，否则会抛出<a href="http://droidyue.com/blog/2014/11/08/look-into-android-dot-os-dot-networkonmainthreadexception/">NetworkOnMainThreadException</a>）。使用严格模式，系统检测出主线程违例的情况会做出相应的反应，如日志打印，弹出对话框亦或者崩溃等。换言之，严格模式会将应用的违例细节暴露给开发者方便优化与改善。</p>

<h3>具体能检测什么</h3>

<p>严格模式主要检测两大问题，一个是线程策略，即TreadPolicy，另一个是VM策略，即VmPolicy。</p>

<h3>ThreadPolicy</h3>

<p>线程策略检测的内容有</p>

<ul>
<li>自定义的耗时调用 使用<strong>detectCustomSlowCalls()</strong>开启</li>
<li>磁盘读取操作 使用<strong>detectDiskReads()</strong>开启</li>
<li>磁盘写入操作 使用<strong>detectDiskWrites()</strong>开启</li>
<li>网络操作  使用<strong>detectNetwork()</strong>开启</li>
</ul>


<h3>VmPolicy</h3>

<p>虚拟机策略检测的内容有</p>

<ul>
<li>Activity泄露 使用<strong>detectActivityLeaks()</strong>开启</li>
<li>未关闭的Closable对象泄露  使用<strong>detectLeakedClosableObjects()</strong>开启</li>
<li>泄露的Sqlite对象  使用<strong>detectLeakedSqlLiteObjects()</strong>开启</li>
<li>检测实例数量 使用<strong>setClassInstanceLimit()</strong>开启</li>
</ul>


<h2>工作原理</h2>

<p>其实StrictMode实现原理也比较简单，以IO操作为例，主要是通过在open，read，write，close时进行监控。<code>libcore.io.BlockGuardOs</code>文件就是监控的地方。以open为例，如下进行监控。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">FileDescriptor</span> <span class="nf">open</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mode</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ErrnoException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BlockGuard</span><span class="o">.</span><span class="na">getThreadPolicy</span><span class="o">().</span><span class="na">onReadFromDisk</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">mode</span> <span class="o">&amp;</span> <span class="n">O_ACCMODE</span><span class="o">)</span> <span class="o">!=</span> <span class="n">O_RDONLY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BlockGuard</span><span class="o">.</span><span class="na">getThreadPolicy</span><span class="o">().</span><span class="na">onWriteToDisk</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">os</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">flags</span><span class="o">,</span> <span class="n">mode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<strong>onReadFromDisk()</strong>方法的实现，代码位于StrictMode.java中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReadFromDisk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">mPolicyMask</span> <span class="o">&amp;</span> <span class="n">DETECT_DISK_READ</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">tooManyViolationsThisLoop</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">BlockGuard</span><span class="o">.</span><span class="na">BlockGuardPolicyException</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StrictModeDiskReadViolation</span><span class="o">(</span><span class="n">mPolicyMask</span><span class="o">);</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">fillInStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="n">startHandlingViolationException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何使用</h2>

<p>关于StrictMode如何使用，最重要的就是如何启用严格模式。</p>

<h3>放在哪里</h3>

<p>严格模式的开启可以放在Application或者Activity以及其他组件的onCreate方法。为了更好地分析应用中的问题，建议放在Application的onCreate方法中。</p>

<h3>简单启用</h3>

<p>以下的代码启用全部的ThreadPolicy和VmPolicy违例检测</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">IS_DEBUG</span> <span class="o">&amp;&amp;</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">GINGERBREAD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StrictMode</span><span class="o">.</span><span class="na">setThreadPolicy</span><span class="o">(</span><span class="k">new</span> <span class="n">StrictMode</span><span class="o">.</span><span class="na">ThreadPolicy</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">detectAll</span><span class="o">().</span><span class="na">penaltyLog</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>  <span class="n">StrictMode</span><span class="o">.</span><span class="na">setVmPolicy</span><span class="o">(</span><span class="k">new</span> <span class="n">VmPolicy</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">detectAll</span><span class="o">().</span><span class="na">penaltyLog</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>严格模式需要在debug模式开启，不要在release版本中启用。</p>

<p>同时，严格模式自API 9 开始引入，某些API方法也从 API 11 引入。使用时应该注意 API 级别。</p>

<p>如有需要，也可以开启部分的严格模式。</p>

<h3>查看结果</h3>

<p>严格模式有很多种报告违例的形式，但是想要分析具体违例情况，还是需要查看日志，终端下过滤StrictMode就能得到违例的具体stacktrace信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb logcat | grep StrictMode
</span></code></pre></td></tr></table></div></figure>


<h2>解决违例</h2>

<ul>
<li>如果是主线程中出现文件读写违例，建议使用工作线程（必要时结合Handler）完成。</li>
<li>如果是对SharedPreferences写入操作，在API 9 以上 建议优先调用apply而非commit。</li>
<li>如果是存在未关闭的Closable对象，根据对应的stacktrace进行关闭。</li>
<li>如果是SQLite对象泄露，根据对应的stacktrace进行释放。</li>
</ul>


<p>举个例子</p>

<p>以主线程中的文件写入为例，引起违例警告的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToExternalStorage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">externalStorage</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">();</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">destFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">externalStorage</span><span class="o">,</span> <span class="s">&quot;dest.txt&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">destFile</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>引起的警告为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>: StrictMode policy violation; ~duration<span class="o">=</span>20 ms: android.os.StrictMode<span class="nv">$StrictModeDiskReadViolation</span>: <span class="nv">policy</span><span class="o">=</span>31 <span class="nv">violation</span><span class="o">=</span>2
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at android.os.StrictMode<span class="nv">$AndroidBlockGuardPolicy</span>.onReadFromDisk<span class="o">(</span>StrictMode.java:1176<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at libcore.io.BlockGuardOs.open<span class="o">(</span>BlockGuardOs.java:106<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at libcore.io.IoBridge.open<span class="o">(</span>IoBridge.java:390<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at java.io.FileOutputStream.&lt;init&gt;<span class="o">(</span>FileOutputStream.java:88<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.writeToExternalStorage<span class="o">(</span>MainActivity.java:56<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.onCreate<span class="o">(</span>MainActivity.java:30<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at android.app.Activity.performCreate<span class="o">(</span>Activity.java:4543<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为上述属于主线程中的IO违例，解决方法就是讲写入操作放入工作线程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public void writeToExternalStorage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    new Thread<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      @Override
</span><span class='line'>      public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          super.run<span class="o">()</span>;
</span><span class='line'>          File <span class="nv">externalStorage</span> <span class="o">=</span> Environment.getExternalStorageDirectory<span class="o">()</span>;
</span><span class='line'>          File <span class="nv">destFile</span> <span class="o">=</span> new File<span class="o">(</span>externalStorage, <span class="s2">&quot;dest.txt&quot;</span><span class="o">)</span>;
</span><span class='line'>          try <span class="o">{</span>
</span><span class='line'>              OutputStream <span class="nv">output</span> <span class="o">=</span> new FileOutputStream<span class="o">(</span>destFile, <span class="nb">true</span><span class="o">)</span>;
</span><span class='line'>              output.write<span class="o">(</span><span class="s2">&quot;droidyue.com&quot;</span>.getBytes<span class="o">())</span>;
</span><span class='line'>              output.flush<span class="o">()</span>;
</span><span class='line'>              output.close<span class="o">()</span>;
</span><span class='line'>          <span class="o">}</span> catch <span class="o">(</span>FileNotFoundException e<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              e.printStackTrace<span class="o">()</span>;
</span><span class='line'>          <span class="o">}</span> catch <span class="o">(</span>IOException e<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              e.printStackTrace<span class="o">()</span>;
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>.start<span class="o">()</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而这并非完善，因为OutputStream.write方法可能抛出IOException，导致存在OutputStream对象未关闭的情况，仍然需要改进避免出现Closable对象未关闭的违例。改进如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToExternalStorage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">externalStorage</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">();</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">destFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">externalStorage</span><span class="o">,</span> <span class="s">&quot;dest.txt&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">destFile</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>检测内存泄露</h2>

<p>通常情况下，检测内存泄露，我们需要使用MAT对heap dump 文件进行分析，这种操作不困难，但也不容易。使用严格模式，只需要过滤日志就能发现内存泄露。</p>

<p>这里以Activity为例说明，首先我们需要开启对检测Activity泄露的违例检测。使用上面的detectAll或者detectActivityLeaks()均可。其次写一段能够产生Activity泄露的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LeakyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyApplication</span><span class="o">.</span><span class="na">sLeakyActivities</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MyApplication中关于sLeakyActivities的部分实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">IS_DEBUG</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;</span> <span class="n">sLeakyActivities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们反复进入LeakyActivity再退出，过滤StrictMode就会得到这样的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>E/StrictMode<span class="o">(</span> 2622<span class="o">)</span>: class com.example.strictmodedemo.LeakyActivity; <span class="nv">instances</span><span class="o">=</span>2; <span class="nv">limit</span><span class="o">=</span>1
</span><span class='line'>E/StrictMode<span class="o">(</span> 2622<span class="o">)</span>: android.os.StrictMode<span class="nv">$InstanceCountViolation</span>: class com.example.strictmodedemo.LeakyActivity; <span class="nv">instances</span><span class="o">=</span>2; <span class="nv">limit</span><span class="o">=</span>1
</span><span class='line'>E/StrictMode<span class="o">(</span> 2622<span class="o">)</span>:    at android.os.StrictMode.setClassInstanceLimit<span class="o">(</span>StrictMode.java:1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析日志，LeakyActivity本应该是只存在一份实例，但现在出现了2个，说明LeakyActivity发生了内存泄露。</p>

<p>严格模式除了可以检测Activity的内存泄露之外，还能自定义检测类的实例泄露。从API 11 开始，系统提供的这个方法可以实现我们的需求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public StrictMode.VmPolicy.Builder setClassInstanceLimit <span class="o">(</span>Class klass, int instanceLimit<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个栗子，比如一个浏览器中只允许存在一个SearchBox实例，我们就可以这样设置已检测SearchBox实例的泄露</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>StrictMode.setVmPolicy<span class="o">(</span>new VmPolicy.Builder<span class="o">()</span>.setClassInstanceLimit<span class="o">(</span>SearchBox.class, 1<span class="o">)</span>.penaltyLog<span class="o">()</span>.build<span class="o">())</span>;
</span></code></pre></td></tr></table></div></figure>


<h2>noteSlowCall</h2>

<p>StrictMode从 API 11开始允许开发者自定义一些耗时调用违例，这种自定义适用于自定义的任务执行类中，比如我们有一个进行任务处理的类，为TaskExecutor。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public class TaskExecutor <span class="o">{</span>
</span><span class='line'>    public void execute<span class="o">(</span>Runnable task<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        task.run<span class="o">()</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先需要跟踪每个任务的耗时情况，如果大于500毫秒需要提示给开发者，noteSlowCall就可以实现这个功能，如下修改代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskExecutor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">SLOW_CALL_THRESHOLD</span> <span class="o">=</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">executeTask</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">();</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cost</span> <span class="o">&gt;</span> <span class="n">SLOW_CALL_THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">StrictMode</span><span class="o">.</span><span class="na">noteSlowCall</span><span class="o">(</span><span class="s">&quot;slowCall cost=&quot;</span> <span class="o">+</span> <span class="n">cost</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行一个耗时2000毫秒的任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>TaskExecutor <span class="nv">executor</span> <span class="o">=</span> new TaskExecutor<span class="o">()</span>;
</span><span class='line'>executor.executeTask<span class="o">(</span>new Runnable<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  @Override
</span><span class='line'>    public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        try <span class="o">{</span>
</span><span class='line'>          Thread.sleep<span class="o">(</span>2000<span class="o">)</span>;
</span><span class='line'>        <span class="o">}</span> catch <span class="o">(</span>InterruptedException e<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            e.printStackTrace<span class="o">()</span>;
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<p>得到的违例日志，注意其中<code>~duration=20 ms</code>并非耗时任务的执行时间，而我们的自定义信息<code>msg=slowCall cost=2000</code>才包含了真正的耗时。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>: StrictMode policy violation; ~duration<span class="o">=</span>20 ms: android.os.StrictMode<span class="nv">$StrictModeCustomViolation</span>: <span class="nv">policy</span><span class="o">=</span>31 <span class="nv">violation</span><span class="o">=</span>8 <span class="nv">msg</span><span class="o">=</span>slowCall <span class="nv">cost</span><span class="o">=</span>2000
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.StrictMode<span class="nv">$AndroidBlockGuardPolicy</span>.onCustomSlowCall<span class="o">(</span>StrictMode.java:1163<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.StrictMode.noteSlowCall<span class="o">(</span>StrictMode.java:1974<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.example.strictmodedemo.TaskExecutor.executeTask<span class="o">(</span>TaskExecutor.java:17<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.onCreate<span class="o">(</span>MainActivity.java:36<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.Activity.performCreate<span class="o">(</span>Activity.java:4543<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.Instrumentation.callActivityOnCreate<span class="o">(</span>Instrumentation.java:1071<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.performLaunchActivity<span class="o">(</span>ActivityThread.java:2158<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.handleLaunchActivity<span class="o">(</span>ActivityThread.java:2237<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.access<span class="nv">$600</span><span class="o">(</span>ActivityThread.java:139<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread<span class="nv">$H</span>.handleMessage<span class="o">(</span>ActivityThread.java:1262<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.Handler.dispatchMessage<span class="o">(</span>Handler.java:99<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.Looper.loop<span class="o">(</span>Looper.java:156<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.main<span class="o">(</span>ActivityThread.java:5005<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at java.lang.reflect.Method.invokeNative<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at java.lang.reflect.Method.invoke<span class="o">(</span>Method.java:511<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.android.internal.os.ZygoteInit<span class="nv">$MethodAndArgsCaller</span>.run<span class="o">(</span>ZygoteInit.java:784<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.android.internal.os.ZygoteInit.main<span class="o">(</span>ZygoteInit.java:551<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at dalvik.system.NativeStart.main<span class="o">(</span>Native Method<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>其他技巧</h2>

<p>除了通过日志查看之外，我们也可以在开发者选项中开启严格模式，开启之后，如果主线程中有执行时间长的操作，屏幕则会闪烁，这是一个更加直接的方法。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/strictmode_developer_tools.png"></p>

<h2>问题来了</h2>

<h3>日志的时间靠谱么</h3>

<p>在下面的过滤日志中，我们看到下面的一个IO操作要消耗31毫秒，这是真的么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>: StrictMode policy violation; ~duration<span class="o">=</span>31 ms: android.os.StrictMode<span class="nv">$StrictModeDiskReadViolation</span>: <span class="nv">policy</span><span class="o">=</span>31 <span class="nv">violation</span><span class="o">=</span>2
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at android.os.StrictMode<span class="nv">$AndroidBlockGuardPolicy</span>.onReadFromDisk<span class="o">(</span>StrictMode.java:1176<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at libcore.io.BlockGuardOs.read<span class="o">(</span>BlockGuardOs.java:148<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at libcore.io.IoBridge.read<span class="o">(</span>IoBridge.java:422<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.FileInputStream.read<span class="o">(</span>FileInputStream.java:179<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.InputStreamReader.read<span class="o">(</span>InputStreamReader.java:244<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.BufferedReader.fillBuf<span class="o">(</span>BufferedReader.java:130<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.BufferedReader.readLine<span class="o">(</span>BufferedReader.java:354<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.testReadContentOfFile<span class="o">(</span>MainActivity.java:65<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.onCreate<span class="o">(</span>MainActivity.java:28<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at android.app.Activity.performCreate<span class="o">(</span>Activity.java:4543<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的stacktrace可以看出testReadContentOfFile方法中包含了文件读取IO操作，至于是否为31毫秒，我们可以利用秒表的原理计算一下，即在方法调用的地方如下记录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">testReadContentOfFile</span><span class="o">();</span>
</span><span class='line'><span class="kt">long</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;cost = &quot;</span> <span class="o">+</span> <span class="n">cost</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的日志中上述操作耗时9毫秒，非31毫秒。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/MainActivity<span class="o">(</span>20996<span class="o">)</span>: <span class="nv">cost</span> <span class="o">=</span> 9
</span></code></pre></td></tr></table></div></figure>


<p>注：通常情况下StrictMode给出的耗时相对实际情况偏高，并不是真正的耗时数据。</p>

<h2>注意</h2>

<ul>
<li>在线上环境即Release版本不建议开启严格模式。</li>
<li>严格模式无法监控JNI中的磁盘IO和网络请求。</li>
<li>应用中并非需要解决全部的违例情况，比如有些IO操作必须在主线程中进行。</li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android进程线程调度之cgroups]]></title>
    <link href="http://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/"/>
    <updated>2015-09-17T21:17:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups</id>
    <content type="html"><![CDATA[<p>做Android开发的同学们，了解cgroups的同学其实不多，cgroups是什么意思呢，在操作系统中有着什么样的作用，以及Android中的cgroups有哪些，各有什么用呢，本文将会进行逐一剖析。</p>

<!--more-->


<h2>先看定义</h2>

<p>下面的引用为维基百科的<a href="https://zh.wikipedia.org/wiki/Cgroups">cgroups的定义</a></p>

<blockquote><p>cgroups，其名称源自控制组群（control groups）的简写，是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）。</p></blockquote>

<p>维基百科的解释言简意赅，无需赘述，下面以例子讲解如何使用cgroups。</p>

<h2>结合示例</h2>

<p>以下会以Fedora这个Linux发行版为例，介绍如何使用cgroups限制进程的CPU使用率。</p>

<p>这里我们使用一个死循环的Python脚本用来消耗CPU，文件名为loop.py，。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding=utf-8</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行脚本<code>python loop.py</code>，使用top查看该进程的CPU使用情况,CPU使用率接近100%。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/cpu_cost_no_limit.png"></p>

<p>然后我们将会通过修改配置，利用cgroups将该进程的CPU使用率降低到10%</p>

<p>首先查看当前系统的cgroups</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>16:31:57-androidyue/tmp<span class="nv">$ </span>sudo mount -t cgroup
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>androidyue:
</span><span class='line'>cgroup on /sys/fs/cgroup/systemd <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,release_agent<span class="o">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="o">=</span>systemd<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/cpuset <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,cpuset<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/cpu,cpuacct <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,cpuacct,cpu<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/memory <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,memory<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/devices <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,devices<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/freezer <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,freezer<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/net_cls <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,net_cls<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/blkio <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,blkio<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/perf_event <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,perf_event<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个cgroup,控制CPU使用率。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /sys/fs/cgroup/cpu
</span><span class='line'>sudo mkdir cpu_test
</span></code></pre></td></tr></table></div></figure>


<p>接下来查看刚刚创建的cpu_test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>17:04:54-androidyue/sys/fs/cgroup/cpu<span class="nv">$ </span>ls cpu_test/
</span><span class='line'>cgroup.clone_children  cgroup.procs  cpuacct.usage         cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release
</span><span class='line'>cgroup.event_control   cpuacct.stat  cpuacct.usage_percpu  cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks
</span></code></pre></td></tr></table></div></figure>


<p>完成这一目标修改涉及到的文件有</p>

<p>cpu.cfs_period_us
设置该cgroup请求到CPU资源分配的周期，单位为微秒（这里使用us代替微秒单位µs）。</p>

<p>cpu.cfs_quota_us
设置cgroup组内的进程在一次CPU分配周期（即cpu.cfs_period_us指定的值）内可以执行的时间。</p>

<p>如果我们想要设置该cpu_test组内的cpu使用率为10%，我们需要这样修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>1000000 &gt; cpu.cfs_period_us
</span><span class='line'><span class="nb">echo </span>100000 &gt; cpu.cfs_quota_us
</span></code></pre></td></tr></table></div></figure>


<p>注意上述修改需要使用root身份登陆，即<code>sudo -i</code>,下面的将进程加入cgroup同样需要root身份。</p>

<p>将上图中的进程ID 写入到cpu_test下的tasks文件中，并查看tasks验证是否加入成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>17:12:27-root/sys/fs/cgroup/cpu/cpu_test<span class="nv">$ </span>sudo <span class="nb">echo </span>12093 &gt; tasks
</span><span class='line'>17:12:41-root/sys/fs/cgroup/cpu/cpu_test<span class="nv">$ </span>cat tasks
</span><span class='line'>12093
</span></code></pre></td></tr></table></div></figure>


<p>再次查看进程id为12093的CPU使用率，已成功降低到10%左右。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/cpu_cost_with_limit.png"></p>

<h2>cgroups在Android中的应用</h2>

<p>在Android中也存在cgroups，涉及到CPU的目前只有两个，一个是apps，路径为<code>/dev/cpuctl/apps</code>。另一个是bg_non_interactive，路径为<code>/dev/cpuctl/apps/bg_non_interactive</code></p>

<h3>cpu.share</h3>

<p>cpu.share文件中保存了整数值，用来设置cgroup分组任务获得CPU时间的相对值。举例来说，cgroup A和cgroup B的cpu.share值都是1024，那么cgroup A 与cgroup B中的任务分配到的CPU时间相同，如果cgroup C的cpu.share为512，那么cgroup C中的任务获得的CPU时间是A或B的一半。</p>

<p>apps下的cpu.share 值为1024</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps <span class="c"># cat cpu.shares </span>
</span><span class='line'>1024
</span></code></pre></td></tr></table></div></figure>


<p>bg_non_interactive下的cpu_share值为52</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps/bg_non_interactive <span class="c"># cat cpu.shares</span>
</span><span class='line'>52
</span></code></pre></td></tr></table></div></figure>


<p>也就是说apps分组与bg_non_interactive分组cpu.share值相比接近于20:1。由于Android中只有这两个cgroup，也就是说apps分组中的应用可以利用95%的CPU，而处于bg_non_interactive分组中的应用则只能获得5%的CPU利用率。</p>

<h2>cpu.rt_period_us与cpu.rt_runtime_us</h2>

<p>cpu.rt_period_us用来设置cgroup获得CPU资源的周期，单位为微秒。
cpu.rt_runtime_us用来设置cgroup中的任务可以最长获得CPU资源的时间，单位为微秒。设定这个值可以访问某个cgroup独占CPU资源。最长的获取CPU资源时间取决于逻辑CPU的数量。比如cpu.rt_runtime_us设置为200000（0.2秒），cpu.rt_period_us设置为1000000（1秒）。在单个逻辑CPU上的获得时间为每秒为0.2秒。 2个逻辑CPU，获得的时间则是0.4秒。</p>

<p>apps分组下的两个配置的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps <span class="c"># cat cpu.rt_period_us</span>
</span><span class='line'>1000000
</span><span class='line'>root@htc_m8tl:/dev/cpuctl/apps <span class="c"># cat cpu.rt_runtime_us</span>
</span><span class='line'>800000
</span></code></pre></td></tr></table></div></figure>


<p>即单个逻辑CPU下每一秒内可以获得0.8秒的执行时间。</p>

<p>bg_non_interactive分组下的两个配置的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps/bg_non_interactive <span class="c"># cat cpu.rt_period_us </span>
</span><span class='line'>1000000
</span><span class='line'>root@htc_m8tl:/dev/cpuctl/apps/bg_non_interactive <span class="c"># cat cpu.rt_runtime_us</span>
</span><span class='line'>700000
</span></code></pre></td></tr></table></div></figure>


<p>即单个逻辑CPU下每一秒可以获得0.7秒的执行时间。</p>

<h3>花落谁家</h3>

<p>在Android中，一个应用（进程）既可以由apps切换到bg_non_interactive，也可以切换回来。</p>

<h4>Activity</h4>

<p>当一个Activity处于可见的状态下，那么这个应用进程就属于apps分组。</p>

<h4>Service</h4>

<p>当Service调用startForeground方法后，那么这个应用进程则是归类于apps分组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Notification</span><span class="o">.</span><span class="na">Builder</span>  <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notification</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">setContentTitle</span><span class="o">(</span><span class="s">&quot;Title&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="n">startForeground</span><span class="o">(</span><span class="n">notification</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(),</span> <span class="n">notification</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如何确定进程的cgroups</h3>

<p>其实确定过程也很简单，总共分三步。</p>

<p>第一步，进入已经root的Android设备终端</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">11</span><span class="o">:</span><span class="mi">10</span> <span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span>
</span><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">su</span>
</span><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二步，目标应用的进程id，这里以我们的demo程序（包名为com.droidyue.androidthreadschedule）为例。得到的进程id为22871</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">ps</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span>
</span><span class='line'><span class="n">u0_a1434</span>  <span class="mi">22871</span> <span class="mi">23723</span> <span class="mi">970040</span> <span class="mi">54304</span> <span class="n">ffffffff</span> <span class="mi">400</span><span class="n">a045c</span> <span class="n">S</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">androidthreadschedule</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三步，利用进程id查看其所在的cgroups</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">2</span><span class="o">|</span><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">cat</span>  <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="mi">22871</span><span class="o">/</span><span class="n">cgroup</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span><span class="nl">cpu:</span><span class="o">/</span><span class="n">apps</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span><span class="nl">memory:</span><span class="o">/</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span><span class="nl">cpuacct:</span><span class="o">/</span><span class="n">uid</span><span class="o">/</span><span class="mi">11434</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上三步，<del>我们就能把大象关冰箱里</del>,我们就能得到进程所在的cgroups分组。</p>

<h2>利用cgroups我们可以做什么</h2>

<p>其实对于一般应用来说，能做的事情少之又少。对于有需要的应用可以使用Service.startForeground方法来获取更多的CPU资源，但并不建议盲目去这样做，还是要根据自身应用需要实现。</p>

<p>另外，个人认为最大的收获，就是我们可以参照cgroups的分组的思想来设计有类似场景的方案解决实际问题。</p>

<h3>同系列文章</h3>

<ul>
<li><a href="http://droidyue.com/blog/2015/09/05/android-process-and-thread-schedule-nice/?droid_refer=series">剖析Android中进程与线程调度之nice</a></li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你的Java代码对JIT编译友好么？]]></title>
    <link href="http://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly/"/>
    <updated>2015-09-12T18:16:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/Java-Application-Hostile-to-JIT-Compilation">你的Java代码对JIT编译友好么？</a>。如需转载，请与 InfoQ 中文站联系。</p>

<h2>摘要</h2>

<p>在JVM中，即时编译器（以下简称JIT）是很重要的一部分，可以帮助应用大幅度提升执行效率。但是很多程序却并不能很好地利用JIT的高性能优化能力。本文中，我们将通过研究一些简单的例子找出程序代码对JIT不友好的问题。</p>

<!--more-->


<p>JIT编译器是Java虚拟机（以下简称JVM）中效率最高并且最重要的组成部分之一。但是很多的程序并没有充分利用JIT的高性能优化能力，很多开发者甚至也并不清楚他们的程序有效利用JIT的程度。</p>

<p>在本文中，我们将介绍一些简单的方法来验证你的程序是否对JIT友好。这里我们并不打算覆盖诸如JIT编译器工作原理这些细节。只是提供一些简单基础的检测和方法来帮助你的代码对JIT友好，进而得到优化。</p>

<p>JIT编译的关键一点就是JVM会自动地监控正在被解释器执行的方法。一旦某个方法被视为频繁调用，这个方法就会被标记，进而编译成本地机器指令。这些频繁执行的方法的编译由后台的一个JVM线程来完成。在编译完成之前，JVM会执行这个方法的解释执行版本。一旦该方法编译完成，JVM会使用将方法调度表中该方法的解释的版本替换成编译后的版本。</p>

<p>Hotspot虚拟机有很多JIT编译优化的技术，但是其中最重要的一个优化技术就是内联。在内联的过程中，JIT编译器有效地将一个方法的方法体提取到其调用者中，从而减少虚方法调用。举个例子，看如下的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public int add(int x, int y) {
</span><span class='line'>  return x + y;
</span><span class='line'>}
</span><span class='line'>  
</span><span class='line'>int result = add(a, b);</span></code></pre></td></tr></table></div></figure>


<p>当内联发生之后，上述代码会变成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int result = a + b;</span></code></pre></td></tr></table></div></figure>


<p>上面的变量a和b替换了方法的参数，并且add方法的方法体已经复制到了调用者的区域。使用内联可以为程序带来很多好处，比如
  * 不会引起额外的性能损失
  * 减少指针的间接引用
  * 不需要对内联方法进行虚方法查找</p>

<p>另外，通过将方法的实现复制到调用者中，JIT编译器处理的代码增多，使得后续的优化和更多的内联成为可能。</p>

<p>内联取决于方法的大小。缺省情况下，含有35个字节码或更少的方法可以进行内联操作。对于被频繁调用的方法，临界值可以达到325个字节。我们可以通过设置-XX:MaxInlineSize=# 选项来修改最大的临界值，通过设置‑XX:FreqInlineSize=#选项来修改频繁调用的方法的临界值。但是在没有正确的分析的情况下，我们不应该修改这些配置。因为盲目地修改可能会对程序的性能带来不可预料的影响。</p>

<p>由于内联会对代码的性能有大幅提升，因此让尽可能多的方法达到内联条件尤为重要。这里我们介绍一款叫做Jarscan的工具来帮助我们检测程序中有多少方法是对内联友好的。</p>

<p>Jarscan工具是分析JIT编译的JITWatch开源工具套件中的一部分。和在运行时分析JIT日志的主工具不同，Jarscan是一款静态分析jar文件的工具。该工具的输出结果格式为CSV，结果中包含了超过频繁调用方法临界值的方法等信息。JITWatch和Jarscan是AdoptOpenJDK工程的一部分，该工程由Chris Newland领导。</p>

<p>在使用Jarscan并得到分析结果之前，需要从AdoptOpenJDK Jenkins网站下载二进制工具（<a href="https://adopt-openjdk.ci.cloudbees.com/job/jitwatch/jdk=JDK_1.7/ws/lastSuccessfulBuild/artifact/jitwatch-1.0.0-SNAPSHOT-JDK_1.7.tar.gz">Java 7 工具</a>，<a href="https://adopt-openjdk.ci.cloudbees.com/job/jitwatch/jdk=OpenJDK8/ws/lastSuccessfulBuild/artifact/jitwatch-1.0.0-SNAPSHOT-OpenJDK8.tar.gz">Java 8 工具</a>）。</p>

<p>运行很简单，如下所示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./jarScan.sh &lt;jars to analyse&gt;</span></code></pre></td></tr></table></div></figure>


<p>更多关于Jarscan的细节可以访问<a href="https://github.com/AdoptOpenJDK/jitwatch/wiki/JarScan">AdoptOpenJDK wiki</a>进行了解。</p>

<p>上面产生的报告对于开发团队的开发工作很有帮助，根据报告结果，他们可以查找程序中是否包含了过大而不能JIT编译的关键路径方法。上面的操作依赖于手动执行。但是为了以后的自动化，可以开启Java的-XX:+PrintCompilation 选项。开启这个选项会生成如下的日志信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>37    1      java.lang.String::hashCode (67 bytes)
</span><span class='line'>124   2  s!  java.lang.ClassLoader::loadClass  (58 bytes)</span></code></pre></td></tr></table></div></figure>


<p>其中，第一列表示从进程启动到JIT编译发生经过的时间，单位为毫秒。第二列表示的是编译id，表明该方法正在被编译（在Hotspot中一个方法可以多次去优化和再优化）。第三列表示的是附加的一些标志信息，比如s代表synchronized，！代表有异常处理。最后两列分别代表正在编译的方法名称和该方法的字节大小。</p>

<p>关于PrintCompilation输出的更多细节，Stephen Colebourne写过一篇博客文章详细介绍日志结果中各列的具体含义，感兴趣的可以访问<a href="http://blog.joda.org/2011/08/printcompilation-jvm-flag.html">这里</a>阅读。</p>

<p>PrintCompilation的输出结果会提供运行时正在编译的方法的信息，Jarscan工具的输出结果可以告诉我们哪些方法不能进行JIT编译。结合两者，我们就可以清楚地知道哪些方法进行了编译，哪些没有进行。另外，PrintCompilation选项可以在线上环境使用，因为开启这个选项几乎不会影响JIT编译器的性能。</p>

<p>但是，PrintCompilation也存在着两个小问题，有时候会显得不是那么方便：</p>

<p>  1.输出的结果中未包含方法的签名，如果存在重载方法，区分起来则比较困难。<br/>
  2.Hotspot虚拟机目前不能将结果输出到单独的文件中，目前只能是以标准输出的形式展示。</p>

<p>上述的第二个问题的影响在于PrintCompilation的日志会和其他常用的日志混在一起。对于大多数服务器端程序来说，我们需要一个过滤进程来将PrintCompilation的日志过滤到一个独立的日志中。最简单的判断一个方法否是JIT友好的途径就是遵循下面这个简单的步骤：</p>

<p>  1.确定程序中位于要处理的关键路径上的方法。<br/>
  2.检查这些方法没有出现在Jarscan的输出结果中。<br/>
  3.检查这些方法确实出现在了PrintCompilation的输出结果中。</p>

<p>如果一个方法超过了内联的临界值，大多数情况下最常用的方法就是讲这个重要的方法拆分成多个可以进行内联的小方法，这样修改之后通常会获取更好的执行效率。但是对于所有的性能优化而言，优化之前的执行效率需要测量记录，并且需要需要同优化后的数据进行对比之后，才能决定是否进行优化。为了性能优化而做出的改变不应该是盲目的。</p>

<p>几乎所有的Java程序都依赖大量的提供关键功能的库。Jarscan可以帮助我们检测哪些库或者框架的方法超过了内联的临界值。举一个具体的例子，我们这里检查JVM主要的运行时库 rt.jar文件。</p>

<p>为了让结果有点意思，我们分别比较Java 7 和Java 8，并查看这个库的变化。在开始之前我们需要安装Java 7 和 Java8 JDK。首先，我们分别运行Jarscan扫描各自的rt.jar文件，并得到用来后续分析的报告结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./jarScan.sh /Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home/jre/lib/rt.jar
</span><span class='line'>  &gt; large_jre_methods_7u71.txt
</span><span class='line'>$ ./jarScan.sh /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/rt.jar
</span><span class='line'>  &gt; large_jre_methods_8u25.txt</span></code></pre></td></tr></table></div></figure>


<p>上述操作结束之后，我们得到两个CSV文件，一个是JDK 7u71的结果，另一个是JDK 8u25。然后我们看一看不同的版本内联情况有哪些变化。首先，一个最简单的判断验证方式，看一看不同版本的JRE中有多少对JIT不友好的方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ wc -l large_jre_methods_*
</span><span class='line'> 3684 large_jre_methods_7u71.txt
</span><span class='line'> 3576 large_jre_methods_8u25.txt</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，相比Java 7，Java 8 少了100多个内联不友好的方法。下面继续深入研究，看看一些关键的包的变化。为了便于理解如何操作，我们再次介绍一下Jarscan的输出结果。Jarscan的输出结果有如下3个属性组成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> "&lt;package&gt;","&lt;method name and signature&gt;",&lt;num of bytes&gt;</span></code></pre></td></tr></table></div></figure>


<p>了解了上述的格式，我们可以利用一些Unix文本处理的工具来研究报告结果。比如，我们想看一下Java 7 和 Java 8 这两个版本中java.lang包下哪些方法变得内联友好了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ cat large_jre_methods_7u71.txt large_jre_methods_8u25.txt | grep -i
</span><span class='line'>  ^\"java.lang | sort | uniq -c</span></code></pre></td></tr></table></div></figure>


<p>上面的语句使用grep命令过滤出每份报告中以java.lang开头的行，即只显示位于包java.lang中的类的内联不友好的方法。sort | uniq -c 是一个比较老的Unix小技巧，首先将讲行信息进行排序（相同的信息将聚集到一起），然后对上面的排序数据进行去重操作。另外本命令还会统计一个当前行信息重复的次数，这个数据位于每一行信息的最开始部分。让我们看一下上述命令的执行结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat large_jre_methods_7u71.txt large_jre_methods_8u25.txt | grep -i ^\"java.lang | sort | uniq -c
</span><span class='line'>2 "java.lang.CharacterData00","int getNumericValue(int)",835
</span><span class='line'>2 "java.lang.CharacterData00","int toLowerCase(int)",1339
</span><span class='line'>2 "java.lang.CharacterData00","int toUpperCase(int)",1307
</span><span class='line'>// ... skipped output
</span><span class='line'>2 "java.lang.invoke.DirectMethodHandle","private static java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType,int)",613
</span><span class='line'>1 "java.lang.invoke.InnerClassLambdaMetafactory","private java.lang.Class spinInnerClass()",497
</span><span class='line'>// ... more output ----</span></code></pre></td></tr></table></div></figure>


<p>报告中，以2（这是使用了uniq -c 对相同的信息计算数量的结果）最为起始的条目说明这些方法在Java 7 和Java 8 中起字节码大小没有改变。虽然这并不能完全肯定地说明这些方法的字节码没有改变，但通常我们也可以视为没有改变。重复次数为1的方法有如下的情况：<br/>
  a)方法的字节码已经改变。<br/>
  b)这些方法为新的方法。</p>

<p>我们看一下以1开始的行数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 "java.lang.invoke.AbstractValidatingLambdaMetafactory","void
</span><span class='line'>validateMetafactoryArgs()",864
</span><span class='line'>1 "java.lang.invoke.InnerClassLambdaMetafactory","private
</span><span class='line'>java.lang.Class spinInnerClass()",497
</span><span class='line'>1 "java.lang.reflect.Executable","java.lang.String
</span><span class='line'>sharedToGenericString(int,boolean)",329</span></code></pre></td></tr></table></div></figure>


<p>上面三个对内联不友好的方法全部来自Java 8，因此这属于新方法的情况。前两个方法与lamda表达式实现相关，第三个方法和反射子系统中继承层级调整有关。在这里，这个改变就是在Java 8 中引入了方法和构造器可以继承的通用基类。</p>

<p>最后，我们看一看JDK核心库一些令人惊讶的特性：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ grep -i ^\"java.lang.String large_jre_methods_8u25.txt
</span><span class='line'>  "java.lang.String","public java.lang.String[] split(java.lang.String,int)",326
</span><span class='line'>  "java.lang.String","public java.lang.String toLowerCase(java.util.Locale)",431
</span><span class='line'>  "java.lang.String","public java.lang.String toUpperCase(java.util.Locale)",439</span></code></pre></td></tr></table></div></figure>


<p>从上面的日志我们可以了解到，即使是Java 8 中一些java.lang.String中一些关键的方法还是处于内联不友好的状态。尤其是toLowerCase和toUpperCase这两个方法居然过大而无法内联，着实让人感到奇怪。但是，这两个方法由于要处理UTF-8数据而不是简单的ASCII数据，进而增加了方法的复杂性和大小，因而超过了内联友好的临界值。</p>

<p>对于性能要求较高并且确定只处理ASCII数据的程序，通常我们需要实现一个自己的StringUtils类。该类中包含一些静态的方法来实现上述内联不友好的方法的功能，但这些静态方法既保持紧凑型又能到达内联的要求。</p>

<p>上述我们讨论的改进都是大部分基于静态分析。除此之外，使用强大的JITWatch工具可以帮助我们更好地优化。JITWatch工具需要设置-XX:+LogCompilation选项开启日志打印。其打印出来的日志为XML格式，而非PrintCompilation简单的文本输出，并且这些日志比较大，通常会到达几百MB。它会影响正在运行的程序（默认情况下主要来自日志输出的影响），因此这个选项不适合在线上的生产环境使用。</p>

<p>PrintCompilation和Jarscan结合使用并不困难，但却提供了简单且很有实际作用的一步，尤其是对于开发团队打算研究其程序中即时编译执行情况时。大多数情况下，在性能优化中，一个快速的分析可以帮助我们完成一些容易实现的目标。</p>

<h2>关于作者</h2>

<p>Ben Evans是jClarity公司的CEO，jClarity是一家致力于Java和JVM性能分析研究的创业公司。除此之外他还是London Java Community的负责人之一并在Java Community Process Executive Committee有一席之地。他之前的项目有Google IPO性能测试，金融交易系统，90年代知名电影网站等。</p>

<p><strong>查看英文原文：</strong><a href="Your%20Java%20Application%20Hostile%20to%20JIT%20Compilation?">Is Your Java Application Hostile to JIT Compilation?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[剖析Android中进程与线程调度之nice]]></title>
    <link href="http://droidyue.com/blog/2015/09/05/android-process-and-thread-schedule-nice/"/>
    <updated>2015-09-05T11:35:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/05/android-process-and-thread-schedule-nice</id>
    <content type="html"><![CDATA[<p>在计算机操作系统中，进程是进行资源分配和调度的基本单位，同时每个进程之内也可以存在多个线程。那么在Android系统（Linux Kernel）中，进程是如何去抢占资源，线程又是如何根据优先级切换呢，本文将尝试剖析这个问题，研究nice在Linux以及Android系统中的应用。</p>

<!--more-->


<h2>一些概念</h2>

<ul>
<li>进程 是计算机系统中，程序运行的实体，也是线程的容器。</li>
<li>线程 是进程中实际执行单位，一个线程是程序执行流的最小单元。在一个进程中可以有多个线程存在。</li>
</ul>


<h2>nice与进程调度</h2>

<p>Linux中，使用nice value（以下成为nice值）来设定一个进程的优先级，系统任务调度器根据nice值合理安排调度。</p>

<ul>
<li>nice的取值范围为-20到19。</li>
<li>通常情况下，nice的默认值为0。视具体操作系统而定。</li>
<li>nice的值越大，进程的优先级就越低，获得CPU调用的机会越少，nice值越小，进程的优先级则越高，获得CPU调用的机会越多。</li>
<li>一个nice值为-20的进程优先级最高，nice值为19的进程优先级最低。</li>
<li>父进程fork出来的子进程nice值与父进程相同。父进程renice，子进程nice值不会随之改变。</li>
</ul>


<h3>词源考究</h3>

<p>nice这个命令的来源几乎没有资料提到，于是便尝试自己来推断一下。在诸如词霸，沪江等词典给出的意思均为<code>好的；美好的；可爱的；好心的，友好的</code>。而有道词典则稍微给出了一个其他词典没有的<code>和蔼的</code>。个人认为有道给出的这个比较合理。要想做到和蔼，就需要做到谦让，因此或多或少牺牲自己一点，成全他人。所以nice值越高，越和蔼，但是自己的优先级也会越低。</p>

<h3>renice</h3>

<p>对于一个新的进程我们可以按照下面的代码为一个进程设定nice值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nice -n 10 adb logcat
</span></code></pre></td></tr></table></div></figure>


<p>对于已经创建的进程，我们可以使用renice来修改nice值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo renice -n 0 -p 24161
</span></code></pre></td></tr></table></div></figure>


<p>该命令需要使用root权限，-p对应的值为进程id。</p>

<p>注意renice命令在Linux发行版中-n 的值应该为进程的目标优先级。而Mac下-n，则是代表对当前权限的增加值。
比如在Mac下，讲一个进程的nice值由19改成10，可以这样操作<code>sudo renice -n -9  -p 24161</code>,这一点需要注意，避免掉进坑里。</p>

<h3>Android中的nice</h3>

<p>由于Android基于Linux Kernel，在Android中也存在nice值。但是一般情况下我们无法控制，原因如下：</p>

<ul>
<li>Android系统并不像其他Linux发行版那样便捷地使用nice命令操作。</li>
<li>renice需要root权限，一般应用无法实现。</li>
</ul>


<h2>线程调度</h2>

<p>虽然对于进程的优先级，我们无法控制，但是我们可以控制进程中的线程的优先级。在Android中有两种线程的优先级，一种为Android API版本，另一种是 Java 原生版本。</p>

<h3>Android API</h3>

<p>Android中的线程优先级别目前规定了如下，了解了进程优先级与nice值的关系，那么线程优先级与值之间的关系也就更加容易理解。</p>

<ul>
<li>THREAD_PRIORITY_DEFAULT，默认的线程优先级，值为0。</li>
<li>THREAD_PRIORITY_LOWEST，最低的线程级别，值为19。</li>
<li>THREAD_PRIORITY_BACKGROUND 后台线程建议设置这个优先级，值为10。</li>
<li>THREAD_PRIORITY_FOREGROUND 用户正在交互的UI线程，代码中无法设置该优先级，系统会按照情况调整到该优先级，值为-2。</li>
<li>THREAD_PRIORITY_DISPLAY 也是与UI交互相关的优先级界别，但是要比THREAD_PRIORITY_FOREGROUND优先，代码中无法设置，由系统按照情况调整，值为-4。</li>
<li>THREAD_PRIORITY_URGENT_DISPLAY 显示线程的最高级别，用来处理绘制画面和检索输入事件，代码中无法设置成该优先级。值为-8。</li>
<li>THREAD_PRIORITY_AUDIO 声音线程的标准级别，代码中无法设置为该优先级，值为 -16。</li>
<li>THREAD_PRIORITY_URGENT_AUDIO 声音线程的最高级别，优先程度较THREAD_PRIORITY_AUDIO要高。代码中无法设置为该优先级。值为-19。</li>
<li>THREAD_PRIORITY_MORE_FAVORABLE 相对THREAD_PRIORITY_DEFAULT稍微优先，值为-1。</li>
<li>THREAD_PRIORITY_LESS_FAVORABLE 相对THREAD_PRIORITY_DEFAULT稍微落后一些，值为1。</li>
</ul>


<p>使用Android API为线程设置优先级也很简单，只需要在线程执行时调用android.os.Process.setThreadPriority方法即可。这种在线程运行时进行修改优先级，效果类似renice。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>new Thread <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    @Override
</span><span class='line'>    public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      super.run<span class="o">()</span>;
</span><span class='line'>        android.os.Process.setThreadPriority<span class="o">(</span>Process.THREAD_PRIORITY_BACKGROUND<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>.start<span class="o">()</span>;
</span></code></pre></td></tr></table></div></figure>


<h3>Java原生API</h3>

<p>Java为Thread提供了三个级别的设置，</p>

<ul>
<li>MAX_PRIORITY，相当于android.os.Process.THREAD_PRIORITY_URGENT_DISPLAY，值为10。</li>
<li>MIN_PRIORITY，相当于android.os.Process.THREAD_PRIORITY_LOWEST，值为0。</li>
<li>NORM_PRIORITY，相当于android.os.Process.THREAD_PRIORITY_DEFAULT，值为5。</li>
</ul>


<p>使用setPriority我们可以为某个线程设置优先级，使用getPriority可以获得某个线程的优先级。</p>

<p>在Android系统中，不建议使用Java原生的API，因为Android提供的API划分的级别更多，更适合在Android系统中进行设定细致的优先级。</p>

<h2>注意</h2>

<p>Android API的线程优先级和Java原生API的优先级是相对独立的，比如使用android.os.Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)后，使用Java原生API,Thread.getPriority()得到的值不会改变。如下面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>new Thread<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    @Override
</span><span class='line'>    public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        super.run<span class="o">()</span>;
</span><span class='line'>        Log.i<span class="o">(</span>LOGTAG, <span class="s2">&quot;Java Thread Priority Before=&quot;</span> + Thread.currentThread<span class="o">()</span>.getPriority<span class="o">())</span>;
</span><span class='line'>        Process.setThreadPriority<span class="o">(</span>Process.THREAD_PRIORITY_LOWEST<span class="o">)</span>;
</span><span class='line'>        Log.i<span class="o">(</span>LOGTAG, <span class="s2">&quot;Java Thread Priority=&quot;</span> + Thread.currentThread<span class="o">()</span>.getPriority<span class="o">())</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>.start<span class="o">()</span>;
</span></code></pre></td></tr></table></div></figure>


<p>上述代码的运行日志为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>I/MainActivity<span class="o">(</span> 3679<span class="o">)</span>: Java Thread Priority <span class="nv">Before</span><span class="o">=</span>5
</span><span class='line'>I/MainActivity<span class="o">(</span> 3679<span class="o">)</span>: Java Thread <span class="nv">Priority</span><span class="o">=</span>5
</span></code></pre></td></tr></table></div></figure>


<p>由于上面的这一点缺陷，导致我们在分析ANR trace时需要注意，在下面的ANR日志信息中，<code>prio=5</code>中proi的值对应的Java原生API的线程优先级。而<code>nice=-6</code>中的nice表示的Android API版本的线程优先级。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;main&quot;</span> <span class="nv">prio</span><span class="o">=</span>5 <span class="nv">tid</span><span class="o">=</span>1 NATIVE
</span><span class='line'>  | <span class="nv">group</span><span class="o">=</span><span class="s2">&quot;main&quot;</span> <span class="nv">sCount</span><span class="o">=</span>1 <span class="nv">dsCount</span><span class="o">=</span>0 <span class="nv">obj</span><span class="o">=</span>0x41690f18 <span class="nv">self</span><span class="o">=</span>0x4167e650
</span><span class='line'>  | <span class="nv">sysTid</span><span class="o">=</span>1765 <span class="nv">nice</span><span class="o">=</span>-6 <span class="nv">sched</span><span class="o">=</span>0/0 <span class="nv">cgrp</span><span class="o">=</span>apps <span class="nv">handle</span><span class="o">=</span>1074196888
</span><span class='line'>  | <span class="nv">state</span><span class="o">=</span>S <span class="nv">schedstat</span><span class="o">=(</span> 0 0 0 <span class="o">)</span> <span class="nv">utm</span><span class="o">=</span>5764 <span class="nv">stm</span><span class="o">=</span>3654 <span class="nv">core</span><span class="o">=</span>2
</span><span class='line'>  <span class="c">#00  pc 00022624  /system/lib/libc.so (__futex_syscall3+8)</span>
</span><span class='line'>  <span class="c">#01  pc 0000f054  /system/lib/libc.so (__pthread_cond_timedwait_relative+48)</span>
</span><span class='line'>  <span class="c">#02  pc 0000f0b4  /system/lib/libc.so (__pthread_cond_timedwait+64)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>避免ANR</h2>

<p>我在之前的文章<a href="http://droidyue.com/blog/2015/07/18/anr-in-android/">说说Android中的ANR</a>中提到使用WorkerThread处理耗时IO操作，同时将WorkerThread的优先级降低，对于耗时IO操作，比如读取数据库，文件等，我们可以设置该workerThread优先级为THREAD_PRIORITY_BACKGROUND，以此降低与主线程竞争的能力。</p>

<h3>同系列文章</h3>

<ul>
<li><a href="http://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/?droid_refer=series">剖析Android中进程与线程调度之cgroups</a></li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
</feed>
