<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2019-05-12T21:49:39+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin 和 Flutter 对于开发者究竟意味着什么？]]></title>
    <link href="https://droidyue.com/blog/2019/05/12/kotlin-vs-flutter/"/>
    <updated>2019-05-12T21:34:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/12/kotlin-vs-flutter</id>
    <content type="html"><![CDATA[<p>本文系CSDN约稿，具体转载事宜请沟通CSDN。</p>

<blockquote><p>作者 : 段建华<br/>
责编 : 唐小引<br/>
出品 : CSDN（ID：CSDNnews）</p></blockquote>

<p>【CSDN 编者按】近些年来，编程语言流行度的变化其实不大，在 TIOBE 编程语言排行榜上，Java、C、C++ 固若金山，也就只有 Python 会攻城略地成为第四。在这 TOP3 之中，Java 以其非常优秀的普适性，可以用于前后端开发，再加上非常成熟的 JVM 虚拟机以及整个 Java 生态，让 Java 这个老大哥常年雄踞 TOP1，在 CSDN 的 Java 相关的文章之中，常有用户留言调侃“Java：你们随便争，反正我 Java 是第一”也可窥见一二。</p>

<p>而从两年前 Google 正式宣布 Kotlin 成为 Android 官方支持的语言开始，对于“Kotlin 即将取代 Java”的讨论便甚嚣尘上从未停歇。彼时，Kotlin 这个诞生于 2011 年的小伙子让已经使用了 Java 多年的 Android 开发者们有了点不可言说的滋味。同时，在过去的数年之间，伴随着 Oracle 与 Google 纷争不止，业界“Oracle 要玩死 Java”之声亦是不绝于耳。</p>

<!--more-->


<p>Java 8 更新，Oracle 将“删除”按钮设置成了高亮</p>

<p>2017 年，面对着 Kotlin 这个 Android 开发新贵，Realm 直接给出了一个预测，就是“到 2018 年底，在 Android 开发领域，Kotlin 将超越 Java，成为开发 Android 应用的第一语言”。</p>

<p>如今，时间上虽然稍晚了几个月，但这份预测却成为了现实。</p>

<p>那么，当今天 Google I/O 大会上，Kotlin 取代 Java 成为 Android App 开发的首选语言之时，对于我们移动开发者而言，究竟意味着什么？同时，当 Flutter 带着一统 App、Web、桌面及嵌入式开发之势而来之时，移动开发者该怎么办？对此，CSDN 特别邀请在国内 Android 圈子中较早研究 Kotlin 的段建华（@技术小黑屋）来解答目前开发者们最为关心的问题：为什么 Google 会越过 Java 让 Kotlin First？</p>

<h2>采用 Kotlin 与 Oracle 版权有关系么？</h2>

<p>其实可能没有关系。</p>

<p>这场起自 2010 年的诉讼案，几经反转，曾一度惊动美国最高法院，从最初的专利和版权侵权到最后聚焦在 Google 是否合理使用了 Java 的 API。但是 Oracle 自始至终都不是在控告 Google 允许开发者使用 Java 来开发应用程序。</p>

<p>而真正让 Kotlin 被 Google 采用的原因其实是 Kotlin 自身的优点，譬如安全、简洁、实用，以及与 Java 可交互良好等特点。除此之外，Kotlin 在相对很早的时候就在国外的知名公司用来开发 Android App，有着不错的氛围和环境，这也为其裂变发展贡献了不小的功劳。</p>

<h2>Kotlin First 对于 Android 开发者究竟意味着什么？</h2>

<p>首先对于 Google 来说，应该意味着更进一步地放弃 Java。这会导致更多的 Android 库出现对应的 Kotlin 实现，甚至可能是只有 Kotlin 版本，Android Studio IDE 也会出现更多的倾向于 Kotlin 的特性和支持等。结果可能会是 App 开发者进一步向 Kotlin 靠拢，而 Java 则相应地被进一步孤立。</p>

<p>其次，对于 Android 开发者来说，当本届 I/O 大会 Google 宣布 Kotlin 作为 Android 首选开发语言那一刻，再次证明我们使用 Kotlin 是正确的。内心都是无比 Exciting，充盈着一种满满的被认可感，而这势必会让更多的 Android 开发者投向 Kotlin 的怀抱。</p>

<p>同时，至关重要的是体现在业务上，对于管理者来说，会有更大的信心和更强的动力去推动团队完成从 Java 到 Kotlin 的转变。</p>

<p>事实上，当前在 Android 研发的招聘中，大部分招聘 JD 都会包含希望求职者具备 Kotlin 编码能力的描述，而面试者的简历也会提到自己学习或者项目应用 Kotlin 等内容。</p>

<p>并且，目前笔者从各种渠道了解到，大部分的公司都已经使用 Kotlin 作为首选开发语言，而且积极效果反馈明显。</p>

<p>看完移动端，我们再看服务端，不同于 Java 在后端的良好表现。尽管就 Kotlin 来说，除了前文所述的优点之外，协程是一大吸引，但 Kotlin 在中后台开发人员中的流行度可能并不会像在 Android 上这么顺利，究其原因，主要还是：</p>

<ul>
<li>缺乏官方权威或大公司背书来提振威望；</li>
<li>相关的框架需要进一步丰富；</li>
</ul>


<p>CSDN 编者注：对于这一点，在 CSDN《2018 &ndash; 2019 中国开发者调查报告》中，拥有十几年移动开发经验的轻芒联合创始人范怀宇对此表示：Java 的 Web 框架经过千锤百炼已经可以支撑足够大的并发，JVM 经过长年优化性能表现也非常出众，而 Java 的各类库、统一的编程模型、丰富的人才储备，可以满足各种场景的诉求。</p>

<p>相应的中文社区和氛围需要增强。</p>

<p>但无论如何，<strong>Kotlin 的确称得上是 Java 程序员近在咫尺的小确幸，你需要做的就是抓住它，不要错过</strong>。</p>

<h2>Google 同推 Flutter 和 Kotlin，那么移动开发者该如何做选择？</h2>

<p>我们再来看 Google 在移动端另一重推的框架，Flutter 自问世伊始便被寄予厚望，从开始的支持 Android 和 iOS 开发到现在的全平台（Mobile、Desktop、Web、Embedded），几近于真正地实现了数年来程序员梦寐以求的“Write once, run anywhere”的愿景。</p>

<p>因此相对而言，Flutter 显得更加有诱惑力，因为它是一个跨平台开发的解决方案，我想这也是大多数人给出的答案。</p>

<p>但是也有很多原因会导致你无法选用 Flutter，如下不完全列举：</p>

<ul>
<li>Flutter 需要使用 Dart 语言，没有第二语言。Dart 令人诟病的方面也不少；</li>
<li>对现有技术投入较多导致沉默成本过大，甚至是难以负担；</li>
<li>保守主义，避免过早地对某项技术投入资源；</li>
<li>领域限制，Flutter 无法满足要求。</li>
</ul>


<p>Kotlin 的被钦定可以解读为 Android 开始逐渐放弃 Java 语言这个开发依赖，而 Flutter 的推出可以被理解成 Google 开始放弃 Android，迎接新操作系统 Google Fuchsia 的准备。</p>

<p>出于综合考虑且必须二选一的情况下，建议你选择 Flutter，但是如果你有兴趣见识一种比 Java 更安全，更简洁，更实用，更优雅的语言的话，我也推荐你学一学 Kotlin。</p>

<p>Flutter 很有前途，但 Kotlin 也会让你欲罢不能，这确实是一件麻烦事。</p>

<h2>基于同时，对于我们所有技术人来说，一个非常头疼且不由得恐慌的问题，那便是如何应对日新月异的技术？</h2>

<p>这可能是越来越多的以工程为主的开发者面临的问题，因为今天有 Kotlin 和 Flutter，明天或许就会冒出来 Gotlin、Hlutter 等新的技术。</p>

<p>日新月异层出不穷，不断追求学习并不现实，反而有可能把自己搞的很累，甚至是产生负面效果。新技术固然可以学习，但是作为技术人，获得完善的素养显得更加意义深远。</p>

<p>笔者认为一个技术人员想要具备完善的素养，需要朝着这些方向努力：</p>

<ul>
<li>夯实基础；</li>
<li>学好英语；</li>
<li>提升学习能力；</li>
<li>坚持总结归纳问题的习惯；</li>
<li>增强分析问题，解决问题的能力。</li>
</ul>


<p>一个技术人员能够走多远，靠的不是会某种技术，而是完善以上高质量的素养。</p>

<h2>Kotlin 相关文章延伸阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation/">关于应用Kotlin后的编译速度问题</a></li>
<li><a href="https://droidyue.com/blog/2017/05/21/my-opinion-of-kotlins-becoming-an-official-language-of-android/">如何看待 Kotlin 成为 Android 官方支持开发语言？</a></li>
<li><a href="https://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/">为什么我要改用Kotlin</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防手抖开源之 Git 钩子]]></title>
    <link href="https://droidyue.com/blog/2019/05/04/git-pre-push-hook/"/>
    <updated>2019-05-04T19:12:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/04/git-pre-push-hook</id>
    <content type="html"><![CDATA[<p>最近“从开源到跑路”的事件逐渐增多，给涉事企业造成了不小的损失。因而相关的防范工作显得愈发重要。</p>

<p>客观而言，人为手动的防范显得原始和笨拙，好在git提供了相关的钩子方法，为我们这里的防范提供了可行性。</p>

<p>这里我们以<code>git push</code> 命令对应的<code>pre-push</code>钩子为例，因为想要开源出去，这个命令通常是必须执行的。</p>

<!--more-->


<h2>编写git pre-hook</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># An example hook script to verify what is about to be pushed.  Called by &quot;git</span>
</span><span class='line'><span class="c"># push&quot; after it has checked the remote status, but before anything has been</span>
</span><span class='line'><span class="c"># pushed.  If this script exits with a non-zero status nothing will be pushed.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This hook is called with the following parameters:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># $1 -- Name of the remote to which the push is being done</span>
</span><span class='line'><span class="c"># $2 -- URL to which the push is being done</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If pushing without using a named remote those arguments will be equal.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Information about the commits which are being pushed is supplied as lines to</span>
</span><span class='line'><span class="c"># the standard input in the form:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   &lt;local ref&gt; &lt;local sha1&gt; &lt;remote ref&gt; &lt;remote sha1&gt;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This sample shows how to prevent push of commits where the log message starts</span>
</span><span class='line'><span class="c"># with &quot;WIP&quot; (work in progress).</span>
</span><span class='line'>
</span><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;git@github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;https://github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">z40</span><span class="o">=</span>0000000000000000000000000000000000000000
</span><span class='line'>
</span><span class='line'><span class="k">while </span><span class="nb">read </span>local_ref local_sha remote_ref remote_sha
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span> <span class="s2">&quot;$local_sha&quot;</span> <span class="o">=</span> <span class="nv">$z40</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>      <span class="c"># Handle delete</span>
</span><span class='line'>      :
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$remote_sha&quot;</span> <span class="o">=</span> <span class="nv">$z40</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'>          <span class="c"># New branch, examine all commits</span>
</span><span class='line'>          <span class="nv">range</span><span class="o">=</span><span class="s2">&quot;$local_sha&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="c"># Update to existing branch, examine new commits</span>
</span><span class='line'>          <span class="nv">range</span><span class="o">=</span><span class="s2">&quot;$remote_sha..$local_sha&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># Check for WIP commit</span>
</span><span class='line'>      <span class="nv">commit</span><span class="o">=</span><span class="sb">`</span>git rev-list -n 1 --grep <span class="s1">&#39;^WIP&#39;</span> <span class="s2">&quot;$range&quot;</span><span class="sb">`</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$commit&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Found WIP commit in $local_ref, not pushing&quot;</span>
</span><span class='line'>          <span class="nb">exit </span>1
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>拦截代码解释</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;git@github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;https://github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的代码</p>

<ul>
<li>拦截git协议的到github远程仓库的push请求</li>
<li>拦截https协议的到github远程仓库的push请求</li>
</ul>


<p>除此之外，我们还可以做什么</p>

<ul>
<li>可以根据自身需要增加<code>git@gitee.com</code>等屏蔽</li>
<li>根据需要，可以判定仓库名称来屏蔽。</li>
<li>编写shell语句，实现更加复杂的拦截处理</li>
</ul>


<p>完整文件地址: <a href="https://asset.droidyue.com/content/pre-push">https://asset.droidyue.com/content/pre-push</a></p>

<h2>针对单个Repo生效</h2>

<p>将上述pre-push 放入项目的<code>.git/hooks/</code>下面即可</p>

<h2>针对全局生效</h2>

<p>git 2.9 开始支持
设置全局git hook路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global core.hooksPath  /Users/yourUserName/.git/hooks
</span></code></pre></td></tr></table></div></figure>


<p>将上述pre-push 放入<code>/Users/yourUserName/.git/hooks</code></p>

<p>支持文件可执行权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod a+x your_pre_push_hook_path
</span></code></pre></td></tr></table></div></figure>


<h2>效果演示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xxx@bogon:/tmp/vim_katana<span class="o">(</span>master|✔<span class="o">)</span> % git push origin master
</span><span class='line'>git@github.com:androidyue/vim_katana.git
</span><span class='line'>github repo refused to push
</span><span class='line'>error: failed to push some refs to <span class="s1">&#39;git@github.com:androidyue/vim_katana.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>效果有多少</h2>

<p>防止恶意开源，并不能。只是理论上稍微提高了一点门槛。</p>

<p>这是因为</p>

<ul>
<li>恶意开源者可能删除这些git钩子</li>
<li>恶意开源者可以使用别的形式公开代码</li>
</ul>


<h2>它能做什么</h2>

<ul>
<li>如题所属，它是自身无意原因或者某些恶意中间环节导致开源的最后一道防线。</li>
</ul>


<p>源码安全无小事，事事需谨慎。</p>

<h2>内容推荐</h2>

<ul>
<li><a href="https://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/">pre-commit钩子实例</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 中的 Lambda 与 inline]]></title>
    <link href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/"/>
    <updated>2019-04-27T19:26:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline</id>
    <content type="html"><![CDATA[<p>在Kotlin中，有很多很酷很实用的特性，比如Lambda和高阶函数，利用这些特性，我们可以更加快速的实现开发，提升效率。</p>

<p>比如我们实现一个捕获Throwable，安全执行部分代码的高阶函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">safeRun</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">t:</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testNormalSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testNormalSafeRun&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>由于Kotlin默认是面向JDK 6，而Java 8 才引入Lambda表达式支持，Kotlin实际上是将Lambda翻译成了匿名内部类的实现形式。所以当我们反编译上面的代码，得到的如下的代码</p>

<p>Lambda被翻译成的class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="kd">extends</span> <span class="n">Lambda</span>
</span><span class='line'><span class="kd">implements</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="cm">/* invalid duplicate definition of identical inner class */</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testNormalSafeRun&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda表达式被调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">InlineSampleKt</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">safeRun</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNormalSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">safeRun</span><span class="o">(</span><span class="n">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的 Lambda 表达式 比较简单，那是因为</p>

<ul>
<li>Lambda 表达式仅仅使用了一次</li>
<li>Lambda 表达式未捕获外部的变量</li>
</ul>


<p>为了更深入的研究，我们尝试一下更加复杂的情况</p>

<ul>
<li>Lambda 表达式会多次调用</li>
<li>Lambda 表达式捕获外部的变量</li>
</ul>


<p>这里我们使用下面的代码，实现一个多次调用捕获外部变量的 Lambda 表达式的调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">toManyLambdaCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">safeRun</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;toManyLambdaCalls currentCount=$i&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的Lambda 表达式 捕获了外部的变量<code>i</code>，同时执行了很多次。</p>

<p>我们反编译上述的代码，得到的类似的Java实现代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">toManyLambdaCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">void</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">safeRun</span><span class="o">((</span><span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;)((</span><span class="n">Function0</span><span class="o">)</span><span class="k">new</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;((</span><span class="kt">int</span><span class="o">)</span><span class="n">i</span><span class="o">){</span>
</span><span class='line'>                <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="kt">int</span> <span class="n">$i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;toManyLambdaCalls currentCount=&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="n">$i</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="o">.</span><span class="n">$i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>                    <span class="kd">super</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}));</span>
</span><span class='line'>            <span class="o">++</span><span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中</p>

<ul>
<li>Lambda 表达式 翻译成的Function0 的实例被创建了近101多次，生成101个Fuction0 实例</li>
<li>由于Lambda 表达式捕获了外部的变量，生成的Fuction0类 接受变量作为参数</li>
</ul>


<p>上述代码存在的性能问题</p>

<ul>
<li>Function0 实例创建过多，而这些实例大多数会很快被回收，造成短时间内GC压力增大</li>
<li>次数过多的方法调用(Function0构造方法和invoke方法)，造成一定的耗时</li>
</ul>


<p>显然，这种实现，我们不能接受的。</p>

<h2>inline</h2>

<p>好在Kotlin提供了，处理上面问题的方法，这就是所谓的inline 关键字。如下，</p>

<ul>
<li>我们使用inline修饰<code>safeRunInlined</code>方法</li>
<li><code>testInlinedSafeRun</code> 中调用 <code>safeRunInlined</code> 方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">safeRunInlined</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">t:</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testInlinedSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">safeRunInlined</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testInlinedSafeRun&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次我们反编译上面的Kotlin代码，得到对应的Java 代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">safeRunInlined</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$safeRunInlined</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var3</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testInlinedSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var0</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testInlinedSafeRun&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var2</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们分析上述代码发现，testInlinedSafeRun 的方法体包含了</p>

<ul>
<li>safeRunInlined 的方法体</li>
<li>Lambda 表达式的内容</li>
</ul>


<p>是的，inline 的作用就是把上面两项的内容，提取到调用处 testInlinedSafeRun 中。通过这种形式，避免了最一开始的类实例生成的问题了。</p>

<h3>When Lambada meets return</h3>

<p>自从了解了 Lambda 可以被inline后，我们貌似可以自由自在地使用它。然而事实或许不是这样，比如我们看一下这段代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">higherOrderFunctionFirst</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;higherOrderFunction.before&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;higherOrderFunction.after&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testLambdaReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionFirst</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testLambdaReturn&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码我们执行预期的输出应该是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">before</span>
</span><span class='line'><span class="n">testLambdaReturn</span>
</span><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">after</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后实际的执行结果却有点事与愿违</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">before</span>
</span><span class='line'><span class="n">testLambdaReturn</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因还是发生了inline，higherOrderFunctionFirst的执行因为<code>runnable</code>中的return，造成了该方法的返回。</p>

<p>解决方法也比较简单，就是不直接使用return，而是使用指定label的return方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testLambdaReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionFirst</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testLambdaReturn&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span><span class="nd">@higherOrderFunctionFirst</span> <span class="c1">//valid</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决了上面的问题，我们还需要带出一个技术概念，就是控制流。</p>

<h2>control flow 控制流</h2>

<p>维基百科中的英文定义</p>

<blockquote><p>In computer science, control flow (or flow of control) is the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated.</p></blockquote>

<p>对应的中文意思是 在计算机科学中，控制流是单个语句（指令，或命令式编程中函数调用）的执行顺序。</p>

<h2>local control flow 本地控制流</h2>

<p>本地控制流和上面的功能描述一致，只是限定了范围为方法内部。比如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testControlFlow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">functionA</span><span class="o">()</span>
</span><span class='line'>    <span class="n">functionB</span><span class="o">()</span>
</span><span class='line'>    <span class="n">functionC</span><span class="o">()</span>
</span><span class='line'>    <span class="c1">//..... other code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果上面的方法遵循本地控制流，则<code>functionA</code>,<code>functionB</code>和<code>functionC</code>依次执行，但是存在违背本地控制流的情况，即非本地控制流(Non local control flow)，常见的有</p>

<ul>
<li>inline 的 Lambda 表达式含有return</li>
<li>上述的<code>functionA</code>，<code>functionB</code>或<code>functionC</code>发生<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">未捕获异常</a></li>
<li>协程也会导致 Non local control flow出现</li>
</ul>


<p>对于Lambda中的return，除了上述的解决方法，还有下面两种解决方法</p>

<h2>noinline</h2>

<ul>
<li>noinline 用来限定 lambda表达式</li>
<li>noinline 强制lambda表达式 不进行inline处理，对应的方式就是翻译成内部类实现。</li>
<li>noinline 需要配合inline使用</li>
</ul>


<p>使用示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">bigHigherOrderFunction</span><span class="o">(</span><span class="nl">firstRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">,</span> <span class="n">noinline</span> <span class="nl">secondRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">,</span> <span class="nl">thirdRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">firstRunnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">secondRunnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">thirdRunnable</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testNoInline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigHigherOrderFunction</span><span class="o">({</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;firstRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;secondRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">//return //not allowed if the lambda is noinlined</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;thirdRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译验证一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">NoinlineSampleKt</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">bigHigherOrderFunction</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">firstRunnable</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">secondRunnable</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">thirdRunnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$bigHigherOrderFunction</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">firstRunnable</span><span class="o">,</span> <span class="s">&quot;firstRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">secondRunnable</span><span class="o">,</span> <span class="s">&quot;secondRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">thirdRunnable</span><span class="o">,</span> <span class="s">&quot;thirdRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">firstRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">secondRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">thirdRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNoInline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function0</span> <span class="n">secondRunnable$iv</span> <span class="o">=</span> <span class="o">(</span><span class="n">Function0</span><span class="o">)</span><span class="kc">null</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$bigHigherOrderFunction</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;firstRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">secondRunnable$iv</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;thirdRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，对于不进行inline处理的 lambda 表达式中 不允许使用return。</p>

<h2>crossinline</h2>

<p>但是我们使用了上面的noinline，可能还是担心一些性能问题，好在这里，还有一个叫做crossinline的东西。</p>

<ul>
<li>crossinline 需要配合inline一起起作用</li>
<li>crossinline 限定的 lambda 不允许使用return，避免了non local control flow问题</li>
</ul>


<p>使用示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//crossinline必须和inline结合使用</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">higherOrderFunctionCrossline</span><span class="o">(</span><span class="n">crossinline</span> <span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testCrossline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionCrossline</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testCrossline&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">//        return  not allowed here</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次反编译验证代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">higherOrderFunctionCrossline</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$higherOrderFunctionCrossline</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testCrossline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$higherOrderFunctionCrossline</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testCrossline&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kotlin inline与 JIT inline的区别</h2>

<p>提到inline，听说过的朋友可能第一个想到的是 JIT 的 inline。JIT inline 是JVM虚拟机提供的运行时的一种优化方式。</p>

<p>来一段代码举例来说</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">add</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当JVM的JIT编译决定将add方法执行inline操作后，testAdd的方法实现会变成类似这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即 将add的方法体实现提取到调用处(testAdd方法中)。inline带来的好处也不言而喻，那就是减少了方法调用产生的进栈和出栈操作，提升运行时的效率。</p>

<p>Kotlin的inline作用和JIT inline大体差不多，稍有一些不同</p>

<ul>
<li>Kotlin的inline发生在编译时，而不是运行时</li>
<li>Kotlin的inline可以明确指定，而jit inline则无法指定发生。</li>
</ul>


<h2>inline 带来的其他问题 can not access private variable</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">val</span> <span class="n">aPrivateValue</span> <span class="o">=</span> <span class="s">&quot;A Private Value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="n">val</span> <span class="n">internalValue</span> <span class="o">=</span> <span class="s">&quot;Internal Value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@PublishedApi</span>
</span><span class='line'><span class="n">internal</span>  <span class="n">val</span> <span class="n">taskId</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">val</span> <span class="n">publicValue</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">publicVariable</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">beToInlinedMethod</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//aPrivateValue //Public-API inline function cannot access non-public-API</span>
</span><span class='line'>    <span class="c1">// &#39;private val aPrivateValue: String&#39; defined in root package in file InlineAccessPrivateMember.kt</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  internalValue  同样也报错上面的错误</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">taskId</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publicValue</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publicVariable</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的beToInlinedMethod 无法访问声明在同一文件中的<code>aPrivateValue</code>和<code>internalValue</code>，因为</p>

<ul>
<li><code>beToInlinedMethod</code>的方法体很有可能被提取到别的模块的方法中</li>
<li>而private 只能在定义的文件中访问</li>
<li>internal 只能限定在同一模块访问</li>
</ul>


<p>解决访问有很多</p>

<ul>
<li>使用上面的public，默认的访问限定符就是public</li>
<li>也可以使用更加推荐的，internal 加上 @PublishedApi 注解的方式。</li>
</ul>


<p>注：反编译代码受工具影响，可能有些微问题，但不影响总体理解。</p>

<h2>涉及与延展内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line/">终端反编译字节码利器 CFR</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/2015/11/28/article-java-8-lambdas-a-peek-under-the-hood/">深入探索Java 8 Lambda表达式</a></li>
<li><a href="https://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly/">你的Java代码对JIT编译友好么？</a></li>
<li><a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://android.jlelse.eu/inline-noinline-crossinline-what-do-they-mean-b13f48e113c2">https://android.jlelse.eu/inline-noinline-crossinline-what-do-they-mean-b13f48e113c2</a></li>
<li><a href="https://stackoverflow.com/questions/38827186/what-is-the-difference-between-crossinline-and-noinline-in-kotlin">https://stackoverflow.com/questions/38827186/what-is-the-difference-between-crossinline-and-noinline-in-kotlin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[货物崇拜编程]]></title>
    <link href="https://droidyue.com/blog/2019/03/24/cargo-cults-programming/"/>
    <updated>2019-03-24T19:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/24/cargo-cults-programming</id>
    <content type="html"><![CDATA[<p>读到这个标题，多数人会有疑惑，什么是货物崇拜编程，其实最根本的问题可能是什么是货物崇拜。想要了解这些就不得不说货物崇拜(Cargo Cults，又译货物运动)的起源</p>

<blockquote><p>第二次世界大战太平洋战争时，美军于塔纳岛建立一临时基地。当时岛上的原住民看见美军于“大铁船”（军舰）内出来，皆觉得十分惊讶；他们也看到，有一些“大铁鸟”（军用飞机）运送穿着美军军服的人及许多物资。这些原住民看见这种情况均感到很惊讶，并觉得这些“大铁船”及“大铁鸟”十分厉害。加上美军也提供部分物资给原住民，而这些物资对原住民来说十分有用，结果这些原住民将美军当作神。</p>

<p>第二次世界大战结束后，美军离开塔纳岛，只留下一些美军军服及一些货物。塔纳岛原住民便认为这些货物具有神奇力量，又相信“神”（美军）他日会回来并带来更多货物，使他们展开一个幸福新时代。但是美军当然再也没有回来塔纳岛，因此这些原住民便自己发展出一套敬拜仪式，崇拜美军军服及货物；表现形式是原住民会穿着美军军服、升起美国国旗，图腾则是木刻的飞机。</p></blockquote>

<!--more-->


<p>货物崇拜编程则是上面的货物崇拜的引申，维基百科对其定义如下</p>

<blockquote><p>货物崇拜编程（Cargo Cult Programming）是一种计算机程序设计中的反模式，其特征为不明就里地、仪式性地使用代码或程序架构。货物崇拜编程通常是程序员既没理解他要解决的bug、也没理解表面上的解决方案的典型表现。</p></blockquote>

<h2>现象</h2>

<ul>
<li>从网络上看到一些 看似有道理却不起作用的内容</li>
<li>为了用设计模式而用设计模式等刻意使用</li>
<li>复制Stack Overflow上的内容，只要运行OK即可</li>
</ul>


<p>这里以代码为例，列举几处违例</p>

<h3>设置变量为null 释放内存</h3>

<p>可能很多人都听过，类似手动设置变量为null，可以释放内存，缓解内存压力。于是就有人奉其为金科玉律，写出了类似下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;message&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">view</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clean</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//解除引用关系，释放内存</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>我们在clean方法中，手动设置view和message为null以期待可以释放内存</li>
<li>由于Java是自动垃圾回收，只要ViewHolder示例不被持有，view就可以释放，<code>view = null</code>显然是画蛇添足</li>
<li>更复杂的情况，message对应的字符串内容回收，还需要考虑<a href="https://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/">字符串常量池</a>的存在。<code>message = null</code>无法释放字符串内容</li>
</ul>


<h3>使用弱引用防止内存泄露</h3>

<p>同样，很多人都听说过 弱引用(WeakReference) ，它可以避免内存泄露，于是写出了下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initWebView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//使用弱引用防止程序webview导致内存泄漏</span>
</span><span class='line'>            <span class="n">webView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebView</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="o">....</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>仅仅听说了弱引用，但是不知道强引用，更不知道他们阻止GC回收的能力</li>
<li>WebView构造方法接收强引用的Context，<code>new WeakReference&lt;Context&gt;(this)</code>试图构造一个Context的弱引用，但是<code>new WeakReference&lt;Context&gt;(this).get()</code>又从构建的弱引用中得出了原始的强引用</li>
<li>上面的代码，只会是事与愿违。</li>
</ul>


<h3>处理SSLError引发安全问题</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceivedSslError</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">SslErrorHandler</span> <span class="n">handler</span><span class="o">,</span> <span class="n">SslError</span> <span class="n">error</span><span class="o">){</span>
</span><span class='line'>  <span class="n">handler</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码是Webview加载遇到SSL证书问题出错时的回调，网上很多人告诉我们，像上面的方式处理就能解决网页加载出错的问题，殊不知这回引发更大的风险漏洞问题。</p>

<h2>货物崇拜的问题</h2>

<ul>
<li>不熟悉内部原理，无法预期会发生什么，这是很危险的</li>
</ul>


<h2>易出现人群</h2>

<ul>
<li>新手或者经验不足的人，对很多东西和技术不熟悉</li>
<li>缺乏思考，思想懒惰的人</li>
</ul>


<h2>如何避免</h2>

<p>如下，简单谈一些我认为能够规避货物崇拜编程的方式与方法</p>

<h3>自身学习和思考，怀疑</h3>

<ul>
<li>这是从内部驱动的解决方法，通过学习，我们可以把对一项技术的掌握从0变为1，进而变成100。在这个过程中，我们自然能规避那些货物崇拜的问题。</li>
<li>保持思考，切忌懒惰，对于技术和代码，我们在会使用的情况下，更要研究和思考并了解其内部的机制和原理。</li>
<li>保持怀疑，科学精神的精髓就是“怀疑”，在既不能证实也不能证伪的情况下那就存疑</li>
</ul>


<h3>结对编程与代码审核</h3>

<ul>
<li>这是外部驱动的解决方法</li>
<li>找一个有经验的人来结对编程，或代码审核，能够在代码上线之前发现潜在的问题并更正。</li>
</ul>


<p>拒绝货物崇拜编程，学习，思考，怀疑。</p>

<h2>References</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B2%A8%E7%89%A9%E5%B4%87%E6%8B%9C">货物崇拜</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B4%A7%E7%89%A9%E5%B4%87%E6%8B%9C%E7%BC%96%E7%A8%8B">货物崇拜编程</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊一聊SLAP:单一抽象层级原则]]></title>
    <link href="https://droidyue.com/blog/2019/03/17/slap-single-level-of-abstraction-principle/"/>
    <updated>2019-03-17T20:52:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/17/slap-single-level-of-abstraction-principle</id>
    <content type="html"><![CDATA[<p>作为程序员，我们总是和方法打交道，不知不觉都会接触Long method(方法体较长的方法)，不论是自己写的还是他人写的，而Long method(长方法)往往是问题的体现，代表着代码有一种坏的味道，也意味着需要对这段代码进行重构处理。</p>

<!--more-->


<p>长方法的问题通常表现在</p>

<ul>
<li>可读性很差</li>
<li>复用性差</li>
<li>难以调试</li>
<li>难以维护</li>
<li>冗余代码多</li>
</ul>


<p>既然长方法不好，那么我们就应该写short method(短方法)，但是什么样的方法才算短方法呢，有什么衡量呢？</p>

<h2>行数限定</h2>

<p>首先我们想到的可能是限制方法的行数，是的，有人说是20行为宜，有人说是10行最佳，众说纷纭，无一定论。</p>

<p>但是行数限定也有问题</p>

<ul>
<li>没有具体的行数限定</li>
<li>行数限定如果执行，可能会比较死板</li>
</ul>


<p>显然除了行数之外，我们需要一个更加明确无争议的避免长方法产生的方法，比如今天我们提到的 SLAP（单一抽象层原则）。</p>

<h2>定义</h2>

<p>SLAP 是 Single Level of Abstraction 的缩写。</p>

<p>关于SLAP的一些具体解释</p>

<blockquote><p>指定代码块的代码应该在单一的抽象层上。</p></blockquote>

<p>其实关于定义最难理解的应该是抽象层，其原因可能在于</p>

<ul>
<li>我们接受着各种非黑即白，非善既恶的教育和熏陶</li>
<li>对事物做抽象化，不是一下子达到另一个极端的抽象描述。</li>
<li>抽象可以是循序渐进，分层的。</li>
</ul>


<p>举一个最简单的例子，在中学时期我们学习英语，大概听过一个这样类似的短句&#8221;美小圆旧黄法国木书房&#8221;,这是为了辅助在英语中快速排列定语顺序的记忆技巧总结。</p>

<p>在英语（或其他语言）中</p>

<ul>
<li>对名词主体增加定语(名词，形容词)修饰，使得主体更加具体</li>
<li>反之对主体删除定语（名词，形容词），会使得主体更加抽象</li>
</ul>


<p>比如我们对“美小圆旧黄法国木书房” 逐步删除定语，大致会产生这样的抽象层</p>

<ol>
<li> 美小圆法国木书房</li>
<li> 旧黄法国木书房</li>
<li> 法国木书房</li>
<li> 法国书房</li>
<li> 书房</li>
<li> 房</li>
</ol>


<p>我们回归编码，来看一个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">validateUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//检测邮箱是否合法</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">ePattern</span> <span class="o">=</span> <span class="s">&quot;^[a-zA-Z0-9.!#$%&amp;&#39;*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">ePattern</span><span class="o">);</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">m</span><span class="o">.</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//检测密码是否合法</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetterOrDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//return true if it goes here.</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>validateUser 方法用来校验用户的合法性</li>
<li>方法体的前6行代码做的事情是校验用户的email地址是否合法</li>
<li>方法体的后几行的代码，用来校验用户的密码是否合法</li>
</ul>


<p>上面代码存在的问题是</p>

<ul>
<li>validateUser 方法中暴露了校验email和密码的具体实现</li>
<li>validateUser 应该只关心校验email和密码的抽象（第一层抽象），而不是具体实现（第二层抽象）</li>
<li>很明显validateUser 违背了SLAP原则</li>
</ul>


<p>解决方法</p>

<ul>
<li>将违背SLAP原则的代码做提取，形成独立的方法</li>
</ul>


<p>所以按照SLAP原则修改之后的代码应该类似于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserValidator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">EMAIL_REGULAR_EXPRESSION</span> <span class="o">=</span> <span class="s">&quot;^[a-zA-Z0-9.!#$%&amp;&#39;*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">validateEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">EMAIL_REGULAR_EXPRESSION</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">email</span><span class="o">).</span><span class="na">matches</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">validatePassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetterOrDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">validateUserSLAP</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UserValidator</span><span class="o">.</span><span class="na">validateEmail</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">UserValidator</span><span class="o">.</span><span class="na">validatePassword</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常见的违背SLAP的代码场景和情况</h2>

<h3>注释或空行分割的方法体</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//注释1</span>
</span><span class='line'><span class="err">代码片段</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//注释2</span>
</span><span class='line'><span class="err">代码片段</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//注释3</span>
</span><span class='line'><span class="c1">//代码片段3</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>注释或空行分割的代码片段处理相对独立逻辑，可以抽象成独立的方法</li>
<li>上面的代码如果不处理，往往随着时间的推移，会使得所在的方法膨胀，进而形成上面的长方法</li>
</ul>


<h3>for循环体内部代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="nf">buildResult</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">ResultEntity</span><span class="o">&gt;</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ResultEntity</span> <span class="n">entity</span> <span class="o">:</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ResultDto</span> <span class="n">dto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResultDto</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dto</span><span class="o">.</span><span class="na">setShoeSize</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getShoeSize</span><span class="o">());</span>
</span><span class='line'>        <span class="n">dto</span><span class="o">.</span><span class="na">setNumberOfEarthWorms</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getNumberOfEarthWorms</span><span class="o">());</span>
</span><span class='line'>        <span class="n">dto</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">computeAge</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">dto</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面for循环体内部的代码，处理了将ResultEntity转化成ResultDto，可以完全单独抽离成单独的方法，如下代码所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="nf">buildResult</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">ResultEntity</span><span class="o">&gt;</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ResultEntity</span> <span class="n">entity</span> <span class="o">:</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">toDto</span><span class="o">(</span><span class="n">entity</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ResultDto</span> <span class="nf">toDto</span><span class="o">(</span><span class="n">ResultEntity</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ResultDto</span> <span class="n">dto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResultDto</span><span class="o">();</span>
</span><span class='line'>    <span class="n">dto</span><span class="o">.</span><span class="na">setShoeSize</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getShoeSize</span><span class="o">());</span>
</span><span class='line'>    <span class="n">dto</span><span class="o">.</span><span class="na">setNumberOfEarthWorms</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getNumberOfEarthWorms</span><span class="o">());</span>
</span><span class='line'>    <span class="n">dto</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">computeAge</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dto</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>回调</h3>

<p>除此之外，回调方法也是容易形成长方法的重灾区，这一点无需再多举例。</p>

<h2>答疑</h2>

<h3>应用SLAP 会导致更多的短方法，维护成本更高了吧</h3>

<p>首先，必须承认，SLAP应用后，会产生一些短方法，但是关于维护成本提升，这一点还是需要考究的。</p>

<p>因为</p>

<ul>
<li>短方法的提取产生，会使得方法更加具有原子性，职责更加单一，更加的符合Unix的哲学 Do one thing, and do it well。</li>
<li>短方法的复用性更强，使得编码更加便捷</li>
<li>短方法可读性更强，更加便于理解</li>
<li>实践表明，SLAP应用后，维护成本应该是降低的。</li>
</ul>


<p>所以，不要畏惧，短方法的产生，应该是喜欢上短方法。</p>

<h3>SLAP 的缩写</h3>

<p>SLAP是Single Level of Abstraction的缩写，不是Same Level of Abstraction，😀</p>

<h2>References</h2>

<ul>
<li><a href="https://dzone.com/articles/slap-your-methods-and-dont-make-me-think">https://dzone.com/articles/slap-your-methods-and-dont-make-me-think</a></li>
<li><a href="http://principles-wiki.net/principles:single_level_of_abstraction">http://principles-wiki.net/principles:single_level_of_abstraction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理Retrofit MalformedJsonException报错]]></title>
    <link href="https://droidyue.com/blog/2019/03/10/retrofit-json-convetor-error/"/>
    <updated>2019-03-10T20:25:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/10/retrofit-json-convetor-error</id>
    <content type="html"><![CDATA[<p>使用Retrofit配合GsonConverter，我们能很好地将网络响应内容转换成对应的对象。比如像下面这样。</p>

<!--more-->


<p>Retrofit网络接口方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DroidNetwork</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/test.json&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Call</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;</span> <span class="nf">jsonData</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/helloworld.txt&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Call</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">plainText</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的应用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">val</span> <span class="n">retrofit</span> <span class="o">=</span> <span class="n">Retrofit</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">baseUrl</span><span class="o">(</span><span class="s">&quot;https://asset.droidyue.com/&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">addConverterFactory</span><span class="o">(</span><span class="n">GsonConverterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">val</span> <span class="n">droidNetwork</span> <span class="o">=</span> <span class="n">retrofit</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="nl">DroidNetwork:</span><span class="o">:</span><span class="n">class</span><span class="o">.</span><span class="na">java</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">droidNetwork</span><span class="o">.</span><span class="na">jsonData</span><span class="o">().</span><span class="na">enqueue</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;?,</span> <span class="nl">t:</span> <span class="n">Throwable</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">?.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;?,</span> <span class="nl">response:</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onResponse content=${response?.body()}&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>上面的方法执行都很正常，可是执行这个方法的时候就会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">droidNetwork</span><span class="o">.</span><span class="na">plainText</span><span class="o">().</span><span class="na">enqueue</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">override</span> <span class="n">fun</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;?,</span> <span class="nl">t:</span> <span class="n">Throwable</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Exception</span><span class="o">(</span><span class="s">&quot;causedByPlainText&quot;</span><span class="o">,</span> <span class="n">t</span><span class="o">)?.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;?,</span> <span class="nl">response:</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;?)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onResponse content=${response}&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>崩溃的信息如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Exception</span><span class="o">:</span> <span class="n">causedByPlainText</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">secoo</span><span class="o">.</span><span class="na">retrofitconvertor</span><span class="o">.</span><span class="na">MainActivity</span><span class="n">$doNetworkRequest$2</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">kt</span><span class="o">:</span><span class="mi">41</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">ExecutorCallAdapterFactory</span><span class="n">$ExecutorCallbackCall$1$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ExecutorCallAdapterFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">80</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">891</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">207</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">7470</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RuntimeInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">RuntimeInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">524</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">958</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">MalformedJsonException</span><span class="o">:</span> <span class="n">Use</span> <span class="n">JsonReader</span><span class="o">.</span><span class="na">setLenient</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="n">to</span> <span class="n">accept</span> <span class="n">malformed</span> <span class="n">JSON</span> <span class="n">at</span> <span class="n">line</span> <span class="mi">1</span> <span class="n">column</span> <span class="mi">1</span> <span class="n">path</span> <span class="n">$</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">syntaxError</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1568</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">checkLenient</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1409</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">doPeek</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">593</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">425</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">TypeAdapters</span><span class="n">$16</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">TypeAdapters</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">393</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">TypeAdapters</span><span class="n">$16</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">TypeAdapters</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">390</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">converter</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">39</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">converter</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">27</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">OkHttpCall</span><span class="o">.</span><span class="na">parseResponse</span><span class="o">(</span><span class="n">OkHttpCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">223</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">OkHttpCall</span><span class="n">$1</span><span class="o">.</span><span class="na">onResponse</span><span class="o">(</span><span class="n">OkHttpCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">121</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">RealCall</span><span class="n">$AsyncCall</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">RealCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">206</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">NamedRunnable</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">NamedRunnable</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">32</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">runWorker</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1167</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">641</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">784</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因其实很简单</p>

<ul>
<li> <a href="http://asset.droidyue.com/content/test.json">http://asset.droidyue.com/content/test.json</a> 是一个合法的json内容</li>
<li> <a href="https://asset.droidyue.com/content/helloworld.txt">https://asset.droidyue.com/content/helloworld.txt</a> 是一个普通的文本，内容为<code>helloworld</code></li>
<li> 因为上面的retrofit 对象 设置了GSONConvertor，会尝试默认将所有的内容转成对应的对象内容，故上面的普通文本就会失败报错。</li>
</ul>


<p>解决方法有两个</p>

<ul>
<li>修改服务器端的<a href="https://asset.droidyue.com/content/helloworld.txt">https://asset.droidyue.com/content/helloworld.txt</a> 为JSON内容</li>
<li>调整客户端代码支持。</li>
</ul>


<p>这里我们介绍后者的处理方法，这里我们使用ResponseBody而不是之前的String，然后按照如下代码应用即可。</p>

<p>接口代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/helloworld.txt&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Call</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;</span> <span class="nf">plainTextAsResponseBody</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">droidNetwork</span><span class="o">.</span><span class="na">plainTextAsResponseBody</span><span class="o">().</span><span class="na">enqueue</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;?,</span> <span class="nl">t:</span> <span class="n">Throwable</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">?.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;?,</span> <span class="nl">response:</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onResponse of plainTextAsResponseBody content=${response?.body()?.string()}&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>附加内容</h2>

<p>如果在某种情况下，我们只关心请求操作，而不关心响应内容，我们可以这样使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/helloworld.txt&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Call</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">ignoreResult</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码相对更加高效，因为这里省略了将响应内容转成内存对象的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端反编译字节码利器 CFR]]></title>
    <link href="https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line/"/>
    <updated>2019-02-24T21:11:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line</id>
    <content type="html"><![CDATA[<p>最近在研究一下class字节码的东西，尝试将class文件反编译成java文件。尝试了很多的工具，比如JD-GUI及其插件以及各种在线反编译，始终感觉不够酷，毕竟我是一个比较依赖终端的人，所以尝试找一些能否在终端可以实现反编译的工具。</p>

<!--more-->


<p></p>

<p>还是Google好，很快就找到了一个很满意的工具。</p>

<ul>
<li>它是一个jar包</li>
<li>名称叫做CFR(Class File Reader)</li>
<li>支持反编译class文件和jar包</li>
</ul>


<p>如下介绍两个常用的命令使用</p>

<h2>反编译class文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="o">~/</span><span class="n">Documents</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">cfr</span><span class="o">-</span><span class="mf">0.139</span><span class="o">.</span><span class="na">jar</span> <span class="n">JavaTest</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Decompiled with CFR 0.139.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">functionOne</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;functionOne&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">functionTwo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;functionTwo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>反编译jar包</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar ~/Documents/scripts/cfr-0.139.jar ~/Documents/scripts/cfr-0.139.jar --outputdir /tmp/outputdir
</span><span class='line'>Processing org.benf.cfr.reader.api.CfrDriver
</span><span class='line'>Processing org.benf.cfr.reader.api.ClassFileSource
</span><span class='line'>Processing org.benf.cfr.reader.api.OutputSinkFactory
</span><span class='line'>Processing org.benf.cfr.reader.api.SinkReturns
</span><span class='line'>Processing org.benf.cfr.reader.bytecode.analysis.opgraph.Graph
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>执行上述命令结束后，从输出目录(outputdir)下就能找到对应的java文件了。</p>

<h2>包装成脚本</h2>

<h3>反编译某个class文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>java -jar ~/Documents/scripts/cfr-0.139.jar <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>反编译某个jar包</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>java -jar ~/Documents/scripts/cfr-0.139.jar <span class="nv">$1</span> --outputdir <span class="nv">$2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>资源</h2>

<ul>
<li><a href="http://www.benf.org/other/cfr/index.html">http://www.benf.org/other/cfr/index.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理 WebView 与 ViewPager 滑动冲突]]></title>
    <link href="https://droidyue.com/blog/2019/01/27/webview-javascript-scrolling-issue/"/>
    <updated>2019-01-27T20:07:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/27/webview-javascript-scrolling-issue</id>
    <content type="html"><![CDATA[<p>问题场景
在项目的App中，有一个ViewPager，它内部包含了WebView，而内部的webview加载了一个可以滑动的网页。</p>

<p>当我们在网页滑动的时候，会直接切换到下一个viewpager的页面，而不是优先响应webview的滑动。</p>

<!--more-->


<p>具体的效果如视频</p>

<p><video style="width:50%"   controls>
  <source src="https://asset.droidyue.com/video/web_scroll_bad.mp4" type="video/mp4">
</video></p>

<p>期待的示例效果
<video style="width:50%"   controls>
  <source src="https://asset.droidyue.com/video/web_scroll_good.mp4" type="video/mp4">
</video></p>

<h2>解决思路</h2>

<p>其实思路还是比较简单，大概如下</p>

<ul>
<li>优先响应webview内部滑动</li>
<li>如果webview内部滑动完成，则响应外部的滑动</li>
</ul>


<p>那么问题就来了，怎么判断webview内部滑动结束就是解决问题的关键了。</p>

<p>解决问题的关键就在于WebView.onOverScrolled方法</p>

<p><img src="https://asset.droidyue.com/image/overscrolled_webview.png" alt="WebView.onOverScrolled" /></p>

<p>看了上面的文档，我们可能还是有一些疑惑，到底什么是overScroll。正所谓一图胜千言，看一下下图就知道了。</p>

<p><img src="https://asset.droidyue.com/image/overscroll_effect.png" alt="Webview overscrolled effect" /></p>

<p>上面红框的内容就是overScroll的效果，其实就是划过了的意思（英语中over有过的意思）</p>

<p>了解了上面的信息，我们具体的实施办法也就有了。</p>

<ul>
<li>在WebView的onTouchEvent事件为ACTION_DOWN时，查找父视图是否是可以滑动的视图(如ViewPager)，如果是,则通过requestDisallowInterceptTouchEvent(true)调用，请求父视图不要拦截touchEvent</li>
<li>如果WebView不再响应内部滑动（即onOverScrolled中clampedX或者clampedY值为true），我们再起调用requestDisallowInterceptTouchEvent(false)请求父视图恢复拦截处理touchEvent.</li>
</ul>


<p>核心代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="nl">event:</span> <span class="n">MotionEvent</span><span class="o">):</span> <span class="n">Boolean</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">val</span> <span class="n">viewParent</span> <span class="o">=</span> <span class="n">findViewParentIfNeeds</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>       <span class="n">viewParent</span><span class="o">?.</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onOverScrolled</span><span class="o">(</span><span class="nl">scrollX:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">scrollY:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">clampedX:</span> <span class="n">Boolean</span><span class="o">,</span> <span class="nl">clampedY:</span> <span class="n">Boolean</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onOverScrolled scrollX=&quot;</span> <span class="o">+</span> <span class="n">scrollX</span> <span class="o">+</span> <span class="s">&quot;;scrollY=&quot;</span> <span class="o">+</span> <span class="n">scrollY</span>
</span><span class='line'>           <span class="o">+</span> <span class="s">&quot;;clampedX=&quot;</span> <span class="o">+</span> <span class="n">clampedX</span> <span class="o">+</span> <span class="s">&quot;;clampedY=&quot;</span> <span class="o">+</span> <span class="n">clampedY</span><span class="o">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">clampedX</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">val</span> <span class="n">viewParent</span> <span class="o">=</span> <span class="n">findViewParentIfNeeds</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>       <span class="n">viewParent</span><span class="o">?.</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kd">super</span><span class="o">.</span><span class="na">onOverScrolled</span><span class="o">(</span><span class="n">scrollX</span><span class="o">,</span> <span class="n">scrollY</span><span class="o">,</span> <span class="n">clampedX</span><span class="o">,</span> <span class="n">clampedY</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">fun</span> <span class="nf">findViewParentIfNeeds</span><span class="o">(</span><span class="nl">tag:</span> <span class="n">View</span><span class="o">):</span> <span class="n">ViewParent</span><span class="o">?</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">tag</span><span class="o">.</span><span class="na">parent</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">parent</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">if</span> <span class="o">(</span><span class="n">parent</span> <span class="n">is</span> <span class="n">ViewPager</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">AbsListView</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">ScrollView</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">HorizontalScrollView</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">GridView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">parent</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="n">is</span> <span class="n">View</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">findViewParentIfNeeds</span><span class="o">(</span><span class="n">parent</span> <span class="n">as</span> <span class="n">View</span><span class="o">)</span>
</span><span class='line'>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">parent</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用上面的代码，我们就能完美的解决水平滑动的问题，对于垂直纵向的问题，大家可以参考本文方法做类似实现。</p>

<h2>示例代码</h2>

<ul>
<li><a href="https://github.com/androidyue/WebViewViewPagerScrollingIssue">https://github.com/androidyue/WebViewViewPagerScrollingIssue</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊一聊未捕获异常与进程退出的关联]]></title>
    <link href="https://droidyue.com/blog/2019/01/21/thread-process-and-uncaught-exceptions/"/>
    <updated>2019-01-21T19:52:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/21/thread-process-and-uncaught-exceptions</id>
    <content type="html"><![CDATA[<p>之前的文章<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a> 我们介绍了JVM如何处理未捕获异常，今天我们研究一个更加有意思的问题，就是在JVM中如果发生了未捕获异常，会导致JVM进程退出么。</p>

<p>关于什么是未捕获异常，我们在之前的文章已经介绍过，这里不再赘述，如欲了解，请阅读<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a></p>

<!--more-->


<h2>辅助方法</h2>

<h3>一个产生未捕获异常的方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Utils.java file</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">causeNPE</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>线程睡眠方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Utils.java file</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">makeThreadSleep</span><span class="o">(</span><span class="kt">long</span> <span class="n">durationInMillSeconds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">durationInMillSeconds</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;makeThreadSleep interrupted&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用该方法的目的主要有</p>

<ul>
<li>让当前线程睡眠，确保其他线程启动完成</li>
<li>让当前线程睡眠，确保当前线程不至于快速结束而销毁</li>
</ul>


<h3>打印全部线程信息方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Utils.java file</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dumpAllThreadsInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span> <span class="n">threadSet</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">getAllStackTraces</span><span class="o">().</span><span class="na">keySet</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">Thread</span> <span class="nl">thread:</span> <span class="n">threadSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpAllThreadsInfo thread.name=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;;thread.state=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;;thread.isAlive=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;;group=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getThreadGroup</span><span class="o">()</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>打印辅助测试的时间</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//输出结果类似 16:55:55</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTimeForDebug</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SimpleDateFormat</span> <span class="n">sdf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;HH:mm:ss&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>验证方法</h2>

<p>这里的验证我们按照表现来区分，我们将验证以下场景</p>

<ul>
<li>在子线程中制造未捕获异常</li>
<li>在主线程中制造未捕获异常</li>
</ul>


<p>同时上面的场景，在通用的JVM和Android上表现有一些差异，我们也都会进行覆盖研究。</p>

<h2>子线程中的未捕获异常</h2>

<p>我们使用下面的代码，模拟一个在子线程中出现未捕获异常的场景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">startErrorThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;startErrorThread currentThread.name=&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;; happened at &quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">makeThreadSleep</span><span class="o">(</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Thread main sleepFinished at &quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">dumpAllThreadsInfo</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们期待的输出结果是</p>

<ul>
<li>新启动的子线(应该是Thread-0)程因为NPE未捕获而导致线程销毁</li>
<li>主线程不受刚刚异常的影响(进程还存在)，在睡眠10秒后，会打印出所有线程的信息（不包含刚刚崩溃线程Thread-0的信息）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//异常发生 输出线程名称和发生异常的时间</span>
</span><span class='line'><span class="n">startErrorThread</span> <span class="n">currentThread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Thread</span><span class="o">-</span><span class="mi">0</span><span class="o">;</span> <span class="n">happened</span> <span class="n">at</span> <span class="mi">16</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">04</span>
</span><span class='line'><span class="c1">//异常崩溃的信息</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;Thread-0&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">35</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main$3</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">115</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">748</span><span class="o">)</span>
</span><span class='line'><span class="c1">//主线程睡眠结束(对比时间，确定差为10秒)    </span>
</span><span class='line'><span class="n">Thread</span> <span class="n">main</span> <span class="n">sleepFinished</span> <span class="n">at</span> <span class="mi">16</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">14</span>
</span><span class='line'><span class="c1">//主线程不受影响，继续执行操作</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Attach</span> <span class="n">Listener</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Reference</span> <span class="n">Handler</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Monitor</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">Break</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Signal</span> <span class="n">Dispatcher</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Finalizer</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">main</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="c1">//进程结束</span>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来，子线程发生未捕获的异常不会导致进程的退出（也不会影响其他的线程)。</p>

<h3>Android有点不一样</h3>

<p>这个时候可能做Android开发的同学可能会站起来。</p>

<p><strong>提问</strong>：不对啊，我把你的代码放到Android项目中执行，会出现应用已停止的对话框，然后我的进程怎么就退出了呢,老哥，你的结论不对吧。</p>

<p><strong>回答</strong>：哈哈，这个问题是一个好问题，想要回答这个问题，就需要了解JVM如何处理未捕获异常的。这也是我们之前文章<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a>介绍的。</p>

<p>这里简单概括一下就是，当JVM发现异常后</p>

<ul>
<li>首先尝试检测当前的Thread是否有UncaughtExeptionHandler，并尝试分发出问题的Throwable实例</li>
<li>如果上一步找不到对应的UncaughtExceptionHandler，则分发问题的Throwable实例到其所在的ThreadGroup</li>
<li>ThreadGroup优先会将Throwable实例分发给其父ThreadGroup</li>
<li>如果ThreadGroup没有父ThreadGroup，则尝试分发给所有线程默认使用的UncaughtExceptionHandler</li>
</ul>


<p>所以，我们按照这个流程扒了一下<a href="https://android.googlesource.com/platform/frameworks/base/+/jb-mr1-release/core/java/com/android/internal/os/RuntimeInit.java">RuntimeInit.java</a> 发现了这样的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Use this to log a message when a thread exits due to an uncaught</span>
</span><span class='line'><span class="cm"> * exception.  The framework catches these for the main threads, so</span>
</span><span class='line'><span class="cm"> * this should only matter for threads created by applications.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UncaughtHandler</span> <span class="kd">implements</span> <span class="n">Thread</span><span class="o">.</span><span class="na">UncaughtExceptionHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">uncaughtException</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Don&#39;t re-enter -- avoid infinite loops if crash-reporting crashes.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mCrashing</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mCrashing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mApplicationObject</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;*** FATAL EXCEPTION IN SYSTEM PROCESS: &quot;</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;FATAL EXCEPTION: &quot;</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// 展示 应用已停止的 对话框</span>
</span><span class='line'>            <span class="c1">// Bring up crash dialog, wait for it to be dismissed</span>
</span><span class='line'>            <span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">handleApplicationCrash</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">mApplicationObject</span><span class="o">,</span> <span class="k">new</span> <span class="n">ApplicationErrorReport</span><span class="o">.</span><span class="na">CrashInfo</span><span class="o">(</span><span class="n">e</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Error reporting crash&quot;</span><span class="o">,</span> <span class="n">t2</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Even Slog.e() fails!  Oh well.</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//杀掉进程</span>
</span><span class='line'>            <span class="c1">// Try everything to make sure this process goes away.</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码会执行两个主要的操作</p>

<ul>
<li>展示一个崩溃的对话框</li>
<li>在finally 部分，杀掉当前的进程</li>
</ul>


<p>Android系统会在进程启动后，通过下面的代码为所有的线程设置默认的UncaughtExceptionHandler</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* set default handler; this applies to all threads in the VM */</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">setDefaultUncaughtExceptionHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">UncaughtHandler</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时由于如下原因</p>

<ul>
<li>出问题的线程没有通过<code>Thread.setUncaughtExceptionHandler</code>显式设置对应的处理者</li>
<li>线程所在的ThreadGroup实例属于原生的ThreadGroup，而不是用户自定义并重写<code>uncaughtException</code>的ThreadGroup子类。</li>
</ul>


<p>所以出现未捕获的异常，默认就会走到了Android系统默认设置的所有线程共用的处理者。</p>

<h3>如果发生在主线程中呢</h3>

<p>前面说的都是子线程，那么如果主线程出现未捕获异常，进程应该会退出吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">uncaughtExceptionInMainThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行上面的代码，得到进程退出的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">35</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">uncaughtExceptionInMainThread</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">28</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是当我们执行下面的这份代码（启动另一个线程并休眠20秒），结果却是不一样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">uncaughtExceptionInMainThreadNotLastUserThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Utils</span><span class="o">.</span><span class="na">makeThreadSleep</span><span class="o">(</span><span class="mi">20</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;uncaughtExceptionInMainThreadNotLastUserThread time=&quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">()</span>
</span><span class='line'>                <span class="o">+</span> <span class="s">&quot;;thread=&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'>            <span class="n">Utils</span><span class="o">.</span><span class="na">dumpAllThreadsInfo</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">makeThreadSleep</span><span class="o">(</span><span class="mi">5</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;uncaughtExceptionInMainThreadNotLastUserThread mainThread time=&quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的日志输出是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">uncaughtExceptionInMainThreadNotLastUserThread</span> <span class="n">mainThread</span> <span class="n">time</span><span class="o">=</span><span class="mi">20</span><span class="o">:</span><span class="mi">48</span><span class="o">:</span><span class="mi">09</span>
</span><span class='line'><span class="c1">// 异常发生</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">35</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">uncaughtExceptionInMainThreadNotLastUserThread</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">44</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'><span class="c1">//Thread-0  线程休眠结束   </span>
</span><span class='line'><span class="n">uncaughtExceptionInMainThreadNotLastUserThread</span> <span class="n">time</span><span class="o">=</span><span class="mi">20</span><span class="o">:</span><span class="mi">48</span><span class="o">:</span><span class="mi">24</span><span class="o">;</span><span class="n">thread</span><span class="o">=</span><span class="n">Thread</span><span class="o">-</span><span class="mi">0</span>
</span><span class='line'><span class="c1">// 打印此时的全部线程信息</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Signal</span> <span class="n">Dispatcher</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">DestroyJavaVM</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Thread</span><span class="o">-</span><span class="mi">0</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Monitor</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">Break</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Reference</span> <span class="n">Handler</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Attach</span> <span class="n">Listener</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Finalizer</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="c1">//进程退出</span>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>进程并没有随着主线程中出现未捕获异常而理解退出，而是等到我们启动的Thread-0结束之后才退出的。</p>

<p>那么这是为什么呢，看过我之前文章<a href="https://droidyue.com/blog/2018/12/16/daemon-thread-in-java/">JVM 中的守护线程</a>的朋友应该了解</p>

<p>JVM退出通常有两种情况</p>

<ul>
<li>有效的调用System.exit()</li>
<li>所有的非守护线程退出后，JVM就会自动退出</li>
</ul>


<p>因此不难得出结论</p>

<ul>
<li>第一段代码中，只有主线程一个非守护线程，主线程销毁，所以进程会结束</li>
<li>第二段代码中，主线程销毁后，还有一个Thread-0(由主线程启动，所以也是一个非守护线程)，JVM会等待其结束后而退出。</li>
</ul>


<h2>结论</h2>

<p>所以未捕获异常只会导致所属线程销毁，并不会导致JVM退出。这里我还找到一份官方API文档作为佐证。</p>

<blockquote><p>Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the uncaughtException method of the thread&rsquo;s ThreadGroup object. The default implementation of this method prints the exception&rsquo;s stack trace to System.err and terminates the thread; it does not cause the virtual machine to exit or halt.</p></blockquote>

<p>上面的内容来自<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread">Runtime.addShutdownHook</a></p>

<h2>参考声明</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/40902082/will-an-exception-thrown-in-a-different-thread-will-crash-the-main-thread">Will an exception thrown in a Different thread will crash the main thread?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Android手机连接Charles unknown问题]]></title>
    <link href="https://droidyue.com/blog/2019/01/13/resolve-charles-unknow-indicator-on-android-phones/"/>
    <updated>2019-01-13T20:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/13/resolve-charles-unknow-indicator-on-android-phones</id>
    <content type="html"><![CDATA[<p>最近很多同事反馈使用Charles抓包出现了很多unknown的问题，现象如下图</p>

<p><img src="https://asset.droidyue.com/image/2019_first_half/charles_unknow_error.png" alt="charles unknown" /></p>

<p>查看右侧的原因，给出的结果是这样的</p>

<p><img src="https://asset.droidyue.com/image/2019_first_half/failure_reason_charles_unknown.png" alt="Error detail" /></p>

<p>这里将讲解如何解决这个问题，但是开始阅读之前，请确认符合如下的条件</p>

<ul>
<li>本文仅适用于Android 7及之后设备</li>
<li>待抓包的应用设置了targetSDK 为24及其以上</li>
<li>已经配置好了charles的证书</li>
</ul>


<p>好的，开始了。</p>

<!--more-->


<h2>原因</h2>

<ul>
<li>我们在设备上安装的charles证书，属于用户添加的证书</li>
<li>出于应用安全的目的，Android 7及之后默认不信任用户添加的证书(Android 7 之前是默认信任用户添加的证书)</li>
<li>当我们将App的编译目标提到24及其以上，系统就会激活这一安全限制。</li>
</ul>


<h2>如何解决</h2>

<h3>创建App网络安全配置文件</h3>

<p>在应用xml目录下新建一个名为<code>network_security_config.xml</code>，内容为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;network-security-config&gt;</span>
</span><span class='line'>    <span class="nt">&lt;debug-overrides&gt;</span>
</span><span class='line'>        <span class="nt">&lt;trust-anchors&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Trust user added CAs while debuggable only --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;certificates</span> <span class="na">src=</span><span class="s">&quot;user&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/trust-anchors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/debug-overrides&gt;</span>
</span><span class='line'><span class="nt">&lt;/network-security-config&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码仅仅在debug编译包，信任用户添加的CA证书</p>

<h3>应用配置</h3>

<p>在AndroidManifest Application节点增加属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;application</span> <span class="na">android:networkSecurityConfig=</span><span class="s">&quot;@xml/network_security_config&quot;</span>
</span><span class='line'>                    <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>        ...
</span><span class='line'>    <span class="nt">&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>建议重启应用，就能解决问题了。</p>

<h2>注意</h2>

<p>考虑到安全问题，上面的实现</p>

<ul>
<li>仅仅对debug类型的安装包有效（参考值为application节点的android:debuggable属性值）</li>
<li>Release类型的安装包不会有额外的安全影响</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 如何处理未捕获异常]]></title>
    <link href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/"/>
    <updated>2019-01-06T21:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions</id>
    <content type="html"><![CDATA[<p>继之前的文章 <a href="https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions/">详解JVM如何处理异常</a>，今天再次发布一篇比较关联的文章，如题目可知，今天聊一聊在JVM中线程遇到未捕获异常的问题，其中涉及到线程如何处理未捕获异常和一些内容介绍。</p>

<!--more-->


<h2>什么是未捕获异常</h2>

<p>未捕获异常指的是我们在方法体中没有使用try-catch捕获的异常，比如下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testUncaughtException</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="mi">1</span> <span class="o">/</span> <span class="n">arg</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ArithmeticException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码很有可能发生如下情况</p>

<ul>
<li>如果方法参数arg传递null，会出现NullPointerException</li>
<li>如果参数arg传递内容为空的字符串(&ldquo;&rdquo;)，会出现ArithmeticException</li>
</ul>


<p>对于上面的问题，我们不难发现</p>

<ul>
<li>上面可能出现的NullPointerException和ArithmeticException都属于Unchecked Exceptions</li>
<li>而ArithmeticException被我们人为try-catch捕获了，它不符合本文对于未捕获异常的定义</li>
<li>NullPointerException 由于我们没有catch住，就变成了我们要聊的未捕获异常</li>
<li>另外，未捕获异常实际是Unchecked Exceptions的子集</li>
</ul>


<h2>UncaughtExceptionHandler 是什么</h2>

<ul>
<li>它是线程遇到未捕获异常的一个处理者接口</li>
<li>它包含一个方法<code>void uncaughtException(Thread t, Throwable e);</code> 用来处理接收处理异常发生后的操作，比如收集崩溃信息并上报等</li>
<li>可以通过 实例方法 <code>Thread.setUncaughtExceptionHandler</code> 为某一个Thread实例设置未捕获异常处理者</li>
<li>也可以通过 静态方法 <code>Thread.setDefaultUncaughtExceptionHandler</code> 设置所有Thread实例的未捕获异常处理者</li>
</ul>


<h2>ThreadGroup 是什么</h2>

<ul>
<li>ThreadGroup 是线程的集合</li>
<li>ThreadGroup 也可以包含子ThreadGroup</li>
<li>除了初始的ThreadGroup 之外，每个ThreadGroup都有一个父 ThreadGroup</li>
<li>ThreadGroup 自身实现了Thread.UncaughtExceptionHandler，用来相应处理其内部的线程和ThreadGroup发生未捕获异常。</li>
</ul>


<h2>未捕获异常处理者 设置指南</h2>

<p><img src="https://asset.droidyue.com/image/2019_first_half/how_to_set_uncaught_exceptions.png" alt="how to set uncaught exception handler" /></p>

<h2>线程发生了未捕获异常，JVM怎么处理</h2>

<h3>分发Throwable实例</h3>

<p>当线程A中出现了未捕获异常时，JVM会调用线程A的<code>dispatchUncaughtException(Throwable)</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Dispatch an uncaught exception to the handler. This method is</span>
</span><span class='line'><span class="cm"> * intended to be called only by the JVM.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">dispatchUncaughtException</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getUncaughtExceptionHandler</span><span class="o">().</span><span class="na">uncaughtException</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取未捕获异常处理者</h3>

<ul>
<li>每个线程会有一个变量(uncaughtExceptionHandler)来保存未捕获异常的处理者</li>
<li>在线程需要确定Throwable分发目标的处理者时，优先获取当前线程中uncaughtExceptionHandler变量</li>
<li>如果出问题线程的uncaughtExceptionHandler为null（即没有显式设置异常处理者），则使用自己所在的ThreadGroup来作为未捕获异常处理者。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the handler invoked when this thread abruptly terminates</span>
</span><span class='line'><span class="cm"> * due to an uncaught exception. If this thread has not had an</span>
</span><span class='line'><span class="cm"> * uncaught exception handler explicitly set then this thread&#39;s</span>
</span><span class='line'><span class="cm"> * &lt;tt&gt;ThreadGroup&lt;/tt&gt; object is returned, unless this thread</span>
</span><span class='line'><span class="cm"> * has terminated, in which case &lt;tt&gt;null&lt;/tt&gt; is returned.</span>
</span><span class='line'><span class="cm"> * @since 1.5</span>
</span><span class='line'><span class="cm"> * @return the uncaught exception handler for this thread</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">UncaughtExceptionHandler</span> <span class="nf">getUncaughtExceptionHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">uncaughtExceptionHandler</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span>
</span><span class='line'>        <span class="n">uncaughtExceptionHandler</span> <span class="o">:</span> <span class="n">group</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>如果Throwable分发给ThreadGroup</h4>

<ul>
<li>ThreadGroup会尝试转给它的父ThreadGroup（如果存在的话）</li>
<li>如果上面没有找到对应的ThreadGroup，则尝试获取<code>Thread.getDefaultUncaughtExceptionHandler()</code>并分发</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Called by the Java Virtual Machine when a thread in this</span>
</span><span class='line'><span class="cm">     * thread group stops because of an uncaught exception, and the thread</span>
</span><span class='line'><span class="cm">     * does not have a specific {@link Thread.UncaughtExceptionHandler}</span>
</span><span class='line'><span class="cm">     * installed.</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * The &lt;code&gt;uncaughtException&lt;/code&gt; method of</span>
</span><span class='line'><span class="cm">     * &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:</span>
</span><span class='line'><span class="cm">     * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;If this thread group has a parent thread group, the</span>
</span><span class='line'><span class="cm">     *     &lt;code&gt;uncaughtException&lt;/code&gt; method of that parent is called</span>
</span><span class='line'><span class="cm">     *     with the same two arguments.</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;Otherwise, this method checks to see if there is a</span>
</span><span class='line'><span class="cm">     *     {@linkplain Thread#getDefaultUncaughtExceptionHandler default</span>
</span><span class='line'><span class="cm">     *     uncaught exception handler} installed, and if so, its</span>
</span><span class='line'><span class="cm">     *     &lt;code&gt;uncaughtException&lt;/code&gt; method is called with the same</span>
</span><span class='line'><span class="cm">     *     two arguments.</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;Otherwise, this method determines if the &lt;code&gt;Throwable&lt;/code&gt;</span>
</span><span class='line'><span class="cm">     *     argument is an instance of {@link ThreadDeath}. If so, nothing</span>
</span><span class='line'><span class="cm">     *     special is done. Otherwise, a message containing the</span>
</span><span class='line'><span class="cm">     *     thread&#39;s name, as returned from the thread&#39;s {@link</span>
</span><span class='line'><span class="cm">     *     Thread#getName getName} method, and a stack backtrace,</span>
</span><span class='line'><span class="cm">     *     using the &lt;code&gt;Throwable&lt;/code&gt;&#39;s {@link</span>
</span><span class='line'><span class="cm">     *     Throwable#printStackTrace printStackTrace} method, is</span>
</span><span class='line'><span class="cm">     *     printed to the {@linkplain System#err standard error stream}.</span>
</span><span class='line'><span class="cm">     * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * Applications can override this method in subclasses of</span>
</span><span class='line'><span class="cm">     * &lt;code&gt;ThreadGroup&lt;/code&gt; to provide alternative handling of</span>
</span><span class='line'><span class="cm">     * uncaught exceptions.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param   t   the thread that is about to exit.</span>
</span><span class='line'><span class="cm">     * @param   e   the uncaught exception.</span>
</span><span class='line'><span class="cm">     * @since   JDK1.0</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">uncaughtException</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">UncaughtExceptionHandler</span> <span class="n">ueh</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">getDefaultUncaughtExceptionHandler</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">ueh</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ueh</span><span class="o">.</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!(</span><span class="n">e</span> <span class="k">instanceof</span> <span class="n">ThreadDeath</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Exception in thread \&quot;&quot;</span>
</span><span class='line'>                                 <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的处理流程做成图的形式，就是下图所示</p>

<p><img src="https://asset.droidyue.com/image/2019_first_half/UncaughtExceptionProcess.png" alt="Uncaught exception process" /></p>

<p>注：上述图片来自<a href="https://www.javamex.com/tutorials/exceptions/exceptions_uncaught_handler.shtml">https://www.javamex.com/tutorials/exceptions/exceptions_uncaught_handler.shtml</a></p>

<h2>Questions</h2>

<h3>初始的ThreadGroup是什么</h3>

<p>上面提到了初始的ThreadGroup没有父ThreadGroup，是主线程所在的ThreadGroup么？</p>

<p>这个问题，我们可以通过这样一段代码验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dumpThreadGroups</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ThreadGroup</span> <span class="n">threadGroup</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getThreadGroup</span><span class="o">();</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">threadGroup</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpThreadGroups threadGroup=&quot;</span> <span class="o">+</span> <span class="n">threadGroup</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="n">threadGroup</span> <span class="o">=</span> <span class="n">threadGroup</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行该方法对应的输出是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dumpThreadGroups</span> <span class="n">threadGroup</span><span class="o">=</span><span class="n">main</span>
</span><span class='line'><span class="n">dumpThreadGroups</span> <span class="n">threadGroup</span><span class="o">=</span><span class="n">system</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此我们可以发现，初始的ThreadGroup是一个叫做system的ThreadGroup，而不是main ThreadGroup</p>

<h3>setDefaultUncaughtExceptionHandler 设置的一定会被调用到么</h3>

<p>这其实是一个很好的问题，答案是不一定会被调用，因为可能存在以下的情况</p>

<ul>
<li>出问题的线程设置了对应的UncaughtExcpetionHandler，优先响应分发到这个Handler</li>
<li>出问题的线程所在的ThreadGroup包括其祖先ThreadGroup 重写了uncaughtException 也可能造成线程默认的Handler无法被调用</li>
<li>出问题的线程重写了dispatchUncaughtException 可能性较小</li>
<li>出问题的线程重写了getUncaughtExceptionHandler 可能性较小</li>
</ul>


<h2>参考声明</h2>

<ul>
<li><a href="https://www.javamex.com/tutorials/exceptions/exceptions_uncaught_handler.shtml">How uncaught exceptions are handled</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 中的守护线程]]></title>
    <link href="https://droidyue.com/blog/2018/12/16/daemon-thread-in-java/"/>
    <updated>2018-12-16T19:22:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/12/16/daemon-thread-in-java</id>
    <content type="html"><![CDATA[<p>在之前的<a href="https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions/">《详解JVM如何处理异常》</a>提到了守护线程，当时没有详细解释，所以打算放到今天来解释说明一下JVM守护线程的内容。</p>

<h2>特点</h2>

<ul>
<li>通常由JVM启动</li>
<li>运行在后台处理任务，比如垃圾回收等</li>
<li>用户启动线程执行结束或者JVM结束时，会等待所有的非守护线程执行结束，但是不会因为守护线程的存在而影响关闭。</li>
</ul>


<!--more-->


<h2>判断线程是否为守护线程</h2>

<p>判断一个线程是否为守护线程，主要依据如下的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Whether or not the thread is a daemon thread. */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span>     <span class="n">daemon</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Tests if this thread is a daemon thread.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* @return  &lt;code&gt;true&lt;/code&gt; if this thread is a daemon thread;</span>
</span><span class='line'><span class="cm">*          &lt;code&gt;false&lt;/code&gt; otherwise.</span>
</span><span class='line'><span class="cm">* @see     #setDaemon(boolean)</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">isDaemon</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">daemon</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们进行一些简单的代码，验证一些关于守护线程的特性和一些猜测。</p>

<h2>辅助方法</h2>

<p>打印线程信息的方法，输出线程的组，是否为守护线程以及对应的优先级。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dumpAllThreadsInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Set</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span> <span class="n">threadSet</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">getAllStackTraces</span><span class="o">().</span><span class="na">keySet</span><span class="o">();</span>
</span><span class='line'>   <span class="k">for</span><span class="o">(</span><span class="n">Thread</span> <span class="nl">thread:</span> <span class="n">threadSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpAllThreadsInfo thread.name=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>               <span class="o">+</span> <span class="s">&quot;;group=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getThreadGroup</span><span class="o">()</span>
</span><span class='line'>               <span class="o">+</span> <span class="s">&quot;;isDaemon=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">isDaemon</span><span class="o">()</span>
</span><span class='line'>               <span class="o">+</span> <span class="s">&quot;;priority=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getPriority</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>线程睡眠的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">makeThreadSleep</span><span class="o">(</span><span class="kt">long</span> <span class="n">durationInMillSeconds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">durationInMillSeconds</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>验证普通的(非守护线程)线程会影响进程(JVM)退出</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testNormalThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="s">&quot;NormalThread&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="nd">@Override</span>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>           <span class="c1">//保持睡眠，确保在执行dumpAllThreadsInfo时，该线程不会因为退出导致dumpAllThreadsInfo无法打印信息。</span>
</span><span class='line'>           <span class="n">makeThreadSleep</span><span class="o">(</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;startNormalThread normalThread.time cost=&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>   <span class="c1">//主线程暂定3秒，确保子线程都启动完成</span>
</span><span class='line'>   <span class="n">makeThreadSleep</span><span class="o">(</span><span class="mi">3</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dumpAllThreadsInfo</span><span class="o">();</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;MainThread.time cost = &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取输出日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Signal</span> <span class="n">Dispatcher</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">9</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Attach</span> <span class="n">Listener</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">9</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Monitor</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">Break</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Reference</span> <span class="n">Handler</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">10</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">main</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">NormalThread</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Finalizer</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">8</span>
</span><span class='line'><span class="n">MainThread</span><span class="o">.</span><span class="na">time</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">3009</span>
</span><span class='line'><span class="n">startNormalThread</span> <span class="n">normalThread</span><span class="o">.</span><span class="na">time</span> <span class="n">cost</span><span class="o">=</span><span class="mi">10003</span>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">0</span>   <span class="err">结束进程</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们根据上面的日志，我们可以发现</p>

<ul>
<li> <code>startNormalThread normalThread.time cost=10003</code>代表着子线程执行结束，先于后面的进程结束执行。</li>
<li> <code>Process finished with exit code 0</code>  代表 结束进程</li>
</ul>


<p>以上日志可以验证进程是在我们启动的子线程结束之后才退出的。</p>

<h2>验证JVM不等待守护线程就会结束</h2>

<p>其实上面的例子也可以验证JVM不等待JVM启动的守护线程(Reference Handler,Signal Dispatcher等)执行结束就退出。</p>

<p>这里我们再次用一段代码验证一下JVM不等待用户启动的守护线程结束就退出的事实。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testDaemonThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>   <span class="n">Thread</span> <span class="n">daemonThreadSetByUser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="s">&quot;daemonThreadSetByUser&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="nd">@Override</span>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">makeThreadSleep</span><span class="o">(</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>           <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;daemonThreadSetByUser.time cost=&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">};</span>
</span><span class='line'>   <span class="n">daemonThreadSetByUser</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>   <span class="n">daemonThreadSetByUser</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>   <span class="c1">//主线程暂定3秒，确保子线程都启动完成</span>
</span><span class='line'>   <span class="n">makeThreadSleep</span><span class="o">(</span><span class="mi">3</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dumpAllThreadsInfo</span><span class="o">();</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;MainThread.time cost = &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的结果得到的输出日志为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Signal</span> <span class="n">Dispatcher</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">9</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Attach</span> <span class="n">Listener</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">9</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Monitor</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">Break</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Reference</span> <span class="n">Handler</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">10</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">main</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">daemonThreadSetByUser</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Finalizer</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">];</span><span class="n">isDaemon</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">priority</span><span class="o">=</span><span class="mi">8</span>
</span><span class='line'><span class="n">MainThread</span><span class="o">.</span><span class="na">time</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">3006</span>
</span><span class='line'>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，上面的日志没有类似daemonThreadSetByUser.time cost=的信息。可以确定JVM没有等待守护线程结束就退出了。</p>

<p>注意：</p>

<ul>
<li>新的线程是否初始为守护线程，取决于启动该线程的线程是否为守护线程。</li>
<li>守护线程默认启动的线程为守护线程，非守护线程启动的线程默认为非守护线程。</li>
<li>主线程（非守护线程）启用一个守护线程，需要调用Thread.setDaemon来设置启动线程为守护线程。</li>
</ul>


<h2>关于Priority与守护线程的关系</h2>

<p>有一种传言为守护线程的优先级要低，然而事实是</p>

<ul>
<li>优先级与是否为守护线程没有必然的联系</li>
<li>新的线程的优先级与创建该线程的线程优先级一致。</li>
<li>但是建议将守护线程的优先级降低一些。</li>
</ul>


<p>感兴趣的可以自己验证一下（其实上面的代码已经有验证了）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解JVM如何处理异常]]></title>
    <link href="https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions/"/>
    <updated>2018-10-21T20:14:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions</id>
    <content type="html"><![CDATA[<p>无论你是使用何种编程语言，在日常的开发过程中，都会不可避免的要处理异常。今天本文将尝试讲解一些JVM如何处理异常问题，希望能够讲清楚这个内部的机制，如果对大家有所启发和帮助，则甚好。</p>

<h2>当异常不仅仅是异常</h2>

<p>我们在标题中提到了异常，然而这里指的异常并不是单纯的Exception，而是更为宽泛的Throwable。只是我们工作中习以为常的将它们（错误地）这样称谓。</p>

<p>关于Exception和Throwable的关系简单描述一下</p>

<ul>
<li>Exception属于Throwable的子类，Throwable的另一个重要的子类是Error</li>
<li>throw可以抛出的都是Throwable和其子类，catch可捕获的也是Throwable和其子类。</li>
</ul>


<!--more-->


<p>除此之外，但是Exception也有一些需要我们再次强调的</p>

<ul>
<li>Exception分为两种类型，一种为Checked Exception，另一种为unchecked Exception</li>
<li>Checked Exception，比如最常见的IOException，这种异常需要调用处显式处理，要么使用try catch捕获，要么再次抛出去。</li>
<li>Unchecked Exception指的是所有继承自Error（包含自身）或者是RuntimeException（包含自身）的类。这些异常不强制在调用处进行处理。但是也可以try catch处理。</li>
</ul>


<p>注：本文暂不做Checked Exception设计的好坏的分析。</p>

<h2>Exception Table 异常表</h2>

<p>提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的Java处理异常的小例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatch</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码是一个很简单的例子，用来捕获处理一个潜在的空指针异常。</p>

<p>当然如果只是看简简单单的代码，我们很难看出什么高深之处，更没有了今天文章要谈论的内容。</p>

<p>所以这里我们需要借助一把神兵利器，它就是javap,一个用来拆解class文件的工具，和javac一样由JDK提供。</p>

<p>然后我们使用javap来分析这段代码（需要先使用javac编译）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//javap -c Main</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatch</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">11</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Exception.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">Exception</span> <span class="nl">table:</span>
</span><span class='line'>       <span class="n">from</span>    <span class="n">to</span>  <span class="n">target</span> <span class="n">type</span>
</span><span class='line'>           <span class="mi">0</span>     <span class="mi">3</span>     <span class="mi">6</span>   <span class="n">Class</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。</p>

<p>异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下</p>

<ul>
<li>from 可能发生异常的起始点</li>
<li>to 可能发生异常的结束点</li>
<li>target 上述from和to之前发生异常后的异常处理者的位置</li>
<li>type 异常处理者处理的异常的类信息</li>
</ul>


<h2>那么异常表用在什么时候呢</h2>

<p>答案是异常发生的时候，当一个异常发生时</p>

<p>1.JVM会在当前出现异常的方法中，查找异常表，是否有合适的处理者来处理</p>

<p>2.如果当前方法异常表不为空，并且异常符合处理者的from和to节点，并且type也匹配，则JVM调用位于target的调用者来处理。</p>

<p>3.如果上一条未找到合理的处理者，则继续查找异常表中的剩余条目</p>

<p>4.如果当前方法的异常表无法处理，则向上查找（弹栈处理）刚刚调用该方法的调用处，并重复上面的操作。</p>

<p>5.如果所有的栈帧被弹出，仍然没有处理，则抛给当前的Thread，Thread则会终止。</p>

<p>6.如果当前Thread为最后一个非守护线程，且未处理异常，则会导致JVM终止运行。</p>

<p>以上就是JVM处理异常的一些机制。</p>

<h2>try catch -finally</h2>

<p>除了简单的try-catch外，我们还常常和finally做结合使用。比如这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatchFinally</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Finally&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样我们使用javap分析一下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatchFinally</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Exception.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">22</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">40</span><span class="o">:</span> <span class="n">athrow</span>
</span><span class='line'>      <span class="mi">41</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">Exception</span> <span class="nl">table:</span>
</span><span class='line'>       <span class="n">from</span>    <span class="n">to</span>  <span class="n">target</span> <span class="n">type</span>
</span><span class='line'>           <span class="mi">0</span>     <span class="mi">3</span>    <span class="mi">14</span>   <span class="n">Class</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Exception</span>
</span><span class='line'>           <span class="mi">0</span>     <span class="mi">3</span>    <span class="mi">30</span>   <span class="n">any</span>
</span><span class='line'>          <span class="mi">14</span>    <span class="mi">19</span>    <span class="mi">30</span>   <span class="n">any</span>
</span></code></pre></td></tr></table></div></figure>


<p>和之前有所不同，这次</p>

<ul>
<li>异常表中，有三条数据，而我们仅仅捕获了一个Exception</li>
<li>异常表的后两个item的type为any</li>
</ul>


<p>上面的三条异常表item的意思为</p>

<ul>
<li>如果0到3之间，发生了Exception类型的异常，调用14位置的异常处理者。</li>
<li>如果0到3之间，无论发生什么异常，都调用30位置的处理者</li>
<li>如果14到19之间（即catch部分），不论发生什么异常，都调用30位置的处理者。</li>
</ul>


<p>再次分析上面的Java代码，finally里面的部分已经被提取到了try部分和catch部分。我们再次调一下代码来看一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatchFinally</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>      <span class="c1">//try 部分提取finally代码，如果没有异常发生，则执行输出finally操作，直至goto到41位置，执行返回操作。  </span>
</span><span class='line'>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//catch部分提取finally代码，如果没有异常发生，则执行输出finally操作，直至执行got到41位置，执行返回操作。</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Exception.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">22</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>      <span class="c1">//finally部分的代码如果被调用，有可能是try部分，也有可能是catch部分发生异常。</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">40</span><span class="o">:</span> <span class="n">athrow</span>     <span class="c1">//如果异常没有被catch捕获，而是到了这里，执行完finally的语句后，仍然要把这个异常抛出去，传递给调用处。</span>
</span><span class='line'>      <span class="mi">41</span><span class="o">:</span> <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Catch先后顺序的问题</h2>

<p>我们在代码中的catch的顺序决定了异常处理者在异常表的位置，所以，越是具体的异常要先处理，否则就会出现下面的问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">misuseCatchException</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//error occurs during compilings with tips Exception Java.lang.Exception has already benn caught.</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码会导致编译失败，因为先捕获Throwable后捕获Exception，会导致后面的catch永远无法被执行。</p>

<h2>Return 和finally的问题</h2>

<p>这算是我们扩展的一个相对比较极端的问题，就是类似这样的代码，既有return，又有finally，那么finally导致会不会执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">tryCatchReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>       <span class="k">return</span>  <span class="s">&quot;OK&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;ERROR&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;tryCatchReturn&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>答案是finally会执行，那么还是使用上面的方法，我们来看一下为什么finally会执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">tryCatchReturn</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// String OK</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String tryCatchReturn</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">areturn</span>       <span class="err">返回</span><span class="n">OK</span><span class="err">字符串，</span><span class="n">areturn</span><span class="err">意思为</span><span class="k">return</span> <span class="n">a</span> <span class="n">reference</span> <span class="n">from</span> <span class="n">a</span> <span class="n">method</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// String ERROR</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">23</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String tryCatchReturn</span>
</span><span class='line'>      <span class="mi">25</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">28</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">29</span><span class="o">:</span> <span class="n">areturn</span>  <span class="c1">//返回ERROR字符串</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String tryCatchReturn</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">40</span><span class="o">:</span> <span class="n">athrow</span>  <span class="err">如果</span><span class="k">catch</span><span class="err">有未处理的异常，抛出去。</span>
</span></code></pre></td></tr></table></div></figure>


<p>行文仓促，加之本人水平有限，有错误的地方，请指出。</p>

<p>参考文章：</p>

<ul>
<li><a href="http://blog.jamesdbloom.com/JVMInternals.html#exception_table">http://blog.jamesdbloom.com/JVMInternals.html#exception_table</a></li>
<li><a href="https://blog.takipi.com/the-surprising-truth-of-java-exceptions-what-is-really-going-on-under-the-hood/">https://blog.takipi.com/the-surprising-truth-of-java-exceptions-what-is-really-going-on-under-the-hood/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings</a></li>
<li><a href="https://dzone.com/articles/the-truth-of-java-exceptions-whats-really-going-on">https://dzone.com/articles/the-truth-of-java-exceptions-whats-really-going-on</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有点意思的Kotlin的默认参数与JVMOverloads]]></title>
    <link href="https://droidyue.com/blog/2018/10/14/dive-into-kotlin-default-arguments-and-jvmoverloads/"/>
    <updated>2018-10-14T19:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/10/14/dive-into-kotlin-default-arguments-and-jvmoverloads</id>
    <content type="html"><![CDATA[<p>在Java中，当我们定义一个类的时候，总会出现一些变量是必须要填写的，而另一些是可选的。比如像下面这样，我们定一个Person类，其中name是必须填写的，而性别sex和isChinese可选，如果不填写就直接使用默认值。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChinese</span><span class="o">){}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChinese</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当仅仅只有这两个可选参数时，上述的情况还好很多，可是当新增了其他的属性的时候，我们需要实现更多的构造方法重载。这在Java中更加容易出现telescoping constructor的问题,进而影响我们的开发效率和代码可读性。</p>

<p>在Kotlin中，这种问题得到了很好的解决。这便是要提到的方法的默认参数，其实这个很简单，在其他的语言也是支持的。</p>

<p>便于大家理解，我们先看一看默认参数是什么，下面是一个Book的类和它的构造方法（Kotlin代码）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nf">Book</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isChineseBook:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>          <span class="n">val</span> <span class="nl">hasMultipleAuthor:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isPopular:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>           <span class="n">val</span> <span class="nl">isForChildren:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在调用的时候可以按照如下的Kotlin代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="mi">2</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book1&quot;</span><span class="o">,</span> <span class="n">isForChildren</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'><span class="mi">3</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book2&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="mi">4</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book3&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="mi">5</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book4&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="mi">6</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book5&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以根据自己的需要填写必要的参数值，当然也可以像第1行<code>Book("Book1", isForChildren = false)</code> 不按照顺序填写参数也是可以的，这是一个很赞的特性，能很大程度上增强代码的可读性。</p>

<p>但是Kotlin的这一特性，只应用于Kotlin代码调用的场景，如果是在Java代码中，我们还是必须要填写完整的参数。这一点着实令人沮丧。不过还在有一个解决办法，那就是使用@JvmOverloads注解，示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">People</span> <span class="nd">@JvmOverloads</span> <span class="n">constructor</span><span class="o">(</span><span class="n">val</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">sex:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isChinese:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中调用示例效果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//call constructor with JVMOverloads</span>
</span><span class='line'><span class="n">People</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">People</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">People</span> <span class="n">people1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">People</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">People</span> <span class="n">people2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">People</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么JvmOverloads是如何工作的呢？</p>

<p>其实@JvmOverloads的作用就是告诉编译器，自动生成多个该方法的重载。因为我们通过反编译分析即可验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChinese</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">sex</span> <span class="o">=</span> <span class="n">sex</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isChinese</span> <span class="o">=</span> <span class="n">isChinese</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $FF: synthetic method</span>
</span><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="n">String</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var4</span><span class="o">,</span> <span class="n">DefaultConstructorMarker</span> <span class="n">var5</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var4</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var4</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var3</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，上面的重载方法并没有按照组合来生成，比如<code>public People(@NotNull String name, int sex, boolean isChinese)</code>,因为这样也是出于可读性来考虑和避免潜在方法签名冲突问题。</p>

<p>最后，我们来研究一下Kotlin中默认参数的实现原理。因为这里面存在着一些程序设计的巧妙之处。</p>

<p>这里我们还是使用刚刚提到的Book这个类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nf">Book</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isChineseBook:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>          <span class="n">val</span> <span class="nl">hasMultipleAuthor:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isPopular:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>           <span class="n">val</span> <span class="nl">isForChildren:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过反编译，我们得到了一些类似这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChineseBook</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">hasMultipleAuthor</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isPopular</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isForChildren</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isChineseBook</span> <span class="o">=</span> <span class="n">isChineseBook</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">hasMultipleAuthor</span> <span class="o">=</span> <span class="n">hasMultipleAuthor</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isPopular</span> <span class="o">=</span> <span class="n">isPopular</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isForChildren</span> <span class="o">=</span> <span class="n">isForChildren</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $FF: synthetic method</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="n">String</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var3</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var4</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var5</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var6</span><span class="o">,</span> <span class="n">DefaultConstructorMarker</span> <span class="n">var7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var2</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var3</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var4</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var5</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">,</span> <span class="n">var4</span><span class="o">,</span> <span class="n">var5</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是有点不一样，它只生成了两个构造方法，而不是所谓的多个参数组合的构造方法。更有意思的是，当我们这样调用时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book2&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book3&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book4&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book5&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其对应的字节码反编译成java是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book0&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book2&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book3&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book4&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book5&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们会注意到上面有很多数字，比如30,14,28,24,16等。那么这些数字是怎么生成的呢？</p>

<p>对于构造方法的每个参数，</p>

<ul>
<li>都有一个位置，即方法声明时所在的位置，我们这里使用i代替表示。注意该从0开始，</li>
<li>每个参数有一个mask值，该值为2的i次方，比如第0个位置的参数的mask值为1，第1个位置的mask值为2，以此类推。</li>
<li>如果在调用时，编译器检测到某些参数没有调用，就将这些参数的mask值，求和，便生成了我们上面提到的数字。</li>
</ul>


<p>具体示例如下</p>

<p><img src="https://asset.droidyue.com/image/kotlin_jvm_overloads.png" alt="https://asset.droidyue.com/image/kotlin_jvm_overloads.png" /></p>

<p>比如Book(&ldquo;Book0&rdquo;)我们传递了第一个参数，所以最后的30 就是由 2 + 4 + 8 + 16 这些缺失的位置的mask值计算得出来的。</p>

<p>知道了，mask值的生成规则，就便于我们理解编译器生成的构造方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// $FF: synthetic method</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="n">String</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var3</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var4</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var5</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var6</span><span class="o">,</span> <span class="n">DefaultConstructorMarker</span> <span class="n">var7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var2</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var3</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var4</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var5</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">,</span> <span class="n">var4</span><span class="o">,</span> <span class="n">var5</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这个构造方法就是根据根据mask判断，某个位置的参数是否在调用时进行了赋值，如果没有赋值则进行设置默认值操作。</p>

<p>这种使用mask或者flag的方法其实很巧，减少了一些不必要的重载方法的生成。对于我们以后处理类似的问题，提供了一些不过的思路和参考价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探究Kotlin的局部方法]]></title>
    <link href="https://droidyue.com/blog/2018/10/07/dive-into-kotlins-local-function/"/>
    <updated>2018-10-07T19:47:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/10/07/dive-into-kotlins-local-function</id>
    <content type="html"><![CDATA[<p>在Kotlin中，定义方法很有趣，不仅仅因为方法的关键字是fun(function前几个字符)，还是因为你会惊奇的发现，它允许我们在方法中定义方法。如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">methodA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">methodB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">methodB</span><span class="o">()</span> <span class="c1">//valid</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//methodB() invalid</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>其中</p>

<ul>
<li>methodB定义在methodA的方法体中，即methodB被称为局部方法或局部函数</li>
<li>methodB只能在methodA中方法调用</li>
<li>methodB在methodA方法外调用，会引起编译错误</li>
</ul>


<p>既然Kotlin支持了局部方法，相比它应该有什么特殊的用武之地呢</p>

<p>首先它的特点还是像它的名字一样，局部，这就意味着它有着无可比拟的更小范围的限定能力。保证了小范围的可用性，隔绝了潜在的不相关调用的可能。</p>

<p>作为编程中的金科玉律，方法越小越好，相比纵向冗长的代码片段，将其按照职责切分成功能单一的小的局部方法，最后组织起来调用，会让我们的代码显得更加的有条理和清晰。</p>

<p>作为一个程序员，好奇应该是他的特质之一，我们应该会想要研究一下，局部方法的实现原理是什么，至少我们在Java时代从来没有见过这种概念。</p>

<p>其实这件事仔细研究起来，还是有不少细节的。因为这其中局部方法可以捕获外部的变量也可以不捕获外部的变量。</p>

<p>下面就是捕获外部变量的一种情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">outMethodCapture</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">checkArgs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;innerMethod check args&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这其中，局部方法checkArgs捕获了outMethodCapture的参数args。</p>

<p>所以，不捕获外部变量的情况也不难理解，如下,即checkArgs处理args都是通过参数传递的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">outMethodNonCapture</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">checkArgs</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;outMethodNonCapture check args&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们分析一下捕获变量的局部方法的实现原理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">outMethodCapture</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="s">&quot;args&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">undefinedtype</span><span class="o">&gt;</span> <span class="n">checkArgs$</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// $FF: synthetic method</span>
</span><span class='line'>     <span class="c1">// $FF: bridge method</span>
</span><span class='line'>     <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Unit</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">var1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="n">args</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">var1</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">String</span> <span class="n">var2</span> <span class="o">=</span> <span class="s">&quot;innerMethod check args&quot;</span><span class="o">;</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var2</span><span class="o">);</span>
</span><span class='line'>           <span class="o">(</span><span class="k">new</span> <span class="n">Throwable</span><span class="o">()).</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>  <span class="n">checkArgs$</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上实现原理，就是局部方法实现其实就是实现了一个匿名内部类的实例，然后再次调用即可。
对于不捕获的局部方法要稍有不同，首先我们反编译得到对应的Java代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">outMethodNonCapture</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="s">&quot;args&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">undefinedtype</span><span class="o">&gt;</span> <span class="n">checkArgs$</span> <span class="o">=</span> <span class="kc">null</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>  <span class="n">checkArgs$</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们得到的是一个不完整的代码，这时候需要我们前往项目工程，结合一些对应的class文件分析。首先我们找到类似这样的文件<code>MainKt$outMethodCapture$1.class</code> (其class文件按照”文件名$方法名$内部类序号”的规则)。</p>

<p>使用javap方法再次反编译分析该文件，注意对于$符号需要简单处理一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">➜</span>  <span class="n">KotlinInnerFunction</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="s">&quot;MainKt\$outMethodNonCapture\$1.class&quot;</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;Main.kt&quot;</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">MainKt</span><span class="n">$outMethodNonCapture$1</span> <span class="kd">extends</span> <span class="n">kotlin</span><span class="o">.</span><span class="na">jvm</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">Lambda</span> <span class="kd">implements</span> <span class="n">kotlin</span><span class="o">.</span><span class="na">jvm</span><span class="o">.</span><span class="na">functions</span><span class="o">.</span><span class="na">Function1</span><span class="o">&lt;</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[],</span> <span class="n">kotlin</span><span class="o">.</span><span class="na">Unit</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">MainKt$outMethodNonCapture$1</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// class &quot;[Ljava/lang/String;&quot;</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">14</span>                 <span class="c1">// Method invoke:([Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">20</span>                 <span class="c1">// Field kotlin/Unit.INSTANCE:Lkotlin/Unit;</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">areturn</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">23</span>                 <span class="c1">// String args</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">29</span>                 <span class="c1">// Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">31</span>                 <span class="c1">// class &quot;[Ljava/lang/Object;&quot;</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">arraylength</span>
</span><span class='line'>      <span class="mi">13</span><span class="o">:</span> <span class="n">ifne</span>          <span class="mi">20</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">21</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="n">ifeq</span>          <span class="mi">44</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">33</span>                 <span class="c1">// String outMethodNonCapture check args</span>
</span><span class='line'>      <span class="mi">26</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">39</span>                 <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">45</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">47</span>                 <span class="c1">// class java/lang/Throwable</span>
</span><span class='line'>      <span class="mi">37</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">38</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">51</span>                 <span class="c1">// Method java/lang/Throwable.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">41</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">54</span>                 <span class="c1">// Method java/lang/Throwable.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">44</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MainKt$outMethodNonCapture$1</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">61</span>                 <span class="c1">// Method kotlin/jvm/internal/Lambda.&quot;&lt;init&gt;&quot;:(I)V</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// class MainKt$outMethodNonCapture$1</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">80</span>                 <span class="c1">// Method &quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">82</span>                 <span class="c1">// Field INSTANCE:LMainKt$outMethodNonCapture$1;</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的类其实比较简单，更重要的这是一个单例的实现。因为这样相比捕获的情况下，减少了匿名内部类的生成和实例的创建，理论上带来的代价也会更小。</p>

<p>考虑到上面的对比，如果在使用局部方法时，建议使用不捕获外部变量的方式会更加推荐。</p>

<h3>使用注意</h3>

<p>是的，使用局部方法有一个注意事项，也就是一种规则约定，那就是需要先定义才能使用，否则会报错，如下所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">outMethodInvalidCase</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">()</span><span class="c1">//invalid unresolved reference</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">checkArgs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;innerMethod check args&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">()</span><span class="c1">//valid</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
但是呢，先定义局部方法，再使用还是有一些问题，这种问题主要表现在代码可读性上。</p>

<p>试想一下，如果你进入一个方法，看到的是一连串的局部方法，可能或多或少有点别扭。</p>

<p>但是试想一下，既然有这样的问题，为什么还要被设计成这个样子呢。首先，我们先看个小例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">0</span><span class="n">fun</span> <span class="n">outMethodInvalidCase</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">checkArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="mi">2</span>   <span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">//the reason why it&#39;s unresolved</span>
</span><span class='line'><span class="mi">3</span>   <span class="n">fun</span> <span class="n">checkArgs</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">4</span>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="mi">5</span>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;outMethodNonCapture check args&quot;</span><span class="o">)</span>
</span><span class='line'><span class="mi">6</span>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'><span class="mi">7</span>           <span class="n">a</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="mi">8</span>       <span class="o">}</span>
</span><span class='line'><span class="mi">9</span>   <span class="o">}</span>
</span><span class='line'><span class="mi">10</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为局部方法可以capture局部变量，checkArgs捕获了局部变量a，当第一行代码checkArgs调用时，而checkArgs看似定义了，但是第二行却还没有执行到，导致了编译问题。</p>

<p>目前，capture变量和非capture的局部方法使用都是一致的，都需要先定义，再使用。</p>

<p>关于Kotlin中的局部方法，我们可以去尝试来达到限定范围，拆分方法的目的，在使用时，尽量选择非捕获的形式的局部方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析WeakHashMap]]></title>
    <link href="https://droidyue.com/blog/2018/07/23/a-briefing-looking-at-weakhashmap/"/>
    <updated>2018-07-23T17:24:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/23/a-briefing-looking-at-weakhashmap</id>
    <content type="html"><![CDATA[<p>在Java或者是Android编程中，我们一般都会使用到Map，比如HashMap这样的具体实现。更高级一点，我们可能会使用WeakHashMap。</p>

<p>WeakHashMap其实和HashMap大多数行为是一样的，只是WeakHashMap不会阻止GC回收key对象（不是value），那么WeakHashMap是怎么做到的呢，这就是我们研究的主要问题。</p>

<!--more-->


<p>在开始WeakHashMap之前，我们先要对弱引用有一定的了解。</p>

<p>在Java中，有四种引用类型</p>

<ul>
<li>强引用(Strong Reference)，我们正常编码时默认的引用类型，强应用之所以为强，是因为如果一个对象到GC Roots强引用可到达，就可以阻止GC回收该对象</li>
<li>软引用（Soft Reference）阻止GC回收的能力相对弱一些，如果是软引用可以到达，那么这个对象会停留在内存更时间上长一些。当内存不足时垃圾回收器才会回收这些软引用可到达的对象</li>
<li>弱引用（WeakReference）无法阻止GC回收，如果一个对象时弱引用可到达，那么在下一个GC回收执行时，该对象就会被回收掉。</li>
<li>虚引用（Phantom Reference）十分脆弱，它的唯一作用就是当其指向的对象被回收之后，自己被加入到引用队列，用作记录该引用指向的对象已被销毁</li>
</ul>


<p>这其中还有一个概念叫做引用队列(Reference Queue)</p>

<ul>
<li>一般情况下，一个对象标记为垃圾（并不代表回收了）后，会加入到引用队列。</li>
<li>对于虚引用来说，它指向的对象会只有被回收后才会加入引用队列，所以可以用作记录该引用指向的对象是否回收。</li>
</ul>


<h3>WeakHashMap如何不阻止对象回收呢</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="kd">implements</span>
</span><span class='line'>       <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">boolean</span> <span class="n">isNull</span><span class="o">;</span>
</span><span class='line'>   <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>   <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">interface</span> <span class="nc">Type</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">R</span> <span class="nf">get</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">entry</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">Entry</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">object</span><span class="o">,</span> <span class="n">ReferenceQueue</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">super</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>       <span class="n">isNull</span> <span class="o">=</span> <span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>       <span class="n">hash</span> <span class="o">=</span> <span class="n">isNull</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>       <span class="n">value</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如源码所示，</p>

<ul>
<li>WeakHashMap的Entry继承了WeakReference。</li>
<li>其中Key作为了WeakReference指向的对象</li>
<li>因此WeakHashMap利用了WeakReference的机制来实现不阻止GC回收Key</li>
</ul>


<h3>如何删除被回收的key数据呢</h3>

<p>在Javadoc中关于WeakHashMap有这样的描述，当key不再引用时，其对应的key/value也会被移除。</p>

<p>那么是如何移除的呢，这里我们通常有两种假设策略</p>

<ul>
<li>当对象被回收的时候，进行通知</li>
<li>WeakHashMap轮询处理时效的Entry</li>
</ul>


<p>而WeakHashMap采用的是轮询的形式，在其put/get/size等方法调用的时候都会预先调用一个poll的方法，来检查并删除失效的Entry</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">poll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">toRemove</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">((</span><span class="n">toRemove</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;)</span> <span class="n">referenceQueue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">removeEntry</span><span class="o">(</span><span class="n">toRemove</span><span class="o">);</span>
</span><span class='line'>       <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;removeEntry=&quot;</span> <span class="o">+</span> <span class="n">toRemove</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么没有使用看似更好的通知呢，我想是因为在Java中没有一个可靠的通知回调，比如大家常说的finalize方法，其实也不是标准的，不同的JVM可以实现不同，甚至是不调用这个方法。</p>

<p>当然除了单纯的看源码，进行合理的验证是检验分析正确的一个重要方法。</p>

<p>这里首先，我们定义一个MyObject类，处理一下finalize方法（在我的测试机上可以正常调用，仅仅做为辅助验证手段）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nf">MyObject</span><span class="o">(</span><span class="n">val</span> <span class="nl">id:</span> <span class="n">String</span><span class="o">)</span> <span class="o">:</span> <span class="n">Any</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">protected</span> <span class="n">fun</span> <span class="nf">finalize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;Object($id) finalize method is called&quot;</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是调用者的代码，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">val</span> <span class="n">weakHashMap</span> <span class="o">=</span> <span class="n">WeakHashMap</span><span class="o">&lt;</span><span class="n">Any</span><span class="o">,</span> <span class="n">Int</span><span class="o">&gt;()</span>
</span><span class='line'><span class="n">var</span> <span class="n">count</span> <span class="o">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nl">savedInstanceState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'>   <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
</span><span class='line'>   <span class="n">setSupportActionBar</span><span class="o">(</span><span class="n">toolbar</span><span class="o">)</span>
</span><span class='line'>   <span class="n">dumpWeakInfo</span><span class="o">()</span>
</span><span class='line'>   <span class="n">fab</span><span class="o">.</span><span class="na">setOnClickListener</span> <span class="o">{</span> <span class="n">view</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="c1">//System.gc()// this seldom works use Android studio force gc stop</span>
</span><span class='line'>       <span class="n">weakHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">MyObject</span><span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">toString</span><span class="o">()),</span> <span class="n">count</span><span class="o">)</span>
</span><span class='line'>       <span class="n">count</span> <span class="o">++</span>
</span><span class='line'>       <span class="n">dumpWeakInfo</span><span class="o">()</span>
</span><span class='line'>       <span class="n">Snackbar</span><span class="o">.</span><span class="na">make</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="s">&quot;Replace with your own action&quot;</span><span class="o">,</span> <span class="n">Snackbar</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">)</span>
</span><span class='line'>               <span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="s">&quot;Action&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">).</span><span class="na">show</span><span class="o">()</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">dumpWeakInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;dumpWeakInfo weakInfo.size=${weakHashMap.size}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们按照如下操作</p>

<ul>
<li>点击fab控件，每次对WeakhashMap对象增加一个Entry，并打印WeakHashMap的size 执行3此</li>
<li>在没有强制触发GC时，WeakHashMap对象size一直会增加</li>
<li>手动出发Force GC，我们会看到MyObject有finalize方法被调用</li>
<li>再次点击fab空间，然后输出的WeakHashMap size急剧减少。</li>
<li>同样我们收到在WeakHashMap增加的日志也会输出</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">Object</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="n">finalize</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">Object</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="n">finalize</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">Object</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="n">finalize</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">WeakHashMap</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">removeEntry</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">WeakHashMap</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">removeEntry</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">WeakHashMap</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">removeEntry</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：System.gc()并不一定可以工作,建议使用Android Studio的Force GC</p>

<p>完整的测试代码可以访问这里  <a href="https://github.com/androidyue/WeakHashMapSample">https://github.com/androidyue/WeakHashMapSample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么局部变量需要显式设置初始化值]]></title>
    <link href="https://droidyue.com/blog/2018/07/16/variable-localname-might-not-have-been-initialized/"/>
    <updated>2018-07-16T08:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/16/variable-localname-might-not-have-been-initialized</id>
    <content type="html"><![CDATA[<p>我们在编程中，无时无刻地都在于方法打交道，而在方法中，我们很难不使用局部变量，比如我们有下面的这样一段很简单的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">dump</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">localName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dump localName=&quot;</span> <span class="o">+</span> <span class="n">localName</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>随着我们敲打出上面的代码，IDE也会同时抛给我们一个错误，就是
<code>Variable 'localName' might not have been initialized</code></p>

<p>这是什么错误，localName没有初始化？为什么成员变量是可以的的，不信你看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span>  <span class="kt">void</span> <span class="nf">dumpField</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpField name=&quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，上面的成员变量是没有问题，也没有警告的。</p>

<p>这就奇怪了，这是为什么呢，javac怎么这么蠢呢？</p>

<p>答案是否定的。javac足够有能力推断出局部变量并初始化默认值。然而它并没有这样做。</p>

<p>想要弄清楚为什么这样做就，就需要搞清楚局部变量和成员变量的关于赋值和取值的顺序的差异。</p>

<p>对于成员变量而言，其赋值和取值访问的先后顺序具有不确定性。还是以这段代码为例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span>  <span class="kt">void</span> <span class="nf">dumpField</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpField name=&quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>name的赋值可以发生在dumpField之前，也可以发生在dumpField之后。这是在运行时发生的，在编译器来看确定不了的。对于没把握的事情，javac是不会去做的，这种事情交给运行时的JVM就可以了。</p>

<p>而对于成员变量而言，其赋值和取值访问顺序是确定的。比如这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">dump</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">localName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dump localName=&quot;</span> <span class="o">+</span> <span class="n">localName</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为localName的作用范围只限定于dump方法中，必然的顺序就是先赋值（声明），再进行访问。</p>

<p>说了半天还没有说局部变量为什么显式设置初始值呢？</p>

<p>其实之所以这样做就是一种对程序员的约束限制。因为程序员（人）是（有些情况下）是靠不住的，假使局部变量可以使用默认值，我们总会无意间忘记赋值，进而导致不可预期的情况出现。这</p>

<p>“之所以设计成这样完全是一种策略决定，并非是我力不能及，年轻人，我只能帮你到这里了。”，Javac如是说。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AssetManager.finalize() timed out after 10 seconds分析]]></title>
    <link href="https://droidyue.com/blog/2018/07/10/android-dot-content-dot-res-dot-assetmanager-dot-finalize-timed-out-after-10-seconds/"/>
    <updated>2018-07-10T21:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/10/android-dot-content-dot-res-dot-assetmanager-dot-finalize-timed-out-after-10-seconds</id>
    <content type="html"><![CDATA[<p>没有代码，就没有bug。程序员在编码时，总会比不避免的出现bug。倒不是因为我们热爱制造bug，创造机会和测试妹子频繁沟通。而是现实情况很复杂，存在着很多不确定性。尤其是那些崩溃从stacktrace上来看，完全想象不到和项目代码之间的直接联系。</p>

<!--more-->


<p>在我们的项目崩溃中，有一个比较常见的bug，就是 java.util.concurrent.TimeoutException android.content.res.AssetManager.finalize() timed out after 10 seconds  意思简单明了，就是说在AssetManager析构的时候发生了超时异常。</p>

<p>是的，道理我都懂，可是AssetManager不是我写的啊，这不是Android Framework的东西么，而且在stacktrace中丝毫看不到我项目代码的堆栈信息。这简直是无从下手。遇到这种情况，我们就需要从崩溃后台手机上的信息去分析产生的原因了</p>

<h3>原理分析</h3>

<ul>
<li>Android在启动后会创建一些守护进程，其中涉及到该问题的有两个，分别是FinalizerDaemon和FinalizerWatchdogDaemon</li>
<li>FinalizerDaemon 析构守护线程。对于重写了成员函数finalize的对象，它们被GC决定回收时，并没有马上被回收，而是被放入到一个队列中，等待FinalizerDaemon守护线程去调用它们的成员函数finalize，然后再被回收。</li>
<li>FinalizerWatchdogDaemon析构监护守护线程。用来监控FinalizerDaemon线程的执行。一旦检测那些重写了finalize的对象在执行成员函数finalize时超出一定时间，那么就会退出VM。</li>
<li>如果是FinalizerDaemon进行对象析构时间超过了MAX_FINALIZE_NANOS（这里是10s），FinalizerWatchdogDaemon进行就会抛出TimeoutException</li>
</ul>


<p>出现场景
10s的超时其实是很大的一个值，一般的析构方法很难执行时间达到这个数值，那么就要分析一下这个问题的特征，来总结一下出现场景了。</p>

<p>针对分析了这类的崩溃的数据，不难会得到几个特征</p>

<ul>
<li>这个崩溃从数据来看，崩溃都是应用处于后台不可见的情况下发生</li>
<li>崩溃时应用的使用时长（崩溃统计组件提供）普遍在几个小时的级别</li>
</ul>


<p>从Stack Overflow上找到了一个相对比较合理的出现场景</p>

<ul>
<li>当你的应用处于后台，有对象需要释放回收内存时</li>
<li>记录一个start_time 然后是FinalizerDaemon 开始析构AssetManager对象</li>
<li>在这个过程中，设备突然进入了休眠状态，析构执行被暂停</li>
<li>当过了一段时间，设备被唤醒，析构任务被恢复，继续执行，直至结束</li>
<li>在析构完成后，得到一个end_time</li>
<li>FinalizerWatchdogDaemon 对end_time与start_time进行差值对比，发现超过了MAX_FINALIZE_NANOS，于是就抛出了TimeOut异常。</li>
</ul>


<p>注意：应用后台执行的时间越长，出现的概率应该就会越大。</p>

<h3>如何解决</h3>

<p>这个问题，并不像NPE那样，可以快速定位解决，甚至来说，这个问题几乎无解。</p>

<p>理论上可能有帮助的措施是</p>

<ul>
<li>减少内存占用，避免不必要的对象创建</li>
<li>消除内存泄露问题，缓解GC压力</li>
</ul>


<p>但是这些措施，对于解决该问题起到的作用很微小。</p>

<h3>如何缓解</h3>

<p>凡事总有但是，但是我们可以缓解这个问题造成的影响。</p>

<p>所谓缓解之法，就是让崩溃悄无声息地发生，不影响用户体验，做到用户无感知崩溃。</p>

<p>前面也提到了，因为这种崩溃只出现在后台，我们可以对于这类的崩溃，稍作处理，就可以让崩溃的对话框不显示。具体可以参考这篇文章<a href="https://droidyue.com/blog/2018/04/01/do-not-bother-the-user-when-app-crash-in-a-background-state/">Android中实现用户无感知处理后台崩溃</a></p>

<p>以上。感谢下面的参考文章</p>

<h3>参考文章</h3>

<ul>
<li><a href="https://blog.csdn.net/jamin0107/article/details/78793021">https://blog.csdn.net/jamin0107/article/details/78793021</a></li>
<li><a href="https://stackoverflow.com/questions/24021609/how-to-handle-java-util-concurrent-timeoutexception-android-os-binderproxy-fin">https://stackoverflow.com/questions/24021609/how-to-handle-java-util-concurrent-timeoutexception-android-os-binderproxy-fin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[宽带提速记]]></title>
    <link href="https://droidyue.com/blog/2018/07/01/kuan-dai-ti-su-ji/"/>
    <updated>2018-07-01T20:14:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/01/kuan-dai-ti-su-ji</id>
    <content type="html"><![CDATA[<p>用了一年宽带马上就要到期了，去联通营业厅咨询了一下，发现联通已经悄悄的把我的100M免费升级成了300M(做好事为什么不告诉我一声)。心中划过一丝窃喜，但是随后脑海中抛出了一个疑问，都升到了300M了，怎么丝毫没有感觉到速度提升呢？</p>

<!--more-->


<h3>联通给的光猫WIFI有问题</h3>

<p>在一年前报装的时候，我确实测过网速，当时使用QQ手机管家测过，将近50M到100M。觉得可能是测试节点的问题，就没有太留意。</p>

<p>不过现在都300M的带宽了，怎么还是不能跑满，后来打联通客服，客服小哥说，光猫的WIFI属于附加功能，无法发挥到带宽的理想状态。</p>

<p>于是在京东上开始挑选路由器，货比N家，最终选择了一个不负所望的<a href="https://union-click.jd.com/jdc?d=o1fjbn">Tenda AC1206</a>，腾达还是挺有良心的国产品牌</p>

<p>当然我最看重的这几点</p>

<ul>
<li>双千兆，WIFI和Lan口都是千兆</li>
<li>智能管理，设备上线提醒（可以看到家人回家在家情况）</li>
<li>2.4Ghz与5Ghz同时支持</li>
<li>WIFI信号定向增强功能</li>
</ul>


<h3>光猫Lan口选择很重要</h3>

<p>需要注意的是，联通的光猫，我这里是中兴的F627Za，有点特殊，只有Lan1口支持千兆，其他是最高百兆，所以如果选择出错，无法体验到超百兆的速度，钱也就白花了。</p>

<h3>测速软件很重要</h3>

<p>选择一个好的测速软件，会使得我们的验证可以量化，这里我使用的是speedtest软件，，Android，Mac等都支持，注意Web也支持，不过不要用山寨的www.speedtest.cn, 而是要使用这个 <a href="http://www.speedtest.net/">http://www.speedtest.net/</a></p>

<p>注意做测速尽量选择统一运营商的测速节点，不要出现联通的用户端选择电信节点来测试带宽的情况。</p>

<h3>2.4G很慢，我要用5G</h3>

<p>可是当我使用Android手机连接腾达WIFI时，测速已然不到百兆，这就奇怪了，后来当我从2.4G切换到5G时，速度发生了巨变，将近200M。</p>

<p>这就涉及到了2.4G和5G的区别了</p>

<ul>
<li>这里的2.4G和5G 具体应该是2.4Ghz和5Ghz 所以这里的5G和5G通信不是一个概念</li>
<li>2.4G传输距离较长，带宽要少，穿墙能力要好，但是网络拥堵也比较多</li>
<li>5G传输距离较短，带宽要多一些，穿墙能力较弱，网络拥堵少</li>
</ul>


<p>那么该怎么选择</p>

<ul>
<li>有些设备不支持5G，仅支持2.4Ghz，尤其是一些带WIFI的空调和米家设备</li>
<li>如果你的设备支持5G（即能搜索到_5G结尾的WIFI）距离路由器比较近，或者隔墙少，建议使用5G</li>
<li>当然实际情况下，可以分别连接使用speedtest做个测速</li>
</ul>


<h3>Mac连接5G居然最慢，更改信道</h3>

<p>手机上一切都好了，可是我使用Mac连接5G，发现出奇地慢，由于我的Mac安装了双系统，切到windows下，可以跑满300M，但是Mac系统下就不行。尝试了很多方法，最后修改了5G的信道，改成了161，测速就可以达到300M了。</p>

<p>大家可以更改5G的信道去尝试，国内规定可用的5G信道只有149、153、157、161、165这5个，具体以测试数据为准。</p>

<p>注意更改信道后，建议重启路由器或者客户端重新连接WIFI。</p>

<h3>手机跑不满，电脑很可以</h3>

<p>注意，我在测速的时候也发现了，手机通常无法跑满，而电脑是可以的，这其中应该和硬件的配置有关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谁来检查方法参数合法性]]></title>
    <link href="https://droidyue.com/blog/2018/05/15/who-should-be-responsible-for-checking-parameter/"/>
    <updated>2018-05-15T21:31:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/05/15/who-should-be-responsible-for-checking-parameter</id>
    <content type="html"><![CDATA[<p>我们在编程中的函数或者是方法，大多数都是有参数的。参数对于方法来说是很重要的输入数据，传入的参数值的合法性影响着方法的稳定性，严重时甚至可能导致崩溃问题的出现。</p>

<!--more-->


<p>比如这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">Main</span><span class="o">().</span><span class="na">buy</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buy</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码在执行起来会导致空指针异常，其实解决起来也挺简单，就是做一些非空的检查，比如这样,在调用处进行校验</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">book</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">new</span> <span class="nf">Main</span><span class="o">().</span><span class="na">buy</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者是这样在方法定义的时候处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buy</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">book</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就这个案例而言，两者都可以，但是有没有什么规范呢</p>

<p>其实还是有一些约定的
如果方法是public,protected等这样被外部可调用的时候，方法定义时需要进行值的合法性检验，因为无法确保外部始终传递合法的参数值。
对于内部的private等可见性等，则不是必需的，因为内部调用相对是可控更高的。</p>

<p>除此之外，我们在JavaDoc注释也需要同步跟进，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* bub a book</span>
</span><span class='line'><span class="cm">* @param book could be null</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buy</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">book</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们通过增加<code>@param book could be null</code>就可以告诉调用者，不用做合法性检查，方法内部已经处理了。这种方式对开发者还是比较友善的。此外我们也可以使用@Nullable或者@NonNull来表明当前参数的检查职责归属。</p>

<p>至此我们也理清了检查方法参数合法性的责任归属，欢迎评论交流。</p>
]]></content>
  </entry>
  
</feed>
