<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2019-08-03T11:22:59+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Kotlin reified 让泛型更简单安全]]></title>
    <link href="https://droidyue.com/blog/2019/07/28/kotlin-reified-generics/"/>
    <updated>2019-07-28T18:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/28/kotlin-reified-generics</id>
    <content type="html"><![CDATA[<p>我们在编程中，出于复用和高效的目的，我们使用到了泛型。但是泛型在JVM底层采取了类型擦除的实现机制，Kotlin也是这样。然后这也带来了一些问题和对应的解决方案。这里我们介绍一个reified用法，来实现更好的处理泛型。</p>

<!--more-->


<h2>类型擦除</h2>

<p>如下面的代码，在编译成class文件后，就采用了类型擦除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTypeErasure</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>list实例真实的保存是多个<code>Object</code></li>
<li><code>list.add("123")</code>实际上是<code>"123"</code>作为<code>Object</code>存入集合中</li>
<li><code>System.out.println(list.get(0));</code>是从<code>list</code>实例中读取出来<code>Object</code>然后转换成<code>String</code>才能使用的</li>
</ul>


<p>辅助证明的字节码内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;TestTypeErasure.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTypeErasure</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//省略部分代码</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Field list:Ljava/util/List;</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// String 123</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">6</span><span class="o">,</span>  <span class="mi">2</span>            <span class="c1">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Field list:Ljava/util/List;</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">invokeinterface</span> <span class="err">#</span><span class="mi">8</span><span class="o">,</span>  <span class="mi">2</span>            <span class="c1">// InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span>
</span><span class='line'>      <span class="mi">25</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// class java/lang/String</span>
</span><span class='line'>      <span class="mi">28</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中</p>

<ul>
<li>第6行对应的<code>6: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</code> 对应添加元素参数的类型为<code>Object</code></li>
<li>第20行对应的<code>20: invokeinterface #8,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</code> 对应的获取元素的返回类型为<code>Object</code></li>
<li>第25行为进行类型转换操作</li>
</ul>


<h2>类型擦除带来的问题</h2>

<h3>安全问题:未检查的异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//unchecked cast</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Int</span><span class="p">.</span><span class="n">toType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的代码会导致编译器警告<code>unchecked cast</code></li>
<li>上面的代码由于在转换类型时，没有进行检查，所以有可能会导致运行时崩溃</li>
</ul>


<p>当我们执行这样的代码时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testCast</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="m">1.</span><span class="n">toType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>会得到<code>java.lang.Integer cannot be cast to java.lang.String</code>的类型错误。</p>

<h3>显式传递Class</h3>

<p>针对前面的问题，我们最常用的办法就是显式传递class信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//need pass class explicitly</span>
</span><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">toType</span><span class="p">(</span><span class="n">clazz</span><span class="p">:</span> <span class="n">Class</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;):</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="n">clazz</span><span class="p">.</span><span class="n">isInstance</span><span class="p">(</span><span class="k">this</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span> <span class="k">as</span><span class="p">?</span> <span class="n">T</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是显式传递Class信息也会感觉有一些问题，尤其是下面这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">clazz</span><span class="p">:</span> <span class="n">Class</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Long</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Long</span><span class="p">)</span>
</span><span class='line'>        <span class="n">String</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Char</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Char</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Int</span><span class="p">::</span><span class="n">class</span><span class="p">.</span><span class="n">java</span> <span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="k">as</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的代码（传value值和clazz）我们会感觉到明显的有一些笨拙，不够智能。</li>
<li>但是这也是基于Java的类型擦除机制导致无法再运行时得到<code>T</code>的类型信息，无法改进（至少在Java中）</li>
</ul>


<h3>可能导致更多方法的产生</h3>

<p>同时，由于上面的显式传递Class信息比较麻烦和崩溃，我们有时候会增加更多的方法，比如下面的这样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Bundle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Bundle.putInt key=$key;value=$value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Long</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putString</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面的<code>putInt</code>,<code>putLong</code>,<code>putString</code>和<code>putChar</code>没有泛型引入</li>
<li>我们没有排除显式传递Class参数之外的优雅实现，比如我们只提供一个叫做<code>put(key: String,value: T)</code></li>
</ul>


<h2>reified 方式</h2>

<p>不过，好在Kotlin有一个对应的解决方案，这就是我们今天文章标题提到的reified（中文意思：具体化）</p>

<p>使用reified很简单，主要分为两步</p>

<ul>
<li>在泛型类型前面增加<code>reified</code></li>
<li>在方法前面增加<code>inline</code>（必需的）</li>
</ul>


<p>接下来我们使用reified改进之前的方法</p>

<h3>类型转换改进后的代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//much better way using reified</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Any</span><span class="p">.</span><span class="n">asType</span><span class="p">():</span> <span class="n">T</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方法传参不需要多余传递参数类型信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Long</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">String</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Char</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Int</span><span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>reified实现原理</h2>

<p>不是说，泛型是使用了类型擦除么，为什么运行时能得到<code>T</code>的类型信息呢？</p>

<p>是的，采用类型擦除没有错，至于能在运行时得到<code>T</code>的类型信息是如何做到的，就需要了解<code>reified</code>的内部机制了。</p>

<p>其原理为</p>

<ul>
<li>Kotlin编译器会将reified方法<code>asType</code>内联(inline)到调用的地方(call-site)</li>
<li>方法被内联到调用的地方后，泛型T会被替换成具体的类型</li>
</ul>


<p>所以 <strong>reified 使得泛型的方法假装在运行时能够获取泛型的类信息</strong></p>

<p>为了便于理解，我们举个例子，如下是我们的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testCast2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="m">1.</span><span class="n">asType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()?.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的反编译后的java代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testCast2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">$this$asType$iv</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$asType</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var10000</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)(</span><span class="n">$this$asType$iv</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">?</span> <span class="n">$this$asType$iv</span> <span class="o">:</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">var3</span><span class="o">;</span>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 后续的代码对应的Kotlin代码(也包含了部分call-site的逻辑，比如substring)</span>
</span><span class='line'><span class="cm">   return if (this is T) {</span>
</span><span class='line'><span class="cm">        this</span>
</span><span class='line'><span class="cm">      } else {</span>
</span><span class='line'><span class="cm">        null</span>
</span><span class='line'><span class="cm">      }</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//inline和reified替换开始</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">((</span><span class="n">String</span><span class="o">)(</span><span class="n">$this$asType$iv</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">?</span> <span class="n">$this$asType$iv</span> <span class="o">:</span> <span class="kc">null</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var3</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">byte</span> <span class="n">var4</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(</span><span class="n">var3</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">TypeCastException</span><span class="o">(</span><span class="s">&quot;null cannot be cast to non-null type java.lang.String&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="n">var3</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">var4</span><span class="o">);</span>
</span><span class='line'>         <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkExpressionValueIsNotNull</span><span class="o">(</span><span class="n">var10000</span><span class="o">,</span> <span class="s">&quot;(this as java.lang.String).substring(startIndex)&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//inline和reified替换结束</span>
</span><span class='line'>      <span class="n">var3</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>      <span class="n">$i$f$asType</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var3</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>all in(lined)?</h2>

<p>既然是inline，应该是把被inline的方法全部提取到调用处(call-site)吧？</p>

<ul>
<li>是的，通常是这样，不过reified可能有一些差异</li>
<li>reified方法并不会完全inline所有的方法实现，而是更加智能一些的类型匹配中断提取。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusLong</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">1000L</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusChar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testBundlePlusInt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bundle</span><span class="p">().</span><span class="n">plus</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次贴一些Bundle.plus实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="n">reified</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Long</span> <span class="p">-&gt;</span> <span class="n">putLong</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">String</span> <span class="p">-&gt;</span> <span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Char</span> <span class="p">-&gt;</span> <span class="n">putChar</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Int</span><span class="p">-&gt;</span> <span class="n">putInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的when表达式的类型检查次序依次为</p>

<ul>
<li>Long</li>
<li>String</li>
<li>Char</li>
<li>Int</li>
</ul>


<p>反编译后的方法如下(类型不同，提取的方法体也不同)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusLong</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="mi">1000L</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//第一个就是Long类型，无需包含后面的检查代码</span>
</span><span class='line'>      <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="s">&quot;World&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//不是Long类型，需要继续匹配，找到String类型，终止inline后续代码</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusChar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="sc">&#39;h&#39;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//不是Long类型，需要继续匹配，</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//不是String类型，需要继续匹配，</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="c1">//找到String类型，终止inline后续代码</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putChar</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testBundlePlusInt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Bundle</span> <span class="n">$this$plus$iv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">key$iv</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">value$iv</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$plus</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">//最差的一种情况，inline全部的方法体实现</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">longValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value$iv</span> <span class="k">instanceof</span> <span class="n">Character</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putChar</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">(</span><span class="n">Character</span><span class="o">)</span><span class="n">value$iv</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">$this$plus$iv</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">key$iv</span><span class="o">,</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span><span class="n">value$iv</span><span class="o">).</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是关于reified的内容，其实在Kotlin中有很多的特性是依赖于编译器的工作来实现的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Kotlin 项目设置编译选项]]></title>
    <link href="https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options/"/>
    <updated>2019-07-21T20:15:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/21/configure-kotlin-compiler-options</id>
    <content type="html"><![CDATA[<p>经常用终端的人都知道，终端命令有很多选项可以指定，这里我们以相关的<code>kotlinc</code>为例，我们可以在终端这样指定选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kotlinc -Werror ./app/src/main/java/com/example/compileroptionssample/Simple.kt
</span><span class='line'>error: warnings found and -Werror specified
</span><span class='line'>app/src/main/java/com/example/compileroptionssample/Simple.kt:4:19: warning: unnecessary safe call on a non-null receiver of <span class="nb">type </span>String
</span><span class='line'>    println<span class="o">(</span>string?.toString<span class="o">())</span>
</span><span class='line'>                  ^
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>上面的代码</p>

<ul>
<li>我们指定了-Werror 意思是当编译器遇到了警告时当做错误抛出，中断执行。</li>
<li>上面的命令执行中断，不会导致class文件生成</li>
</ul>


<h2>编译选项有哪些</h2>

<p>Kotlin的编译选项分为标准选项和高级选项</p>

<p>如下是一些标准选项的内容(使用<code>kotlinc -help</code>获取)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kotlinc -help
</span><span class='line'>Usage: kotlinc-jvm &lt;options&gt; &lt;<span class="nb">source </span>files&gt;
</span><span class='line'>where possible options include:
</span><span class='line'>  -classpath <span class="o">(</span>-cp<span class="o">)</span> &lt;path&gt;    Paths where to find user class files
</span><span class='line'>  -d &lt;directory|jar&gt;         Destination <span class="k">for </span>generated class files
</span><span class='line'>  -include-runtime           Include Kotlin runtime in to resulting .jar
</span><span class='line'>  -java-parameters           Generate metadata <span class="k">for </span>Java 1.8 reflection on method parameters
</span><span class='line'>  -jdk-home &lt;path&gt;           Path to JDK home directory to include into classpath, <span class="k">if </span>differs from default JAVA_HOME
</span><span class='line'>  -jvm-target &lt;version&gt;      Target version of the generated JVM bytecode <span class="o">(</span>1.6 or 1.8<span class="o">)</span>, default is 1.6
</span><span class='line'>  -module-name &lt;name&gt;        Name of the generated .kotlin_module file
</span><span class='line'>  -no-jdk                    Don<span class="s1">&#39;t include Java runtime into classpath</span>
</span><span class='line'><span class="s1">  -no-reflect                Don&#39;</span>t include kotlin-reflect.jar into classpath
</span><span class='line'>  -no-stdlib                 Don<span class="err">&#39;</span>t include kotlin-stdlib.jar or kotlin-reflect.jar into classpath
</span><span class='line'>  -script                    Evaluate the script file
</span><span class='line'>  -script-templates &lt;fully qualified class name<span class="o">[</span>,<span class="o">]</span>&gt;
</span><span class='line'>                             Script definition template classes
</span><span class='line'>  -Werror                    Report an error <span class="k">if </span>there are any warnings
</span><span class='line'>  -api-version &lt;version&gt;     Allow to use declarations only from the specified version of bundled libraries
</span><span class='line'>  -X                         Print a synopsis of advanced options
</span><span class='line'>  -help <span class="o">(</span>-h<span class="o">)</span>                 Print a synopsis of standard options
</span><span class='line'>  -kotlin-home &lt;path&gt;        Path to Kotlin compiler home directory, used <span class="k">for </span>runtime libraries discovery
</span><span class='line'>  -language-version &lt;version&gt; Provide <span class="nb">source </span>compatibility with specified language version
</span><span class='line'>  -P plugin:&lt;pluginId&gt;:&lt;optionName&gt;<span class="o">=</span>&lt;value&gt;
</span><span class='line'>                             Pass an option to a plugin
</span><span class='line'>  -progressive               Enable progressive compiler mode.
</span><span class='line'>                             In this mode, deprecations and bug fixes <span class="k">for </span>unstable code take effect immediately,
</span><span class='line'>                             instead of going through a graceful migration cycle.
</span><span class='line'>                             Code written in the progressive mode is backward compatible; however, code written in
</span><span class='line'>                             non-progressive mode may cause compilation errors in the progressive mode.
</span><span class='line'>  -nowarn                    Generate no warnings
</span><span class='line'>  -verbose                   Enable verbose logging output
</span><span class='line'>  -version                   Display compiler version
</span><span class='line'>  @&lt;argfile&gt;                 Expand compiler arguments from the given file, containing one argument or file path per line
</span></code></pre></td></tr></table></div></figure>


<p>如下是更加高级的选项(使用<code>kotlinc -X</code>获取)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> kotlinc -X
</span><span class='line'>Usage: kotlinc-jvm &lt;options&gt; &lt;<span class="nb">source </span>files&gt;
</span><span class='line'>where advanced options include:
</span><span class='line'>  -Xadd-compiler-builtins    Add definitions of built-in declarations to the compilation classpath <span class="o">(</span>useful with -no-stdlib<span class="o">)</span>
</span><span class='line'>  -Xadd-modules<span class="o">=</span>&lt;module<span class="o">[</span>,<span class="o">]</span>&gt;  Root modules to resolve in addition to the initial modules,
</span><span class='line'>                             or all modules on the module path <span class="k">if</span> &lt;module&gt; is ALL-MODULE-PATH
</span><span class='line'>  -Xassertions<span class="o">={</span>always-enable|always-disable|jvm|legacy<span class="o">}</span>
</span><span class='line'>                             Assert calls behaviour
</span><span class='line'>                             -Xassertions<span class="o">=</span>always-enable:  <span class="nb">enable</span>, ignore jvm assertion settings;
</span><span class='line'>                             -Xassertions<span class="o">=</span>always-disable: disable, ignore jvm assertion settings;
</span><span class='line'>                             -Xassertions<span class="o">=</span>jvm:            <span class="nb">enable</span>, depend on jvm assertion settings;
</span><span class='line'>                             -Xassertions<span class="o">=</span>legacy:         calculate condition on each call, check depends on jvm assertion settings in the kotlin package;
</span><span class='line'>                             default: legacy
</span><span class='line'>  -Xbuild-file<span class="o">=</span>&lt;path&gt;        Path to the .xml build file to compile
</span><span class='line'>  -Xcompile-java             Reuse javac analysis and compile Java <span class="nb">source </span>files
</span><span class='line'>  -Xnormalize-constructor-calls<span class="o">={</span>disable|enable<span class="o">}</span>
</span><span class='line'>                             Normalize constructor calls <span class="o">(</span>disable: don<span class="s1">&#39;t normalize; enable: normalize),</span>
</span><span class='line'><span class="s1">                             default is &#39;</span>disable<span class="s1">&#39; in language version 1.2 and below,</span>
</span><span class='line'><span class="s1">                             &#39;</span><span class="nb">enable</span><span class="s1">&#39; since language version 1.3</span>
</span><span class='line'><span class="s1">  -Xdump-declarations-to=&lt;path&gt; Path to JSON file to dump Java to Kotlin declaration mappings</span>
</span><span class='line'><span class="s1">  -Xdisable-default-scripting-plugin</span>
</span><span class='line'><span class="s1">                             Do not enable scripting plugin by default</span>
</span><span class='line'><span class="s1">  -Xdisable-standard-script  Disable standard kotlin script support</span>
</span><span class='line'><span class="s1">  -Xfriend-paths=&lt;path&gt;      Paths to output directories for friend modules (whose internals should be visible)</span>
</span><span class='line'><span class="s1">  -Xmultifile-parts-inherit  Compile multifile classes as a hierarchy of parts and facade</span>
</span><span class='line'><span class="s1">  -Xmodule-path=&lt;path&gt;       Paths where to find Java 9+ modules</span>
</span><span class='line'><span class="s1">  -Xjavac-arguments=&lt;option[,]&gt; Java compiler arguments</span>
</span><span class='line'><span class="s1">  -Xjsr305={ignore/strict/warn}|under-migration:{ignore/strict/warn}|@&lt;fq.name&gt;:{ignore/strict/warn}</span>
</span><span class='line'><span class="s1">                             Specify behavior for JSR-305 nullability annotations:</span>
</span><span class='line'><span class="s1">                             -Xjsr305={ignore/strict/warn}                   globally (all non-@UnderMigration annotations)</span>
</span><span class='line'><span class="s1">                             -Xjsr305=under-migration:{ignore/strict/warn}   all @UnderMigration annotations</span>
</span><span class='line'><span class="s1">                             -Xjsr305=@&lt;fq.name&gt;:{ignore/strict/warn}        annotation with the given fully qualified class name</span>
</span><span class='line'><span class="s1">                             Modes:</span>
</span><span class='line'><span class="s1">                               * ignore</span>
</span><span class='line'><span class="s1">                               * strict (experimental; treat as other supported nullability annotations)</span>
</span><span class='line'><span class="s1">                               * warn (report a warning)</span>
</span><span class='line'><span class="s1">  -Xjvm-default={disable|enable|compatibility}</span>
</span><span class='line'><span class="s1">                             Allow to use &#39;</span>@JvmDefault<span class="s1">&#39; annotation for JVM default method support.</span>
</span><span class='line'><span class="s1">                             -Xjvm-default=disable         Prohibit usages of @JvmDefault</span>
</span><span class='line'><span class="s1">                             -Xjvm-default=enable          Allow usages of @JvmDefault; only generate the default method</span>
</span><span class='line'><span class="s1">                                                           in the interface (annotating an existing method can break binary compatibility)</span>
</span><span class='line'><span class="s1">                             -Xjvm-default=compatibility   Allow usages of @JvmDefault; generate a compatibility accessor</span>
</span><span class='line'><span class="s1">                                                           in the &#39;</span>DefaultImpls<span class="s1">&#39; class in addition to the interface method</span>
</span><span class='line'><span class="s1">  -Xload-builtins-from-dependencies</span>
</span><span class='line'><span class="s1">                             Load definitions of built-in declarations from module dependencies, instead of from the compiler</span>
</span><span class='line'><span class="s1">  -Xno-call-assertions       Don&#39;</span>t generate not-null assertions <span class="k">for </span>arguments of platform types
</span><span class='line'>  -Xno-exception-on-explicit-equals-for-boxed-null
</span><span class='line'>                             Do not throw NPE on explicit <span class="s1">&#39;equals&#39;</span> call <span class="k">for </span>null receiver of platform boxed primitive <span class="nb">type</span>
</span><span class='line'>  -Xno-optimize              Disable optimizations
</span><span class='line'>  -Xno-param-assertions      Don<span class="s1">&#39;t generate not-null assertions on parameters of methods accessible from Java</span>
</span><span class='line'><span class="s1">  -Xno-receiver-assertions   Don&#39;</span>t generate not-null assertion <span class="k">for </span>extension receiver arguments of platform types
</span><span class='line'>  -Xsanitize-parentheses     Transform <span class="s1">&#39;(&#39;</span> and <span class="s1">&#39;)&#39;</span> in method names to some other character sequence.
</span><span class='line'>                             This mode can BREAK BINARY COMPATIBILITY and is only supposed to be used as a workaround
</span><span class='line'>                             of an issue in the ASM bytecode framework. See KT-29475 <span class="k">for </span>more details
</span><span class='line'>  -Xscript-resolver-environment<span class="o">=</span>&lt;<span class="nv">key</span><span class="o">=</span>value<span class="o">[</span>,<span class="o">]</span>&gt;
</span><span class='line'>                             Script resolver environment in key-value pairs <span class="o">(</span>the value could be quoted and escaped<span class="o">)</span>
</span><span class='line'>  -Xsingle-module            Combine modules <span class="k">for </span><span class="nb">source </span>files and binary dependencies into a single module
</span><span class='line'>  -Xskip-runtime-version-check Allow Kotlin runtime libraries of incompatible versions in the classpath
</span><span class='line'>  -Xstrict-java-nullability-assertions
</span><span class='line'>                             Generate nullability assertions <span class="k">for </span>non-null Java expressions
</span><span class='line'>  -Xgenerate-strict-metadata-version
</span><span class='line'>                             Generate metadata with strict version semantics <span class="o">(</span>see kdoc on Metadata.extraInt<span class="o">)</span>
</span><span class='line'>  -Xsupport-compatqual-checker-framework-annotations<span class="o">=</span><span class="nb">enable</span>|disable
</span><span class='line'>                             Specify behavior <span class="k">for </span>Checker Framework compatqual annotations <span class="o">(</span>NullableDecl/NonNullDecl<span class="o">)</span>.
</span><span class='line'>                             Default value is <span class="s1">&#39;enable&#39;</span>
</span><span class='line'>  -Xuse-ir                   Use the IR backend
</span><span class='line'>  -Xuse-javac                Use javac <span class="k">for </span>Java <span class="nb">source </span>and class files analysis
</span><span class='line'>  -Xuse-old-class-files-reading Use old class files reading implementation. This may slow down the build and cause problems with Groovy interop.
</span><span class='line'>                             Should be used in <span class="k">case </span>of problems with the new implementation
</span><span class='line'>  -Xuse-type-table           Use <span class="nb">type </span>table in metadata serialization
</span><span class='line'>  -Xallow-kotlin-package     Allow compiling code in package <span class="s1">&#39;kotlin&#39;</span> and allow not requiring kotlin.stdlib in module-info
</span><span class='line'>  -Xallow-result-return-type Allow compiling code when <span class="sb">`</span>kotlin.Result<span class="sb">`</span> is used as a <span class="k">return </span><span class="nb">type</span>
</span><span class='line'>  -Xcommon-sources<span class="o">=</span>&lt;path&gt;    Sources of the common module that need to be compiled together with this module in the multi-platform mode.
</span><span class='line'>                             Should be a subset of sources passed as free arguments
</span><span class='line'>  -Xcoroutines<span class="o">={</span><span class="nb">enable</span>|warn|error<span class="o">}</span>
</span><span class='line'>                             Enable coroutines or report warnings or errors on declarations and use sites of <span class="s1">&#39;suspend&#39;</span> modifier
</span><span class='line'>  -Xdisable-phases           Disable backend phases
</span><span class='line'>  -Xdump-perf<span class="o">=</span>&lt;path&gt;         Dump detailed performance statistics to the specified file
</span><span class='line'>  -Xeffect-system            Enable experimental language feature: effect system
</span><span class='line'>  -Xexperimental<span class="o">=</span>&lt;fq.name&gt;   Enable and propagate usages of experimental API <span class="k">for </span>marker annotation with the given fully qualified name
</span><span class='line'>  -Xintellij-plugin-root<span class="o">=</span>&lt;path&gt; Path to the kotlin-compiler.jar or directory where IntelliJ configuration files can be found
</span><span class='line'>  -Xlegacy-smart-cast-after-try Allow var smart casts despite assignment in try block
</span><span class='line'>  -Xlist-phases              List backend phases
</span><span class='line'>  -Xmetadata-version         Change metadata version of the generated binary files
</span><span class='line'>  -Xmulti-platform           Enable experimental language support <span class="k">for </span>multi-platform projects
</span><span class='line'>  -Xnew-inference            Enable new experimental generic <span class="nb">type </span>inference algorithm
</span><span class='line'>  -Xno-check-actual          Do not check presence of <span class="s1">&#39;actual&#39;</span> modifier in multi-platform projects
</span><span class='line'>  -Xno-inline                Disable method inlining
</span><span class='line'>  -Xphases-to-dump           Dump backend state both before and after these phases
</span><span class='line'>  -Xphases-to-dump-after     Dump backend state after these phases
</span><span class='line'>  -Xphases-to-dump-before    Dump backend state before these phases
</span><span class='line'>  -Xplugin<span class="o">=</span>&lt;path&gt;            Load plugins from the given classpath
</span><span class='line'>  -Xprofile-phases           Profile backend phases
</span><span class='line'>  -Xproper-ieee754-comparisons Generate proper IEEE 754 comparisons in all cases <span class="k">if </span>values are statically known to be of primitive numeric types
</span><span class='line'>  -Xread-deserialized-contracts Enable reading of contracts from metadata
</span><span class='line'>  -Xreport-output-files      Report <span class="nb">source </span>to output files mapping
</span><span class='line'>  -Xreport-perf              Report detailed performance statistics
</span><span class='line'>  -Xskip-metadata-version-check Load classes with bad metadata version anyway <span class="o">(</span>incl. pre-release classes<span class="o">)</span>
</span><span class='line'>  -Xuse-experimental<span class="o">=</span>&lt;fq.name&gt; Enable, but don<span class="err">&#39;</span>t propagate usages of experimental API <span class="k">for </span>marker annotation with the given fully qualified name
</span><span class='line'>  -Xverbose-phases           Be verbose <span class="k">while </span>performing these backend phases
</span><span class='line'>
</span><span class='line'>Advanced options are non-standard and may be changed or removed without any notice.
</span></code></pre></td></tr></table></div></figure>


<h2>编译选项有什么用</h2>

<p>编译选项通常有以下这样的作用，不完全列举</p>

<ul>
<li>开启或关闭某些feature等行为（比如coroutine, 新的类型推断算法等）</li>
<li>控制或设置编译器需要的参数(比如-jvm-target设置class的目标平台)</li>
<li>控制编译器的输出（比如method inline,-Xno-param-assertions对参数进行断言处理）</li>
</ul>


<h2>如何开启设置</h2>

<p>以Android项目为例，增加<code>kotlinOptions</code>配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="mi">28</span>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">applicationId</span> <span class="s2">&quot;com.example.compileroptionssample&quot;</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="mi">15</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="mi">28</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s2">&quot;1.0&quot;</span>
</span><span class='line'>        <span class="n">testInstrumentationRunner</span> <span class="s2">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="kc">false</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">&#39;proguard-android-optimize.txt&#39;</span><span class="o">),</span> <span class="s1">&#39;proguard-rules.pro&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">debug</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Code to be added</span>
</span><span class='line'>    <span class="n">kotlinOptions</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">allWarningsAsErrors</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>更加复杂的参数传递</h2>

<p>默认情况下，gradle中只有四个字段处理编译选项</p>

<ul>
<li>allWarningsAsErrors  将所有的警告当做错误处理，默认值为false</li>
<li>suppressWarnings    压制所有的警告，默认值为false</li>
<li>verbose  打印更多的信息，默认值为false</li>
<li>freeCompilerArgs  附加的编译器选项列表,默认值为[]</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">kotlinOptions</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">allWarningsAsErrors</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="n">freeCompilerArgs</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;-Xno-param-assertions&#39;</span><span class="o">,</span> <span class="s1">&#39;-Xmultifile-parts-inherit&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于上述配置的验证，大家可以对比如下的代码的编译输出验证<code>-Xno-param-assertions</code>选项的作用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.compileroptionssample</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">dump</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何按照Variant进行配置</h2>

<p>那我能不能这样呢？</p>

<ul>
<li>仅仅在Release编译下设置某个编译选项</li>
<li>其他非Release编译不设置这个编译选项</li>
</ul>


<p>答案是可以的，按照下面的方式就行了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//only add kotlinOptions for the releaseKotlin build task</span>
</span><span class='line'><span class="n">tasks</span><span class="o">.</span><span class="na">withType</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">jetbrains</span><span class="o">.</span><span class="na">kotlin</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">tasks</span><span class="o">.</span><span class="na">KotlinCompile</span><span class="o">).</span><span class="na">all</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;compileReleaseKotlin&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">kotlinOptions</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">allWarningsAsErrors</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">println</span><span class="o">(</span><span class="s">&quot;Add kotlin options when task=&quot;</span> <span class="o">+</span> <span class="n">task</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span><span class="o">(</span><span class="s">&quot;Do not add kotlin options when task=&quot;</span> <span class="o">+</span> <span class="n">task</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码</p>

<ul>
<li>所在文件为模块目录，比如app/build.gradle</li>
<li>上述代码与<code>android</code>同级别</li>
</ul>


<p>利用Kotlin编译选项我们可以做一些很好玩的事情，后续会输出更多这方面的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个查找字节码更好研究Kotlin的脚本]]></title>
    <link href="https://droidyue.com/blog/2019/07/14/search-bytecode-script-to-study-kotlin-better/"/>
    <updated>2019-07-14T21:10:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/07/14/search-bytecode-script-to-study-kotlin-better</id>
    <content type="html"><![CDATA[<p>众所周知，Kotlin通过语法糖的形式实现了很多便捷和高效的方法，因此研究Kotlin代码通常是需要研究字节码或者反编译后的java文件。</p>

<p>比如这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fun String.toConsole<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    println<span class="o">(</span>this<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Kotlin的编译器会在字节码中自动地增加这样一行代码<code>Intrinsics.checkParameterIsNotNull</code>来做一些预检查的操作。</p>

<h2>痛点</h2>

<p>那么问题来了，如果我们想找出所有的关于<code>Intrinsics</code>相关的自动加入内容，该怎么办，不能一个一个文件去反编译查看吧，因为这样</p>

<ul>
<li>没有目标性，无法明确预知那个文件会生成这种代码</li>
<li>不具有自动化可重复性，需要依赖于人为行为</li>
</ul>


<p>那么，我们查看class文件类进行内容匹配是否包含<code>Intrinsics</code>呢，其实也不太好，因为一个class文件的内容是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cat</span> <span class="n">StringExtKt</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="err">����</span><span class="mi">43</span>
</span><span class='line'>      <span class="n">StringExtKtjava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span>  <span class="n">toConsole</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span><span class="err">#</span><span class="n">Lorg</span><span class="o">/</span><span class="n">jetbrains</span><span class="o">/</span><span class="n">annotations</span><span class="o">/</span><span class="n">NotNull</span><span class="o">;</span><span class="n">$this$toConsokotlin</span><span class="o">/</span><span class="n">jvm</span><span class="o">/</span><span class="n">internal</span><span class="o">/</span><span class="n">Intrinsics</span>
</span><span class='line'><span class="n">checkParameterIsNotNull</span><span class="err">&#39;</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">SystemoutLjava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>                                          <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStreamprintln</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>
</span><span class='line'><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span><span class="n">Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;</span><span class="n">mvbvkd1</span><span class="s">&quot;��</span>
</span><span class='line'>
</span><span class='line'><span class="s">��</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s">��</span>
</span><span class='line'><span class="s">��0*0¨d2BytecodeSample</span>
</span><span class='line'><span class="s">                      StringExt.ktCodeLineNumberTableLocalVariableTable$RuntimeInvisibleParameterAnnotations</span>
</span><span class='line'><span class="s">SourceFileSourceDebugExtensionRuntimeVisibleAnnotations1,&gt;*    �&lt;�*�-</span>
</span><span class='line'><span class="s">.</span>
</span><span class='line'><span class="s">/0+1QSMAP</span>
</span><span class='line'><span class="s">StringExt.kt</span>
</span><span class='line'><span class="s">Kotlin</span>
</span><span class='line'><span class="s">*S Kotlin</span>
</span><span class='line'><span class="s">*F</span>
</span><span class='line'><span class="s">+ 1 StringExt.kt</span>
</span><span class='line'><span class="s">StringExtKt</span>
</span><span class='line'><span class="s">*L</span>
</span><span class='line'><span class="s">1#1,3:1</span>
</span><span class='line'><span class="s">*E</span>
</span><span class='line'><span class="s">2@[III ![II&quot;</span><span class="n">I</span><span class="err">#</span><span class="n">$I</span><span class="o">%&amp;[</span><span class="n">s</span><span class="err">&#39;</span><span class="o">([</span><span class="n">ss</span><span class="o">)</span><span class="n">s</span><span class="o">)</span><span class="n">s</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>一段很错乱的内容，这样不利于我们更好的分析问题。因为相比较而言，我们有更加好的方法来处理。</p>

<p>基于上面的痛点，自己动手写了一个简单的ruby脚本，来解决问题。</p>

<h2>实现思路</h2>

<ul>
<li>遍历指定路径下的class文件</li>
<li>将对应的class文件使用<code>javap</code>反编译</li>
<li>使用上面反编译的结果，查看是否包含待查询的关键字</li>
<li>如果上述结果匹配到，将反编译内容和文件路径输出到结果文件中</li>
</ul>


<h2>代码(Talk is cheap)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;find&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;colorize&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;fileutils&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># extract arguements from command line</span>
</span><span class='line'><span class="n">dirToSearch</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">keywordToSearch</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="n">matchedResultFile</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;dirToSearch=</span><span class="si">#{</span><span class="n">dirToSearch</span><span class="si">}</span><span class="s2">;keywordToSearch=</span><span class="si">#{</span><span class="n">keywordToSearch</span><span class="si">}</span><span class="s2">, matchedResultFile=</span><span class="si">#{</span><span class="n">matchedResultFile</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Eagerly create the result file so that user could use tools like `tail -f ` to observer the result</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">touch</span><span class="p">(</span><span class="n">matchedResultFile</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;result will be outputted to </span><span class="si">#{</span><span class="n">matchedResultFile</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Helper method to append content(each line) to the file</span>
</span><span class='line'><span class="k">def</span> <span class="nf">appendLineContentToFile</span><span class="p">(</span><span class="n">lineContent</span><span class="p">,</span> <span class="n">filePath</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filePath</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>     <span class="n">file</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lineContent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># write matched class file path along with bytecode content to the output file.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">writeResultInformation</span><span class="p">(</span><span class="n">classFilePath</span><span class="p">,</span> <span class="n">byteCodeContent</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="n">classFilePath</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># leave blank lines</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="n">byteCodeContent</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># leave blank lines</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'>  <span class="n">appendLineContentToFile</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Find</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">dirToSearch</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot;.class&quot;</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;checking </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">byteCodeContent</span> <span class="o">=</span> <span class="sb">`javap -c </span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>  <span class="n">contains</span> <span class="o">=</span> <span class="n">byteCodeContent</span><span class="o">.</span><span class="n">include?</span> <span class="n">keywordToSearch</span>
</span><span class='line'>  <span class="n">resultMessage</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">contains</span>
</span><span class='line'>      <span class="n">resultMessage</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2"> contains </span><span class="si">#{</span><span class="n">keywordToSearch</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">green</span>
</span><span class='line'>      <span class="n">writeResultInformation</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">byteCodeContent</span><span class="p">,</span> <span class="n">matchedResultFile</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">resultMessage</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2"> does NOT contains </span><span class="si">#{</span><span class="n">keywordToSearch</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">red</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">resultMessage</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>执行命令</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby searchBytecode.rb ./ <span class="s2">&quot;Intrinsics&quot;</span> /tmp/result.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>searchBytecode.rb 是上述的脚本文件名称</li>
<li>./ 第一个参数，为待查找的目录</li>
<li>&ldquo;Intrinsics&rdquo; 第二个参数，为查询关键字</li>
<li>/tmp/result.txt  第三个参数，为结果输出文件</li>
</ul>


<h2>执行日志</h2>

<p>为了更好的表达应用正在执行，执行时会有日志输出。
<img src="https://asset.droidyue.com/image/2019_07/search_bytecode_logs.jpg" alt="https://asset.droidyue.com/image/2019_07/search_bytecode_logs.jpg" /></p>

<p>其中</p>

<ul>
<li>正常的日志会以白色颜色输出</li>
<li>不匹配的内容会以红颜色输出</li>
<li>匹配的内容会以绿颜色输出</li>
</ul>


<h2>结果文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">cat</span> <span class="n">sample_intrinsics</span><span class="o">.</span><span class="na">txt</span>
</span><span class='line'>
</span><span class='line'><span class="o">./</span><span class="n">out</span><span class="o">/</span><span class="n">production</span><span class="o">/</span><span class="n">BytecodeSample</span><span class="o">/</span><span class="n">MainKt</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;Main.kt&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">MainKt</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// String Hello</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">17</span>                 <span class="c1">// Method StringExtKt.toConsole:(Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">23</span>                 <span class="c1">// Method IntExtKt.increase:(I)I</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">25</span>                 <span class="c1">// class Book</span>
</span><span class='line'>      <span class="mi">13</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">28</span>                 <span class="c1">// Method Book.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">32</span>                 <span class="c1">// Field Book.name:Ljava/lang/String;</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="n">ifnonnull</span>     <span class="mi">27</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">37</span>                 <span class="c1">// Method kotlin/jvm/internal/Intrinsics.throwNpe:()V</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">43</span>                 <span class="c1">// Method java/lang/String.toString:()Ljava/lang/String;</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">pop</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method main:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">./</span><span class="n">out</span><span class="o">/</span><span class="n">production</span><span class="o">/</span><span class="n">BytecodeSample</span><span class="o">/</span><span class="n">StringExtKt</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;StringExt.kt&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">StringExtKt</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">toConsole</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// String $this$toConsole</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">15</span>                 <span class="c1">// Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">istore_1</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">21</span>                 <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">27</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题排查</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in <span class="sb">`</span>require<span class="s1">&#39;: cannot load such file -- colorize (LoadError)</span>
</span><span class='line'><span class="s1"> from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&#39;</span>
</span><span class='line'>  from /Users/androidyue/Documents/OneDrive/scripts//searchBytecode.rb:3:in <span class="sb">`</span>&lt;main&gt;<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需手动安装ruby gems依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  gem install colorize
</span><span class='line'>YAML safe loading is not available. Please upgrade psych to a version that supports safe loading <span class="o">(</span>&gt;<span class="o">=</span> 2.0<span class="o">)</span>.
</span><span class='line'>Fetching: colorize-0.8.1.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Successfully installed colorize-0.8.1
</span><span class='line'>Parsing documentation <span class="k">for </span>colorize-0.8.1
</span><span class='line'>Installing ri documentation <span class="k">for </span>colorize-0.8.1
</span><span class='line'>1 gem installed
</span></code></pre></td></tr></table></div></figure>


<p>再次执行即可。</p>

<h2>执行优化</h2>

<ul>
<li>具体的执行时间可能会随着工程的复杂而不同。</li>
<li>建议筛选更加精细的目录，避免不必要的查询和操作</li>
<li>可以同时使用<code>tail -f</code>筛选匹配结果。</li>
</ul>


<p>脚本github地址:<a href="https://github.com/androidyue/DroidScripts/blob/master/ruby/searchBytecode.rb">https://github.com/androidyue/DroidScripts/blob/master/ruby/searchBytecode.rb</a></p>

<p>以上。</p>

<h2>相关内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复应用无法通过App Store升级的问题]]></title>
    <link href="https://droidyue.com/blog/2019/06/30/fix-app-store-show-previous-apple-id/"/>
    <updated>2019-06-30T20:20:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/06/30/fix-app-store-show-previous-apple-id</id>
    <content type="html"><![CDATA[<p>之前遇到过这样的问题</p>

<ul>
<li>从微信官网下载微信Mac版安装</li>
<li>后来App Store提示有新的微信更新</li>
<li>但是每次打开都是这样的画面，提示上一个账户（主动更换过账户）的信息</li>
<li>而且上一个账户基本弃用，但是也无法使用当前账户更新</li>
</ul>


<!--more-->


<p><img src="https://asset.droidyue.com/image/2019_02/macos-mojave-app-store-free-app-create-apple-id.jpg" alt="https://asset.droidyue.com/image/2019_02/macos-mojave-app-store-free-app-create-apple-id.jpg" /></p>

<h2>尝试解决</h2>

<ul>
<li>从Finder中切换到 Applications 删除Wechat 也不行</li>
</ul>


<h2>真正解决</h2>

<p>  1.点击左上角菜单 进入 About this Mac（关于本台Mac） <br/>
  2.切换到 Storage(存储) <br/>
  3.点击Manage(管理)  <br/>
  4.切换到Applications(应用程序) 删除对应的Wechat安装包即可。</p>

<p>如图
<img src="https://asset.droidyue.com/image/2019_02/remove_apps.png" alt="https://asset.droidyue.com/image/2019_02/remove_apps.png" /></p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[未关闭的文件流会引起内存泄露么？]]></title>
    <link href="https://droidyue.com/blog/2019/06/09/will-unclosed-stream-objects-cause-memory-leaks/"/>
    <updated>2019-06-09T22:06:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/06/09/will-unclosed-stream-objects-cause-memory-leaks</id>
    <content type="html"><![CDATA[<p>最近接触了一些面试者，在面试过程中有涉及到内存泄露的问题，其中有不少人回答说，如果文件打开后，没有关闭会导致内存泄露。当被继续追问，为什么会导致内存泄露时，大部分人都没有回答出来。</p>

<p>本文将具体讲一讲 文件(流)未关闭与内存泄露的关系。</p>

<!--more-->


<h2>什么是内存泄露</h2>

<ul>
<li>定义：当生命周期长的实例<code>L</code> <strong>不合理</strong>地持有一个生命周期短的实例<code>S</code>，导致<code>S</code>实例无法被正常回收</li>
</ul>


<h3>举例说明</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mAppContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppSettings</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//some other codes</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码可能会发生内存泄露</p>

<ul>
<li>我们调用<code>AppSettings.getInstance.setup()</code>传入一个<code>Activity</code>实例</li>
<li>当上述的<code>Activity</code>退出时，由于被<code>AppSettings</code>中属性<code>mAppContext</code>持有，进而导致内存泄露。</li>
</ul>


<p>为什么上面的情况就会发生内存泄露</p>

<ul>
<li>以 Android 为例，GC 回收对象采用<code>GC Roots</code>强引用可到达机制。</li>
<li><code>Activity</code>实例被<code>AppSettings.sInstance</code>持有</li>
<li><code>AppSettings.sInstance</code>由于是静态，被<code>AppSettings</code>类持有</li>
<li><code>AppSettings</code>类被加载它的类加载器持有</li>
<li>而类加载器就是<code>GC Roots</code>的一种</li>
<li>由于上述关系导致<code>Activity</code>实例无法被回收销毁。</li>
</ul>


<h2>验证是否引起内存泄露</h2>

<p>因此，想要证明未关闭的文件流是否导致内存泄露，需要查看文件流是否是<code>GC Roots</code>强引用可到达。</p>

<p>示例代码1（辅助验证GC 发生）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.streamleakssample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">BufferedReader</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">Reader</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nf">MyBufferedReader</span><span class="p">(</span><span class="err">`</span><span class="k">in</span><span class="err">`</span><span class="p">:</span> <span class="n">Reader</span><span class="p">?)</span> <span class="p">:</span> <span class="n">BufferedReader</span><span class="p">(</span><span class="err">`</span><span class="k">in</span><span class="err">`</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">fun</span> <span class="nf">finalize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;MyBufferedReader get collected&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>示例代码2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example.streamleakssample</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">os</span><span class="p">.</span><span class="n">Bundle</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">v7</span><span class="p">.</span><span class="n">app</span><span class="p">.</span><span class="n">AppCompatActivity</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">Log</span>
</span><span class='line'><span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">View</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">FileInputStream</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">InputStreamReader</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>
</span><span class='line'>        <span class="n">findViewById</span><span class="p">&lt;</span><span class="n">View</span><span class="p">&gt;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">textview</span><span class="p">).</span><span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">testInputStream</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">testInputStream</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//需进入设置手动开启应用权限，未处理运行时权限问题</span>
</span><span class='line'>        <span class="k">val</span> <span class="err">`</span><span class="k">is</span><span class="err">`</span> <span class="p">=</span> <span class="n">FileInputStream</span><span class="p">(</span><span class="s">&quot;/sdcard/a.txt&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">buf</span> <span class="p">=</span> <span class="n">MyBufferedReader</span><span class="p">(</span><span class="n">InputStreamReader</span><span class="p">(</span><span class="err">`</span><span class="k">is</span><span class="err">`</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">line</span> <span class="p">=</span> <span class="n">buf</span><span class="p">.</span><span class="n">readLine</span><span class="p">()</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">sb</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">line</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">).</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">line</span> <span class="p">=</span> <span class="n">buf</span><span class="p">.</span><span class="n">readLine</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">fileAsString</span> <span class="p">=</span> <span class="n">sb</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;MainActivity&quot;</span><span class="p">,</span> <span class="s">&quot;testInputStream.Contents : $fileAsString&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们这样操作</p>

<ol>
<li> 点击textview视图，触发多次<code>testInputStream</code></li>
<li> 过几秒后，我们执行<code>heap dump</code>。</li>
<li> 我们使用 MAT 对上一步的dump文件进行分析(需进行格式转换)</li>
</ol>


<p><img src="https://asset.droidyue.com/image/2019_05/fianalizer_reference_path_to_gc_roots.png" alt="https://asset.droidyue.com/image/2019_05/fianalizer_reference_path_to_gc_roots.png" /></p>

<p>分析上图，我们发现</p>

<ul>
<li>FileInputStream 只被 FinalizerReference 这个类(GC Root)持有</li>
<li>上述持有的原因是，<code>FileInputStream</code>重写了<code>finalize</code>，会被加入到<code>FinalizerReference</code>的析构处理集合</li>
<li>上述引用会随着<code>Finalizer</code>守护线程处理后解除，即<code>FileInputStream</code>实例彻底销毁。</li>
</ul>


<p>所以，我们再来操作一波，验证上面的结论。</p>

<ul>
<li>然后利用工具执行强制GC回收</li>
<li>过几秒后，我们执行<code>heap dump</code>。</li>
<li>我们使用 MAT 对上一步的dump文件进行分析(需进行格式转换)</li>
<li>堆分析文件，查找<code>MyBufferedReader</code>或者<code>FileInputStream</code>或者<code>InputStreamReader</code> 没有发现这些实例，说明已经GC回收</li>
<li>出于谨慎考虑，我们按照包名查找<code>java.io</code>在排除无关实例外，依旧无法找到<code>testInputStream</code>中的实例。再次证明已经被GC回收</li>
</ul>


<p>因而我们可以确定，正常的使用流，不会导致内存泄露的产生。</p>

<p>当然，如果你刻意显式持有Stream实例，那就另当别论了。</p>

<h2>为什么需要关闭流</h2>

<p>首先我们看一张图
<img src="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" alt="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" /></p>

<p>如上图从左至右有三张表</p>

<ul>
<li>file descriptor table 归属于单个进程</li>
<li>global file table(又称open file table) 归属于系统全局</li>
<li>inode table 归属于系统全局</li>
</ul>


<h3>从一次文件打开说起</h3>

<p>当我们尝试打开文件<code>/path/myfile.txt</code></p>

<p>1.从inode table 中查找到对应的文件节点 <br/>
2.根据用户代码的一些参数（比如读写权限等）在open file table 中创建open file 节点 <br/>
3.将上一步的open file节点信息保存，在file descriptor table中创建 file descriptor <br/>
4.返回上一步的file descriptor的索引位置，供应用读写等使用。</p>

<h3>file descriptor 和流有什么关系</h3>

<ul>
<li>当我们这样<code>FileInputStream("/sdcard/a.txt")</code> 会获取一个file descriptor。</li>
<li>出于稳定系统性能和避免因为过多打开文件导致CPU和RAM占用居高的考虑，每个进程都会有可用的file descriptor 限制。</li>
<li>所以如果不释放file descriptor，会导致应用后续依赖file descriptor的行为(socket连接，读写文件等)无法进行，甚至是导致进程崩溃。</li>
<li>当我们调用<code>FileInputStream.close</code>后，会释放掉这个file descriptor。</li>
</ul>


<p>因此到这里我们可以说，不关闭流不是内存泄露问题，是<strong>资源泄露问题</strong>(file descriptor 属于资源)。</p>

<h2>不手动关闭会怎样</h2>

<p>不手动关闭的真的会发生上面的问题么？ 其实也不完全是。</p>

<p>因为对于这些流的处理，源代码中通常会做一个兜底处理。以<code>FileInputStream</code>为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ensures that the &lt;code&gt;close&lt;/code&gt; method of this file input stream is</span>
</span><span class='line'><span class="cm"> * called when there are no more references to it.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @exception  IOException  if an I/O error occurs.</span>
</span><span class='line'><span class="cm"> * @see        java.io.FileInputStream#close()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Android-added: CloseGuard support.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">guard</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">guard</span><span class="o">.</span><span class="na">warnIfOpen</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">fd</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span>  <span class="o">(</span><span class="n">fd</span> <span class="o">!=</span> <span class="n">FileDescriptor</span><span class="o">.</span><span class="na">in</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Android-removed: Obsoleted comment about shared FileDescriptor handling.</span>
</span><span class='line'>        <span class="n">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，在finalize方法中有调用<code>close</code>来释放file descriptor.</p>

<p><strong>但是finalize方法执行速度不确定，不可靠</strong></p>

<p>所以，我们不能依赖于这种形式，还是要手动调用<code>close</code>来释放file descriptor。</p>

<h2>关闭流实践</h2>

<p>Java 7 之后，可以使用try-with-resource方式处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">String</span> <span class="nf">readFirstLineFromFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span>
</span><span class='line'>                   <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlin 可以使用<code>use</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">readFirstLine</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BufferedReader</span><span class="p">(</span><span class="n">FileReader</span><span class="p">(</span><span class="s">&quot;test.file&quot;</span><span class="p">)).</span><span class="n">use</span> <span class="p">{</span> <span class="k">return</span> <span class="n">it</span><span class="p">.</span><span class="n">readLine</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，还有最基础的手动关闭的形式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">readFirstLine</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">FileNotFoundException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;test.file&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/26541513/why-is-it-good-to-close-an-inputstream">https://stackoverflow.com/questions/26541513/why-is-it-good-to-close-an-inputstream</a></li>
<li><a href="https://www.reddit.com/r/learnjava/comments/577769/why_do_you_need_to_close_streams/">https://www.reddit.com/r/learnjava/comments/577769/why_do_you_need_to_close_streams/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读文件描述符]]></title>
    <link href="https://droidyue.com/blog/2019/06/02/file-descriptor-explained/"/>
    <updated>2019-06-02T20:28:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/06/02/file-descriptor-explained</id>
    <content type="html"><![CDATA[<p>最近由于机缘巧合，结合最近工作中遇到的一些问题，深入了解了文件描述符(File Descriptor，简称FD，以下使用 FD 称谓)。预计会有两到三篇关于 FD 的文章陆续出来。首篇也就是这篇，作为基础篇，介绍一些关于通用 FD 的内容知识。</p>

<!--more-->


<h2>概念定义</h2>

<ul>
<li>文件描述符 是 用来访问资源(文件，输入输出设备等)的一种抽象指示符。</li>
<li>文件描述符 是POSIX(Portable Operating System Interface)规范的组成部分</li>
<li>文件描述符 通常是非负整数，C 语言中使用int类型。</li>
</ul>


<h3>FD 具体可以指向什么</h3>

<ul>
<li>文件/目录 files/directories</li>
<li>输入输出源 input/output</li>
<li>管道 pipes</li>
<li>套接字 sockets</li>
<li>其他 Unix 文件类型 other Unix files</li>
</ul>


<h2>系统默认的FDs</h2>

<p>每一个 Unix 进程中，通常会有三个预制的 FD。它们分别是</p>

<ul>
<li>标准输入 Standard input</li>
<li>标准输出 Standard output</li>
<li>标准错误(输出) Standard error</li>
</ul>


<p>其对应的行为是</p>

<ul>
<li>标准输入 用于程序接受数据</li>
<li>标准输出 用于程序输出数据</li>
<li>标准错误 用于程序输出错误或者诊断信息</li>
</ul>


<h2>内部机制</h2>

<h3>三张表</h3>

<p><img src="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" alt="https://asset.droidyue.com/image/2019_05/file-descriptor_table.jpg" /></p>

<p>如上图从左至右有三张表</p>

<ul>
<li>file descriptor table  归属于单个进程</li>
<li>global file table(又称open file table)  归属于系统全局</li>
<li>inode table 归属于系统全局</li>
</ul>


<h3>从一次文件打开说起</h3>

<p>当我们尝试打开文件<code>/path/myfile.txt</code></p>

<p>1.从inode table 中查找到对应的文件节点 <br/>
2.根据用户代码<code>open</code>的一些参数（比如读写权限等）在open file table 中创建open file 节点<br/>
3.将上一步的open file节点信息保存，在file descriptor table中创建 file descriptor<br/>
4.返回上一步的file descriptor的索引位置，供应用读写等使用。</p>

<p>备注：上述图片来自<a href="https://www.computerhope.com/jargon/f/file-descriptor.htm">https://www.computerhope.com/jargon/f/file-descriptor.htm</a></p>

<h2>FD 数量限制</h2>

<p>出于稳定系统性能和避免因为过多打开文件导致CPU和RAM占用居高的考虑，系统都会设置了一个最大可用的 FD 数量。</p>

<p>FD上限值通常不小，一般应用很难达到。</p>

<h3>限制类型</h3>

<ul>
<li>hard limit 由系统管理权限人员设定，是soft limit 可以设置的上限</li>
<li>soft limit 当前用户设置，用来限定进程，通常小于（但不能超过）hard limit值。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#查看soft limit 设置</span>
</span><span class='line'>➜  /tmp <span class="nb">ulimit</span> -nS
</span><span class='line'>4864
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#查看 hard limit 设置</span>
</span><span class='line'>➜  /tmp <span class="nb">ulimit</span> -nH
</span><span class='line'>unlimited
</span></code></pre></td></tr></table></div></figure>


<h2>Questions</h2>

<h3>进程退出与 FD 关系</h3>

<p>因为file descriptor table 存在于 PCB (进程控制块，Process Control Block) 中，进程退出后所有的 FD都需要关闭处理掉。</p>

<p>如下为<a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01_08_02">POSIX文档</a></p>

<blockquote><p>All of the file descriptors, directory streams, conversion descriptors, and message catalog descriptors open in the calling process shall be closed.</p></blockquote>

<h3>同一路径 与 FD 关系</h3>

<ul>
<li>同一文件，多次打开，FD值不同</li>
<li>同一文件，读写模式不同打开，FD值也不同</li>
</ul>


<h3>打开文件过多会怎样</h3>

<ul>
<li><code>open</code>返回值会出现<code>-1</code></li>
<li>通常会导致进程无法进行，甚至是崩溃</li>
</ul>


<h2>示例验证代码</h2>

<p>如下代码可以验证上述问题中的结论</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printStandardFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//input/output/error stream </span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s">%p</span><span class="se">\t\t\t</span><span class="s"> Terminal&#39;s input device</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s">%p</span><span class="se">\t\t\t</span><span class="s"> Terminal&#39;s output device</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">,</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s">%p</span><span class="se">\t\t\t</span><span class="s"> Terminal&#39;s error device</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">,</span> <span class="n">stderr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">printInputFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">afd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/a.txt&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">afd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error occurs %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/a.txt</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">afd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">afd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">afd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printWriteFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/b.txt&quot;</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/b.txt</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">testSamePathDifferentMode</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">readFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/c.txt&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/c.txt read </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">readFd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">readFd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">writeFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/c.txt&quot;</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> File /tmp/c.txt write </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">writeFd</span><span class="p">,</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">writeFd</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">printPipeFD</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pipeFds</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pipe</span><span class="p">(</span><span class="n">pipeFds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> Pipe&#39;s read end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pipeFds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">pipeFds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;r&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t\t\t</span><span class="s"> %p</span><span class="se">\t\t\t</span><span class="s"> Pipe&#39;s write end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pipeFds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">pipeFds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;w&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">tryToReachMaxFDs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">printInputFD</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">scanChars</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">chr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Enter a character: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">chr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Process File Descriptor table</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-----------------------------------------------------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Descriptor</span><span class="se">\t\t</span><span class="s"> Pointer</span><span class="se">\t\t</span><span class="s"> Description</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printStandardFD</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printInputFD</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printWriteFD</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//printPipeFD();</span>
</span><span class='line'>    <span class="c1">//tryToReachMaxFDs();</span>
</span><span class='line'>    <span class="c1">//testSamePathDifferentMode();</span>
</span><span class='line'>    <span class="n">scanChars</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S.很多年不写C代码了。</p>

<h2>References</h2>

<ul>
<li><a href="https://unix.stackexchange.com/questions/430365/what-happens-to-file-descriptors-when-the-process-is-killed">https://unix.stackexchange.com/questions/430365/what-happens-to-file-descriptors-when-the-process-is-killed</a></li>
<li><a href="https://apple.lib.utah.edu/open-file-limits-on-os-x-what-they-are-why-increase-them-and-how-to-increase-them/">https://apple.lib.utah.edu/open-file-limits-on-os-x-what-they-are-why-increase-them-and-how-to-increase-them/</a></li>
<li><a href="http://geekswing.com/geek/quickie-tutorial-ulimit-soft-limits-hard-limits-soft-stack-hard-stack/">http://geekswing.com/geek/quickie-tutorial-ulimit-soft-limits-hard-limits-soft-stack-hard-stack/</a></li>
<li><a href="https://cseweb.ucsd.edu/classes/sp16/cse120-a/applications/ln/lecture15.html">https://cseweb.ucsd.edu/classes/sp16/cse120-a/applications/ln/lecture15.html</a></li>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01_03_01">http://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01_03_01</a></li>
<li><a href="https://www.youtube.com/watch?v=KM5sRWAYqaw">File Descriptors Explained</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈编码中的缩写]]></title>
    <link href="https://droidyue.com/blog/2019/05/26/abbreviation-do-not-make-me-think/"/>
    <updated>2019-05-26T20:51:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/26/abbreviation-do-not-make-me-think</id>
    <content type="html"><![CDATA[<p>目前而言，几乎所有的编程语言都是使用英文来表示，在英文中，使用缩写很普遍，比如URL(Uniform Resource Locator)能够很简单高效地向他人阐述要表达的概念。</p>

<p>然后，在现实的开发过程中，缩写有时候会被滥用，甚至是脱离了其高效传递信息的意思。</p>

<!--more-->


<p>比如以广告跟踪数据为例，如下是部分广告跟踪信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;pm&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/pm.php&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&quot;cm&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/cm.php&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看了上面的协议约定，你应该会这样</p>

<ul>
<li>你应该无法判断pm和cm的明确意思</li>
<li>你<strong>开始思考</strong>，cm是什么缩写，pm是什么缩写。</li>
<li>最终你还是不知道什么意思，便搜找文档或者询问他人。</li>
</ul>


<p>OK，那我们看看如果不用缩写，这样能不能传达信息呢？</p>

<h2>改进版本1</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;impression_tracking_urls&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/pm.php&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&quot;click_tracking_urls&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;https://example.com/cm.php&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>改进版本2</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;tracking_urls&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;impression&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;https://example.com/pm.php&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&quot;click&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;https://example.com/cm.php&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不论是上面的改进版本1还是2，在不依赖文档或他人的情况下，我们应该都可以清晰的分辨出哪些是广告曝光的跟踪连接，哪些是点击后的追踪链接。</p>

<p>看完示例，开始具体清谈一下缩写这个内容。</p>

<h2>什么是不好的缩写</h2>

<ul>
<li>字符过短，让人无法推测其完整形式</li>
<li>存在和通用认知缩写冲突，比如上面的<code>cm</code>和<code>pm</code>可能会被认为是<code>Centimeter(厘米)</code>或<code>post meridiem(下午)</code>对应的缩写。</li>
<li>不遵循缩写规则，对于词组来说，通常是取每个单词首字母；对于一个单词来说，是尽量剔除其元音字符(a,e,i,o,u)，比如MicroSoft其股票代码为<code>MSFT</code></li>
</ul>


<h2>为什么要避免不好的缩写</h2>

<ul>
<li>不好的缩写，表意不明，甚至是产生误解</li>
<li>不好的缩写，需要依赖于文档或者他人</li>
<li>不好的缩写使用，会导致开发者思考，效率变低。</li>
<li>不好的缩写，甚至可能会造成双方的不信任。</li>
</ul>


<h2>为什么会出现不好的缩写</h2>

<p>其实最关键的因素还是人，这主要表现在</p>

<ul>
<li>编码约定随意性</li>
<li>自身的技术约束较低，甚至是拒绝思考更优解。</li>
<li>英语水平限制</li>
</ul>


<h2>如何避免不好的书写</h2>

<p>当然避免的关键还是人的因素，针对上面的症结，需要做如下处理</p>

<ul>
<li>增强自身约束，认真对待，不随意缩写。</li>
<li>保持求索的态度，寻找更优解</li>
<li>学习英语，提升基本功。</li>
</ul>


<p>随意缩写一时爽，后期维护泪千行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[送书啦，Kotlin，Android、Flutter都有！]]></title>
    <link href="https://droidyue.com/blog/2019/05/20/books-gifts/"/>
    <updated>2019-05-20T22:32:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/20/books-gifts</id>
    <content type="html"><![CDATA[<p>最近和华章搞了一个小合作，把最新出的一些关于Android的书拿出来免费送给大家，如下有四本书，涉及了Kotlin，Android ART,埋点和Flutter。</p>

<p>参与方式：很简单，微信扫描或者长按识别书籍下面的抽奖小程序，然后坐等开奖就可以了。</p>

<!--more-->




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/kotlin_hexin_biancheng.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/kotlin_hexin_biancheng.jpeg" style="max-width: 50%;width: 50%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/android_jvm_art.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/shenrulijie_android_java_xuniji.jpeg" style="max-width: 50%;width: 50%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/android_maidian.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/android_quan_maidian_jiejue_fangan.jpeg" style="max-width: 50%;width: 50%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/flutter_jishu_rumen.png" style="max-width: 100%;width: 100%;">
</p>




<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/flutter_jishurumen_yu_shizhan.jpeg" style="max-width: 50%;width: 50%;">
</p>


<p>大家积极参与，如果效果好的话，我会向华章申请更多的赠书。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写地道的 Kotlin 代码]]></title>
    <link href="https://droidyue.com/blog/2019/05/19/do-and-dont-in-kotlin/"/>
    <updated>2019-05-19T21:04:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/19/do-and-dont-in-kotlin</id>
    <content type="html"><![CDATA[<p>Kotlin 以其简洁实用的语法，赢得了很多Java 开发者，尤其是 Android 开发者的喜爱与应用。然而，虽然我们使用 Kotlin 进行编码，可能并没有书写出地道的 Kotlin 代码，亦或者是遵照写Java的思维，用Kotlin的语法 来编码。</p>

<p>本文将通过多出代码示例，分为<code>Do not</code>（不建议）和<code>Do</code>（建议）两部分，分别代表着不太好的实现和推荐的实现方式，来展示地道的 Kotlin 编码方式。</p>

<!--more-->


<h2>进行非null判断</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">dumpBook</span><span class="p">(</span><span class="n">book</span><span class="p">:</span> <span class="n">Book</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">book</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">book</span><span class="p">.</span><span class="n">dumpContent</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">dumpBook1</span><span class="p">(</span><span class="n">book</span><span class="p">:</span> <span class="n">Book</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">book</span><span class="p">?.</span><span class="n">dumpContent</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>进行类型转换并访问一些属性</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// avoid if type checks</span>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testTypeCheck</span><span class="p">(</span><span class="n">any</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">any</span> <span class="k">is</span> <span class="n">Book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">any</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testTypeCheck0</span><span class="p">(</span><span class="n">any</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">any</span> <span class="k">as</span><span class="p">?</span> <span class="n">Book</span><span class="p">)?.</span><span class="n">let</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>避免使用<code>!!</code>非空断言</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNotNullAssertion</span><span class="p">(</span><span class="n">feed</span><span class="p">:</span> <span class="n">Feed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">feed</span><span class="p">.</span><span class="n">feedItemList</span><span class="p">.</span><span class="n">first</span><span class="p">().</span><span class="n">author</span><span class="p">!!.</span><span class="n">title</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testNotNullAssertion0</span><span class="p">(</span><span class="n">feed</span><span class="p">:</span> <span class="n">Feed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">feed</span><span class="p">.</span><span class="n">feedItemList</span><span class="p">.</span><span class="n">first</span><span class="p">().</span><span class="n">author</span><span class="p">?.</span><span class="n">title</span> <span class="p">?:</span> <span class="s">&quot;fallback_author_title&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>补充：</p>

<ul>
<li>使用<code>!!</code>断言，一旦断言条件出错，会发生运行时异常。</li>
</ul>


<h2>判断可能为null的boolean值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">comsumeNullableBoolean</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">isOK</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOK</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">isOK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">comsumeNullableBoolean0</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">isOK</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOK</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>利用<code>if-else</code>,<code>when</code>,<code>try-catch</code> 的返回值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testIfElse</span><span class="p">(</span><span class="n">success</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">message</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;恭喜，成功了&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;再接再厉&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testIfElse1</span><span class="p">(</span><span class="n">success</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;恭喜，成功了&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;再接再厉&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testWhen0</span><span class="p">(</span><span class="n">type</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">typeString</span> <span class="p">=</span> <span class="k">when</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span> <span class="p">-&gt;</span> <span class="s">&quot;post&quot;</span>
</span><span class='line'>        <span class="m">2</span> <span class="p">-&gt;</span> <span class="s">&quot;status&quot;</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">&quot;page&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//can&#39;t reassign value to typeString</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getWebContent</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">String</span> <span class="p">=</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testTryCatch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">content</span> <span class="p">=</span> <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">getWebContent</span><span class="p">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">IOException</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//can’t reassign value to content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>善用 <code>apply</code>/<code>also</code>/<code>with</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">composeIntent</span><span class="p">():</span> <span class="n">Intent</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">intent</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">ACTION_VIEW</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="p">.</span><span class="n">data</span> <span class="p">=</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intent</span><span class="p">.</span><span class="err">`</span><span class="n">package</span><span class="err">`</span> <span class="p">=</span> <span class="s">&quot;com.android.chrome&quot;</span>
</span><span class='line'>    <span class="n">intent</span><span class="p">.</span><span class="n">addFlags</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">FLAG_ACTIVITY_NEW_TASK</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">intent</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">composeIntent1</span><span class="p">():</span> <span class="n">Intent</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Intent</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">ACTION_VIEW</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span> <span class="p">=</span> <span class="n">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;https://droidyue.com&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="err">`</span><span class="n">package</span><span class="err">`</span> <span class="p">=</span> <span class="s">&quot;com.android.chrome&quot;</span>
</span><span class='line'>        <span class="n">addFlags</span><span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">FLAG_ACTIVITY_NEW_TASK</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">Request</span><span class="p">(</span><span class="k">val</span> <span class="n">uri</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="c1">//use also</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">handleRequest</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">)</span> <span class="p">:</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;https&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">handleHttpsRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>           <span class="k">true</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;http&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">handleHttpRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>           <span class="k">true</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">handleRequest1</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;https&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">true</span><span class="p">.</span><span class="n">also</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">handleHttpsRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">uri</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;http&quot;</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">true</span><span class="p">.</span><span class="n">also</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">handleHttpRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Navigator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">turnLeft</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">turnRight</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">forward</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">backward</span><span class="p">()</span> <span class="p">=</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//use with</span>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">navigate</span><span class="p">(</span><span class="n">navigator</span><span class="p">:</span> <span class="n">Navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">forward</span><span class="p">()</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">turnRight</span><span class="p">()</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span>
</span><span class='line'>    <span class="n">navigator</span><span class="p">.</span><span class="n">turnLeft</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">navigate1</span><span class="p">(</span><span class="n">navigator</span><span class="p">:</span> <span class="n">Navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">with</span><span class="p">(</span><span class="n">navigator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">forward</span><span class="p">()</span>
</span><span class='line'>        <span class="n">turnRight</span><span class="p">()</span>
</span><span class='line'>        <span class="n">backward</span><span class="p">()</span>
</span><span class='line'>        <span class="n">turnLeft</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>直接使用top-level方法，而不是Object里的方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="n">object</span> <span class="n">AppUtil</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">isAppEnabled</span><span class="p">(</span><span class="n">packageName</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="c1">//AppUtil.kt file</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">isAppEnabled</span><span class="p">(</span><span class="n">packageName</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Kotlin的默认参数特性，而不是方法重载</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BadPizza</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">hasCheese</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">hasCheese</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span> <span class="n">hasBacon</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GoodPizza</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">hasCheese</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">hasBacon</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>优先定义并使用扩展方法，而不是Util方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">isStringPhoneNumber</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="n">String</span><span class="p">.</span><span class="n">isPhoneNumber</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">TODO</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用方法引用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">NewsItem</span><span class="p">(</span><span class="k">val</span> <span class="n">content</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="n">isFake</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">normalLambda</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">arrayOf</span><span class="p">&lt;</span><span class="n">NewsItem</span><span class="p">&gt;().</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isFake</span> <span class="p">}.</span><span class="n">let</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">methodReference</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">arrayOf</span><span class="p">&lt;</span><span class="n">NewsItem</span><span class="p">&gt;().</span><span class="n">filter</span><span class="p">(</span><span class="n">NewsItem</span><span class="p">::</span><span class="n">isFake</span><span class="p">).</span><span class="n">let</span><span class="p">(::</span><span class="n">print</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用inline修饰高阶函数（参数为函数时）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">safeRun</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">block</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="nf">safeRun0</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">block</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">Throwable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>备注：</p>

<ul>
<li>关于inline的问题，可以参考<a href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/">Kotlin 中的 Lambda 与 Inline</a></li>
</ul>


<h2>把函数参数尽可能放到最后</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">delayTask</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span> <span class="n">delayInMillSecond</span><span class="p">:</span> <span class="n">Long</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do </span>
</span><span class='line'><span class="k">fun</span> <span class="nf">delayTask0</span><span class="p">(</span><span class="n">delayInMillSecond</span><span class="p">:</span> <span class="n">Long</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testDelayTasks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delayTask</span><span class="p">({</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;printing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span> <span class="m">5000L</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">delayTask0</span><span class="p">(</span><span class="m">5000L</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;printing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用mapNotNull</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testMapNotNull</span><span class="p">(</span><span class="n">list</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">FeedItem</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">author</span> <span class="p">}.</span><span class="n">filterNotNull</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testMapNotNull0</span><span class="p">(</span><span class="n">list</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">FeedItem</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">mapNotNull</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">author</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>尽可能使用只读集合</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">parseArguments</span><span class="p">(</span><span class="n">arguments</span><span class="p">:</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//do some bad things</span>
</span><span class='line'>    <span class="c1">//try to clear if the argument is available to be cleared.</span>
</span><span class='line'>    <span class="p">(</span><span class="n">arguments</span> <span class="k">as</span><span class="p">?</span> <span class="n">HashMap</span><span class="p">)?.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//use read-only collections as much as possible</span>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">useMutableCollections</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">arguments</span> <span class="p">=</span> <span class="n">hashMapOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="n">arguments</span><span class="p">[</span><span class="s">&quot;key&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'>    <span class="n">parseArguments</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do </span>
</span><span class='line'><span class="k">fun</span> <span class="nf">useReadOnlyCollections</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">arguments</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span><span class="s">&quot;key&quot;</span> <span class="n">to</span> <span class="s">&quot;value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parseArguments</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>适宜情况下使用<code>Pair</code>或<code>Triple</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Use Pair or Triple</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">returnValues</span><span class="p">():</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Pair</span><span class="p">(</span><span class="m">404</span><span class="p">,</span> <span class="s">&quot;File Not Found&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">returnTriple</span><span class="p">():</span> <span class="n">Triple</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Triple</span><span class="p">(</span><span class="s">&quot;6时&quot;</span><span class="p">,</span> <span class="s">&quot;6分&quot;</span><span class="p">,</span> <span class="s">&quot;60秒&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用lazy 替代繁琐的延迟初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">Config</span><span class="p">(</span><span class="k">val</span> <span class="n">host</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="n">port</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">loadConfigFromFile</span><span class="p">():</span> <span class="n">Config</span> <span class="p">=</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="n">object</span> <span class="n">ConfigManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">config</span><span class="p">:</span> <span class="n">Config</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getConfig0</span><span class="p">()</span> <span class="p">:</span> <span class="n">Config</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">config</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">config</span> <span class="p">=</span> <span class="n">loadConfigFromFile</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">config</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">object</span> <span class="n">ConfigManager1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">config</span><span class="p">:</span> <span class="n">Config</span> <span class="n">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">loadConfigFromFile</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用lateinit 处理无法再构造函数初始化的变量</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FeedItem</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">author</span><span class="p">:</span> <span class="n">Feed</span><span class="p">.</span><span class="n">Author</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FeedItem0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="n">author</span><span class="p">:</span> <span class="n">Feed</span><span class="p">.</span><span class="n">Author</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>善用Data class的copy方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Car</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="n">engine</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">theEngine</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">engine</span> <span class="p">=</span> <span class="n">theEngine</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">car</span><span class="p">:</span> <span class="n">Car</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">engine</span> <span class="p">=</span> <span class="n">car</span><span class="p">.</span><span class="n">engine</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nf">Car0</span><span class="p">(</span><span class="k">val</span> <span class="n">engine</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">firstCar</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="s">&quot;Honda&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">secondCar</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="n">firstCar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">thirdCar</span> <span class="p">=</span> <span class="n">Car0</span><span class="p">(</span><span class="s">&quot;Nissan&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">fourthCar</span> <span class="p">=</span> <span class="n">thirdCar</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">fifthCar</span> <span class="p">=</span> <span class="n">thirdCar</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">engine</span> <span class="p">=</span> <span class="s">&quot;Ford&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>针对函数类型和集合使用<code>typealias</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="n">OnValueChangedListener</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onValueChanged</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">typealias</span> <span class="n">OnValueChangedListener0</span> <span class="p">=</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">value</span> <span class="p">:</span> <span class="n">OnValueChangedListener0</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do</span>
</span><span class='line'><span class="n">typealias</span> <span class="n">BookSet</span> <span class="p">=</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">Book</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">bookSet</span> <span class="p">=</span> <span class="n">BookSet</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">add</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&quot;978-0131872486&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用含义更加清晰的<code>substringBefore</code>和<code>substringAfter</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//Do not</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">testSubstring</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;user|password&quot;</span>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.user=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.password=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">testSubstring0</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;user|password&quot;</span>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.user=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substringBefore</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Log</span><span class="p">.</span><span class="n">i</span><span class="p">(</span><span class="s">&quot;testSubstring.password=&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">substringAfter</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是一些相对更加Kotlin style的代码示例，如有补充，请在下方评论指出。谢谢。</p>

<h2>相关阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/">Kotlin 中的 Lambda 与 inline</a></li>
<li><a href="https://droidyue.com/blog/2018/10/14/dive-into-kotlin-default-arguments-and-jvmoverloads/">有点意思的Kotlin的默认参数与JVMOverloads</a></li>
</ul>


<p style="text-align: center;max-width: 100%;">
<img src="https://asset.droidyue.com/image/2019_05/kotlin_hexin_biancheng.png" style="max-width: 100%;width: 100%;">
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 和 Flutter 对于开发者究竟意味着什么？]]></title>
    <link href="https://droidyue.com/blog/2019/05/12/kotlin-vs-flutter/"/>
    <updated>2019-05-12T21:34:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/12/kotlin-vs-flutter</id>
    <content type="html"><![CDATA[<p>本文系CSDN约稿，具体转载事宜请沟通CSDN。</p>

<blockquote><p>作者 : 段建华<br/>
责编 : 唐小引<br/>
出品 : CSDN（ID：CSDNnews）</p></blockquote>

<p>【CSDN 编者按】近些年来，编程语言流行度的变化其实不大，在 TIOBE 编程语言排行榜上，Java、C、C++ 固若金山，也就只有 Python 会攻城略地成为第四。在这 TOP3 之中，Java 以其非常优秀的普适性，可以用于前后端开发，再加上非常成熟的 JVM 虚拟机以及整个 Java 生态，让 Java 这个老大哥常年雄踞 TOP1，在 CSDN 的 Java 相关的文章之中，常有用户留言调侃“Java：你们随便争，反正我 Java 是第一”也可窥见一二。</p>

<p>而从两年前 Google 正式宣布 Kotlin 成为 Android 官方支持的语言开始，对于“Kotlin 即将取代 Java”的讨论便甚嚣尘上从未停歇。彼时，Kotlin 这个诞生于 2011 年的小伙子让已经使用了 Java 多年的 Android 开发者们有了点不可言说的滋味。同时，在过去的数年之间，伴随着 Oracle 与 Google 纷争不止，业界“Oracle 要玩死 Java”之声亦是不绝于耳。</p>

<!--more-->


<p>Java 8 更新，Oracle 将“删除”按钮设置成了高亮</p>

<p>2017 年，面对着 Kotlin 这个 Android 开发新贵，Realm 直接给出了一个预测，就是“到 2018 年底，在 Android 开发领域，Kotlin 将超越 Java，成为开发 Android 应用的第一语言”。</p>

<p>如今，时间上虽然稍晚了几个月，但这份预测却成为了现实。</p>

<p>那么，当今天 Google I/O 大会上，Kotlin 取代 Java 成为 Android App 开发的首选语言之时，对于我们移动开发者而言，究竟意味着什么？同时，当 Flutter 带着一统 App、Web、桌面及嵌入式开发之势而来之时，移动开发者该怎么办？对此，CSDN 特别邀请在国内 Android 圈子中较早研究 Kotlin 的段建华（@技术小黑屋）来解答目前开发者们最为关心的问题：为什么 Google 会越过 Java 让 Kotlin First？</p>

<h2>采用 Kotlin 与 Oracle 版权有关系么？</h2>

<p>其实可能没有关系。</p>

<p>这场起自 2010 年的诉讼案，几经反转，曾一度惊动美国最高法院，从最初的专利和版权侵权到最后聚焦在 Google 是否合理使用了 Java 的 API。但是 Oracle 自始至终都不是在控告 Google 允许开发者使用 Java 来开发应用程序。</p>

<p>而真正让 Kotlin 被 Google 采用的原因其实是 Kotlin 自身的优点，譬如安全、简洁、实用，以及与 Java 可交互良好等特点。除此之外，Kotlin 在相对很早的时候就在国外的知名公司用来开发 Android App，有着不错的氛围和环境，这也为其裂变发展贡献了不小的功劳。</p>

<h2>Kotlin First 对于 Android 开发者究竟意味着什么？</h2>

<p>首先对于 Google 来说，应该意味着更进一步地放弃 Java。这会导致更多的 Android 库出现对应的 Kotlin 实现，甚至可能是只有 Kotlin 版本，Android Studio IDE 也会出现更多的倾向于 Kotlin 的特性和支持等。结果可能会是 App 开发者进一步向 Kotlin 靠拢，而 Java 则相应地被进一步孤立。</p>

<p>其次，对于 Android 开发者来说，当本届 I/O 大会 Google 宣布 Kotlin 作为 Android 首选开发语言那一刻，再次证明我们使用 Kotlin 是正确的。内心都是无比 Exciting，充盈着一种满满的被认可感，而这势必会让更多的 Android 开发者投向 Kotlin 的怀抱。</p>

<p>同时，至关重要的是体现在业务上，对于管理者来说，会有更大的信心和更强的动力去推动团队完成从 Java 到 Kotlin 的转变。</p>

<p>事实上，当前在 Android 研发的招聘中，大部分招聘 JD 都会包含希望求职者具备 Kotlin 编码能力的描述，而面试者的简历也会提到自己学习或者项目应用 Kotlin 等内容。</p>

<p>并且，目前笔者从各种渠道了解到，大部分的公司都已经使用 Kotlin 作为首选开发语言，而且积极效果反馈明显。</p>

<p>看完移动端，我们再看服务端，不同于 Java 在后端的良好表现。尽管就 Kotlin 来说，除了前文所述的优点之外，协程是一大吸引，但 Kotlin 在中后台开发人员中的流行度可能并不会像在 Android 上这么顺利，究其原因，主要还是：</p>

<ul>
<li>缺乏官方权威或大公司背书来提振威望；</li>
<li>相关的框架需要进一步丰富；</li>
</ul>


<p>CSDN 编者注：对于这一点，在 CSDN《2018 &ndash; 2019 中国开发者调查报告》中，拥有十几年移动开发经验的轻芒联合创始人范怀宇对此表示：Java 的 Web 框架经过千锤百炼已经可以支撑足够大的并发，JVM 经过长年优化性能表现也非常出众，而 Java 的各类库、统一的编程模型、丰富的人才储备，可以满足各种场景的诉求。</p>

<p>相应的中文社区和氛围需要增强。</p>

<p>但无论如何，<strong>Kotlin 的确称得上是 Java 程序员近在咫尺的小确幸，你需要做的就是抓住它，不要错过</strong>。</p>

<h2>Google 同推 Flutter 和 Kotlin，那么移动开发者该如何做选择？</h2>

<p>我们再来看 Google 在移动端另一重推的框架，Flutter 自问世伊始便被寄予厚望，从开始的支持 Android 和 iOS 开发到现在的全平台（Mobile、Desktop、Web、Embedded），几近于真正地实现了数年来程序员梦寐以求的“Write once, run anywhere”的愿景。</p>

<p>因此相对而言，Flutter 显得更加有诱惑力，因为它是一个跨平台开发的解决方案，我想这也是大多数人给出的答案。</p>

<p>但是也有很多原因会导致你无法选用 Flutter，如下不完全列举：</p>

<ul>
<li>Flutter 需要使用 Dart 语言，没有第二语言。Dart 令人诟病的方面也不少；</li>
<li>对现有技术投入较多导致沉默成本过大，甚至是难以负担；</li>
<li>保守主义，避免过早地对某项技术投入资源；</li>
<li>领域限制，Flutter 无法满足要求。</li>
</ul>


<p>Kotlin 的被钦定可以解读为 Android 开始逐渐放弃 Java 语言这个开发依赖，而 Flutter 的推出可以被理解成 Google 开始放弃 Android，迎接新操作系统 Google Fuchsia 的准备。</p>

<p>出于综合考虑且必须二选一的情况下，建议你选择 Flutter，但是如果你有兴趣见识一种比 Java 更安全，更简洁，更实用，更优雅的语言的话，我也推荐你学一学 Kotlin。</p>

<p>Flutter 很有前途，但 Kotlin 也会让你欲罢不能，这确实是一件麻烦事。</p>

<h2>基于同时，对于我们所有技术人来说，一个非常头疼且不由得恐慌的问题，那便是如何应对日新月异的技术？</h2>

<p>这可能是越来越多的以工程为主的开发者面临的问题，因为今天有 Kotlin 和 Flutter，明天或许就会冒出来 Gotlin、Hlutter 等新的技术。</p>

<p>日新月异层出不穷，不断追求学习并不现实，反而有可能把自己搞的很累，甚至是产生负面效果。新技术固然可以学习，但是作为技术人，获得完善的素养显得更加意义深远。</p>

<p>笔者认为一个技术人员想要具备完善的素养，需要朝着这些方向努力：</p>

<ul>
<li>夯实基础；</li>
<li>学好英语；</li>
<li>提升学习能力；</li>
<li>坚持总结归纳问题的习惯；</li>
<li>增强分析问题，解决问题的能力。</li>
</ul>


<p>一个技术人员能够走多远，靠的不是会某种技术，而是完善以上高质量的素养。</p>

<h2>Kotlin 相关文章延伸阅读</h2>

<ul>
<li><a href="https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation/">关于应用Kotlin后的编译速度问题</a></li>
<li><a href="https://droidyue.com/blog/2017/05/21/my-opinion-of-kotlins-becoming-an-official-language-of-android/">如何看待 Kotlin 成为 Android 官方支持开发语言？</a></li>
<li><a href="https://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/">为什么我要改用Kotlin</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防手抖开源之 Git 钩子]]></title>
    <link href="https://droidyue.com/blog/2019/05/04/git-pre-push-hook/"/>
    <updated>2019-05-04T19:12:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/05/04/git-pre-push-hook</id>
    <content type="html"><![CDATA[<p>最近“从开源到跑路”的事件逐渐增多，给涉事企业造成了不小的损失。因而相关的防范工作显得愈发重要。</p>

<p>客观而言，人为手动的防范显得原始和笨拙，好在git提供了相关的钩子方法，为我们这里的防范提供了可行性。</p>

<p>这里我们以<code>git push</code> 命令对应的<code>pre-push</code>钩子为例，因为想要开源出去，这个命令通常是必须执行的。</p>

<!--more-->


<h2>编写git pre-hook</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># An example hook script to verify what is about to be pushed.  Called by &quot;git</span>
</span><span class='line'><span class="c"># push&quot; after it has checked the remote status, but before anything has been</span>
</span><span class='line'><span class="c"># pushed.  If this script exits with a non-zero status nothing will be pushed.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This hook is called with the following parameters:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># $1 -- Name of the remote to which the push is being done</span>
</span><span class='line'><span class="c"># $2 -- URL to which the push is being done</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If pushing without using a named remote those arguments will be equal.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Information about the commits which are being pushed is supplied as lines to</span>
</span><span class='line'><span class="c"># the standard input in the form:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   &lt;local ref&gt; &lt;local sha1&gt; &lt;remote ref&gt; &lt;remote sha1&gt;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This sample shows how to prevent push of commits where the log message starts</span>
</span><span class='line'><span class="c"># with &quot;WIP&quot; (work in progress).</span>
</span><span class='line'>
</span><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;git@github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;https://github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">z40</span><span class="o">=</span>0000000000000000000000000000000000000000
</span><span class='line'>
</span><span class='line'><span class="k">while </span><span class="nb">read </span>local_ref local_sha remote_ref remote_sha
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span> <span class="s2">&quot;$local_sha&quot;</span> <span class="o">=</span> <span class="nv">$z40</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>      <span class="c"># Handle delete</span>
</span><span class='line'>      :
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> <span class="s2">&quot;$remote_sha&quot;</span> <span class="o">=</span> <span class="nv">$z40</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'>          <span class="c"># New branch, examine all commits</span>
</span><span class='line'>          <span class="nv">range</span><span class="o">=</span><span class="s2">&quot;$local_sha&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="c"># Update to existing branch, examine new commits</span>
</span><span class='line'>          <span class="nv">range</span><span class="o">=</span><span class="s2">&quot;$remote_sha..$local_sha&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># Check for WIP commit</span>
</span><span class='line'>      <span class="nv">commit</span><span class="o">=</span><span class="sb">`</span>git rev-list -n 1 --grep <span class="s1">&#39;^WIP&#39;</span> <span class="s2">&quot;$range&quot;</span><span class="sb">`</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$commit&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Found WIP commit in $local_ref, not pushing&quot;</span>
</span><span class='line'>          <span class="nb">exit </span>1
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>拦截代码解释</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">remote</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;git@github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$url</span> <span class="o">==</span> *<span class="s2">&quot;https://github.com&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;github repo refused to push&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的代码</p>

<ul>
<li>拦截git协议的到github远程仓库的push请求</li>
<li>拦截https协议的到github远程仓库的push请求</li>
</ul>


<p>除此之外，我们还可以做什么</p>

<ul>
<li>可以根据自身需要增加<code>git@gitee.com</code>等屏蔽</li>
<li>根据需要，可以判定仓库名称来屏蔽。</li>
<li>编写shell语句，实现更加复杂的拦截处理</li>
</ul>


<p>完整文件地址: <a href="https://asset.droidyue.com/content/pre-push">https://asset.droidyue.com/content/pre-push</a></p>

<h2>针对单个Repo生效</h2>

<p>将上述pre-push 放入项目的<code>.git/hooks/</code>下面即可</p>

<h2>针对全局生效</h2>

<p>git 2.9 开始支持
设置全局git hook路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global core.hooksPath  /Users/yourUserName/.git/hooks
</span></code></pre></td></tr></table></div></figure>


<p>将上述pre-push 放入<code>/Users/yourUserName/.git/hooks</code></p>

<p>支持文件可执行权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod a+x your_pre_push_hook_path
</span></code></pre></td></tr></table></div></figure>


<h2>效果演示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xxx@bogon:/tmp/vim_katana<span class="o">(</span>master|✔<span class="o">)</span> % git push origin master
</span><span class='line'>git@github.com:androidyue/vim_katana.git
</span><span class='line'>github repo refused to push
</span><span class='line'>error: failed to push some refs to <span class="s1">&#39;git@github.com:androidyue/vim_katana.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>效果有多少</h2>

<p>防止恶意开源，并不能。只是理论上稍微提高了一点门槛。</p>

<p>这是因为</p>

<ul>
<li>恶意开源者可能删除这些git钩子</li>
<li>恶意开源者可以使用别的形式公开代码</li>
</ul>


<h2>它能做什么</h2>

<ul>
<li>如题所属，它是自身无意原因或者某些恶意中间环节导致开源的最后一道防线。</li>
</ul>


<p>源码安全无小事，事事需谨慎。</p>

<h2>内容推荐</h2>

<ul>
<li><a href="https://droidyue.com/blog/2016/05/22/use-checkstyle-for-better-code-style/">pre-commit钩子实例</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin 中的 Lambda 与 inline]]></title>
    <link href="https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline/"/>
    <updated>2019-04-27T19:26:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/04/27/lambda-inline-noinline-crossinline</id>
    <content type="html"><![CDATA[<p>在Kotlin中，有很多很酷很实用的特性，比如Lambda和高阶函数，利用这些特性，我们可以更加快速的实现开发，提升效率。</p>

<p>比如我们实现一个捕获Throwable，安全执行部分代码的高阶函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">safeRun</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">t:</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testNormalSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">safeRun</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testNormalSafeRun&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>由于Kotlin默认是面向JDK 6，而Java 8 才引入Lambda表达式支持，Kotlin实际上是将Lambda翻译成了匿名内部类的实现形式。所以当我们反编译上面的代码，得到的如下的代码</p>

<p>Lambda被翻译成的class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="kd">extends</span> <span class="n">Lambda</span>
</span><span class='line'><span class="kd">implements</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="cm">/* invalid duplicate definition of identical inner class */</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testNormalSafeRun&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda表达式被调用处的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">InlineSampleKt</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">safeRun</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNormalSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">safeRun</span><span class="o">(</span><span class="n">testNormalSafeRun</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的 Lambda 表达式 比较简单，那是因为</p>

<ul>
<li>Lambda 表达式仅仅使用了一次</li>
<li>Lambda 表达式未捕获外部的变量</li>
</ul>


<p>为了更深入的研究，我们尝试一下更加复杂的情况</p>

<ul>
<li>Lambda 表达式会多次调用</li>
<li>Lambda 表达式捕获外部的变量</li>
</ul>


<p>这里我们使用下面的代码，实现一个多次调用捕获外部变量的 Lambda 表达式的调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">toManyLambdaCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">safeRun</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;toManyLambdaCalls currentCount=$i&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的Lambda 表达式 捕获了外部的变量<code>i</code>，同时执行了很多次。</p>

<p>我们反编译上述的代码，得到的类似的Java实现代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">toManyLambdaCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">void</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="n">InlineSampleKt</span><span class="o">.</span><span class="na">safeRun</span><span class="o">((</span><span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;)((</span><span class="n">Function0</span><span class="o">)</span><span class="k">new</span> <span class="n">Function0</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;((</span><span class="kt">int</span><span class="o">)</span><span class="n">i</span><span class="o">){</span>
</span><span class='line'>                <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="kt">int</span> <span class="n">$i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;toManyLambdaCalls currentCount=&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="n">$i</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="o">.</span><span class="n">$i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>                    <span class="kd">super</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}));</span>
</span><span class='line'>            <span class="o">++</span><span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中</p>

<ul>
<li>Lambda 表达式 翻译成的Function0 的实例被创建了近101多次，生成101个Fuction0 实例</li>
<li>由于Lambda 表达式捕获了外部的变量，生成的Fuction0类 接受变量作为参数</li>
</ul>


<p>上述代码存在的性能问题</p>

<ul>
<li>Function0 实例创建过多，而这些实例大多数会很快被回收，造成短时间内GC压力增大</li>
<li>次数过多的方法调用(Function0构造方法和invoke方法)，造成一定的耗时</li>
</ul>


<p>显然，这种实现，我们不能接受的。</p>

<h2>inline</h2>

<p>好在Kotlin提供了，处理上面问题的方法，这就是所谓的inline 关键字。如下，</p>

<ul>
<li>我们使用inline修饰<code>safeRunInlined</code>方法</li>
<li><code>testInlinedSafeRun</code> 中调用 <code>safeRunInlined</code> 方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">safeRunInlined</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nl">t:</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testInlinedSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">safeRunInlined</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testInlinedSafeRun&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次我们反编译上面的Kotlin代码，得到对应的Java 代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">safeRunInlined</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$safeRunInlined</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var3</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testInlinedSafeRun</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">var0</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testInlinedSafeRun&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var2</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们分析上述代码发现，testInlinedSafeRun 的方法体包含了</p>

<ul>
<li>safeRunInlined 的方法体</li>
<li>Lambda 表达式的内容</li>
</ul>


<p>是的，inline 的作用就是把上面两项的内容，提取到调用处 testInlinedSafeRun 中。通过这种形式，避免了最一开始的类实例生成的问题了。</p>

<h3>When Lambada meets return</h3>

<p>自从了解了 Lambda 可以被inline后，我们貌似可以自由自在地使用它。然而事实或许不是这样，比如我们看一下这段代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">higherOrderFunctionFirst</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;higherOrderFunction.before&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;higherOrderFunction.after&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testLambdaReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionFirst</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testLambdaReturn&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码我们执行预期的输出应该是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">before</span>
</span><span class='line'><span class="n">testLambdaReturn</span>
</span><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">after</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后实际的执行结果却有点事与愿违</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">higherOrderFunction</span><span class="o">.</span><span class="na">before</span>
</span><span class='line'><span class="n">testLambdaReturn</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因还是发生了inline，higherOrderFunctionFirst的执行因为<code>runnable</code>中的return，造成了该方法的返回。</p>

<p>解决方法也比较简单，就是不直接使用return，而是使用指定label的return方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testLambdaReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionFirst</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testLambdaReturn&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span><span class="nd">@higherOrderFunctionFirst</span> <span class="c1">//valid</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决了上面的问题，我们还需要带出一个技术概念，就是控制流。</p>

<h2>control flow 控制流</h2>

<p>维基百科中的英文定义</p>

<blockquote><p>In computer science, control flow (or flow of control) is the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated.</p></blockquote>

<p>对应的中文意思是 在计算机科学中，控制流是单个语句（指令，或命令式编程中函数调用）的执行顺序。</p>

<h2>local control flow 本地控制流</h2>

<p>本地控制流和上面的功能描述一致，只是限定了范围为方法内部。比如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testControlFlow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">functionA</span><span class="o">()</span>
</span><span class='line'>    <span class="n">functionB</span><span class="o">()</span>
</span><span class='line'>    <span class="n">functionC</span><span class="o">()</span>
</span><span class='line'>    <span class="c1">//..... other code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果上面的方法遵循本地控制流，则<code>functionA</code>,<code>functionB</code>和<code>functionC</code>依次执行，但是存在违背本地控制流的情况，即非本地控制流(Non local control flow)，常见的有</p>

<ul>
<li>inline 的 Lambda 表达式含有return</li>
<li>上述的<code>functionA</code>，<code>functionB</code>或<code>functionC</code>发生<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">未捕获异常</a></li>
<li>协程也会导致 Non local control flow出现</li>
</ul>


<p>对于Lambda中的return，除了上述的解决方法，还有下面两种解决方法</p>

<h2>noinline</h2>

<ul>
<li>noinline 用来限定 lambda表达式</li>
<li>noinline 强制lambda表达式 不进行inline处理，对应的方式就是翻译成内部类实现。</li>
<li>noinline 需要配合inline使用</li>
</ul>


<p>使用示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">bigHigherOrderFunction</span><span class="o">(</span><span class="nl">firstRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">,</span> <span class="n">noinline</span> <span class="nl">secondRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">,</span> <span class="nl">thirdRunnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">firstRunnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">secondRunnable</span><span class="o">()</span>
</span><span class='line'>    <span class="n">thirdRunnable</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testNoInline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigHigherOrderFunction</span><span class="o">({</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;firstRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;secondRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">//return //not allowed if the lambda is noinlined</span>
</span><span class='line'>    <span class="o">},</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;thirdRunnable&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译验证一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">NoinlineSampleKt</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">bigHigherOrderFunction</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">firstRunnable</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">secondRunnable</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">thirdRunnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$bigHigherOrderFunction</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">firstRunnable</span><span class="o">,</span> <span class="s">&quot;firstRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">secondRunnable</span><span class="o">,</span> <span class="s">&quot;secondRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">thirdRunnable</span><span class="o">,</span> <span class="s">&quot;thirdRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">firstRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">secondRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">thirdRunnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNoInline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function0</span> <span class="n">secondRunnable$iv</span> <span class="o">=</span> <span class="o">(</span><span class="n">Function0</span><span class="o">)</span><span class="kc">null</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$bigHigherOrderFunction</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;firstRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">secondRunnable$iv</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>      <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;thirdRunnable&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，对于不进行inline处理的 lambda 表达式中 不允许使用return。</p>

<h2>crossinline</h2>

<p>但是我们使用了上面的noinline，可能还是担心一些性能问题，好在这里，还有一个叫做crossinline的东西。</p>

<ul>
<li>crossinline 需要配合inline一起起作用</li>
<li>crossinline 限定的 lambda 不允许使用return，避免了non local control flow问题</li>
</ul>


<p>使用示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//crossinline必须和inline结合使用</span>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">higherOrderFunctionCrossline</span><span class="o">(</span><span class="n">crossinline</span> <span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">runnable</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">testCrossline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">higherOrderFunctionCrossline</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testCrossline&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">//        return  not allowed here</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次反编译验证代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">higherOrderFunctionCrossline</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">Function0</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$higherOrderFunctionCrossline</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="s">&quot;runnable&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">runnable</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testCrossline</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">$i$f$higherOrderFunctionCrossline</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">var1</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;testCrossline&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kotlin inline与 JIT inline的区别</h2>

<p>提到inline，听说过的朋友可能第一个想到的是 JIT 的 inline。JIT inline 是JVM虚拟机提供的运行时的一种优化方式。</p>

<p>来一段代码举例来说</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">add</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当JVM的JIT编译决定将add方法执行inline操作后，testAdd的方法实现会变成类似这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即 将add的方法体实现提取到调用处(testAdd方法中)。inline带来的好处也不言而喻，那就是减少了方法调用产生的进栈和出栈操作，提升运行时的效率。</p>

<p>Kotlin的inline作用和JIT inline大体差不多，稍有一些不同</p>

<ul>
<li>Kotlin的inline发生在编译时，而不是运行时</li>
<li>Kotlin的inline可以明确指定，而jit inline则无法指定发生。</li>
</ul>


<h2>inline 带来的其他问题 can not access private variable</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">val</span> <span class="n">aPrivateValue</span> <span class="o">=</span> <span class="s">&quot;A Private Value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">internal</span> <span class="n">val</span> <span class="n">internalValue</span> <span class="o">=</span> <span class="s">&quot;Internal Value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@PublishedApi</span>
</span><span class='line'><span class="n">internal</span>  <span class="n">val</span> <span class="n">taskId</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">val</span> <span class="n">publicValue</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">publicVariable</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">inline</span> <span class="n">fun</span> <span class="nf">beToInlinedMethod</span><span class="o">(</span><span class="nl">runnable:</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//aPrivateValue //Public-API inline function cannot access non-public-API</span>
</span><span class='line'>    <span class="c1">// &#39;private val aPrivateValue: String&#39; defined in root package in file InlineAccessPrivateMember.kt</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  internalValue  同样也报错上面的错误</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">taskId</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publicValue</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publicVariable</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的beToInlinedMethod 无法访问声明在同一文件中的<code>aPrivateValue</code>和<code>internalValue</code>，因为</p>

<ul>
<li><code>beToInlinedMethod</code>的方法体很有可能被提取到别的模块的方法中</li>
<li>而private 只能在定义的文件中访问</li>
<li>internal 只能限定在同一模块访问</li>
</ul>


<p>解决访问有很多</p>

<ul>
<li>使用上面的public，默认的访问限定符就是public</li>
<li>也可以使用更加推荐的，internal 加上 @PublishedApi 注解的方式。</li>
</ul>


<p>注：反编译代码受工具影响，可能有些微问题，但不影响总体理解。</p>

<h2>涉及与延展内容</h2>

<ul>
<li><a href="https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line/">终端反编译字节码利器 CFR</a></li>
<li><a href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></li>
<li><a href="https://droidyue.com/blog/2015/11/28/article-java-8-lambdas-a-peek-under-the-hood/">深入探索Java 8 Lambda表达式</a></li>
<li><a href="https://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly/">你的Java代码对JIT编译友好么？</a></li>
<li><a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://android.jlelse.eu/inline-noinline-crossinline-what-do-they-mean-b13f48e113c2">https://android.jlelse.eu/inline-noinline-crossinline-what-do-they-mean-b13f48e113c2</a></li>
<li><a href="https://stackoverflow.com/questions/38827186/what-is-the-difference-between-crossinline-and-noinline-in-kotlin">https://stackoverflow.com/questions/38827186/what-is-the-difference-between-crossinline-and-noinline-in-kotlin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[货物崇拜编程]]></title>
    <link href="https://droidyue.com/blog/2019/03/24/cargo-cults-programming/"/>
    <updated>2019-03-24T19:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/24/cargo-cults-programming</id>
    <content type="html"><![CDATA[<p>读到这个标题，多数人会有疑惑，什么是货物崇拜编程，其实最根本的问题可能是什么是货物崇拜。想要了解这些就不得不说货物崇拜(Cargo Cults，又译货物运动)的起源</p>

<blockquote><p>第二次世界大战太平洋战争时，美军于塔纳岛建立一临时基地。当时岛上的原住民看见美军于“大铁船”（军舰）内出来，皆觉得十分惊讶；他们也看到，有一些“大铁鸟”（军用飞机）运送穿着美军军服的人及许多物资。这些原住民看见这种情况均感到很惊讶，并觉得这些“大铁船”及“大铁鸟”十分厉害。加上美军也提供部分物资给原住民，而这些物资对原住民来说十分有用，结果这些原住民将美军当作神。</p>

<p>第二次世界大战结束后，美军离开塔纳岛，只留下一些美军军服及一些货物。塔纳岛原住民便认为这些货物具有神奇力量，又相信“神”（美军）他日会回来并带来更多货物，使他们展开一个幸福新时代。但是美军当然再也没有回来塔纳岛，因此这些原住民便自己发展出一套敬拜仪式，崇拜美军军服及货物；表现形式是原住民会穿着美军军服、升起美国国旗，图腾则是木刻的飞机。</p></blockquote>

<!--more-->


<p>货物崇拜编程则是上面的货物崇拜的引申，维基百科对其定义如下</p>

<blockquote><p>货物崇拜编程（Cargo Cult Programming）是一种计算机程序设计中的反模式，其特征为不明就里地、仪式性地使用代码或程序架构。货物崇拜编程通常是程序员既没理解他要解决的bug、也没理解表面上的解决方案的典型表现。</p></blockquote>

<h2>现象</h2>

<ul>
<li>从网络上看到一些 看似有道理却不起作用的内容</li>
<li>为了用设计模式而用设计模式等刻意使用</li>
<li>复制Stack Overflow上的内容，只要运行OK即可</li>
</ul>


<p>这里以代码为例，列举几处违例</p>

<h3>设置变量为null 释放内存</h3>

<p>可能很多人都听过，类似手动设置变量为null，可以释放内存，缓解内存压力。于是就有人奉其为金科玉律，写出了类似下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;message&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">view</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clean</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//解除引用关系，释放内存</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>我们在clean方法中，手动设置view和message为null以期待可以释放内存</li>
<li>由于Java是自动垃圾回收，只要ViewHolder示例不被持有，view就可以释放，<code>view = null</code>显然是画蛇添足</li>
<li>更复杂的情况，message对应的字符串内容回收，还需要考虑<a href="https://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/">字符串常量池</a>的存在。<code>message = null</code>无法释放字符串内容</li>
</ul>


<h3>使用弱引用防止内存泄露</h3>

<p>同样，很多人都听说过 弱引用(WeakReference) ，它可以避免内存泄露，于是写出了下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initWebView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//使用弱引用防止程序webview导致内存泄漏</span>
</span><span class='line'>            <span class="n">webView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebView</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="o">....</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>仅仅听说了弱引用，但是不知道强引用，更不知道他们阻止GC回收的能力</li>
<li>WebView构造方法接收强引用的Context，<code>new WeakReference&lt;Context&gt;(this)</code>试图构造一个Context的弱引用，但是<code>new WeakReference&lt;Context&gt;(this).get()</code>又从构建的弱引用中得出了原始的强引用</li>
<li>上面的代码，只会是事与愿违。</li>
</ul>


<h3>处理SSLError引发安全问题</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceivedSslError</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">SslErrorHandler</span> <span class="n">handler</span><span class="o">,</span> <span class="n">SslError</span> <span class="n">error</span><span class="o">){</span>
</span><span class='line'>  <span class="n">handler</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码是Webview加载遇到SSL证书问题出错时的回调，网上很多人告诉我们，像上面的方式处理就能解决网页加载出错的问题，殊不知这回引发更大的风险漏洞问题。</p>

<h2>货物崇拜的问题</h2>

<ul>
<li>不熟悉内部原理，无法预期会发生什么，这是很危险的</li>
</ul>


<h2>易出现人群</h2>

<ul>
<li>新手或者经验不足的人，对很多东西和技术不熟悉</li>
<li>缺乏思考，思想懒惰的人</li>
</ul>


<h2>如何避免</h2>

<p>如下，简单谈一些我认为能够规避货物崇拜编程的方式与方法</p>

<h3>自身学习和思考，怀疑</h3>

<ul>
<li>这是从内部驱动的解决方法，通过学习，我们可以把对一项技术的掌握从0变为1，进而变成100。在这个过程中，我们自然能规避那些货物崇拜的问题。</li>
<li>保持思考，切忌懒惰，对于技术和代码，我们在会使用的情况下，更要研究和思考并了解其内部的机制和原理。</li>
<li>保持怀疑，科学精神的精髓就是“怀疑”，在既不能证实也不能证伪的情况下那就存疑</li>
</ul>


<h3>结对编程与代码审核</h3>

<ul>
<li>这是外部驱动的解决方法</li>
<li>找一个有经验的人来结对编程，或代码审核，能够在代码上线之前发现潜在的问题并更正。</li>
</ul>


<p>拒绝货物崇拜编程，学习，思考，怀疑。</p>

<h2>References</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B2%A8%E7%89%A9%E5%B4%87%E6%8B%9C">货物崇拜</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B4%A7%E7%89%A9%E5%B4%87%E6%8B%9C%E7%BC%96%E7%A8%8B">货物崇拜编程</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊一聊SLAP:单一抽象层级原则]]></title>
    <link href="https://droidyue.com/blog/2019/03/17/slap-single-level-of-abstraction-principle/"/>
    <updated>2019-03-17T20:52:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/17/slap-single-level-of-abstraction-principle</id>
    <content type="html"><![CDATA[<p>作为程序员，我们总是和方法打交道，不知不觉都会接触Long method(方法体较长的方法)，不论是自己写的还是他人写的，而Long method(长方法)往往是问题的体现，代表着代码有一种坏的味道，也意味着需要对这段代码进行重构处理。</p>

<!--more-->


<p>长方法的问题通常表现在</p>

<ul>
<li>可读性很差</li>
<li>复用性差</li>
<li>难以调试</li>
<li>难以维护</li>
<li>冗余代码多</li>
</ul>


<p>既然长方法不好，那么我们就应该写short method(短方法)，但是什么样的方法才算短方法呢，有什么衡量呢？</p>

<h2>行数限定</h2>

<p>首先我们想到的可能是限制方法的行数，是的，有人说是20行为宜，有人说是10行最佳，众说纷纭，无一定论。</p>

<p>但是行数限定也有问题</p>

<ul>
<li>没有具体的行数限定</li>
<li>行数限定如果执行，可能会比较死板</li>
</ul>


<p>显然除了行数之外，我们需要一个更加明确无争议的避免长方法产生的方法，比如今天我们提到的 SLAP（单一抽象层原则）。</p>

<h2>定义</h2>

<p>SLAP 是 Single Level of Abstraction 的缩写。</p>

<p>关于SLAP的一些具体解释</p>

<blockquote><p>指定代码块的代码应该在单一的抽象层上。</p></blockquote>

<p>其实关于定义最难理解的应该是抽象层，其原因可能在于</p>

<ul>
<li>我们接受着各种非黑即白，非善既恶的教育和熏陶</li>
<li>对事物做抽象化，不是一下子达到另一个极端的抽象描述。</li>
<li>抽象可以是循序渐进，分层的。</li>
</ul>


<p>举一个最简单的例子，在中学时期我们学习英语，大概听过一个这样类似的短句&#8221;美小圆旧黄法国木书房&#8221;,这是为了辅助在英语中快速排列定语顺序的记忆技巧总结。</p>

<p>在英语（或其他语言）中</p>

<ul>
<li>对名词主体增加定语(名词，形容词)修饰，使得主体更加具体</li>
<li>反之对主体删除定语（名词，形容词），会使得主体更加抽象</li>
</ul>


<p>比如我们对“美小圆旧黄法国木书房” 逐步删除定语，大致会产生这样的抽象层</p>

<ol>
<li> 美小圆法国木书房</li>
<li> 旧黄法国木书房</li>
<li> 法国木书房</li>
<li> 法国书房</li>
<li> 书房</li>
<li> 房</li>
</ol>


<p>我们回归编码，来看一个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">validateUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//检测邮箱是否合法</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">ePattern</span> <span class="o">=</span> <span class="s">&quot;^[a-zA-Z0-9.!#$%&amp;&#39;*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">ePattern</span><span class="o">);</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">m</span><span class="o">.</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//检测密码是否合法</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetterOrDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//return true if it goes here.</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>validateUser 方法用来校验用户的合法性</li>
<li>方法体的前6行代码做的事情是校验用户的email地址是否合法</li>
<li>方法体的后几行的代码，用来校验用户的密码是否合法</li>
</ul>


<p>上面代码存在的问题是</p>

<ul>
<li>validateUser 方法中暴露了校验email和密码的具体实现</li>
<li>validateUser 应该只关心校验email和密码的抽象（第一层抽象），而不是具体实现（第二层抽象）</li>
<li>很明显validateUser 违背了SLAP原则</li>
</ul>


<p>解决方法</p>

<ul>
<li>将违背SLAP原则的代码做提取，形成独立的方法</li>
</ul>


<p>所以按照SLAP原则修改之后的代码应该类似于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserValidator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">EMAIL_REGULAR_EXPRESSION</span> <span class="o">=</span> <span class="s">&quot;^[a-zA-Z0-9.!#$%&amp;&#39;*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">validateEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">EMAIL_REGULAR_EXPRESSION</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">email</span><span class="o">).</span><span class="na">matches</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">validatePassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetterOrDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">validateUserSLAP</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UserValidator</span><span class="o">.</span><span class="na">validateEmail</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">UserValidator</span><span class="o">.</span><span class="na">validatePassword</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常见的违背SLAP的代码场景和情况</h2>

<h3>注释或空行分割的方法体</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//注释1</span>
</span><span class='line'><span class="err">代码片段</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//注释2</span>
</span><span class='line'><span class="err">代码片段</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//注释3</span>
</span><span class='line'><span class="c1">//代码片段3</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码</p>

<ul>
<li>注释或空行分割的代码片段处理相对独立逻辑，可以抽象成独立的方法</li>
<li>上面的代码如果不处理，往往随着时间的推移，会使得所在的方法膨胀，进而形成上面的长方法</li>
</ul>


<h3>for循环体内部代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="nf">buildResult</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">ResultEntity</span><span class="o">&gt;</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ResultEntity</span> <span class="n">entity</span> <span class="o">:</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ResultDto</span> <span class="n">dto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResultDto</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dto</span><span class="o">.</span><span class="na">setShoeSize</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getShoeSize</span><span class="o">());</span>
</span><span class='line'>        <span class="n">dto</span><span class="o">.</span><span class="na">setNumberOfEarthWorms</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getNumberOfEarthWorms</span><span class="o">());</span>
</span><span class='line'>        <span class="n">dto</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">computeAge</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">dto</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面for循环体内部的代码，处理了将ResultEntity转化成ResultDto，可以完全单独抽离成单独的方法，如下代码所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="nf">buildResult</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">ResultEntity</span><span class="o">&gt;</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ResultDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ResultEntity</span> <span class="n">entity</span> <span class="o">:</span> <span class="n">resultSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">toDto</span><span class="o">(</span><span class="n">entity</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ResultDto</span> <span class="nf">toDto</span><span class="o">(</span><span class="n">ResultEntity</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ResultDto</span> <span class="n">dto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResultDto</span><span class="o">();</span>
</span><span class='line'>    <span class="n">dto</span><span class="o">.</span><span class="na">setShoeSize</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getShoeSize</span><span class="o">());</span>
</span><span class='line'>    <span class="n">dto</span><span class="o">.</span><span class="na">setNumberOfEarthWorms</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getNumberOfEarthWorms</span><span class="o">());</span>
</span><span class='line'>    <span class="n">dto</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">computeAge</span><span class="o">(</span><span class="n">entity</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dto</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>回调</h3>

<p>除此之外，回调方法也是容易形成长方法的重灾区，这一点无需再多举例。</p>

<h2>答疑</h2>

<h3>应用SLAP 会导致更多的短方法，维护成本更高了吧</h3>

<p>首先，必须承认，SLAP应用后，会产生一些短方法，但是关于维护成本提升，这一点还是需要考究的。</p>

<p>因为</p>

<ul>
<li>短方法的提取产生，会使得方法更加具有原子性，职责更加单一，更加的符合Unix的哲学 Do one thing, and do it well。</li>
<li>短方法的复用性更强，使得编码更加便捷</li>
<li>短方法可读性更强，更加便于理解</li>
<li>实践表明，SLAP应用后，维护成本应该是降低的。</li>
</ul>


<p>所以，不要畏惧，短方法的产生，应该是喜欢上短方法。</p>

<h3>SLAP 的缩写</h3>

<p>SLAP是Single Level of Abstraction的缩写，不是Same Level of Abstraction，😀</p>

<h2>References</h2>

<ul>
<li><a href="https://dzone.com/articles/slap-your-methods-and-dont-make-me-think">https://dzone.com/articles/slap-your-methods-and-dont-make-me-think</a></li>
<li><a href="http://principles-wiki.net/principles:single_level_of_abstraction">http://principles-wiki.net/principles:single_level_of_abstraction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理Retrofit MalformedJsonException报错]]></title>
    <link href="https://droidyue.com/blog/2019/03/10/retrofit-json-convetor-error/"/>
    <updated>2019-03-10T20:25:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/03/10/retrofit-json-convetor-error</id>
    <content type="html"><![CDATA[<p>使用Retrofit配合GsonConverter，我们能很好地将网络响应内容转换成对应的对象。比如像下面这样。</p>

<!--more-->


<p>Retrofit网络接口方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DroidNetwork</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/test.json&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Call</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;</span> <span class="nf">jsonData</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/helloworld.txt&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Call</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">plainText</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的应用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">val</span> <span class="n">retrofit</span> <span class="o">=</span> <span class="n">Retrofit</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">baseUrl</span><span class="o">(</span><span class="s">&quot;https://asset.droidyue.com/&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">addConverterFactory</span><span class="o">(</span><span class="n">GsonConverterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">val</span> <span class="n">droidNetwork</span> <span class="o">=</span> <span class="n">retrofit</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="nl">DroidNetwork:</span><span class="o">:</span><span class="n">class</span><span class="o">.</span><span class="na">java</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">droidNetwork</span><span class="o">.</span><span class="na">jsonData</span><span class="o">().</span><span class="na">enqueue</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;?,</span> <span class="nl">t:</span> <span class="n">Throwable</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">?.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;?,</span> <span class="nl">response:</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">DroidResponse</span><span class="o">&gt;?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onResponse content=${response?.body()}&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>上面的方法执行都很正常，可是执行这个方法的时候就会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">droidNetwork</span><span class="o">.</span><span class="na">plainText</span><span class="o">().</span><span class="na">enqueue</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">override</span> <span class="n">fun</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;?,</span> <span class="nl">t:</span> <span class="n">Throwable</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Exception</span><span class="o">(</span><span class="s">&quot;causedByPlainText&quot;</span><span class="o">,</span> <span class="n">t</span><span class="o">)?.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;?,</span> <span class="nl">response:</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;?)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onResponse content=${response}&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>崩溃的信息如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Exception</span><span class="o">:</span> <span class="n">causedByPlainText</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">secoo</span><span class="o">.</span><span class="na">retrofitconvertor</span><span class="o">.</span><span class="na">MainActivity</span><span class="n">$doNetworkRequest$2</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">kt</span><span class="o">:</span><span class="mi">41</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">ExecutorCallAdapterFactory</span><span class="n">$ExecutorCallbackCall$1$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ExecutorCallAdapterFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">80</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">891</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">207</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">7470</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RuntimeInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">RuntimeInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">524</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">958</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">MalformedJsonException</span><span class="o">:</span> <span class="n">Use</span> <span class="n">JsonReader</span><span class="o">.</span><span class="na">setLenient</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="n">to</span> <span class="n">accept</span> <span class="n">malformed</span> <span class="n">JSON</span> <span class="n">at</span> <span class="n">line</span> <span class="mi">1</span> <span class="n">column</span> <span class="mi">1</span> <span class="n">path</span> <span class="n">$</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">syntaxError</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1568</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">checkLenient</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1409</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">doPeek</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">593</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">JsonReader</span><span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="n">JsonReader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">425</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">TypeAdapters</span><span class="n">$16</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">TypeAdapters</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">393</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">TypeAdapters</span><span class="n">$16</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">TypeAdapters</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">390</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">converter</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">39</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">converter</span><span class="o">.</span><span class="na">gson</span><span class="o">.</span><span class="na">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">GsonResponseBodyConverter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">27</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">OkHttpCall</span><span class="o">.</span><span class="na">parseResponse</span><span class="o">(</span><span class="n">OkHttpCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">223</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">retrofit2</span><span class="o">.</span><span class="na">OkHttpCall</span><span class="n">$1</span><span class="o">.</span><span class="na">onResponse</span><span class="o">(</span><span class="n">OkHttpCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">121</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">RealCall</span><span class="n">$AsyncCall</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">RealCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">206</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">NamedRunnable</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">NamedRunnable</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">32</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">runWorker</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1167</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">641</span><span class="o">)</span>
</span><span class='line'> <span class="n">W</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">:</span>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">784</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因其实很简单</p>

<ul>
<li> <a href="http://asset.droidyue.com/content/test.json">http://asset.droidyue.com/content/test.json</a> 是一个合法的json内容</li>
<li> <a href="https://asset.droidyue.com/content/helloworld.txt">https://asset.droidyue.com/content/helloworld.txt</a> 是一个普通的文本，内容为<code>helloworld</code></li>
<li> 因为上面的retrofit 对象 设置了GSONConvertor，会尝试默认将所有的内容转成对应的对象内容，故上面的普通文本就会失败报错。</li>
</ul>


<p>解决方法有两个</p>

<ul>
<li>修改服务器端的<a href="https://asset.droidyue.com/content/helloworld.txt">https://asset.droidyue.com/content/helloworld.txt</a> 为JSON内容</li>
<li>调整客户端代码支持。</li>
</ul>


<p>这里我们介绍后者的处理方法，这里我们使用ResponseBody而不是之前的String，然后按照如下代码应用即可。</p>

<p>接口代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/helloworld.txt&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Call</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;</span> <span class="nf">plainTextAsResponseBody</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">droidNetwork</span><span class="o">.</span><span class="na">plainTextAsResponseBody</span><span class="o">().</span><span class="na">enqueue</span><span class="o">(</span><span class="n">object</span> <span class="o">:</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;?,</span> <span class="nl">t:</span> <span class="n">Throwable</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span><span class="o">?.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">override</span> <span class="n">fun</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nl">call:</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;?,</span> <span class="nl">response:</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">ResponseBody</span><span class="o">&gt;?)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onResponse of plainTextAsResponseBody content=${response?.body()?.string()}&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>附加内容</h2>

<p>如果在某种情况下，我们只关心请求操作，而不关心响应内容，我们可以这样使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/content/helloworld.txt&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Call</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">ignoreResult</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码相对更加高效，因为这里省略了将响应内容转成内存对象的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端反编译字节码利器 CFR]]></title>
    <link href="https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line/"/>
    <updated>2019-02-24T21:11:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/02/24/decompile-class-file-command-line</id>
    <content type="html"><![CDATA[<p>最近在研究一下class字节码的东西，尝试将class文件反编译成java文件。尝试了很多的工具，比如JD-GUI及其插件以及各种在线反编译，始终感觉不够酷，毕竟我是一个比较依赖终端的人，所以尝试找一些能否在终端可以实现反编译的工具。</p>

<!--more-->


<p></p>

<p>还是Google好，很快就找到了一个很满意的工具。</p>

<ul>
<li>它是一个jar包</li>
<li>名称叫做CFR(Class File Reader)</li>
<li>支持反编译class文件和jar包</li>
</ul>


<p>如下介绍两个常用的命令使用</p>

<h2>反编译class文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="o">~/</span><span class="n">Documents</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">cfr</span><span class="o">-</span><span class="mf">0.139</span><span class="o">.</span><span class="na">jar</span> <span class="n">JavaTest</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Decompiled with CFR 0.139.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">functionOne</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;functionOne&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">functionTwo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;functionTwo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>反编译jar包</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar ~/Documents/scripts/cfr-0.139.jar ~/Documents/scripts/cfr-0.139.jar --outputdir /tmp/outputdir
</span><span class='line'>Processing org.benf.cfr.reader.api.CfrDriver
</span><span class='line'>Processing org.benf.cfr.reader.api.ClassFileSource
</span><span class='line'>Processing org.benf.cfr.reader.api.OutputSinkFactory
</span><span class='line'>Processing org.benf.cfr.reader.api.SinkReturns
</span><span class='line'>Processing org.benf.cfr.reader.bytecode.analysis.opgraph.Graph
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>执行上述命令结束后，从输出目录(outputdir)下就能找到对应的java文件了。</p>

<h2>包装成脚本</h2>

<h3>反编译某个class文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>java -jar ~/Documents/scripts/cfr-0.139.jar <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>反编译某个jar包</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>java -jar ~/Documents/scripts/cfr-0.139.jar <span class="nv">$1</span> --outputdir <span class="nv">$2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>资源</h2>

<ul>
<li><a href="http://www.benf.org/other/cfr/index.html">http://www.benf.org/other/cfr/index.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理 WebView 与 ViewPager 滑动冲突]]></title>
    <link href="https://droidyue.com/blog/2019/01/27/webview-javascript-scrolling-issue/"/>
    <updated>2019-01-27T20:07:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/27/webview-javascript-scrolling-issue</id>
    <content type="html"><![CDATA[<p>问题场景
在项目的App中，有一个ViewPager，它内部包含了WebView，而内部的webview加载了一个可以滑动的网页。</p>

<p>当我们在网页滑动的时候，会直接切换到下一个viewpager的页面，而不是优先响应webview的滑动。</p>

<!--more-->


<p>具体的效果如视频</p>

<p><video style="width:50%"   controls>
  <source src="https://asset.droidyue.com/video/web_scroll_bad.mp4" type="video/mp4">
</video></p>

<p>期待的示例效果
<video style="width:50%"   controls>
  <source src="https://asset.droidyue.com/video/web_scroll_good.mp4" type="video/mp4">
</video></p>

<h2>解决思路</h2>

<p>其实思路还是比较简单，大概如下</p>

<ul>
<li>优先响应webview内部滑动</li>
<li>如果webview内部滑动完成，则响应外部的滑动</li>
</ul>


<p>那么问题就来了，怎么判断webview内部滑动结束就是解决问题的关键了。</p>

<p>解决问题的关键就在于WebView.onOverScrolled方法</p>

<p><img src="https://asset.droidyue.com/image/overscrolled_webview.png" alt="WebView.onOverScrolled" /></p>

<p>看了上面的文档，我们可能还是有一些疑惑，到底什么是overScroll。正所谓一图胜千言，看一下下图就知道了。</p>

<p><img src="https://asset.droidyue.com/image/overscroll_effect.png" alt="Webview overscrolled effect" /></p>

<p>上面红框的内容就是overScroll的效果，其实就是划过了的意思（英语中over有过的意思）</p>

<p>了解了上面的信息，我们具体的实施办法也就有了。</p>

<ul>
<li>在WebView的onTouchEvent事件为ACTION_DOWN时，查找父视图是否是可以滑动的视图(如ViewPager)，如果是,则通过requestDisallowInterceptTouchEvent(true)调用，请求父视图不要拦截touchEvent</li>
<li>如果WebView不再响应内部滑动（即onOverScrolled中clampedX或者clampedY值为true），我们再起调用requestDisallowInterceptTouchEvent(false)请求父视图恢复拦截处理touchEvent.</li>
</ul>


<p>核心代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="nl">event:</span> <span class="n">MotionEvent</span><span class="o">):</span> <span class="n">Boolean</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">val</span> <span class="n">viewParent</span> <span class="o">=</span> <span class="n">findViewParentIfNeeds</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>       <span class="n">viewParent</span><span class="o">?.</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onOverScrolled</span><span class="o">(</span><span class="nl">scrollX:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">scrollY:</span> <span class="n">Int</span><span class="o">,</span> <span class="nl">clampedX:</span> <span class="n">Boolean</span><span class="o">,</span> <span class="nl">clampedY:</span> <span class="n">Boolean</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">dumpMessage</span><span class="o">(</span><span class="s">&quot;onOverScrolled scrollX=&quot;</span> <span class="o">+</span> <span class="n">scrollX</span> <span class="o">+</span> <span class="s">&quot;;scrollY=&quot;</span> <span class="o">+</span> <span class="n">scrollY</span>
</span><span class='line'>           <span class="o">+</span> <span class="s">&quot;;clampedX=&quot;</span> <span class="o">+</span> <span class="n">clampedX</span> <span class="o">+</span> <span class="s">&quot;;clampedY=&quot;</span> <span class="o">+</span> <span class="n">clampedY</span><span class="o">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">clampedX</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">val</span> <span class="n">viewParent</span> <span class="o">=</span> <span class="n">findViewParentIfNeeds</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>       <span class="n">viewParent</span><span class="o">?.</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kd">super</span><span class="o">.</span><span class="na">onOverScrolled</span><span class="o">(</span><span class="n">scrollX</span><span class="o">,</span> <span class="n">scrollY</span><span class="o">,</span> <span class="n">clampedX</span><span class="o">,</span> <span class="n">clampedY</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">fun</span> <span class="nf">findViewParentIfNeeds</span><span class="o">(</span><span class="nl">tag:</span> <span class="n">View</span><span class="o">):</span> <span class="n">ViewParent</span><span class="o">?</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">tag</span><span class="o">.</span><span class="na">parent</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">parent</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="nf">if</span> <span class="o">(</span><span class="n">parent</span> <span class="n">is</span> <span class="n">ViewPager</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">AbsListView</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">ScrollView</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">HorizontalScrollView</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">parent</span> <span class="n">is</span> <span class="n">GridView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">parent</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="n">is</span> <span class="n">View</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">findViewParentIfNeeds</span><span class="o">(</span><span class="n">parent</span> <span class="n">as</span> <span class="n">View</span><span class="o">)</span>
</span><span class='line'>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">parent</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用上面的代码，我们就能完美的解决水平滑动的问题，对于垂直纵向的问题，大家可以参考本文方法做类似实现。</p>

<h2>示例代码</h2>

<ul>
<li><a href="https://github.com/androidyue/WebViewViewPagerScrollingIssue">https://github.com/androidyue/WebViewViewPagerScrollingIssue</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊一聊未捕获异常与进程退出的关联]]></title>
    <link href="https://droidyue.com/blog/2019/01/21/thread-process-and-uncaught-exceptions/"/>
    <updated>2019-01-21T19:52:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/21/thread-process-and-uncaught-exceptions</id>
    <content type="html"><![CDATA[<p>之前的文章<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a> 我们介绍了JVM如何处理未捕获异常，今天我们研究一个更加有意思的问题，就是在JVM中如果发生了未捕获异常，会导致JVM进程退出么。</p>

<p>关于什么是未捕获异常，我们在之前的文章已经介绍过，这里不再赘述，如欲了解，请阅读<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a></p>

<!--more-->


<h2>辅助方法</h2>

<h3>一个产生未捕获异常的方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Utils.java file</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">causeNPE</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>线程睡眠方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Utils.java file</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">makeThreadSleep</span><span class="o">(</span><span class="kt">long</span> <span class="n">durationInMillSeconds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">durationInMillSeconds</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;makeThreadSleep interrupted&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用该方法的目的主要有</p>

<ul>
<li>让当前线程睡眠，确保其他线程启动完成</li>
<li>让当前线程睡眠，确保当前线程不至于快速结束而销毁</li>
</ul>


<h3>打印全部线程信息方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//In Utils.java file</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dumpAllThreadsInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span> <span class="n">threadSet</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">getAllStackTraces</span><span class="o">().</span><span class="na">keySet</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">Thread</span> <span class="nl">thread:</span> <span class="n">threadSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpAllThreadsInfo thread.name=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;;thread.state=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;;thread.isAlive=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;;group=&quot;</span> <span class="o">+</span> <span class="n">thread</span><span class="o">.</span><span class="na">getThreadGroup</span><span class="o">()</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>打印辅助测试的时间</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//输出结果类似 16:55:55</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTimeForDebug</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SimpleDateFormat</span> <span class="n">sdf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;HH:mm:ss&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>验证方法</h2>

<p>这里的验证我们按照表现来区分，我们将验证以下场景</p>

<ul>
<li>在子线程中制造未捕获异常</li>
<li>在主线程中制造未捕获异常</li>
</ul>


<p>同时上面的场景，在通用的JVM和Android上表现有一些差异，我们也都会进行覆盖研究。</p>

<h2>子线程中的未捕获异常</h2>

<p>我们使用下面的代码，模拟一个在子线程中出现未捕获异常的场景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">startErrorThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;startErrorThread currentThread.name=&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;; happened at &quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">makeThreadSleep</span><span class="o">(</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Thread main sleepFinished at &quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">dumpAllThreadsInfo</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们期待的输出结果是</p>

<ul>
<li>新启动的子线(应该是Thread-0)程因为NPE未捕获而导致线程销毁</li>
<li>主线程不受刚刚异常的影响(进程还存在)，在睡眠10秒后，会打印出所有线程的信息（不包含刚刚崩溃线程Thread-0的信息）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//异常发生 输出线程名称和发生异常的时间</span>
</span><span class='line'><span class="n">startErrorThread</span> <span class="n">currentThread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Thread</span><span class="o">-</span><span class="mi">0</span><span class="o">;</span> <span class="n">happened</span> <span class="n">at</span> <span class="mi">16</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">04</span>
</span><span class='line'><span class="c1">//异常崩溃的信息</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;Thread-0&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">35</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main$3</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">115</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">748</span><span class="o">)</span>
</span><span class='line'><span class="c1">//主线程睡眠结束(对比时间，确定差为10秒)    </span>
</span><span class='line'><span class="n">Thread</span> <span class="n">main</span> <span class="n">sleepFinished</span> <span class="n">at</span> <span class="mi">16</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">14</span>
</span><span class='line'><span class="c1">//主线程不受影响，继续执行操作</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Attach</span> <span class="n">Listener</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Reference</span> <span class="n">Handler</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Monitor</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">Break</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Signal</span> <span class="n">Dispatcher</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Finalizer</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">main</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="c1">//进程结束</span>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来，子线程发生未捕获的异常不会导致进程的退出（也不会影响其他的线程)。</p>

<h3>Android有点不一样</h3>

<p>这个时候可能做Android开发的同学可能会站起来。</p>

<p><strong>提问</strong>：不对啊，我把你的代码放到Android项目中执行，会出现应用已停止的对话框，然后我的进程怎么就退出了呢,老哥，你的结论不对吧。</p>

<p><strong>回答</strong>：哈哈，这个问题是一个好问题，想要回答这个问题，就需要了解JVM如何处理未捕获异常的。这也是我们之前文章<a href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/">JVM 如何处理未捕获异常</a>介绍的。</p>

<p>这里简单概括一下就是，当JVM发现异常后</p>

<ul>
<li>首先尝试检测当前的Thread是否有UncaughtExeptionHandler，并尝试分发出问题的Throwable实例</li>
<li>如果上一步找不到对应的UncaughtExceptionHandler，则分发问题的Throwable实例到其所在的ThreadGroup</li>
<li>ThreadGroup优先会将Throwable实例分发给其父ThreadGroup</li>
<li>如果ThreadGroup没有父ThreadGroup，则尝试分发给所有线程默认使用的UncaughtExceptionHandler</li>
</ul>


<p>所以，我们按照这个流程扒了一下<a href="https://android.googlesource.com/platform/frameworks/base/+/jb-mr1-release/core/java/com/android/internal/os/RuntimeInit.java">RuntimeInit.java</a> 发现了这样的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Use this to log a message when a thread exits due to an uncaught</span>
</span><span class='line'><span class="cm"> * exception.  The framework catches these for the main threads, so</span>
</span><span class='line'><span class="cm"> * this should only matter for threads created by applications.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UncaughtHandler</span> <span class="kd">implements</span> <span class="n">Thread</span><span class="o">.</span><span class="na">UncaughtExceptionHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">uncaughtException</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Don&#39;t re-enter -- avoid infinite loops if crash-reporting crashes.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mCrashing</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mCrashing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mApplicationObject</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;*** FATAL EXCEPTION IN SYSTEM PROCESS: &quot;</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;FATAL EXCEPTION: &quot;</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// 展示 应用已停止的 对话框</span>
</span><span class='line'>            <span class="c1">// Bring up crash dialog, wait for it to be dismissed</span>
</span><span class='line'>            <span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">handleApplicationCrash</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">mApplicationObject</span><span class="o">,</span> <span class="k">new</span> <span class="n">ApplicationErrorReport</span><span class="o">.</span><span class="na">CrashInfo</span><span class="o">(</span><span class="n">e</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Error reporting crash&quot;</span><span class="o">,</span> <span class="n">t2</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Even Slog.e() fails!  Oh well.</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//杀掉进程</span>
</span><span class='line'>            <span class="c1">// Try everything to make sure this process goes away.</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码会执行两个主要的操作</p>

<ul>
<li>展示一个崩溃的对话框</li>
<li>在finally 部分，杀掉当前的进程</li>
</ul>


<p>Android系统会在进程启动后，通过下面的代码为所有的线程设置默认的UncaughtExceptionHandler</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* set default handler; this applies to all threads in the VM */</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">setDefaultUncaughtExceptionHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">UncaughtHandler</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时由于如下原因</p>

<ul>
<li>出问题的线程没有通过<code>Thread.setUncaughtExceptionHandler</code>显式设置对应的处理者</li>
<li>线程所在的ThreadGroup实例属于原生的ThreadGroup，而不是用户自定义并重写<code>uncaughtException</code>的ThreadGroup子类。</li>
</ul>


<p>所以出现未捕获的异常，默认就会走到了Android系统默认设置的所有线程共用的处理者。</p>

<h3>如果发生在主线程中呢</h3>

<p>前面说的都是子线程，那么如果主线程出现未捕获异常，进程应该会退出吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">uncaughtExceptionInMainThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行上面的代码，得到进程退出的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">35</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">uncaughtExceptionInMainThread</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">28</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">14</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是当我们执行下面的这份代码（启动另一个线程并休眠20秒），结果却是不一样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">uncaughtExceptionInMainThreadNotLastUserThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Utils</span><span class="o">.</span><span class="na">makeThreadSleep</span><span class="o">(</span><span class="mi">20</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;uncaughtExceptionInMainThreadNotLastUserThread time=&quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">()</span>
</span><span class='line'>                <span class="o">+</span> <span class="s">&quot;;thread=&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'>            <span class="n">Utils</span><span class="o">.</span><span class="na">dumpAllThreadsInfo</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">makeThreadSleep</span><span class="o">(</span><span class="mi">5</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;uncaughtExceptionInMainThreadNotLastUserThread mainThread time=&quot;</span> <span class="o">+</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getTimeForDebug</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的日志输出是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">uncaughtExceptionInMainThreadNotLastUserThread</span> <span class="n">mainThread</span> <span class="n">time</span><span class="o">=</span><span class="mi">20</span><span class="o">:</span><span class="mi">48</span><span class="o">:</span><span class="mi">09</span>
</span><span class='line'><span class="c1">// 异常发生</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Utils</span><span class="o">.</span><span class="na">causeNPE</span><span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">35</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">uncaughtExceptionInMainThreadNotLastUserThread</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">44</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">Main</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'><span class="c1">//Thread-0  线程休眠结束   </span>
</span><span class='line'><span class="n">uncaughtExceptionInMainThreadNotLastUserThread</span> <span class="n">time</span><span class="o">=</span><span class="mi">20</span><span class="o">:</span><span class="mi">48</span><span class="o">:</span><span class="mi">24</span><span class="o">;</span><span class="n">thread</span><span class="o">=</span><span class="n">Thread</span><span class="o">-</span><span class="mi">0</span>
</span><span class='line'><span class="c1">// 打印此时的全部线程信息</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Signal</span> <span class="n">Dispatcher</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">DestroyJavaVM</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Thread</span><span class="o">-</span><span class="mi">0</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Monitor</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">Break</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">main</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Reference</span> <span class="n">Handler</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Attach</span> <span class="n">Listener</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">RUNNABLE</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">dumpAllThreadsInfo</span> <span class="n">thread</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Finalizer</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="n">WAITING</span><span class="o">;</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span><span class="n">group</span><span class="o">=</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ThreadGroup</span><span class="o">[</span><span class="n">name</span><span class="o">=</span><span class="n">system</span><span class="o">,</span><span class="n">maxpri</span><span class="o">=</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="c1">//进程退出</span>
</span><span class='line'><span class="n">Process</span> <span class="n">finished</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>进程并没有随着主线程中出现未捕获异常而理解退出，而是等到我们启动的Thread-0结束之后才退出的。</p>

<p>那么这是为什么呢，看过我之前文章<a href="https://droidyue.com/blog/2018/12/16/daemon-thread-in-java/">JVM 中的守护线程</a>的朋友应该了解</p>

<p>JVM退出通常有两种情况</p>

<ul>
<li>有效的调用System.exit()</li>
<li>所有的非守护线程退出后，JVM就会自动退出</li>
</ul>


<p>因此不难得出结论</p>

<ul>
<li>第一段代码中，只有主线程一个非守护线程，主线程销毁，所以进程会结束</li>
<li>第二段代码中，主线程销毁后，还有一个Thread-0(由主线程启动，所以也是一个非守护线程)，JVM会等待其结束后而退出。</li>
</ul>


<h2>结论</h2>

<p>所以未捕获异常只会导致所属线程销毁，并不会导致JVM退出。这里我还找到一份官方API文档作为佐证。</p>

<blockquote><p>Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the uncaughtException method of the thread&rsquo;s ThreadGroup object. The default implementation of this method prints the exception&rsquo;s stack trace to System.err and terminates the thread; it does not cause the virtual machine to exit or halt.</p></blockquote>

<p>上面的内容来自<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread">Runtime.addShutdownHook</a></p>

<h2>参考声明</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/40902082/will-an-exception-thrown-in-a-different-thread-will-crash-the-main-thread">Will an exception thrown in a Different thread will crash the main thread?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Android手机连接Charles unknown问题]]></title>
    <link href="https://droidyue.com/blog/2019/01/13/resolve-charles-unknow-indicator-on-android-phones/"/>
    <updated>2019-01-13T20:59:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/13/resolve-charles-unknow-indicator-on-android-phones</id>
    <content type="html"><![CDATA[<p>最近很多同事反馈使用Charles抓包出现了很多unknown的问题，现象如下图</p>

<p><img src="https://asset.droidyue.com/image/2019_first_half/charles_unknow_error.png" alt="charles unknown" /></p>

<p>查看右侧的原因，给出的结果是这样的</p>

<p><img src="https://asset.droidyue.com/image/2019_first_half/failure_reason_charles_unknown.png" alt="Error detail" /></p>

<p>这里将讲解如何解决这个问题，但是开始阅读之前，请确认符合如下的条件</p>

<ul>
<li>本文仅适用于Android 7及之后设备</li>
<li>待抓包的应用设置了targetSDK 为24及其以上</li>
<li>已经配置好了charles的证书</li>
</ul>


<p>好的，开始了。</p>

<!--more-->


<h2>原因</h2>

<ul>
<li>我们在设备上安装的charles证书，属于用户添加的证书</li>
<li>出于应用安全的目的，Android 7及之后默认不信任用户添加的证书(Android 7 之前是默认信任用户添加的证书)</li>
<li>当我们将App的编译目标提到24及其以上，系统就会激活这一安全限制。</li>
</ul>


<h2>如何解决</h2>

<h3>创建App网络安全配置文件</h3>

<p>在应用xml目录下新建一个名为<code>network_security_config.xml</code>，内容为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;network-security-config&gt;</span>
</span><span class='line'>    <span class="nt">&lt;debug-overrides&gt;</span>
</span><span class='line'>        <span class="nt">&lt;trust-anchors&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Trust user added CAs while debuggable only --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;certificates</span> <span class="na">src=</span><span class="s">&quot;user&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/trust-anchors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/debug-overrides&gt;</span>
</span><span class='line'><span class="nt">&lt;/network-security-config&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码仅仅在debug编译包，信任用户添加的CA证书</p>

<h3>应用配置</h3>

<p>在AndroidManifest Application节点增加属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;application</span> <span class="na">android:networkSecurityConfig=</span><span class="s">&quot;@xml/network_security_config&quot;</span>
</span><span class='line'>                    <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>        ...
</span><span class='line'>    <span class="nt">&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>建议重启应用，就能解决问题了。</p>

<h2>注意</h2>

<p>考虑到安全问题，上面的实现</p>

<ul>
<li>仅仅对debug类型的安装包有效（参考值为application节点的android:debuggable属性值）</li>
<li>Release类型的安装包不会有额外的安全影响</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 如何处理未捕获异常]]></title>
    <link href="https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions/"/>
    <updated>2019-01-06T21:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2019/01/06/how-java-handle-uncaught-exceptions</id>
    <content type="html"><![CDATA[<p>继之前的文章 <a href="https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions/">详解JVM如何处理异常</a>，今天再次发布一篇比较关联的文章，如题目可知，今天聊一聊在JVM中线程遇到未捕获异常的问题，其中涉及到线程如何处理未捕获异常和一些内容介绍。</p>

<!--more-->


<h2>什么是未捕获异常</h2>

<p>未捕获异常指的是我们在方法体中没有使用try-catch捕获的异常，比如下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testUncaughtException</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="mi">1</span> <span class="o">/</span> <span class="n">arg</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ArithmeticException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码很有可能发生如下情况</p>

<ul>
<li>如果方法参数arg传递null，会出现NullPointerException</li>
<li>如果参数arg传递内容为空的字符串(&ldquo;&rdquo;)，会出现ArithmeticException</li>
</ul>


<p>对于上面的问题，我们不难发现</p>

<ul>
<li>上面可能出现的NullPointerException和ArithmeticException都属于Unchecked Exceptions</li>
<li>而ArithmeticException被我们人为try-catch捕获了，它不符合本文对于未捕获异常的定义</li>
<li>NullPointerException 由于我们没有catch住，就变成了我们要聊的未捕获异常</li>
<li>另外，未捕获异常实际是Unchecked Exceptions的子集</li>
</ul>


<h2>UncaughtExceptionHandler 是什么</h2>

<ul>
<li>它是线程遇到未捕获异常的一个处理者接口</li>
<li>它包含一个方法<code>void uncaughtException(Thread t, Throwable e);</code> 用来处理接收处理异常发生后的操作，比如收集崩溃信息并上报等</li>
<li>可以通过 实例方法 <code>Thread.setUncaughtExceptionHandler</code> 为某一个Thread实例设置未捕获异常处理者</li>
<li>也可以通过 静态方法 <code>Thread.setDefaultUncaughtExceptionHandler</code> 设置所有Thread实例的未捕获异常处理者</li>
</ul>


<h2>ThreadGroup 是什么</h2>

<ul>
<li>ThreadGroup 是线程的集合</li>
<li>ThreadGroup 也可以包含子ThreadGroup</li>
<li>除了初始的ThreadGroup 之外，每个ThreadGroup都有一个父 ThreadGroup</li>
<li>ThreadGroup 自身实现了Thread.UncaughtExceptionHandler，用来相应处理其内部的线程和ThreadGroup发生未捕获异常。</li>
</ul>


<h2>未捕获异常处理者 设置指南</h2>

<p><img src="https://asset.droidyue.com/image/2019_first_half/how_to_set_uncaught_exceptions.png" alt="how to set uncaught exception handler" /></p>

<h2>线程发生了未捕获异常，JVM怎么处理</h2>

<h3>分发Throwable实例</h3>

<p>当线程A中出现了未捕获异常时，JVM会调用线程A的<code>dispatchUncaughtException(Throwable)</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Dispatch an uncaught exception to the handler. This method is</span>
</span><span class='line'><span class="cm"> * intended to be called only by the JVM.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">dispatchUncaughtException</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getUncaughtExceptionHandler</span><span class="o">().</span><span class="na">uncaughtException</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取未捕获异常处理者</h3>

<ul>
<li>每个线程会有一个变量(uncaughtExceptionHandler)来保存未捕获异常的处理者</li>
<li>在线程需要确定Throwable分发目标的处理者时，优先获取当前线程中uncaughtExceptionHandler变量</li>
<li>如果出问题线程的uncaughtExceptionHandler为null（即没有显式设置异常处理者），则使用自己所在的ThreadGroup来作为未捕获异常处理者。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the handler invoked when this thread abruptly terminates</span>
</span><span class='line'><span class="cm"> * due to an uncaught exception. If this thread has not had an</span>
</span><span class='line'><span class="cm"> * uncaught exception handler explicitly set then this thread&#39;s</span>
</span><span class='line'><span class="cm"> * &lt;tt&gt;ThreadGroup&lt;/tt&gt; object is returned, unless this thread</span>
</span><span class='line'><span class="cm"> * has terminated, in which case &lt;tt&gt;null&lt;/tt&gt; is returned.</span>
</span><span class='line'><span class="cm"> * @since 1.5</span>
</span><span class='line'><span class="cm"> * @return the uncaught exception handler for this thread</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">UncaughtExceptionHandler</span> <span class="nf">getUncaughtExceptionHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">uncaughtExceptionHandler</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span>
</span><span class='line'>        <span class="n">uncaughtExceptionHandler</span> <span class="o">:</span> <span class="n">group</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>如果Throwable分发给ThreadGroup</h4>

<ul>
<li>ThreadGroup会尝试转给它的父ThreadGroup（如果存在的话）</li>
<li>如果上面没有找到对应的ThreadGroup，则尝试获取<code>Thread.getDefaultUncaughtExceptionHandler()</code>并分发</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Called by the Java Virtual Machine when a thread in this</span>
</span><span class='line'><span class="cm">     * thread group stops because of an uncaught exception, and the thread</span>
</span><span class='line'><span class="cm">     * does not have a specific {@link Thread.UncaughtExceptionHandler}</span>
</span><span class='line'><span class="cm">     * installed.</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * The &lt;code&gt;uncaughtException&lt;/code&gt; method of</span>
</span><span class='line'><span class="cm">     * &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:</span>
</span><span class='line'><span class="cm">     * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;If this thread group has a parent thread group, the</span>
</span><span class='line'><span class="cm">     *     &lt;code&gt;uncaughtException&lt;/code&gt; method of that parent is called</span>
</span><span class='line'><span class="cm">     *     with the same two arguments.</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;Otherwise, this method checks to see if there is a</span>
</span><span class='line'><span class="cm">     *     {@linkplain Thread#getDefaultUncaughtExceptionHandler default</span>
</span><span class='line'><span class="cm">     *     uncaught exception handler} installed, and if so, its</span>
</span><span class='line'><span class="cm">     *     &lt;code&gt;uncaughtException&lt;/code&gt; method is called with the same</span>
</span><span class='line'><span class="cm">     *     two arguments.</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;Otherwise, this method determines if the &lt;code&gt;Throwable&lt;/code&gt;</span>
</span><span class='line'><span class="cm">     *     argument is an instance of {@link ThreadDeath}. If so, nothing</span>
</span><span class='line'><span class="cm">     *     special is done. Otherwise, a message containing the</span>
</span><span class='line'><span class="cm">     *     thread&#39;s name, as returned from the thread&#39;s {@link</span>
</span><span class='line'><span class="cm">     *     Thread#getName getName} method, and a stack backtrace,</span>
</span><span class='line'><span class="cm">     *     using the &lt;code&gt;Throwable&lt;/code&gt;&#39;s {@link</span>
</span><span class='line'><span class="cm">     *     Throwable#printStackTrace printStackTrace} method, is</span>
</span><span class='line'><span class="cm">     *     printed to the {@linkplain System#err standard error stream}.</span>
</span><span class='line'><span class="cm">     * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * Applications can override this method in subclasses of</span>
</span><span class='line'><span class="cm">     * &lt;code&gt;ThreadGroup&lt;/code&gt; to provide alternative handling of</span>
</span><span class='line'><span class="cm">     * uncaught exceptions.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param   t   the thread that is about to exit.</span>
</span><span class='line'><span class="cm">     * @param   e   the uncaught exception.</span>
</span><span class='line'><span class="cm">     * @since   JDK1.0</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">uncaughtException</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">UncaughtExceptionHandler</span> <span class="n">ueh</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">getDefaultUncaughtExceptionHandler</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">ueh</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ueh</span><span class="o">.</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!(</span><span class="n">e</span> <span class="k">instanceof</span> <span class="n">ThreadDeath</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Exception in thread \&quot;&quot;</span>
</span><span class='line'>                                 <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的处理流程做成图的形式，就是下图所示</p>

<p><img src="https://asset.droidyue.com/image/2019_first_half/UncaughtExceptionProcess.png" alt="Uncaught exception process" /></p>

<p>注：上述图片来自<a href="https://www.javamex.com/tutorials/exceptions/exceptions_uncaught_handler.shtml">https://www.javamex.com/tutorials/exceptions/exceptions_uncaught_handler.shtml</a></p>

<h2>Questions</h2>

<h3>初始的ThreadGroup是什么</h3>

<p>上面提到了初始的ThreadGroup没有父ThreadGroup，是主线程所在的ThreadGroup么？</p>

<p>这个问题，我们可以通过这样一段代码验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dumpThreadGroups</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ThreadGroup</span> <span class="n">threadGroup</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getThreadGroup</span><span class="o">();</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">threadGroup</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpThreadGroups threadGroup=&quot;</span> <span class="o">+</span> <span class="n">threadGroup</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="n">threadGroup</span> <span class="o">=</span> <span class="n">threadGroup</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行该方法对应的输出是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dumpThreadGroups</span> <span class="n">threadGroup</span><span class="o">=</span><span class="n">main</span>
</span><span class='line'><span class="n">dumpThreadGroups</span> <span class="n">threadGroup</span><span class="o">=</span><span class="n">system</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此我们可以发现，初始的ThreadGroup是一个叫做system的ThreadGroup，而不是main ThreadGroup</p>

<h3>setDefaultUncaughtExceptionHandler 设置的一定会被调用到么</h3>

<p>这其实是一个很好的问题，答案是不一定会被调用，因为可能存在以下的情况</p>

<ul>
<li>出问题的线程设置了对应的UncaughtExcpetionHandler，优先响应分发到这个Handler</li>
<li>出问题的线程所在的ThreadGroup包括其祖先ThreadGroup 重写了uncaughtException 也可能造成线程默认的Handler无法被调用</li>
<li>出问题的线程重写了dispatchUncaughtException 可能性较小</li>
<li>出问题的线程重写了getUncaughtExceptionHandler 可能性较小</li>
</ul>


<h2>参考声明</h2>

<ul>
<li><a href="https://www.javamex.com/tutorials/exceptions/exceptions_uncaught_handler.shtml">How uncaught exceptions are handled</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
