<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="http://droidyue.com/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2017-05-18T08:03:14+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么我要改用Kotlin]]></title>
    <link href="http://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/"/>
    <updated>2017-05-18T07:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin</id>
    <content type="html"><![CDATA[<p><strong>写在前面的话，作为一个不熬夜的人，一觉醒来发现Kotlin成为了Android的官方语言，可谓是大喜过望。为了趁热打铁，我决定提前三天放出原定本周日Release的文章。希望能及时让大家了解一下Kotlin。</strong></p>

<p>相信很多开发人员，尤其是Android开发者都会或多或少听说过Kotlin，当然如果没有听过或者不熟悉也没有关系。因为本篇文章以及博客后期的内容会涉及到很多关于Kotlin的知识分享。</p>

<p>在写这篇文章前的一个多月，Flipboard中国的Android项目确定了正式将Kotlin作为项目开发语言，这就意味着新增的代码文件将以Kotlin代码格式出现，而且同时旧的Java代码也将会陆陆续续翻译成Kotlin代码。在使用Kotlin的这段时间，被它的简洁，高效，快捷等等特点震撼，所以有必要写一篇文章来谈一谈Kotlin的特性，如若能取得推广Kotlin的效果则倍感欣慰。</p>

<!--more-->


<h2>Kotlin的“简历”</h2>

<ul>
<li>来自于著名的IDE IntelliJ IDEA(Android Studio基于此开发) 软件开发公司 JetBrains(位于东欧捷克)</li>
<li>起源来自JetBrains的圣彼得堡团队，名称取自圣彼得堡附近的一个小岛(Kotlin Island)</li>
<li>一种基于JVM的静态类型编程语言</li>
</ul>


<p>来自知名的工具开发商JetBrains，也就决定了Kotlin的基因中必然包含实用与高效等特征。那我们接下来看一看Kotlin的特点，当然这也是我改用Kotlin的重要原因。</p>

<h3>语法简单，不啰嗦</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//variables and constants</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentVersionCode</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1">//变量当前的版本号，类型Int可以根据值推断出来</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentVersionName</span> <span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;1.0&quot;</span> <span class="c1">//显式标明类型</span>
</span><span class='line'><span class="n">val</span> <span class="n">APPNAME</span> <span class="o">=</span> <span class="s">&quot;droidyue.com&quot;</span> <span class="c1">//常量APPNAME 类型(String)可以根据值推断出来</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//methods</span>
</span><span class='line'><span class="n">fun</span> <span class="nf">main</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="o">:</span> <span class="n">AppCompatActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// data class  自动生成getter，setting，hashcode和equals等方法</span>
</span><span class='line'><span class="n">data</span> <span class="kd">class</span> <span class="nf">Book</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">price:</span> <span class="n">Float</span><span class="o">,</span> <span class="n">var</span> <span class="nl">author:</span> <span class="n">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//支持默认参数值，减少方法重载</span>
</span><span class='line'><span class="n">fun</span> <span class="n">Context</span><span class="o">.</span><span class="na">showToast</span><span class="o">(</span><span class="nl">message:</span> <span class="n">String</span><span class="o">,</span> <span class="nl">duration:</span><span class="n">Int</span> <span class="o">=</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">duration</span><span class="o">).</span><span class="na">show</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Kotlin支持类型推断，没有Java那样的啰嗦。</li>
<li>另外用<code>var</code>表示变量，<code>val</code>表示常量更加的简洁</li>
<li>方法也很简单，连function都缩写成了fun，平添了几分双关之意。</li>
<li>类的继承和实现很简单，使用:即可</li>
<li>Kotlin每个句子都不需要加分号(;)</li>
</ul>


<h3>空指针安全</h3>

<p>空指针（NullPointerException或NPE）是我们使用Java开发程序中最常见的崩溃了。因为在Java中我们不得不写很多防御性的代码，比如这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">chars</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Character</span><span class="o">)</span><span class="n">chars</span><span class="o">[</span><span class="mi">10</span><span class="o">]).</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Kotlin中空指针异常得到了很好的解决。</p>

<ul>
<li>在类型上的处理，即在类型后面加上?，即表示这个变量或参数以及返回值可以为null，否则不允许为变量参数赋值为null或者返回null</li>
<li>对于一个可能是null的变量或者参数，在调用对象方法或者属性之前，需要加上?，否则编译无法通过。</li>
</ul>


<p>如下面的代码就是Kotlin实现空指针安全的一个例子，而且相对Java实现而言，简直是一行代码搞定的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="nl">string:</span> <span class="n">String</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">?.</span><span class="na">toCharArray</span><span class="o">()?.</span><span class="na">getOrNull</span><span class="o">(</span><span class="mi">10</span><span class="o">)?.</span><span class="na">hashCode</span><span class="o">())</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;12345678901&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//result</span>
</span><span class='line'><span class="kc">null</span>
</span><span class='line'><span class="mi">49</span>
</span><span class='line'><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于空指针安全的原理，可以参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2017%2F05%2F08%2Fhow-to-study-kotlin%2F">研究学习Kotlin的一些方法</a></p>

<h3>支持方法扩展</h3>

<p>很多时候，Framework提供给我们的API往往都时比较原子的，调用时需要我们进行组合处理，因为就会产生了一些Util类，一个简单的例子，我们想要更快捷的展示Toast信息，在Java中我们可以这样做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">longToast</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是Kotlin的实现却让人惊奇，我们只需要重写扩展方法就可以了，比如这个longToast方法扩展到所有的Context对象中，如果不去追根溯源，可能无法区分是Framework提供的还是自行扩展的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="n">Context</span><span class="o">.</span><span class="na">longToast</span><span class="o">(</span><span class="nl">message:</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">applicationContext</span><span class="o">.</span><span class="na">longToast</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：Kotlin的方法扩展并不是真正修改了对应的类文件，而是在编译器和IDE方面做得处理。使我们看起来像是扩展了方法。</p>

<h3>Lambda, 高阶函数，Streams API, 函数式编程支持</h3>

<p>所谓的Lambda表达式是匿名函数，这使得我们的代码会更加的简单。比如下面的代码就是lambda的应用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">).</span><span class="na">setOnClickListener</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;$it was clicked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所谓的高阶函数就是</p>

<ul>
<li>可以接受函数作为参数</li>
<li>也可以返回函数作为结果</li>
</ul>


<p>举一个接受函数作为参数的例子。在Android开发中，我们经常使用SharedPreference来存储数据，如果忘记调用apply或者commit则数据修改不能应用。利用Kotlin中的高阶函数的功能，我们能更好的解决这个问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">editor</span><span class="o">(</span><span class="nl">f:</span> <span class="o">(</span><span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">edit</span><span class="o">()</span>
</span><span class='line'>    <span class="n">f</span><span class="o">(</span><span class="n">editor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">apply</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//实际调用</span>
</span><span class='line'><span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">editor</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">it</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;installed&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这上面的例子中我们也同时使用了方法扩展这个特性。</p>

<p>Kotlin支持了Streams API和方法引用，这样函数式编程更加方便。比如下面的代码就是我们结合Jsoup，来抓取某个proxy网站的数据，代码更加简单，实现起来也快速。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">parse</span><span class="o">(</span><span class="nl">url:</span> <span class="n">String</span><span class="o">):</span> <span class="n">Unit</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">URL</span><span class="o">(</span><span class="n">url</span><span class="o">),</span> <span class="n">PARSE_URL_TIMEOUT</span><span class="o">).</span><span class="na">getElementsByClass</span><span class="o">(</span><span class="s">&quot;table table-sm&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">first</span><span class="o">().</span><span class="na">children</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">filter</span> <span class="o">{</span> <span class="s">&quot;tbody&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">tagName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">())</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Element:</span><span class="o">:</span><span class="n">children</span><span class="o">).</span><span class="na">forEach</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">trElement</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ProxyItem</span><span class="o">().</span><span class="na">apply</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">trElement</span><span class="o">.</span><span class="na">children</span><span class="o">().</span><span class="na">forEachIndexed</span> <span class="o">{</span> <span class="n">index</span><span class="o">,</span> <span class="n">element</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">when</span> <span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="mi">0</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">host</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                            <span class="n">port</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)[</span><span class="mi">1</span><span class="o">].</span><span class="na">toInt</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="mi">1</span> <span class="o">-&gt;</span> <span class="n">protocol</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>                        <span class="mi">5</span> <span class="o">-&gt;</span> <span class="n">country</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}.</span><span class="na">let</span><span class="o">(::</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>字符串模板</h3>

<p>无论是Java还是Android开发，我们都会用到字符串拼接，比如进行日志输出等等。在Kotlin中，字符串模板是支持的，我们可以很轻松的完成一个字符串数组的组成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Thinking In Java&quot;</span><span class="o">,</span> <span class="mf">59.0f</span><span class="o">,</span> <span class="s">&quot;Unknown&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">val</span> <span class="n">extraValue</span> <span class="o">=</span> <span class="s">&quot;extra&quot;</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;book.name = ${book.name}; book.price=${book.price};extraValue=$extraValue&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：关于字符串拼接可以参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2014%2F08%2F30%2Fjava-details-string-concatenation%2F">Java细节：字符串的拼接
</a></p>

<h3>与Java交互性好</h3>

<p>Kotlin和Java都属于基于JVM的编程语言。Kotlin和Java的交互性很好，可以说是无缝连接。这表现在</p>

<ul>
<li>Kotlin可以自由的引用Java的代码，反之亦然。</li>
<li>Kotlin可以现有的全部的Java框架和库</li>
<li>Java文件可以很轻松的借助IntelliJ的插件转成kotlin</li>
</ul>


<h3>Kotlin应用广泛</h3>

<p>Kotlin对Android应用开发支持广泛，诸多工具，比如kotterknife(ButterKnife Kotlin版)，RxKotlin,Anko等等，当然还有已经存在的很多Java的库都是可以使用的。</p>

<p>除此之外，Kotlin也可以编译成Javascript。最近使用Kotlin写了一段抓取proxy的代码，实现起来非常快捷。甚至比纯JavaScript实现起来要快很多。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">handle</span><span class="o">():</span> <span class="n">Unit</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">window</span><span class="o">.</span><span class="na">onload</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">document</span><span class="o">.</span><span class="na">getElementsByClassName</span><span class="o">(</span><span class="s">&quot;table table-sm&quot;</span><span class="o">).</span><span class="na">asList</span><span class="o">().</span><span class="na">first</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">asList</span><span class="o">().</span><span class="na">filter</span> <span class="o">{</span> <span class="s">&quot;TBODY&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">tagName</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">())</span> <span class="o">}</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">flatMap</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">asList</span><span class="o">()</span> <span class="o">}.</span><span class="na">forEach</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">proxyItem</span> <span class="o">=</span> <span class="n">ProxyItem</span><span class="o">()</span>
</span><span class='line'>                <span class="n">it</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">asList</span><span class="o">().</span><span class="na">forEachIndexed</span> <span class="o">{</span> <span class="n">index</span><span class="o">,</span> <span class="n">element</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">when</span> <span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="mi">0</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">proxyItem</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()?.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)?.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                            <span class="n">proxyItem</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()?.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)?.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)?.</span><span class="na">trim</span><span class="o">()?.</span><span class="na">toInt</span><span class="o">()</span> <span class="o">?:</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="mi">1</span> <span class="o">-&gt;</span> <span class="n">proxyItem</span><span class="o">.</span><span class="na">protocol</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                        <span class="mi">5</span> <span class="o">-&gt;</span> <span class="n">proxyItem</span><span class="o">.</span><span class="na">country</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}.</span><span class="na">run</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">console</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;proxyItem $proxyItem&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>关于性能</h3>

<p>Kotlin的执行效率和Java代码的执行效率理论上一致的。有时候Kotlin可能会显得高一些，比如Kotlin提供了方法的inline设置，可以设置某些高频方法进行inline操作，减少了运行时的进栈出栈和保存状态的开销。</p>

<p>读到这里，是不是想要尝试一下Kotlin呢，它简洁的语法，汇集诸多特性，高效率实现等等，已经在国外风生水起，国外的Pintereset, Square, Flipboard等公司已经开始应用到生产中。</p>

<h3>关于转向Kotlin</h3>

<p>其实，我在做决定之前（当时Kotlin还没有被钦定）也曾有过考虑，是不是选择了Kotlin就意味着放弃Java呢，冷静下来想一想，其实并不是那么回事，因为Kotlin与Java语法太相近，以及在Kotlin中无时无刻不在和Java相关的东西打交道，所以这点顾虑不是问题的。</p>

<p>对于个人的项目来转向Kotlin，通常不是很难的选择，毕竟Kotlin是那么优秀的语言，相信很多人还是愿意尝试并使用这个事半功倍的语言的。</p>

<p>而比较难抉择的情况是如果如何让团队转用Kotlin，个人认为团队难以转用的原因有很多，比如学习成本，历史包袱等等。但其实根本原因还是思维方式的问题，歪果仁喜欢用工具来提升开发效率，因为人力成本很高。而国内团队提高效率的办法通常是增加成员。好在Flipboard 美国团队自2015年（可能更早）就引入了Kotlin，因此中国团队这边选用Kotlin也更加顺水推舟。当然更主要的是目前团队规模不大，成员一致认可Kotlin的优点。</p>

<p>关于团队转用Kotlin的方法，一般比较行得通的办法是自上而下的推行。这就意味着要么直接的技术负责人比较开明要么就是需要有人来不断推介来影响团队。</p>

<p>做个比较现实的比拟，Java就像是一趟从我的家乡保定开往北京西的耗时将近2个小时甚至更长的普通列车，而Kotlin则是那趟仅需40分钟就能到达的高铁。通常的人都会选择高铁，因为它节省了时间和提高了体验。这个时间和体验对应编程中的，我想应该是高效率和高可读性，可维护性的代码。</p>

<p>现在好了，有了Google的支持，Kotlin转Android相信在不久的将来就会全面展开。篡改Python的一句名言“人生苦短，我用Kotlin”，这样一个高效实用的语言应该会被越来越多的团队所接受，并应用到开发生产中。当然也希望在国内环境下大放异彩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简单实用的Android调试应用技巧]]></title>
    <link href="http://droidyue.com/blog/2017/05/14/a-little-but-useful-debug-skill_for_android/"/>
    <updated>2017-05-14T20:37:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/05/14/a-little-but-useful-debug-skill_for_android</id>
    <content type="html"><![CDATA[<p>在应用开发中，我们常常会进行日志打印或者debug调试，以此来分析运行时的一些信息，便于发现bug和问题。Android Studio的Debug功能很好用，但是有时候有些情况下，就显得不是那么快捷和便利。</p>

<!--more-->


<p>比如</p>

<ul>
<li>我们调试的点在应用一打开的时候，很靠前，例如Application的onCreate方法中，以至于我们不能足够快的设置进程为debug模式</li>
<li>虽然上面的情况可以通过Android Studio的debug运行来解决，但是如果项目很大的话，运行起来也会比较耽误时间</li>
</ul>


<p>那么怎么解决上面的问题呢，其实只需要执行一行命令即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">set</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">app</span> <span class="o">-</span><span class="n">w</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">jishuxiaoheiwu</span><span class="o">.</span><span class="na">appdebugsample</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>其中</p>

<ul>
<li>set-debug-app 用来应用为debug模式</li>
<li>-w 意思为wait，在进程启动的时候，等待debugger进行连接</li>
<li><code>com.example.jishuxiaoheiwu.appdebugsample</code> 代表想要调试的应用的包名或ApplicationId</li>
</ul>


<p>执行上面的命令，当我们再次启动目标应用时，会得到这样的画面</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/android_waiting_for_debugger_dialog.png" alt="Android Waiting For Debugger Dialog" /></p>

<p>然后，我们就会有足够的时间，来使用Run&mdash;> Attach Debugger to Android Process 来绑定进程debug。  绑定后对话框消失，下次启动就是正常的启动（没有上面的对话框了）</p>

<p>那么一次debug不一定能解决问题，多次调试则在所难免，那么每次都要执行这个命令么？</p>

<p>答案是可以，但是有更好的方式。即</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">set</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">app</span> <span class="o">-</span><span class="n">w</span> <span class="o">--</span><span class="n">persistent</span>  <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">jishuxiaoheiwu</span><span class="o">.</span><span class="na">appdebugsample</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码和之前有所不同，表现在一个&mdash;persistent</p>

<ul>
<li>&mdash;persitent意思是持久的，意思是一直设置这个应用为调试模式，即每次开启（进程创建）都会弹出对话框，即使卸载再安装或者更新应用</li>
</ul>


<p>如果多次debug完成后，解决了问题，想要恢复正常的启动也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">clear</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个调试的方法很简单，但是可能会节省我们很多的宝贵时间。希望可以帮助到各位开发同行。</p>

<p>另外，当你的开发中遇到效率问题时，你需要做出思考，发觉更快捷的工作方式，而不是为了调试Application中onCreate方法中的代码，每次都点击Android Studio的debug按钮。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研究学习Kotlin的一些方法]]></title>
    <link href="http://droidyue.com/blog/2017/05/08/how-to-study-kotlin/"/>
    <updated>2017-05-08T22:05:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/05/08/how-to-study-kotlin</id>
    <content type="html"><![CDATA[<p>Kotlin是一门让人感到很舒服的语言，相比Java来说，它更加简洁，省去了琐琐碎碎的语法工作，同时了提供了类似Lambda,String template,Null Safe Operator等特性。让开发者用起来得心应手。</p>

<!--more-->


<p>普通的Java/Android程序员通常只需要很短的时间就能快速使用Kotlin。综合Kotlin的诸多优点，加上Flipboard美国团队自2015年已引入Kotlin，Flipboard中国团队也已经开始采用Kotlin来作为Android主要开发语言。</p>

<p>虽然Kotlin使用简单快捷，然而由于自己的深入研究的习惯导致每接触到Kotlin的新功能，就马不停蹄的研究它的本质，这里总结一下关于如何研究Kotlin的一些方法来快速研究掌握Kotlin。</p>

<h2>到底研究什么</h2>

<p>比如Kotlin中提供了一种类型叫做Object，使用它我们可以快速实现单例模式的应用。代码特别的简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">object</span> <span class="n">AppSettings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题来了，kotlin这个object类型的类是如何实现的呢，Null安全操作符的实现原理，Lambda表达式是基于内部类还是真正的Lambda，这些问题就是我们要研究的对象。</p>

<h2>怎么研究</h2>

<ul>
<li>Kotlin和Java都是运行在JVM上，但是实际上JVM并不认识Java和Kotlin，因为它只和bytecode（即class文件）打交道。</li>
<li>因而通过研究bytecode，我们是可以了解Kotlin的一些深入原理的</li>
<li>由于同一份bytecode反编译成java和kotlin文件是等价的，所以将kotlin编译后的class文件反编译成Java，也是具有参考和研究价值的。</li>
</ul>


<h2>实践方法有哪些</h2>

<ul>
<li>利用Kotlin插件</li>
<li>利用kotlinc,javap等工具</li>
</ul>


<h2>一些实践</h2>

<h3>Null Safe Operator实现原理</h3>

<p>在Java中，我们经常会遇到空指针的问题，Kotlin特意增加了一个空指针安全操作符?。使用起来如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="nl">string:</span> <span class="n">String</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">?.</span><span class="na">toCharArray</span><span class="o">()?.</span><span class="na">getOrNull</span><span class="o">(</span><span class="mi">10</span><span class="o">)?.</span><span class="na">hashCode</span><span class="o">())</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们进行这样的调用时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;12345678901&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的输出结果为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kc">null</span>
</span><span class='line'><span class="mi">49</span>
</span><span class='line'><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>从结果可见，并没有像Java那样抛出NullPointerException，而是遇到空指针则不继续执行了。</p>

<p>那么Kotlin的这个空指针安全操作符是如何工作的呢，我们可以借助IntelliJ IDE的Kotlin插件来辅助我们研究，步骤如下</p>

<p>1.使用IntelliJ IDE打开一个待研究的Kotlin文件(需确保Kotlin插件已安装)</p>

<p>2.按照下图依次点击至Show Kotlin Bytecode
<img src="http://7jpolu.com1.z0.glb.clouddn.com/show_kotlin_bytecode.png" alt="Show kotlin bytecode" /></p>

<p>3.上面的步骤操作后，会得到这样的bytecode</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// access flags 0x19</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>    <span class="nd">@Lorg</span><span class="o">/</span><span class="n">jetbrains</span><span class="o">/</span><span class="n">annotations</span><span class="o">/</span><span class="n">Nullable</span><span class="o">;()</span> <span class="c1">// invisible, parameter 0</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">11</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">GETSTATIC</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">System</span><span class="o">.</span><span class="na">out</span> <span class="o">:</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">IFNULL</span> <span class="n">L1</span>   <span class="c1">//对string字符串判空</span>
</span><span class='line'>    <span class="n">INVOKESTATIC</span> <span class="n">kotlin</span><span class="o">/</span><span class="n">text</span><span class="o">/</span><span class="n">StringsKt</span><span class="o">.</span><span class="na">toCharArray</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)[</span><span class="n">C</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">IFNULL</span> <span class="n">L1</span>  <span class="c1">//对CharArray判空</span>
</span><span class='line'>    <span class="n">BIPUSH</span> <span class="mi">10</span>
</span><span class='line'>    <span class="n">INVOKESTATIC</span> <span class="n">kotlin</span><span class="o">/</span><span class="n">collections</span><span class="o">/</span><span class="n">ArraysKt</span><span class="o">.</span><span class="na">getOrNull</span> <span class="o">([</span><span class="n">CI</span><span class="o">)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Character</span><span class="o">;</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">IFNULL</span> <span class="n">L1</span>  <span class="c1">//对Char判空</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.</span><span class="na">hashCode</span> <span class="o">()</span><span class="n">I</span>
</span><span class='line'>    <span class="n">INVOKESTATIC</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span> <span class="o">(</span><span class="n">I</span><span class="o">)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Integer</span><span class="o">;</span>
</span><span class='line'>    <span class="n">GOTO</span> <span class="n">L2</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">POP</span>
</span><span class='line'>    <span class="n">ACONST_NULL</span>
</span><span class='line'>   <span class="n">L2</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L3</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">12</span> <span class="n">L3</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L4</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">string</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L4</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由字节码分析可见，其实所谓的<strong>空指针安全操作符其实内部就是以此判空来确保不出现空指针</strong>，如果字节码不好理解，那我们使用上面的Decompile功能，将bytecode转成Java，如图操作
<img src="http://7jpolu.com1.z0.glb.clouddn.com/kotlin_plugin_decompile.png" alt="kotlin bytecode decompile" /></p>

<p>反编译后得到的Java代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">PrintStream</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">var5</span><span class="o">;</span>
</span><span class='line'>      <span class="nl">label18:</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>         <span class="k">if</span><span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">PrintStream</span> <span class="n">var2</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">string</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">throw</span> <span class="k">new</span> <span class="nf">TypeCastException</span><span class="o">(</span><span class="s">&quot;null cannot be cast to non-null type java.lang.String&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">char</span><span class="o">[]</span> <span class="n">var4</span> <span class="o">=</span> <span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="n">string</span><span class="o">).</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkExpressionValueIsNotNull</span><span class="o">(</span><span class="n">var4</span><span class="o">,</span> <span class="s">&quot;(this as java.lang.String).toCharArray()&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">char</span><span class="o">[]</span> <span class="n">var3</span> <span class="o">=</span> <span class="n">var4</span><span class="o">;</span>
</span><span class='line'>            <span class="n">var10000</span> <span class="o">=</span> <span class="n">var2</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">var3</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">Character</span> <span class="n">var10001</span> <span class="o">=</span> <span class="n">ArraysKt</span><span class="o">.</span><span class="na">getOrNull</span><span class="o">(</span><span class="n">var3</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>               <span class="k">if</span><span class="o">(</span><span class="n">var10001</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">var5</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">var10001</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>                  <span class="k">break</span> <span class="n">label18</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">var5</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var10000</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var5</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样读起来是不是更加容易理解呢。</p>

<h3>Object类型研究</h3>

<p>这里我们回到Object类型，还是再举个例子看看如何使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//这是定义</span>
</span><span class='line'><span class="n">object</span> <span class="n">AppSettings</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">updateConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//do some updating work</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于应用也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//在Kotlin文件中调用</span>
</span><span class='line'><span class="n">AppSettings</span><span class="o">.</span><span class="na">updateConfig</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//在Java文件中调用</span>
</span><span class='line'><span class="n">AppSettings</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">updateConfig</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先看一下AppSettings的字节码文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ================AppSettings.class =================</span>
</span><span class='line'><span class="c1">// class version 50.0 (50)</span>
</span><span class='line'><span class="c1">// access flags 0x31</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// access flags 0x11</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="nf">updateConfig</span><span class="o">()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">7</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LAppSettings</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L1</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x2</span>
</span><span class='line'>  <span class="kd">private</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">4</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">CHECKCAST</span> <span class="n">AppSettings</span>
</span><span class='line'>    <span class="n">PUTSTATIC</span> <span class="n">AppSettings</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">:</span> <span class="n">LAppSettings</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LAppSettings</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L1</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x19</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">LAppSettings</span><span class="o">;</span> <span class="n">INSTANCE</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x8</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">&lt;</span><span class="n">clinit</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">4</span> <span class="n">L0</span>
</span><span class='line'>    <span class="c1">//静态代码块中实例化，即类加载时便开始实例化</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">AppSettings</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">AppSettings</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0008\u0002\n\u0002\u0010\u0002\n\u0000\u0008\u00c6\u0002\u0018\u00002\u00020\u0001B\u0007\u0008\u0002\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004\u00a8\u0006\u0005&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;LAppSettings;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;updateConfig&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;production sources for module KotlinObject&quot;</span><span class="o">})</span>
</span><span class='line'>  <span class="c1">// compiled from: AppSettings.kt</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见，Kotlin的object也就是Java的单例模式的实现，在静态代码块初始化实例。如果字节码没有看懂的话，可以尝试反编译成Java代码来详细研究。</p>

<h3>Lambda表达式研究</h3>

<p>除此之外，Kotlin也是支持了Lambda表达式的。由于并非所有的JVM版本都支持invokedynamic（Lambda表达式依赖的字节码指令），比如Java 6的JVM，这其中就包含了许多安卓设备。所以我们怀疑Kotlin可能是像Scala那样将lambda表达式转换成了匿名内部类。</p>

<p>一个简单的Lambda表达式例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">testObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">val</span> <span class="n">observable</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">()</span>
</span><span class='line'>        <span class="n">observable</span><span class="o">.</span><span class="na">addObserver</span> <span class="o">{</span> <span class="n">o</span><span class="o">,</span> <span class="n">arg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;$o $arg&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用插件同样查看bytecode</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ================Test.class =================</span>
</span><span class='line'><span class="c1">// class version 50.0 (50)</span>
</span><span class='line'><span class="c1">// access flags 0x31</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x11</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="nf">testObservable</span><span class="o">()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">8</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ASTORE</span> <span class="mi">1</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">9</span> <span class="n">L1</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">GETSTATIC</span> <span class="n">Test$testObservable$1</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">:</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span>  <span class="c1">//这里就是使用了匿名内部类(常常包含$字符)</span>
</span><span class='line'>    <span class="n">CHECKCAST</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observer</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">.</span><span class="na">addObserver</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observer</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L2</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">12</span> <span class="n">L2</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L3</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">observable</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">;</span> <span class="n">L1</span> <span class="n">L3</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LTest</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L3</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x1</span>
</span><span class='line'>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">6</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LTest</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L1</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0008\u0002\n\u0002\u0010\u0002\n\u0000\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004\u00a8\u0006\u0005&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;LTest;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;testObservable&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;production sources for module KotlinObject&quot;</span><span class="o">})</span>
</span><span class='line'>  <span class="c1">// access flags 0x18</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="n">INNERCLASS</span> <span class="n">Test$testObservable$1</span> <span class="kc">null</span> <span class="kc">null</span>
</span><span class='line'>  <span class="c1">// compiled from: Space.kt</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// ================Test$testObservable$1.class =================</span>
</span><span class='line'><span class="c1">// class version 50.0 (50)</span>
</span><span class='line'><span class="c1">// access flags 0x30</span>
</span><span class='line'><span class="c1">//生成的匿名内部类，规则为  当前的类名$当前的方法名$匿名内部类序号</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Test</span><span class="n">$testObservable$1</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observer</span>  <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x11</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="nf">update</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">;</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">10</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">GETSTATIC</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">System</span><span class="o">.</span><span class="na">out</span> <span class="o">:</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">append</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">LDC</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">append</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">append</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">toString</span> <span class="o">()</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">11</span> <span class="n">L1</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L2</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L2</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">o</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L2</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">arg</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L2</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x0</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x19</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span> <span class="n">INSTANCE</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x8</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">&lt;</span><span class="n">clinit</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">Test$testObservable$1</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">Test$testObservable$1</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">PUTSTATIC</span> <span class="n">Test$testObservable$1</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">:</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0008\u0002\n\u0002\u0010\u0000\n\u0000\u0010\u0000\u001a\u00020\u00012\u000e\u0010\u0002\u001a\n \u0004*\u0004\u0018\u00010\u00030\u00032\u000e\u0010\u0005\u001a\n \u0004*\u0004\u0018\u00010\u00060\u0006H\n\u00a2\u0006\u0002\u0008\u0007&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;&lt;anonymous&gt;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;o&quot;</span><span class="o">,</span> <span class="s">&quot;Ljava/util/Observable;&quot;</span><span class="o">,</span> <span class="s">&quot;kotlin.jvm.PlatformType&quot;</span><span class="o">,</span> <span class="s">&quot;arg&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;update&quot;</span><span class="o">})</span>
</span><span class='line'>  <span class="n">OUTERCLASS</span> <span class="n">Test</span> <span class="nf">testObservable</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>  <span class="c1">// access flags 0x18</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="n">INNERCLASS</span> <span class="n">Test$testObservable$1</span> <span class="kc">null</span> <span class="kc">null</span>
</span><span class='line'>  <span class="c1">// compiled from: Space.kt</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析字节码可以看到有两个class文件，因此可以推断出Kotlin的Lambda表达式目前是一种基于内部类的语法糖实现。</p>

<p>除此之外，我们还可以使用kotlinc(Kotlin编译器来验证)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kotlinc</span> <span class="n">Test</span><span class="o">.</span><span class="na">kt</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行完成后，查看生成的class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">^</span><span class="n">Test</span>
</span><span class='line'><span class="n">Test$testObservable$1</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="n">Test</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="n">Test</span><span class="o">.</span><span class="na">kt</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，我们还可以使用javap同样实现查看bytecode的功能，即<code>javap -c className</code>，具体操作可以参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2014%2F08%2F30%2Fjava-details-string-concatenation%2F">Java细节：字符串的拼接
</a></p>

<p>关于Lambda的具体研究，请参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F11%2F28%2Farticle-java-8-lambdas-a-peek-under-the-hood%2F">深入探索Java 8 Lambda表达式
</a></p>

<p>除此之外，我们还可以利用上面的方法研究如下Kotlin的特性</p>

<ul>
<li>lazy初始化</li>
<li>when表达式</li>
<li>方法引用</li>
</ul>


<p>关于Kotlin的研究方法目前就是这些，Kotlin很简单，但也要知其所以然，方能游刃有余编码。希望大家可以尝试Kotlin，并玩的开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些关于加速Gradle构建的个人经验]]></title>
    <link href="http://droidyue.com/blog/2017/04/16/speedup-gradle-building/"/>
    <updated>2017-04-16T20:52:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/04/16/speedup-gradle-building</id>
    <content type="html"><![CDATA[<p>目前绝大多数的Android项目都是基于Grale了，因为Gradle确实给我们带来了很多便利，然而，在使用了Gradle后，最大的不满就是编译起来太慢了。解决慢的问题无非有两种方法</p>

<ul>
<li> 提升硬件配置，选择CPU和内存和硬盘等更优的硬件</li>
<li> 在软件方面，减少不必要的耗时，充分利用现有机器的性能。</li>
</ul>


<p>本文的主要经验围绕着如何减少不必要的耗时操作和如何充分利用机器性能展开。</p>

<!--more-->


<h2>调整gradle配置</h2>

<h3>开启daemon</h3>

<p>相比没有开启daemon，开启daemon有如下好处</p>

<ul>
<li>不需要每次启动gradle进程（JVM实例），减少了初始化相关的工作</li>
<li>daemon可以缓存项目结构，文件，task等，尽可能复用之前的编译成果，缩短编译过程</li>
</ul>


<p>开启daemon很简单，以Mac为例，在家目录下的.gradle/gradle.properties文件（如没有，可需要新建文件），加上如下的代码即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.gradle.daemon=true</span></code></pre></td></tr></table></div></figure>


<p>或者传递gradle参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">task</span> <span class="o">--</span><span class="n">daemon</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了确保gradle配置生效，建议使用gradle &mdash;stop停止已有的daemon。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="o">--</span><span class="n">stop</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次执行gradle任务就可以应用daemon了，留意的话，可以看到类似这样的日志输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Starting</span> <span class="n">a</span> <span class="n">Gradle</span> <span class="nf">Daemon</span> <span class="o">(</span><span class="n">subsequent</span> <span class="n">builds</span> <span class="n">will</span> <span class="n">be</span> <span class="n">faster</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>设置heap大小</h2>

<p>为Gradle分配足够大的内存，则可以同样加速编译。如下修改文件gradle.properties</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">jvmargs</span><span class="o">=-</span><span class="n">Xmx5120m</span> <span class="o">-</span><span class="nl">XX:</span><span class="n">MaxPermSize</span><span class="o">=</span><span class="mi">2048</span><span class="n">m</span> <span class="o">-</span><span class="nl">XX:</span><span class="o">+</span><span class="n">HeapDumpOnOutOfMemoryError</span> <span class="o">-</span><span class="n">Dfile</span><span class="o">.</span><span class="na">encoding</span><span class="o">=</span><span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于Flipboard依赖繁多，且文件也多，并结合自身设备8G内存，这里为Gradle分配最大5G。效果目前看起来不错，大家可以根据自己的情况不断调整得到一个最优的值。</p>

<h2>开启offline</h2>

<p>开启offline之后，可以强制Gradle使用本地缓存的依赖，避免了网络读写操作，即使是需要从网络进行检查这些依赖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="o">--</span><span class="n">offline</span> <span class="n">taskName</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上使用时，加上&mdash;offline参数即可。</p>

<p>注意，如果是某个依赖在本地不存在，则会编译出错，解决方法，只需要暂时关闭offline,等依赖下载到本地后，在后续的执行中加入offline即可。</p>

<h2>设置并行构建</h2>

<p>现在的工程往往使用了很多模块，默认情况下Gradle处理多模块时，往往是挨个按顺序处理。可以想象，这种编译起来会有多慢。好在Gradle提供了并行构建的功能，可以让我们充分利用机器的性能，减少编译构建的时间。</p>

<p>修改gradle.properties文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">gradle</span><span class="o">.</span><span class="na">parallel</span><span class="o">=</span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>或向gradle传递参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">task</span> <span class="o">--</span><span class="n">parallel</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们配置完成，再次执行gradle task，会得到类似这样的信息，信息标明了开启Parallel以及每个task使用的线程信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">clean</span> <span class="o">--</span><span class="n">info</span>
</span><span class='line'>
</span><span class='line'><span class="n">Parallel</span> <span class="n">execution</span> <span class="n">is</span> <span class="n">an</span> <span class="n">incubating</span> <span class="n">feature</span><span class="o">.</span>
</span><span class='line'><span class="o">.......</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:x:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Task</span> <span class="n">worker</span> <span class="n">Thread</span> <span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">completed</span><span class="o">.</span> <span class="n">Took</span> <span class="mf">0.005</span> <span class="n">secs</span><span class="o">.</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:xx:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Daemon</span> <span class="n">worker</span> <span class="n">Thread</span> <span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">started</span><span class="o">.</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:xxx:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Task</span> <span class="n">worker</span> <span class="n">Thread</span> <span class="mi">2</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">completed</span><span class="o">.</span> <span class="n">Took</span> <span class="mf">0.003</span> <span class="n">secs</span><span class="o">.</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:xxxx:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Task</span> <span class="n">worker</span> <span class="n">Thread</span> <span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">started</span><span class="o">.</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:xxxxx:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Task</span> <span class="n">worker</span> <span class="n">Thread</span> <span class="mi">2</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">started</span><span class="o">.</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:xxxxxx:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Task</span> <span class="n">worker</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">completed</span><span class="o">.</span> <span class="n">Took</span> <span class="mf">0.004</span> <span class="n">secs</span><span class="o">.</span>
</span><span class='line'><span class="o">:</span><span class="nl">libs:</span><span class="n">json</span><span class="o">-</span><span class="nl">gson:</span><span class="n">clean</span> <span class="o">(</span><span class="n">Thread</span><span class="o">[</span><span class="n">Task</span> <span class="n">worker</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">])</span> <span class="n">started</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>多modules工程优化</h2>

<p>现在的一个Project往往有很多modules，导致我们的编译会变慢。使用—configure-on-demand会在执行任务时仅仅会配置相关的modules，而不是左右的modules。尤其是对于多模块的project来说，使用起来会有不小的提升。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">assembleChinaFastDebug</span> <span class="o">--</span><span class="n">configure</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">demand</span>
</span></code></pre></td></tr></table></div></figure>


<h2>尝试停止已有的daemon</h2>

<p>当我们开启了daemon有段时间后，会发现编译会变得慢了下来，这时候，我们可以尝试结束已有的daemon，确保后续的执行任务使用开启全新的daemon。如下停止已经存在的gradle daemon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="o">--</span><span class="n">stop</span>
</span><span class='line'><span class="n">Stopping</span> <span class="nf">Daemon</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
</span><span class='line'><span class="mi">1</span> <span class="n">Daemon</span> <span class="n">stopped</span>
</span></code></pre></td></tr></table></div></figure>


<h2>debug构建关闭proguard</h2>

<p>提到Proguard大家想到的都是代码混淆，其实除了代码混淆之外，Proguard还可以进行代码压缩，优化和预验证。这其中的代码优化可能会占据更多的时间。
比如一个开启了代码优化的配置如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">optimizationpasses</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就意味着这个代码优化会经过5次，即上一次的优化输出结果作为下一次的优化的输入。反反复复的分析，知道完成配置的次数。</p>

<p>在Android中，我们可以配置debug禁用Proguard即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">debug</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">minifyEnabled</span> <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">minifyEnabled</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以Flipboard为例，当从设置<code>optimizationpasses=5</code>改成debug禁用proguard，编译时间减少了将近3分多钟。</p>

<h2>进行profile分析</h2>

<p>如果上面的所有配置可能到没有达到明显的效果，那么我们就应该使用profile功能来分析一下具体卡在哪里了。</p>

<p>gradle提供了性能分析的功能，就profile，使用很简单，执行任务时带上&mdash;profile参数即可。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">assembleChinaRelease</span> <span class="o">--</span><span class="n">profile</span>
</span></code></pre></td></tr></table></div></figure>


<p>待到执行完毕，在project根目录下的build/reports/profile目录有对应的结果文件，如profile-2017-04-08-23-06-37.html，使用浏览器打开，看到的效果是这样的
<img src="http://7jpolu.com1.z0.glb.clouddn.com/gradle_profile_summary.jpeg" alt="gradle profile summary" /></p>

<p>从上面的summary可知，上面的主要耗时表现在Task Execution上，于是我们切换到Task Execution这个tab
<img src="http://7jpolu.com1.z0.glb.clouddn.com/gradle_profile_task_execution.png" alt="Gradle profile task execution" /></p>

<p>我们可以发现上面的<code>:apps:droidyue:crashlyticsUploadDeobsChinaRelease</code>居然耗费了4m26.26s，那么这是一个什么任务呢？</p>

<p>其实它是著名的bug收集工具crashlytics的上传混淆映射文件的操作，由于crashlytics的服务器在国外，导致这个网络操作会很慢。</p>

<p>解决方法是，我们可以选择性的应用crashlytics插件，具体可以参考<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2017%2F04%2F09%2Ferror-prone-tool-for-java-and-android%2F">Error-prone,Google出品的Java和Android Bug分析利器</a>中关于选择开启error-prone的部分。</p>

<p>通过profile我们可以清晰地看出耗时的根源在哪里，并开始有的放矢地进行解决。</p>

<h2>最后的话</h2>

<p>上面关于如果在不提升硬件的条件下进行优化，当我们所有的配置都已经应用，并且仍然感觉编译时间很长的话，那么我们也应该从硬件的角度去思考了。</p>

<p>关于提升编译速度的通常主要有三个主要的影响硬件</p>

<ul>
<li>CPU，建议CPU不要低于i5</li>
<li>内存，建议内存不少于8G</li>
<li>硬盘，建议为SSD</li>
</ul>


<p>以上三者兼备的比较成熟的产品应该是MBP，如这个配置<a href="http://union-click.jd.com/jdc?e=0&amp;p=AyIHZRprFQYaBVEbXCVGTV8LRGtMR1dGXgVFTUdGW0pADgpQTFtLG18dABYHUgQCUF5PNxQBGkx%2BWxkNe15VSkAFK1ktTF5nUSUXVyUAFA9WHVsWAxM3VxlbFQsWB1QeayUCEzcDdVsUAxMGVBpbFgQiAlUaXRwEFw9SK1sQChIAVh9dEAQXDlQrXCVSTVIWRQNASlZTZStrJQ%3D%3D&amp;t=W1dCFBBFC1pXUwkEAEAdQFkJBVsRChADVRxETEdOWg%3D%3D">Apple MacBook Pro 15.4英寸笔记本电脑(Core i7 处理器/16GB内存/256GB SSD闪存/Retina屏)</a>。</p>

<p>这所谓工欲善其事必先利其器，当我们从硬件和软件上都下功夫进行了优化，我们的开发效率也会得到很大的提高。</p>

<p>备注：就个人而言，应用上面的方法，日常的debug版本build时间由原来的一分钟左右降到了30秒左右。我的机器为15.4MBP,i7,8G,SSD.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error-prone,Google出品的Java和Android Bug分析利器]]></title>
    <link href="http://droidyue.com/blog/2017/04/09/error-prone-tool-for-java-and-android/"/>
    <updated>2017-04-09T20:19:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/04/09/error-prone-tool-for-java-and-android</id>
    <content type="html"><![CDATA[<h2>是什么</h2>

<ul>
<li>静态的Java和Android bug分析利器</li>
<li>由Google出品</li>
<li>由error-prone接管compiler,在代码编译时进行检查，并抛出错误中断执行</li>
<li>在抛出错误的同时给出具体的原因和相应方案</li>
<li>error-prone github 地址为 <a href="https://github.com/google/error-prone">https://github.com/google/error-prone</a></li>
</ul>


<!--more-->


<h2>举几个例子</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testCollectionIncompatibleType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Short</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Short</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中</p>

<ul>
<li>set是一个接受Short类型的集合</li>
<li>我们想通过类似从List.remove(index)方式删除一个元素</li>
<li>但是Set没有remove(index)方法，有的只是remove(Object)方法，普通编译器不会报错，而error-prone则会发现</li>
</ul>


<p>报出的错误信息为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">jishuxiaoheiwu</span><span class="o">/</span><span class="n">github</span><span class="o">/</span><span class="n">ErrorProneSample</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">java</span><span class="o">/</span><span class="n">com</span><span class="o">/</span><span class="n">example</span><span class="o">/</span><span class="n">jishuxiaoheiwu</span><span class="o">/</span><span class="n">errorpronesample</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">24</span><span class="o">:</span>
</span><span class='line'><span class="nl">error:</span> <span class="o">[</span><span class="n">CollectionIncompatibleType</span><span class="o">]</span> <span class="n">Argument</span> <span class="sc">&#39;0&#39;</span> <span class="n">should</span> <span class="n">not</span> <span class="n">be</span> <span class="n">passed</span> <span class="n">to</span> <span class="k">this</span> <span class="n">method</span><span class="o">;</span> <span class="n">its</span> <span class="n">type</span> <span class="kt">int</span> <span class="n">is</span> <span class="n">not</span> <span class="n">compatible</span> <span class="n">with</span> <span class="n">its</span> <span class="n">collection</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">type</span> <span class="n">argument</span> <span class="n">Short</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">^</span>
</span><span class='line'>    <span class="o">(</span><span class="n">see</span> <span class="nl">http:</span><span class="c1">//errorprone.info/bugpattern/CollectionIncompatibleType)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再举一个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="s">&quot;hello World&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>报出的错误是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">jishuxiaoheiwu</span><span class="o">/</span><span class="n">github</span><span class="o">/</span><span class="n">ErrorProneSample</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">java</span><span class="o">/</span><span class="n">com</span><span class="o">/</span><span class="n">example</span><span class="o">/</span><span class="n">jishuxiaoheiwu</span><span class="o">/</span><span class="n">errorpronesample</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span>
</span><span class='line'><span class="nl">error:</span> <span class="o">[</span><span class="n">ArrayToString</span><span class="o">]</span> <span class="n">Calling</span> <span class="n">toString</span> <span class="n">on</span> <span class="n">an</span> <span class="n">array</span> <span class="n">does</span> <span class="n">not</span> <span class="n">provide</span> <span class="n">useful</span> <span class="n">information</span>
</span><span class='line'>        <span class="s">&quot;hello World&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>                                         <span class="o">^</span>
</span><span class='line'>    <span class="o">(</span><span class="n">see</span> <span class="nl">http:</span><span class="c1">//errorprone.info/bugpattern/ArrayToString)</span>
</span></code></pre></td></tr></table></div></figure>


<p>提示上面的byte[].toString()方法打印没有有用信息。</p>

<h2>BugPattern</h2>

<p>Error-prone是基于BugPattern来发现问题的，覆盖范围不仅限于Java还包含Android代码。一些比较常见的BugPattern有如下这些</p>

<ul>
<li>ArrayToString 直接调用数组的toString方法打印不出有用信息</li>
<li>DivZero 0不能做除数，即分母</li>
<li>DefaultCharset 调用系统默认的Charset</li>
<li>MissingDefault switch中缺少default</li>
<li>MislabeledAndroidString Android中的字符串命名和内容不匹配，具有误导性</li>
<li>HardCodedSdCardPath 硬编码sd卡路径</li>
<li>IsLoggableTagLength log tag字符数量过长</li>
<li>其他</li>
<li>更多的bug pattern请参考 <a href="https://github.com/google/error-prone/tree/master/core/src/main/java/com/google/errorprone/bugpatterns">bugpatterns</a></li>
</ul>


<p>BugPattern有三种严重程度，如下</p>

<ul>
<li>ERROR</li>
<li>WARNING</li>
<li>SUGGESTION</li>
</ul>


<p>只有ERROR的严重程度才会中断当前的编译，其他情况都会以日志输出形式展现。</p>

<h2>如何配置</h2>

<p>error-prone有对应的gradle插件，只需要应用即可。需要的操作很简单，只需要三步</p>

<ul>
<li>增加相应的maven repo</li>
<li>在依赖中设置error-prone plugin classpath</li>
<li>应用error-prone plugin</li>
</ul>


<p>一个完整的代码示例如下，修改的文件为Project的build.gradle文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>        <span class="c1">// error-prone相关配置</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="s">&quot;https://plugins.gradle.org/m2/&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">build</span><span class="o">:</span><span class="nl">gradle:</span><span class="mf">2.2</span><span class="o">.</span><span class="mi">3</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="c1">// NOTE: Do not place your application dependencies here; they belong</span>
</span><span class='line'>        <span class="c1">// in the individual module build.gradle files</span>
</span><span class='line'>        <span class="c1">// error-prone相关配置</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s">&quot;net.ltgt.gradle:gradle-errorprone-plugin:0.0.9&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//error-prone相关配置</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s">&quot;net.ltgt.errorprone&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>具体参考<a href="https://plugins.gradle.org/plugin/net.ltgt.errorprone">net.ltgt.errorprone</a></li>
<li>其他配置方法<a href="http://errorprone.info/docs/installation">Maven, Ant等</a></li>
</ul>


<h2>开启/关闭部分检查</h2>

<p>Error-prone plugin提供了方法允许我们配置bugpattern的处理方式。</p>

<p>基本的做法是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tasks</span><span class="o">.</span><span class="na">withType</span><span class="o">(</span><span class="n">JavaCompile</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">options</span><span class="o">.</span><span class="na">compilerArgs</span> <span class="o">+=</span> <span class="o">[</span> <span class="err">&#39;</span><span class="o">-</span><span class="nl">Xep:</span><span class="o">&lt;</span><span class="n">checkName</span><span class="o">&gt;[:</span><span class="n">severity</span><span class="o">]</span><span class="err">&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如我们想要将ArrayToString从ERROR转成WARNING，我们可以这样做</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tasks</span><span class="o">.</span><span class="na">withType</span><span class="o">(</span><span class="n">JavaCompile</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="na">compilerArgs</span> <span class="o">+=</span> <span class="o">[</span> <span class="err">&#39;</span><span class="o">-</span><span class="nl">Xep:ArrayToString:</span><span class="n">WARN</span><span class="err">&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外还有一些特殊的参数</p>

<ul>
<li>-XepAllErrorsAsWarnings 将全部的Error转成WARNING</li>
<li>-XepAllDisabledChecksAsWarnings 开启全部的check，之前禁止的作为WARNING级别处理</li>
<li>-XepDisableAllChecks  关闭所有的check</li>
</ul>


<p>其他的参数可以具体参考<a href="https://github.com/google/error-prone/blob/master/check_api/src/main/java/com/google/errorprone/ErrorProneOptions.java">ErrorProneOptions.java</a></p>

<h2>分条件开启error-prone插件</h2>

<p>理论上，error-prone在编译时期进行代码分析并检查，会延长了编译时间，加之Gradle编译本来就很慢，为了不对我们日常的构建造成影响，我们可以分条件开启error-prone,即</p>

<ul>
<li>在日常开发构建，禁止应用error-prone插件，不对构建时间影响</li>
<li>在特殊场景，比如持续集成时应用error-prone插件，用来发现问题。</li>
</ul>


<p>具体的做法是通过想gradle传递参数来实现。简易代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//如果接受的参数有enableErrorProne则应用插件，否则不应用</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">hasProperty</span><span class="o">(</span><span class="s">&quot;enableErrorProne&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s">&quot;net.ltgt.errorprone&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用如下，则会开启应用插件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">assembleDebug</span> <span class="o">-</span><span class="n">PenableErrorProne</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意</h2>

<ul>
<li>由于是静态分析工具，即使问题代码不被执行也会检测出来。</li>
<li>一次编译过程中，error-prone可以报出多个错误</li>
<li>Android Studio也有对应的error-prone插件，大家也可以使用。</li>
</ul>


<p>以上就是关于error-prone的一些简单总结。Error-prone在Flipboard中已经应用很久，采用的方式为开发构建时不开启，在持续集成时开启。大家可根据自己和团队的需要选择并应用error-prone，来快速发现问题并改善代码的质量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[控制RecyclerView item的宽度]]></title>
    <link href="http://droidyue.com/blog/2017/03/21/control-item-width-in-recyclerview/"/>
    <updated>2017-03-21T21:54:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/03/21/control-item-width-in-recyclerview</id>
    <content type="html"><![CDATA[<p>自从Android中引入RecyclerView之后，它就逐步的替换掉了ListView和GridView。本文很简单，行文目的是记录和备忘。如果能帮到你，那再好不过了。</p>

<!--more-->


<p>关于控制RecyclerView item的宽度，说起来还不是那么清晰，上一张图，就明白了。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/recyclerview_item_width.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/recyclerview_item_width.png" /></p>

<ul>
<li>上面的实际上是一个Grid布局</li>
<li>前三行每个item均分RecyclerView的宽度</li>
<li>最后一行的Others占大概三分之一，而Flipboard则占据了三分之二。</li>
</ul>


<p>上面的图和描述就是我们今天想要实现的效果。</p>

<p>方法很简单，主要使用了GridLayoutManager的setSpanSizeLookup方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mLayoutManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GridLayoutManager</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'><span class="n">mLayoutManager</span><span class="o">.</span><span class="na">setSpanSizeLookup</span><span class="o">(</span><span class="k">new</span> <span class="n">GridLayoutManager</span><span class="o">.</span><span class="na">SpanSizeLookup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSpanSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">==</span> <span class="n">mAdapter</span><span class="o">.</span><span class="na">getItemCount</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>GridLayoutManager构造方法中传入了一个spanCount,这里值为3</li>
<li>getSpanSize方法中，最后一个item占据2个span，其他占据一个span</li>
</ul>


<h2>完整示例源码</h2>

<ul>
<li><a href="https://github.com/androidyue/recyclerview_span_size">recyclerview_span_size</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中一个简单有用的发现性能问题的方法]]></title>
    <link href="http://droidyue.com/blog/2017/03/13/a-small-trick-to-detect-time-consuming-task/"/>
    <updated>2017-03-13T21:57:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/03/13/a-small-trick-to-detect-time-consuming-task</id>
    <content type="html"><![CDATA[<p>在Android中，性能优化是我们持之不懈的工作。这其中，在主线程执行耗时的任务，可能会导致界面卡顿，甚至是ANR（程序未响应）。当然Android提供了很多优秀的工具，比如StrictMode，Method Tracing等，便于我们检测问题。</p>

<p>这里，本文将介绍一个更加简单有效的方法。相比StrictMode来说更加便于发现问题，相比Method Tracing来说更加容易操作。</p>

<!--more-->


<p>首先，我们有这样一个程序代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>    <span class="n">writeContentToFile</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">writeContentToFile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">log</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">(),</span> <span class="s">&quot;Log.txt&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Writer</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">(),</span> <span class="kc">false</span><span class="o">));</span>
</span><span class='line'>        <span class="n">outWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">outWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot; : \n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">outWriter</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">outWriter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">outWriter</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码需要优化，因为</p>

<ul>
<li>writeContentToFile 是一个本地文件写操作，比较耗时</li>
<li>而writeContentToFile 这个方法却放在了主线程中，必然会阻塞主线程其他的工作顺利执行。</li>
</ul>


<p>上面介绍StrictMode和Method Traing都可以检测这个问题，这里我们我们用一个更简单的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">checkWorkerThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">isMainThread</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">()</span> <span class="o">==</span> <span class="n">Looper</span><span class="o">.</span><span class="na">getMainLooper</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isMainThread</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">BuildConfig</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Do not do time-consuming work in the Main thread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段方法有几点注意的。</p>

<ul>
<li>主线程判断，使用<code>Looper.myLooper() == Looper.getMainLooper()</code>可以准确判断当前线程是否为主线程。</li>
<li>BuildConfig.DEBUG 条件控制，只有在debug环境下抛出异常，给予开发者明显的提示。当然也可以使用自定义的是否抛出异常的逻辑</li>
<li>如果当前线程不是主线程，那么就被认为是工作者线程。</li>
</ul>


<p>比如上面的方法加入checkWorkerThread检查</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">writeContentToFile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkWorkerThread</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//代码省略，具体实现参考上面</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次执行程序，会曝出异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">RuntimeException</span><span class="o">:</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">start</span> <span class="n">activity</span> <span class="n">ComponentInfo</span><span class="o">{</span><span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">checkthreadsample</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">checkthreadsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">}:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">RuntimeException</span><span class="o">:</span> <span class="n">Do</span> <span class="n">not</span> <span class="k">do</span> <span class="n">time</span><span class="o">-</span><span class="n">consuming</span> <span class="n">work</span> <span class="n">in</span> <span class="n">the</span> <span class="n">Main</span> <span class="n">thread</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2664</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">handleLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2733</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">access</span><span class="n">$900</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">187</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="n">$H</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1584</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">111</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">194</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5869</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Method</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">372</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="n">$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1019</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">814</span><span class="o">)</span>
</span><span class='line'> <span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">RuntimeException</span><span class="o">:</span> <span class="n">Do</span> <span class="n">not</span> <span class="k">do</span> <span class="n">time</span><span class="o">-</span><span class="n">consuming</span> <span class="n">work</span> <span class="n">in</span> <span class="n">the</span> <span class="n">Main</span> <span class="n">thread</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">checkthreadsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">checkWorkerThread</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">34</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">checkthreadsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">writeContentToFile</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">40</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">checkthreadsample</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">27</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performCreate</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6127</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnCreate</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1123</span><span class="o">)</span>
</span><span class='line'>          <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">performLaunchActivity</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2617</span><span class="o">)</span>
</span><span class='line'>          <span class="o">...</span> <span class="mi">10</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过分析crash stacktrace 我们可以很轻松的发现问题的根源并解决。</p>

<h2>哪些方法需要加上检查</h2>

<ul>
<li>本地IO读写</li>
<li>网络操作</li>
<li>Bitmap相关的缩放等</li>
<li>其他耗时的任务</li>
</ul>


<h2>如何选择工作者线程</h2>

<p>Android中的工作者线程API有很多，简单的有Thread,AsyncTask，也有ThreadPool，HandlerThread等。关于如何选择，可以参考这篇文章。<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F12%2F20%2Fworker-thread-in-android%2F">关于Android中工作者线程的思考</a></p>

<h2>对比</h2>

<ul>
<li>StrictMode 是一把利器，但是检测的东西很多，打印出来的日志可能也有很多，查找定位问题可能不如文章的方法方便。</li>
<li>Method Tracing，需要刻意并时不时进行设置start和stop操作，文章的方法，可以说是一劳永逸。</li>
</ul>


<h2>检测会不会有性能问题</h2>

<ul>
<li>理论上是不会的，通常这个检测的代价要远远比耗时任务要小很多。</li>
<li>如果想进一步优化的，可以在编译期屏蔽这个方法的调用，即assumenosideeffects，具体可以参考<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F11%2F01%2Fthinking-about-android-log%2F">关于Android Log的一些思考</a>中的编译期屏蔽 的内容。</li>
</ul>


<h2>延伸阅读</h2>

<ul>
<li><a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F11%2F08%2Fmake-use-of-handlerthread%2F">详解 Android 中的 HandlerThread</a></li>
<li><a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F09%2F26%2Fandroid-tuning-tool-strictmode%2F">Android性能调优利器StrictMode</a></li>
<li><a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2014%2F07%2F12%2Fcheck-main-thread-in-android-chinese-edition%2F">Android中检测当前是否为主线程</a></li>
<li><a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F07%2F18%2Fanr-in-android%2F">说说Android中的ANR</a></li>
</ul>


<p>当你刚刚写完一个方法时，考虑这一下这个方法会不会很耗时，如果耗时，不妨增加一个线程的check。注意，一定要加载debug版，不要影响到线上的用户。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java性能调优之容器扩容问题]]></title>
    <link href="http://droidyue.com/blog/2017/03/05/java-performance-tuning-collection-size-growth/"/>
    <updated>2017-03-05T20:31:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/03/05/java-performance-tuning-collection-size-growth</id>
    <content type="html"><![CDATA[<p>在Java和Android编程中，我们经常使用类似ArrayList,HashMap等这些容器。这些容器少则存储几条，多则上千甚至更多。作为性能调优的一部分，容器调优往往被我们忽略，本文将尝试探索阐述一些关于容器调优中的扩容问题。虽然以Java为例，但是也同样适用于其他编程语言。</p>

<!--more-->


<p>首先以我们最常用的ArrayList为例，它是一个基于数组的List实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">collection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码很简单，不用赘述。那我们使用NetBeans的profile插件 来看一下关于Object对象分配的stacktrace</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/object_allocation_stacktrace.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/object_allocation_stacktrace.png" /></p>

<p>从stacktrace中，我们可以发现</p>

<ul>
<li>Object对象trace始于ArrayList.add方法</li>
<li>经过了一个叫做ArrayList.grow方法</li>
</ul>


<p>以上我们可以推断，ArrayList对象发生了扩容操作。因为使用无参的构造方法，会初始化一个存储容量为0的数组。</p>

<p>如下代码为ArrayList的构造方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span> <span class="o">=</span> <span class="o">{};</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">ArrayList</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">elementData</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">initialCapacity</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">elementData</span> <span class="o">=</span> <span class="n">EMPTY_ELEMENTDATA</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Illegal Capacity: &quot;</span> <span class="o">+</span> <span class="n">initialCapacity</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">ArrayList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">elementData</span> <span class="o">=</span> <span class="n">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而想要容量1000个Object实例，这个过程中则需要不断的扩容,在这个过程中发生了以下几点</p>

<ul>
<li>确定新的容量，并以新容量为大小创建新的数组</li>
<li>将旧数组的数据拷贝到新数组中</li>
<li>旧的数组将会后续被GC回收掉</li>
</ul>


<p>除此之外，扩容还会增加CPU高速缓存的<strong>未</strong>命中率。因为</p>

<blockquote><p>在JVM中，一般来说，由于对象和其字段常常都需要同时引用，将对象和其字段尽可能放在内存中相邻位置能够减少CPU高速缓存的未命中率。</p></blockquote>

<p>而ArrayList扩容后的新数组可能不在于该对象相邻，所以扩容理论上会增加CPU高速缓存的未命中率。</p>

<p>注意：上面提到的都是CPU高速缓存的未命中率，不是命中率。</p>

<h2>更容易扩容的HashMap</h2>

<p>HashMap作为一个高效的key-value的容器，内部也维护了一个Entry数组，也存在扩容的问题。</p>

<p>然而，HashMap为了更加有效的避免数组冲突，引入了两个概念。</p>

<ul>
<li>threshold 阈(yu，四声)值，当内部数据占用量超过这个值，进行扩容。</li>
<li>loadFactor 通常为0.75,用来计算threshold值，即threshold = 容量 * loadFactor</li>
</ul>


<p>举个例子</p>

<ul>
<li>创建一个HashMap设置初始化容量为16，使用默认的loadFactor 0.75，即threshold为12</li>
<li>然后不断的填充key,value数据</li>
<li>当内部数据占用量超过12时，就会触发扩容操作，而不是等到16的时候。</li>
<li>通常的扩容为双倍扩容，即变成原来的两倍，这里为32.</li>
</ul>


<p>因此说HashMap更容易触发扩容，但是这其实是一种在hash与容量占用的一种平衡。</p>

<h2>如何解决或者改善扩容问题</h2>

<h3>使用预设较为合理的初始容量</h3>

<p>SQLiteDatabase提供了方便的ContentValues简化了我们处理列名与值的映射，ContentValues内部采用了HashMap来存储Key-Value数据，ContentValues的初始容量是8，如果当添加的数据超过8之前，则会进行双倍扩容操作，</p>

<p>因此建议对ContentValues填入的内容进行估量，根据实际需要的字段数量，设置合理的初始化数量。</p>

<h3>尝试使用其他非基于数组的数据结构</h3>

<p>数组的一大优点就是随机访问很高效，这是链表所无法匹敌的。</p>

<p>但是并不是所有的时候都数组都有明显优势</p>

<ul>
<li>不需要随机访问或者数据量很小</li>
<li>在频繁的增加和删除数据的时候，链表有明显的优势。</li>
</ul>


<p>一些替代方案</p>

<ul>
<li>对于List，可以考虑使用LinkedList</li>
<li>对于Map，可以考虑使用TreeMap</li>
<li>关于替代HashMap，Android引入了一个叫做ArrayMap的类，用来解决HashMap内存占用的问题。具体可以参考<a href="http://droidyue.com/blog/2017/02/12/dive-into-arraymap-in-android/">深入剖析 Android中的 ArrayMap</a></li>
</ul>


<p>关于扩容的问题就是以上内容，当我们无论是使用任何数据结构时都需要考虑到具体的环境和需要，确保能够做到最优。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个关于安卓打包提速的小改进]]></title>
    <link href="http://droidyue.com/blog/2017/02/19/a-little-improvement-for-speeding-up-gradle-building-apks/"/>
    <updated>2017-02-19T20:19:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/02/19/a-little-improvement-for-speeding-up-gradle-building-apks</id>
    <content type="html"><![CDATA[<p>作为App开发者，打包和发包是经常要进行的工作。鉴于国内的特殊情况，造就了不可胜举的应用市场。为了便于跟踪统计必要的数据信息，我们通常会针对每个市场都进行打包。这些包总的来说几乎是一致的，可能唯一的的差别就是渠道号信息不一样。</p>

<!--more-->


<p>Flipboard中国版本目前覆盖了大概10几个渠道，目前唯一不同的就是渠道号信息。</p>

<p>最早的实现方式为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buildConfigField</span> <span class="s">&quot;String&quot;</span><span class="o">,</span> <span class="s">&quot;CHANNEL_ID&quot;</span><span class="o">,</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">versionProps</span><span class="o">[</span><span class="err">&#39;</span><span class="n">CHANNEL_ID</span><span class="err">&#39;</span><span class="o">]</span> <span class="o">?</span> <span class="o">/</span><span class="s">&quot;&quot;</span><span class="o">/</span> <span class="o">:</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="n">versionProps</span><span class="o">[</span><span class="err">&#39;</span><span class="n">CHANNEL_ID</span><span class="err">&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="sc">&#39;&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述实现的缺点有</p>

<ul>
<li>无法在manifest中配置包含渠道号信息的meta数据</li>
<li>会导致每次重新编译代码，以及后续的多次Proguard优化，相对很耗时。打包时间将近4分钟</li>
</ul>


<p>后来改进的方式为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">resValue</span> <span class="s">&quot;string&quot;</span><span class="o">,</span> <span class="s">&quot;channel_id&quot;</span><span class="o">,</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">versionProps</span><span class="o">[</span><span class="err">&#39;</span><span class="n">CHANNEL_ID</span><span class="err">&#39;</span><span class="o">]</span> <span class="o">?</span> <span class="o">/</span><span class="s">&quot;&quot;</span><span class="o">/</span> <span class="o">:</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="n">versionProps</span><span class="o">[</span><span class="err">&#39;</span><span class="n">CHANNEL_ID</span><span class="err">&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="sc">&#39;&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>新的实现解决了上面的两个问题</p>

<ul>
<li>可以在manifest中实现配置渠道号信息</li>
<li>无需重新编译源码，也无需后续的proguard的代码优化。只更新resource资源即可。打包时间缩短到14秒左右。</li>
</ul>


<p>经过如此一个小改动，从此我们不再需要漫长的等待和浪费机器性能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入剖析 Android中的 ArrayMap]]></title>
    <link href="http://droidyue.com/blog/2017/02/12/dive-into-arraymap-in-android/"/>
    <updated>2017-02-12T17:51:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/02/12/dive-into-arraymap-in-android</id>
    <content type="html"><![CDATA[<p>数据集合在任何一门编程语言中都是很重要的一部分，在 Android 开发中，我们会实用到ArrayList, LinkedList, HashMap等。其中HashMap是用来处理键值对需求的常用集合。 而Android中引入了一个新的集合，叫做ArrayMap，为键值对存储需求增加了一种选择。</p>

<!--more-->


<h2>ArrayMap是什么</h2>

<ul>
<li>一个通用的key-value映射数据结构</li>
<li>相比HashMap会占用更少的内存空间</li>
<li>android.util和android.support.v4.util都包含对应的ArrayMap类</li>
</ul>


<h2>ArrayMap的内部结构</h2>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/arraymap_internal_structure.png" alt="ArrayMap internal strucuture" /></p>

<p>如上图所示，在ArrayMap内部有两个比较重要的数组，一个是mHashes,另一个是mArray。</p>

<ul>
<li>mHashes用来存放key的hashcode值</li>
<li>mArray用来存储key与value的值，它是一个Object数组。</li>
</ul>


<p>其中这两个数组的索引对应关系是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mHashes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'><span class="n">mArray</span><span class="o">[</span><span class="n">index</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>  <span class="c1">//等同于 mArray[index * 2] = key;</span>
</span><span class='line'><span class="n">mArray</span><span class="o">[(</span><span class="n">index</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">)+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span> <span class="c1">//等同于 mArray[index * 2 + 1] = value;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注：向左移一位的效率要比 乘以2倍 高一些。</p>

<h2>查找数据</h2>

<p>查找数据是容器常用的操作，在Map中，通常是根据key找到对应的value的值。</p>

<p>ArrayMap中的查找分为如下两步</p>

<ul>
<li>根据key的hashcode找到在mHashes数组中的索引值</li>
<li>根据上一步的索引值去查找key所对应的value值</li>
</ul>


<p>其中占据时间复杂度最多的属于第一步:确定key的hashCode在mHahses中的索引值。</p>

<p>而这一步对mHashes查找使用的是二分查找，即Binary Search。所以ArrayMap的查询时间复杂度为 ‎O(log n)</p>

<p>确定key的hashcode在mHashes中的索引的代码的逻辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">indexOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="n">mSize</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//快速判断是ArrayMap是否为空,如果符合情况快速跳出</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">~</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//二分查找确定索引值</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">ContainerHelpers</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">mHashes</span><span class="o">,</span> <span class="n">N</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果未找到，返回一个index值，可能为后续可能的插入数据使用。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果确定不仅hashcode相同，也是同一个key，返回找到的索引值。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mArray</span><span class="o">[</span><span class="n">index</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果key的hashcode相同，但不是同一对象，从索引之后再次找</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">end</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">end</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">&amp;&amp;</span> <span class="n">mHashes</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">==</span> <span class="n">hash</span><span class="o">;</span> <span class="n">end</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mArray</span><span class="o">[</span><span class="n">end</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">]))</span> <span class="k">return</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果key的hashcode相同，但不是同一对象，从索引之前再次找</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mHashes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">hash</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mArray</span><span class="o">[</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">]))</span> <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//返回负值，既可以用来表示无法找到匹配的key，也可以用来为后续的插入数据所用。</span>
</span><span class='line'>    <span class="c1">// Key not found -- return negative value indicating where a</span>
</span><span class='line'>    <span class="c1">// new entry for this key should go.  We use the end of the</span>
</span><span class='line'>    <span class="c1">// hash chain to reduce the number of array entries that will</span>
</span><span class='line'>    <span class="c1">// need to be copied when inserting.</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">~</span><span class="n">end</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然对mHashes进行二分查找，则mHashes必须为有序数组。</p>

<h2>插入数据</h2>

<p>ArrayMap提供给我们进行插入数据的API有</p>

<ul>
<li>append(key,value)</li>
<li>put(key,value)</li>
<li>putAll(collection)</li>
</ul>


<p>以put方法为例，需要注意的有</p>

<ul>
<li>新数据位置确定</li>
<li>key为null</li>
<li>数组扩容问题</li>
</ul>


<h3>新数据位置确定</h3>

<p>为了确保mHashes能够进行二分查找，我们需要保证mHashes始终未有序数组。</p>

<p>在确定新数据位置过程中</p>

<ul>
<li>根据key的hashcode在mHashes表中二分查找确定合适的位置。</li>
<li>如果新添加的数据的索引不是最后位置，在需要对这个索引之后的全部数据向后移动</li>
</ul>


<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/arraymap_move_to_right.png" alt="ArrayMap put" /></p>

<h3>key为null时</h3>

<p>当key为null时，其实和其他正常的key差不多，只是对应的hashcode会默认成0来处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//如果key为null，其hashcode算作0</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="n">indexOfNull</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数组扩容问题</h3>

<ul>
<li>首先数组的容量会扩充到BASE_SIZE</li>
<li>如果BASE_SIZE无法容纳，则扩大到2 * BASE_SIZE</li>
<li>如果2 * BASE_SIZE仍然无法容纳，则每次扩容为当前容量的1.5倍。</li>
</ul>


<p>具体的计算容量的代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The minimum amount by which the capacity of a ArrayMap will increase.</span>
</span><span class='line'><span class="cm"> * This is tuned to be relatively space-efficient.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BASE_SIZE</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">mSize</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">BASE_SIZE</span><span class="o">*</span><span class="mi">2</span><span class="o">)</span> <span class="o">?</span> <span class="o">(</span><span class="n">mSize</span><span class="o">+(</span><span class="n">mSize</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>  <span class="o">:</span> <span class="o">(</span><span class="n">mSize</span> <span class="o">&gt;=</span> <span class="n">BASE_SIZE</span> <span class="o">?</span> <span class="o">(</span><span class="n">BASE_SIZE</span><span class="o">*</span><span class="mi">2</span><span class="o">)</span> <span class="o">:</span> <span class="n">BASE_SIZE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>删除数据</h2>

<p>删除ArrayMap中的一项数据，可以分为如下的情况</p>

<ul>
<li>如果当前ArrayMap只有一项数据，则删除操作将mHashes，mArray置为空数组，mSize置为0.</li>
<li>如果当前ArrayMap容量过大（大于BASE_SIZE*2）并且持有的数据量过小（不足1/3）则降低ArrayMap容量，减少内存占用</li>
<li>如果不符合上面的情况，则从mHashes删除对应的值，将mArray中对应的索引置为null</li>
</ul>


<h2>ArrayMap的缓存优化</h2>

<p>ArrayMap的容量发生变化，正如前面介绍的，有这两种情况</p>

<ul>
<li>put方法增加数据，扩大容量</li>
<li>remove方法删除数据，减小容量</li>
</ul>


<p>在这个过程中，会频繁出现多个容量为BASE_SIZE和2 * BASE_SIZE的int数组和Object数组。ArrayMap设计者为了避免创建不必要的对象，减少GC的压力。采用了类似<a href="http://droidyue.com/blog/2016/12/12/dive-into-object-pool/">对象池</a>的优化设计。</p>

<p>这其中设计到几个元素</p>

<ul>
<li>BASE_SIZE  值为4，与ArrayMap容量有密切关系。</li>
<li>mBaseCache 用来缓存容量为BASE_SIZE的int数组和Object数组</li>
<li>mBaseCacheSize mBaseCache缓存的数量，避免无限缓存</li>
<li>mTwiceBaseCache 用来缓存容量为 BASE_SIZE * 2的int数组和Object数组</li>
<li>mTwiceBaseCacheSize mTwiceBaseCache缓存的数量，避免无限缓存</li>
<li>CACHE_SIZE 值为10，用来控制mBaseCache与mTwiceBaseCache缓存的大小</li>
</ul>


<p>这其中</p>

<ul>
<li> mBaseCache的第一个元素保存下一个mBaseCache，第二个元素保存mHashes数组</li>
<li> mTwiceBaseCache和mBaseCache一样，只是对应的数组容量不同</li>
</ul>


<p>具体的缓存数组逻辑的代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">freeArrays</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">hashes</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">hashes</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="o">(</span><span class="n">BASE_SIZE</span><span class="o">*</span><span class="mi">2</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ArrayMap</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mTwiceBaseCacheSize</span> <span class="o">&lt;</span> <span class="n">CACHE_SIZE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">mTwiceBaseCache</span><span class="o">;</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">hashes</span><span class="o">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=(</span><span class="n">size</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">)-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">mTwiceBaseCache</span> <span class="o">=</span> <span class="n">array</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mTwiceBaseCacheSize</span><span class="o">++;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Storing 2x cache &quot;</span> <span class="o">+</span> <span class="n">array</span>
</span><span class='line'>                        <span class="o">+</span> <span class="s">&quot; now have &quot;</span> <span class="o">+</span> <span class="n">mTwiceBaseCacheSize</span> <span class="o">+</span> <span class="s">&quot; entries&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">hashes</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">BASE_SIZE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ArrayMap</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mBaseCacheSize</span> <span class="o">&lt;</span> <span class="n">CACHE_SIZE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">mBaseCache</span><span class="o">;</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">hashes</span><span class="o">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=(</span><span class="n">size</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">)-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">mBaseCache</span> <span class="o">=</span> <span class="n">array</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mBaseCacheSize</span><span class="o">++;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Storing 1x cache &quot;</span> <span class="o">+</span> <span class="n">array</span>
</span><span class='line'>                        <span class="o">+</span> <span class="s">&quot; now have &quot;</span> <span class="o">+</span> <span class="n">mBaseCacheSize</span> <span class="o">+</span> <span class="s">&quot; entries&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体的利用缓存数组的代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">allocArrays</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mHashes</span> <span class="o">==</span> <span class="n">EMPTY_IMMUTABLE_INTS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">(</span><span class="s">&quot;ArrayMap is immutable&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="o">(</span><span class="n">BASE_SIZE</span><span class="o">*</span><span class="mi">2</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ArrayMap</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mTwiceBaseCache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">mTwiceBaseCache</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mTwiceBaseCache</span> <span class="o">=</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>                <span class="n">mHashes</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mTwiceBaseCacheSize</span><span class="o">--;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Retrieving 2x cache &quot;</span> <span class="o">+</span> <span class="n">mHashes</span>
</span><span class='line'>                        <span class="o">+</span> <span class="s">&quot; now have &quot;</span> <span class="o">+</span> <span class="n">mTwiceBaseCacheSize</span> <span class="o">+</span> <span class="s">&quot; entries&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">BASE_SIZE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ArrayMap</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mBaseCache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">mBaseCache</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mBaseCache</span> <span class="o">=</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>                <span class="n">mHashes</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mBaseCacheSize</span><span class="o">--;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG</span><span class="o">)</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Retrieving 1x cache &quot;</span> <span class="o">+</span> <span class="n">mHashes</span>
</span><span class='line'>                        <span class="o">+</span> <span class="s">&quot; now have &quot;</span> <span class="o">+</span> <span class="n">mBaseCacheSize</span> <span class="o">+</span> <span class="s">&quot; entries&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mHashes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>    <span class="n">mArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">size</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在Android中的应用</h2>

<p>在Android Performance Pattern中，官方给出的使用场景为</p>

<p>  1.item数量小于1000，尤其是插入数据和删除数据不频繁的情况。</p>

<p>  2.Map中包含子Map对象</p>

<p>通过本文的介绍，我们对于ArrayMap应该有了一个比较深入的了解。虽然ArrayMap是Android系统中HashMap的一种替代，但是我们在使用时也要注意选择适宜的场景，切莫一概而论。</p>

<p>嗨，我是小广告：欢迎参加我的知乎Live <a href="https://www.zhihu.com/lives/802899577341620224">《我学安卓的那些套路》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 Android 应用多进程的整理]]></title>
    <link href="http://droidyue.com/blog/2017/01/15/android-multiple-processes-summary/"/>
    <updated>2017-01-15T20:38:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/01/15/android-multiple-processes-summary</id>
    <content type="html"><![CDATA[<p>在计算机操作系统中，进程是进行资源分配和调度的基本单位。这对于基于Linux内核的Android系统也不例外。在Android的设计中，一个应用默认有一个(主)进程。但是我们通过配置可以实现一个应用对应多个进程。</p>

<p>本文将试图对于Android中应用多进程做一些整理总结。</p>

<!--more-->


<h2>android:process</h2>

<ul>
<li>应用实现多进程需要依赖于android:process这个属性</li>
<li>适用元素：Application, Activity, BroadcastReceiver, Service, ContentProvider。</li>
<li>通常情况下，这个属性的值应该是&#8221;:&ldquo;开头。表示这个进程是应用私有的。无法在在跨应用之间共用。</li>
<li>如果该属性值以小写字母开头，表示这个进程为全局进程。可以被多个应用共用。（文章结尾会探讨这个问题）</li>
</ul>


<p>一个应用 android:process 简单示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;.MusicPlayerActivity&quot;</span> <span class="na">android:process=</span><span class="s">&quot;:music&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;.AnotherActivity&quot;</span> <span class="na">android:process=</span><span class="s">&quot;droidyue.com&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>应用多进程有什么好处</h2>

<h3>增加App可用内存</h3>

<p>在Android中，默认情况下系统会为每个App分配一定大小的内存。比如从最早的16M到后面的32M或者48M等。具体的内存大小取决于硬件和系统版本。</p>

<p>这些有限的内存对于普通的App还算是够用，但是对于展示大量图片的应用来说，显得实在是捉襟见肘。</p>

<p>仔细研究一下，你会发现原来系统的这个限制是作用于进程的(毕竟进程是作为资源分配的基本单位)。意思就是说，如果一个应用实现多个进程，那么这个应用可以获得更多的内存。</p>

<p>于是，增加App可用内存成了应用多进程的重要原因。</p>

<h3>独立于主进程</h3>

<p>除了增加App可用内存之外，确保使用多进程，可以独立于主进程，确保某些任务的执行和完成。</p>

<p>举一个简单的例子，之前的一个项目存在退出的功能，其具体实现为杀掉进程。为了保证某些统计数据上报正常，不受当前进程退出的影响，我们可以使用独立的进程来完成。</p>

<h2>多进程的不足与缺点</h2>

<h3>数据共享问题</h3>

<ul>
<li>由于处于不同的进程导致了数据无法共享内容，无论是static变量还是单例模式的实现。</li>
<li>SharedPreferences 还没有增加对多进程的支持。</li>
<li>跨进程共享数据可以通过Intent,Messenger，AIDL等。</li>
</ul>


<h3>SQLite容易被锁</h3>

<ul>
<li>由于每个进程可能会使用各自的SQLOpenHelper实例，如果两个进程同时对数据库操作，则会发生SQLiteDatabaseLockedException等异常。</li>
<li>解决方法：可以使用ContentProvider来实现或者使用其他存储方式。</li>
</ul>


<h3>不必要的初始化</h3>

<ul>
<li>多进程之后，每个进程在创建的时候，都会执行自己的Application.onCreate方法。</li>
<li>通常情况下，onCreate中包含了我们很多业务相关的初始化，更重要的这其中没有做按照进程按需初始化，即每个进程都会执行全部的初始化。</li>
<li>按需初始化需要根据当前进程名称，进行最小需要的业务初始化。</li>
<li>按需初始化可以选择简单的if else判断，也可以结合工厂模式</li>
</ul>


<p>一些简单的代码示例</p>

<h4>获取当前的进程名</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">getCurrentProcessName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">currentProcName</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ActivityManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">ACTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ActivityManager</span><span class="o">.</span><span class="na">RunningAppProcessInfo</span> <span class="n">processInfo</span> <span class="o">:</span> <span class="n">manager</span><span class="o">.</span><span class="na">getRunningAppProcesses</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processInfo</span><span class="o">.</span><span class="na">pid</span> <span class="o">==</span> <span class="n">pid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentProcName</span> <span class="o">=</span> <span class="n">processInfo</span><span class="o">.</span><span class="na">processName</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">currentProcName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>基本的进程初始化类</h4>

<p>这个类用来每个进程共用的业务初始化逻辑。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppInitialization</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@CallSuper</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAppCreate</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;AppInitialization&quot;</span><span class="o">,</span> <span class="s">&quot;onAppCreate is being executed.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>工厂模式的应用</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppInitFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">AppInitialization</span> <span class="nf">getAppInitialization</span><span class="o">(</span><span class="n">String</span> <span class="n">processName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AppInitialization</span> <span class="n">appInitialization</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processName</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;:game&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">appInitialization</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameAppInitialization</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">processName</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;:music&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">appInitialization</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MusicAppInitialization</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">appInitialization</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppInitialization</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">appInitialization</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GameAppInitialization</span> <span class="kd">extends</span> <span class="n">AppInitialization</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAppCreate</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onAppCreate</span><span class="o">(</span><span class="n">application</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;GameAppInitialization&quot;</span><span class="o">,</span> <span class="s">&quot;onAppCreate is being executed.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MusicAppInitialization</span> <span class="kd">extends</span> <span class="n">AppInitialization</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAppCreate</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onAppCreate</span><span class="o">(</span><span class="n">application</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MusicAppInitialization&quot;</span><span class="o">,</span> <span class="s">&quot;onAppCreate is being executed.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>具体的调用时的代码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;MyApplication&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">currentProcessName</span> <span class="o">=</span> <span class="n">getCurrentProcessName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onCreate currentProcessName=&quot;</span> <span class="o">+</span> <span class="n">currentProcessName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">AppInitialization</span> <span class="n">appInitialization</span> <span class="o">=</span> <span class="n">AppInitFactory</span><span class="o">.</span><span class="na">getAppInitialization</span><span class="o">(</span><span class="n">currentProcessName</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">appInitialization</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">appInitialization</span><span class="o">.</span><span class="na">onAppCreate</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>是否需要多进程</h2>

<p>判断是否需要多进程，需要视具体情况而定。</p>

<h3>内存限制</h3>

<ul>
<li>研究内存占用居高不下的原因</li>
<li>如果是由内存泄漏导致，尝试解决来降低内存占用</li>
<li>如有必要，可以通过配置<a href="http://droidyue.com/blog/2015/08/01/dive-into-android-large-heap/">largeHeap</a>尝试解决</li>
</ul>


<p>除了内存限制之外，还需要考虑是否真的需要独立于主进程来执行某些操作。</p>

<h2>关于android:process的其他问题</h2>

<p>在android:process部分我们提到，如果这个属性值以小写字母开头，那么就是全局的进程，可以被其他应用共用。</p>

<p>所谓的共用，指的是不同的App的组件运行在同一个指定的进程中。</p>

<h3>准备条件</h3>

<p>受制于Android系统的安全机制，我们需要做到以下两个准备条件才可以。</p>

<ul>
<li>这个应用使用同样的签名</li>
<li>两个应用指定同一个android:sharedUserId的值</li>
</ul>


<h3>具体示例</h3>

<p>第一个App的Manifest文件，AnotherActivity运行在名为droidyue.com的进程中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>          <span class="na">package=</span><span class="s">&quot;com.droidyue.androidmutipleprocesssample&quot;</span>
</span><span class='line'>        <span class="na">android:sharedUserId=</span><span class="s">&quot;droidyue.com&quot;</span>
</span><span class='line'>    <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;application</span>
</span><span class='line'>            <span class="na">android:name=</span><span class="s">&quot;.MyApplication&quot;</span>
</span><span class='line'>            <span class="na">android:allowBackup=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:icon=</span><span class="s">&quot;@mipmap/ic_launcher&quot;</span>
</span><span class='line'>            <span class="na">android:label=</span><span class="s">&quot;@string/app_name&quot;</span>
</span><span class='line'>            <span class="na">android:supportsRtl=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:theme=</span><span class="s">&quot;@style/AppTheme&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;.AnotherActivity&quot;</span> <span class="na">android:process=</span><span class="s">&quot;droidyue.com&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/application&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个App的Manifest文件，SecondActivity运行在名为droidyue.com的进程中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.example.jishuxiaoheiwu.accessfromanotherprocess&quot;</span>
</span><span class='line'>    <span class="na">android:sharedUserId=</span><span class="s">&quot;droidyue.com&quot;</span>
</span><span class='line'>    <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;application</span>
</span><span class='line'>        <span class="na">android:allowBackup=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:icon=</span><span class="s">&quot;@mipmap/ic_launcher&quot;</span>
</span><span class='line'>        <span class="na">android:label=</span><span class="s">&quot;@string/app_name&quot;</span>
</span><span class='line'>        <span class="na">android:supportsRtl=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:theme=</span><span class="s">&quot;@style/AppTheme&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;.SecondActivity&quot;</span>
</span><span class='line'>            <span class="na">android:process=</span><span class="s">&quot;droidyue.com&quot;</span>
</span><span class='line'>            <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/application&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的AnotherActivity和SecondActivity会运行在一个名为droidyue.com的进程中，尽管他们位于不同的App中。</p>

<p>但是这种共用进程的方式会引发很多问题，不太建议大家使用。</p>

<p>以上就是我关于Android中多进程的一些浅显的研究，如有问题，欢迎指正。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个事半功倍的Java反射库]]></title>
    <link href="http://droidyue.com/blog/2017/01/09/joor-examples/"/>
    <updated>2017-01-09T19:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/01/09/joor-examples</id>
    <content type="html"><![CDATA[<p>在Java和Android中，我们常常会使用反射来达到一些兼容的目的。Java原生提供的反射很是麻烦，使用起来很是不方便。比如我们想要调UserManager的静态方法get，使用原生的实现如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="n">UserManager</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;get&quot;</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>实现起来好不麻烦。这其中</p>

<ul>
<li>需要确定方法名和参数来获取对应的Method对象</li>
<li>设置Method对象的assessible为true</li>
<li>调用invoke方法，并且传入对应的参数</li>
<li>捕获其中可能抛出来的一连串异常</li>
</ul>


<p>那么反射能简单点么，当然，而且还会简单很多。</p>

<p>这就是本文想要介绍的，jOOR(Java Object Oriented Reflection)，它是一个对java.lang.reflect包的简单封装，使得我们使用起来更加直接和方便。</p>

<p>使用jOOR，上面的代码可以缩短成一行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Reflect</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">UserManager</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">call</span><span class="o">(</span><span class="s">&quot;get&quot;</span><span class="o">,</span> <span class="n">getApplicationContext</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>依赖</h2>

<ul>
<li>jOOR没有依赖。</li>
<li>使用jOOR只需要将这两个文件(<a href="https://github.com/jOOQ/jOOR/blob/master/jOOR/src/main/java/org/joor/Reflect.java">Reflect.java</a>，<a href="https://github.com/jOOQ/jOOR/blob/master/jOOR/src/main/java/org/joor/ReflectException.java">ReflectException.java</a>)，加入工程即可。</li>
</ul>


<h2>API介绍</h2>

<h3>Reflect</h3>

<ul>
<li>Reflect.on 包裹一个类或者对象，表示在这个类或对象上进行反射，类的值可以使Class,也可以是完整的类名（包含包名信息）</li>
<li>Reflect.create 用来调用之前的类的构造方法，有两种重载，一种有参数，一种无参数</li>
<li>Reflect.call  方法调用，传入方法名和参数，如有返回值还需要调用get</li>
<li>Reflect.get  获取（field和method返回）值相关，会进行类型转换，常与call和field组合使用</li>
<li>Reflect.field 获取属性值相关，需要调用get获取该值</li>
<li>Reflect.set 设置属性相关。</li>
</ul>


<h3>ReflectException</h3>

<p>引入ReflectException避免了我们去catch过多的异常，也减少了纵向代码量，使得代码简洁不少。ReflectException抛出，可能是发生了以下异常。</p>

<ul>
<li>ClassNotFoundException</li>
<li>IllegalAccessException</li>
<li>IllegalArgumentException</li>
<li>InstantiationException</li>
<li>InvocationTargetException</li>
<li>NoSuchMethodException</li>
<li>NoSuchFieldException</li>
<li>SecurityException</li>
</ul>


<p>除此之外，ReflectException属于unchecked 异常，语法上不需要显式进行捕获，但是也需要根据实际情况，斟酌是否进行显式捕获该异常。</p>

<h2>使用示例</h2>

<h3>创建实例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">Reflect</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>访问属性（public,protected,package,private均可）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">char</span> <span class="n">pathSeparatorChar</span> <span class="o">=</span> <span class="n">Reflect</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">File</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;/sdcard/droidyue.com&quot;</span><span class="o">).</span><span class="na">field</span><span class="o">(</span><span class="s">&quot;pathSeparatorChar&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>修改属性(final属性也可以修改)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">setValue</span> <span class="o">=</span> <span class="n">Reflect</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">File</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;/sdcard/drodiyue.com&quot;</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">,</span> <span class="s">&quot;fakepath&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>调用方法（public,protected,package,private均可）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArrayList</span> <span class="n">arrayList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'><span class="n">arrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">arrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;World&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Reflect</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">arrayList</span><span class="o">).</span><span class="na">call</span><span class="o">(</span><span class="s">&quot;hugeCapacity&quot;</span><span class="o">,</span> <span class="mi">12</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实现原理</h2>

<blockquote><p>Reflect实际是对原生java reflect进行封装，屏蔽了无关细节。</p></blockquote>

<p>以fields方法为例，其内部实现可以看出是调用了java原生提供的反射相关的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Reflect</span><span class="o">&gt;</span> <span class="n">fields</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Reflect</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Reflect</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">type</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">isClass</span> <span class="o">^</span> <span class="n">Modifier</span><span class="o">.</span><span class="na">isStatic</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">result</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>
</span><span class='line'>              <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">field</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">type</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>库地址</h2>

<ul>
<li><a href="https://github.com/jOOQ/jOOR">jOOR</a></li>
</ul>


<p>以上就是这些，希望jOOR可以对大家的开发日常有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么程序员应该要尝试写一写博客]]></title>
    <link href="http://droidyue.com/blog/2017/01/02/why-every-programmer-should-try-to-write-blogs/"/>
    <updated>2017-01-02T19:59:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/01/02/why-every-programmer-should-try-to-write-blogs</id>
    <content type="html"><![CDATA[<p>作为程序员，最平常不过的就是敲代码了。然也，这是我们自身以及外界对我们最朴实的认知。在编码过程中，我们可能会遇到并解决掉一些问题，积累经验和心得，有的人选择用自然语言记录下来，形成博客，而大多数人往往不会做这种记录。</p>

<p>本文将试图探讨，为什么程序员都应该尝试记录自己遇到的问题，经验和心得，以及为什么我们需要以公开的博客的形式来展现。</p>

<!--more-->


<p>首先，做个简单的自我介绍，我是一名 Android 开发，在大学时候受到当时的创新工场首席布道师 蔡学镛 的一篇微博教诲，开始尝试写技术博客。先前在csdn写一些简单的总结，最后自己开始维护一个独立的博客，名为<a href="http://droidyue.com">技术小黑屋</a>。该博客维护将近4年多。专注于书写Java 和 Android 的技术文章，在开发者头条和稀土掘金有着大量的关注，并且在droidcon和GDG做过多次主题分享。</p>

<p>闲话休叙，进入正题，来看一看为什么我觉得程序员应该尝试写博客。</p>

<h2>记录与备忘</h2>

<p>在人类的发展历史上，语言往往早于文字的出现。一个简单的例子，在古代的日本，人们只有语言，即只能听和说，但是缺乏与语言进行映射的文字。而这一时期最大的问题也莫过于无法使用文字来记录很多信息。直到大化革新，从中国隋唐时期开始引入汉字，这一问题才得到解决。</p>

<p>为什么要引出上面的这段话，因为如果我们做一个类比，就会发现这和写文章总结有着相似之处。当我们解决了一个问题或者习得了一项经验，如果没有记录下来，那么其实就与只有语言没有文字的古人无异。当你的信息被记录下来，才是所谓的进步。</p>

<p>举个更贴切的现实情况：</p>

<blockquote><p>比如有一天，我花了三个小时解决了一个问题，之后没有进行任何记录。</p>

<p>过了几个月之后，同样的问题出现，我这是可能会再次花半个小时或一个小时来解决。</p>

<p>如果我当时进行了合理的记录，可能我只需要花10分钟就能搞定这个问题。</p></blockquote>

<p>用一段比较技术的比喻是:</p>

<p><strong>大脑中的记忆仿若缓存，不知何时就会被忘记（清理）。而记录下来的文章则如写入硬盘般持久</strong>。</p>

<h2>深入理解、掌握技术的体现</h2>

<p>如果我们想要写文章并且分享给他人，势必要拿出我们的最高的水平，就要把讲解的内容研究得滚瓜烂熟，写出的文章也要句斟字酌。</p>

<p>举个简单的例子。Android中有一个用于存取数据的常用的实现为SharedPreferences。有很多人会这样觉得：</p>

<ul>
<li>它不就是存取很多类似配置时候使用么？</li>
<li>使用起来很简单啊，这有什么好写的。</li>
</ul>


<p>这种回答往往是仅仅站在使用的角度来看的，其实一个SharedPreference有着很大的学问：</p>

<ul>
<li>SharedPreference实现了内存与外存的映射，即如何实现？</li>
<li>它提供了同步的commit，和异步的apply用来保存数据，为什么提供两种，同步会阻塞线程？异步会不会有错序写入的问题？</li>
<li>为什么registerOnSharedPreferenceChangeListener 的Javadoc说 不会持有listener的强引用？</li>
</ul>


<p>当你主观上想要写好一篇文章时，你就会发散的想问题，去研究这个东西的源码，并结合自己遇到的问题或者经验，来努力写好这篇文章。</p>

<p>当你写一篇，两篇，三五篇，七篇八篇九十篇，你的知识体系也会逐渐的完善，当然这其中每篇都应该包含了你对其中技术的深入理解。</p>

<h2>发现更优解和不足</h2>

<blockquote><p>两个苹果交换后每人只有一个，但两个想法交换后，每个人都有两个想法</p></blockquote>

<p>当我们把文章写出来，挂到博客上，被被人看见之后，很有可能从别人的反馈中得到更优解或不足。</p>

<p>举个例子，我在写<a href="http://droidyue.com/blog/2016/08/22/before-you-buy-raspberry-pi/">《树莓派入手指南》</a>总，提到TF卡即SD卡，不久后得到了这样的纠正。这就纠正了我的错误认知。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/tfcard.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/tfcard.png" /></p>

<p>在我的<a href="http://droidyue.com/blog/2015/11/01/thinking-about-android-log/">《关于Android Log的一些思考》</a> 文章评论中，得到了很多更优的反馈，比如
<img src="http://7jpolu.com1.z0.glb.clouddn.com/better_idea.jpeg" alt="http://7jpolu.com1.z0.glb.clouddn.com/better_idea.jpeg" /></p>

<p>所以，写出博客，收益的不只是别人，还有自己。</p>

<h2>技术应该是开放的</h2>

<p>如果我写出来分享了，别人会了，那么岂不是我的竞争力下降了？</p>

<p>在编程中，几乎不存在这种狭隘的“教会徒弟，饿死师傅”情况，相反，越是分享，越是对技术开放的人，其收获也是越大，成就也是越大。</p>

<p>源码都可以开发，技术理应也是开放的。</p>

<h2>其他的好处</h2>

<ul>
<li>个人名气提升</li>
<li>知识变现</li>
<li>求职</li>
<li>培养自己坚持的习惯</li>
</ul>


<p>首先，写博客可以算作是提升个人名气的一种形式，通过分享知识经验，做到了帮助别人，你的名气与品牌会被创建并扩大。</p>

<p>再次，当你有了足够的名气时，你会收到类似网站广告，（付费）演讲邀请，录制视频，出书等邀请和机会。</p>

<p>除此之外，在求职的时候，如果在你的简历上附加了博客的内容，往往会得到更高的通过率，因为这样可能会给面试官留下善于总结，深入研究问题的好印象。</p>

<p>长期坚持写博客，会有助于你培养好的习惯，慢慢的做事情也会有耐心，自己就越来越能控制自己。</p>

<h2>没有时间，我怎么写</h2>

<p>程序员可能是加班相对严重的一种职业。什么996，大小周。光工作就占据了大部分的时间，剩下的时间，就是陪家人，陪女朋友。哪里有时间来写博客啊？</p>

<p>诚然，这些都是属实的。</p>

<p>但是，其实你还是可以挤出时间来的，毕竟“时间就像海绵里的水,只要愿意挤,总还是有的”。况且这段时间挤出来又不是用来浪费，而是用来提高自己，帮助自己和他人，是一件大有裨益的事情。</p>

<p>举个个人的例子，我能挤出来的时间有</p>

<ul>
<li>早晨早起上班前，大概有1个小时左右。</li>
<li>晚上下班回家，大概有1.5个小时左右。</li>
<li>周末的时候，大概有8个小时左右。</li>
</ul>


<p>个人倾向于通过早起从早晨的时间中进行压榨，来逐渐积累。</p>

<h2>为什么应该采用博客的方式而不是云笔记</h2>

<p>其实有很多人会进行记录，他们通常会记录在有道笔记或者印象笔记中。我认为的原因如下</p>

<ul>
<li>记录在笔记，更多的是为自己看，无法进行深入理解和研究</li>
<li>无法分享给广大同行，不利于发现自己看待问题的不足和更有的见解</li>
<li>无法获得类似知识变现，名气提升等益处</li>
<li>只有公开的博客，才能解决上述问题</li>
</ul>


<p>以上就是我认为程序员都应该尝试写一写博客的观点，除此之外，我在知乎Live将会实时回答<a href="https://www.zhihu.com/lives/796775894273363968">《程序员如何写好一篇技术文章》</a>。</p>

<p>本次Live将会讲解：</p>

<ul>
<li>写好技术文章有什么好处？</li>
<li>什么样的技术文章算是「好文章」？</li>
<li>如何书写出好的技术文章？</li>
<li>如何在写技术文章的时候，做到高质又高产？</li>
</ul>


<p>并回答这些问题：</p>

<ul>
<li>如何在平时更好地积累素材和感悟。</li>
<li>写博客费事费力，如何长时间坚持？</li>
<li>如果做到文章吸引人？</li>
<li>如何解决博客与工作时间的冲突问题</li>
<li>博客写了很久了，但是没人看，怎么办</li>
</ul>


<p>如果你感兴趣，或者有问题想要提问，欢迎参与。</p>

<p>参与地址： <a href="https://www.zhihu.com/lives/796775894273363968">https://www.zhihu.com/lives/796775894273363968</a></p>

<p>结尾，希望更多的程序员拿起笔来，写写博客，Let&rsquo;s make a difference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2016年总结]]></title>
    <link href="http://droidyue.com/blog/2017/01/01/my-2016-summary/"/>
    <updated>2017-01-01T13:08:00+08:00</updated>
    <id>http://droidyue.com/blog/2017/01/01/my-2016-summary</id>
    <content type="html"><![CDATA[<p>岁末年初，辞旧迎新，这一年转瞬即逝，2016年里经历了很多，虽不及大书特写，但还是有必要记录一下，以作日后回顾。</p>

<!--more-->


<h3>读书</h3>

<p>2016年，由于更换了工作，通勤方式由原来的公交转为了地铁。于是重拾了已经吃灰多年的PaperWhite。</p>

<p>这一年读了十几本书，抽取一些简单列举</p>

<ul>
<li>朴素真实的传记,非鸡汤的《褚时健传》</li>
<li>读完让人“中毒”的《断舍离》</li>
<li>年度最火的东野圭吾的《解忧杂货店》</li>
<li>简约不简单的历史书 《你一定爱读的极简欧洲史》</li>
<li>浅显易懂的科普书籍 《计算机是怎样跑起来的》</li>
<li>硅谷IT科技公司的史书 《浪潮之巅》</li>
<li>关于Linux创始人的传记 《只是为了好玩:Linux之父林纳斯自传》</li>
<li>欧洲文学史上第一部现实主义巨著《十日谈》</li>
<li>研究日本民族可得不读的《菊与刀》</li>
<li>日式美学，川端康成诺奖作品《雪国》</li>
<li>清纯，略带忧伤的完美爱情范本 《伊豆的舞女》</li>
<li>冯梦龙的劝人行善的白话小说 《喻世明言》</li>
<li>一场颠覆诡异的西游记解读之旅，一部颠覆你对西游记认知的书籍。《煮酒探西游》</li>
</ul>


<p>更多详细的读书列表，请访问<a href="http://droidyue.com/reading/">读书</a></p>

<p>新的2017年，希望可以继续保持读书的习惯，读取更多的好书，迎接更强大的自己。</p>

<h3>结婚</h3>

<p>2016年10月2号，完成了一件人生大事，我结婚了。</p>

<blockquote><p>彼此相恋将近四载，</p>

<p>跑完了爱情马拉松。</p>

<p>我变成了她的老公，</p>

<p>她变成了我的老婆。</p></blockquote>

<p>作为一个木讷的程序，肉麻兮兮的话我总是不太会说。</p>

<blockquote><p>只愿此生长长久久，彼此相依。</p></blockquote>

<h3>个人的分享</h3>

<p>这一年，在线上和线下做了几场分享：</p>

<ul>
<li>stuq线上的主题分享<a href="http://droidyue.com/blog/2016/08/01/avoid-creating-unnecesssary-objects-in-android/">《如何在Android中避免创建不必要的对象》</a>和<a href="http://droidyue.com/blog/2016/10/24/notes-for-an-android-qa/">相关答疑</a>。</li>
<li>GDG Beijing Android Meetup 线下分享<a href="http://droidyue.com/blog/2016/08/14/android-annnotation/">《探究Android中的注解》</a></li>
<li>Droidcon Beijing 2016 线下分享<a href="http://droidyue.com/blog/2016/11/23/memory-leaks-in-android/">《Memory Leaks In Android》</a></li>
<li>GDG Beijing Devfest 再次线下分享了和droidcon北京相同的主题。</li>
<li>创建了我的第一个知乎Live,<a href="https://www.zhihu.com/lives/796775894273363968">程序员如何写好一篇技术文章？</a>，即将开讲。</li>
</ul>


<h3>日本</h3>

<p>作为蜜月旅行，选择了东瀛日本作为目的地。</p>

<p>从初中开始自学日语，再到大学选修日语课，不断的看日剧，毕业之后工作中仍然坚持刷题，终于一举通过了日本语等级考试，虽然level不高。因而去日本旅游也算是实现了自己多年的期盼之一。</p>

<p>客观的讲，日本确实是一个很美好的国度：</p>

<ul>
<li>在日本的街道上，你几乎听不到汽车鸣笛</li>
<li>自来水拧开可以直接喝</li>
<li>无时无刻无处不在的微笑</li>
<li>很少有垃圾桶，环境却异常干净</li>
</ul>


<p>然而，我始终觉得自己可能只是一个游客，无论我学习了日语，研究了很多日本历史，可能也许我这辈子也只可能在国内。这或许就是为什么人相信宿命论的缘由吧。</p>

<blockquote><p>过完这一年，感觉自己的责任更重了，</p>

<p>有了家庭，需要考虑的事情远远要多了起来。</p>

<p>年龄大了，需要做事更加沉稳，不再意气用事</p>

<p>时间在马不停蹄地走，人亦要前进。</p>

<p>不忘初心，方得始终。</p>

<p>以上。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于对象池的一些分析]]></title>
    <link href="http://droidyue.com/blog/2016/12/12/dive-into-object-pool/"/>
    <updated>2016-12-12T18:57:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/12/12/dive-into-object-pool</id>
    <content type="html"><![CDATA[<p>在日常的开发工作中，我们可能使用或者听说过对象池，线程池以及连接池。本文将介绍对象池的产生缘由，具体实现细节，以及需要注意的问题。</p>

<h2>什么是对象池（模式）</h2>

<ul>
<li>对象池（模式）是一种创建型设计模式</li>
<li>它持有一个初始化好的对象的集合，将对象提供给调用者。</li>
</ul>


<!--more-->


<h2>对象池的目的</h2>

<ul>
<li>减少频繁创建和销毁对象带来的成本，实现对象的缓存和复用</li>
</ul>


<h2>什么条件下使用对象池</h2>

<ul>
<li>创建对象的成本比较大，并且创建比较频繁。比如线程的创建代价比较大，于是就有了常用的线程池。</li>
</ul>


<h2>对象池的例子</h2>

<p>Android中使用对象池的应用有很多,比如下面的这些都是应用了该模式</p>

<ul>
<li>Handler处理的Message</li>
<li>线程池执行器ThreadPoolExecutor</li>
<li>控件TabLayout</li>
<li>控制TypedArray的Resources</li>
</ul>


<p>以一个简单的获取SytledAttributions代码为例，展示一下对象池的应用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Text colors/sizes come from the text appearance first</span>
</span><span class='line'><span class="kd">final</span> <span class="n">TypedArray</span> <span class="n">ta</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">obtainStyledAttributes</span><span class="o">(</span><span class="n">mTabTextAppearance</span><span class="o">,</span>
</span><span class='line'>    <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">appcompat</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextAppearance</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mTabTextSize</span> <span class="o">=</span> <span class="n">ta</span><span class="o">.</span><span class="na">getDimensionPixelSize</span><span class="o">(</span>
</span><span class='line'>            <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">appcompat</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextAppearance_android_textSize</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mTabTextColors</span> <span class="o">=</span> <span class="n">ta</span><span class="o">.</span><span class="na">getColorStateList</span><span class="o">(</span>
</span><span class='line'>            <span class="n">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v7</span><span class="o">.</span><span class="na">appcompat</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">TextAppearance_android_textColor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ta</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>想必这段代码都可能写过，那就是在一开始的时候，我们都会被告诫：使用TypedArray结束的时候，一定要调用它的recycle方法。</p>

<p>回想起来，当时自己还很疑惑为什么要这么规定，其实很简单，它使用了对象池。</p>

<blockquote><p>调用者通过obtain方法从对象池中获取对象，然后使用完毕后，需要使用recycle方法返还给对象池。</p></blockquote>

<h2>三种角色</h2>

<p>上面的介绍中，也或多或少提到了下面的三种角色</p>

<ul>
<li>Reusable 可重用的对象</li>
<li>Client   调用者</li>
<li>ReusablePool 可重用的对象的池</li>
</ul>


<h3>Reusable</h3>

<ul>
<li>创建的成本较大，比如线程或者数据库连接</li>
<li>被ReusablePool持有</li>
<li>被Client消费使用，使用完成应该被返回到ReusablePool</li>
</ul>


<h3>ReusablePool</h3>

<ul>
<li>维护一定数量的Reusable，提供给客户端使用</li>
<li>提供<code>aquire</code>或者<code>obtain</code>等方法，便于客户端请求Reusable</li>
<li>提供<code>recycle</code>或者<code>release</code>等方法，便于客户端使用完毕后，将Reusable对象奉还。</li>
</ul>


<h3>Client</h3>

<ul>
<li>请求ReusablePool或者Reusable对象</li>
<li>使用完毕Reusable对象后，返回给ReusablePool</li>
</ul>


<h2>对象池无可用的对象时，再次对象请求，可能的表现行为</h2>

<ul>
<li>如果池的大小可以增长，创建新的对象并返回给client</li>
<li>阻塞client调用，直到有可用的对象回收并返回</li>
<li>抛出异常，通知client</li>
<li>返回null给client</li>
</ul>


<h2>同步处理</h2>

<p>在多线程的环境下，我们也会使用对象池。因此做好必要的同步是必须的。</p>

<p>要进行同步处理的通常是这两个方法</p>

<ul>
<li>aquire或obtain 负责返回对象</li>
<li>release或recycle 负责回收对象</li>
</ul>


<p>下面是一段进行同步处理了的对象池的源码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SynchronizedPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">SimplePool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">mLock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Creates a new instance.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * @param maxPoolSize The max pool size.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * @throws IllegalArgumentException If the max pool size is less than zero.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">SynchronizedPool</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxPoolSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">maxPoolSize</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">T</span> <span class="nf">acquire</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mLock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">release</span><span class="o">(</span><span class="n">T</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mLock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">release</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码为Android中<code>android.support.v4.util</code>提供的Pools中的<code>SynchronizedPool</code>的实现，它使用了synchronized关键字实现同步问题。</p>

<h2>对象池与单例模式</h2>

<p>为了统一管理对象，建议将对象池设为单例。</p>

<p>应用单例模式的时候，需要确保在多线程并发的情况下保持唯一的实例创建，具体实现方案，可以参考<a href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/">单例这种设计模式</a></p>

<h2>池的大小选择</h2>

<ul>
<li>通常情况下，我们需要控制对象池的大小</li>
<li>如果对象池没有限制，可能导致对象池持有过多的闲置对象，增加内存的占用</li>
<li>如果对象池闲置过小，没有可用的对象时，会造成之前<code>对象池无可用的对象时，再次请求</code>出现的问题</li>
<li>对象池的大小选取应该结合具体的使用场景，结合数据（触发池中无可用对象的频率）分析来确定。</li>
</ul>


<h2>空间换时间的折中</h2>

<ul>
<li>本质上，对象池属于空间换时间的折中</li>
<li>它通过缓存初始化好的对象来提升调用者请求对象的响应速度。</li>
<li>除此之外，折中（tradeoff）是软件开发中的一个重要的概念，会贯穿整个软件开发过程中。</li>
</ul>


<h2>对象池好处</h2>

<ul>
<li>提升了client获取对象的响应速度，比如单个线程和资源连接的创建成本都比较大。</li>
<li>一定程度上减少了GC的压力。</li>
<li>对于实时性要求较高的程序有很大的帮助</li>
</ul>


<h2>对象池弊端</h2>

<h3>脏对象的问题</h3>

<p>所谓的脏对象就是指的是当对象被放回对象池后，还保留着刚刚被客户端调用时生成的数据。</p>

<p>脏对象可能带来两个问题</p>

<ul>
<li>脏对象持有上次使用的引用，导致内存泄漏等问题。</li>
<li>脏对象如果下一次使用时没有做清理，可能影响程序的处理数据。</li>
</ul>


<h3>生命周期的问题</h3>

<p>处于对象池中的对象生命周期要比普通的对象要长久。维持大量的对象也是比较占用内存空间的。</p>

<p>以ThreadPoolExecutor为例，它提供了<code>allowCoreThreadTimeOut</code>和<code>setKeepAliveTime</code>两种方法，可以在超时后销毁核心线程。我们在具体的实践中可以参考这个策略。</p>

<h3>异常处理问题</h3>

<p>相对来说，使用对象池client调用也会复杂一些，比如请求对象时有可能出现的阻塞，异常或者null值。这些都需要我们做一些额外的处理，来确保程序的正常运行。</p>

<p>除此之外，还有上面的提到的两个问题，他们分别是</p>

<ul>
<li>同步问题</li>
<li>池大小设置问题</li>
</ul>


<p>所以当我们想要使用对象池时，需要谨慎的衡量并准确的实现，享受它带来的好处，并避免其带来的问题。</p>

<h2>参考文章</h2>

<ul>
<li><a href="http://www.oodesign.com/object-pool-pattern.html">http://www.oodesign.com/object-pool-pattern.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac为外接显示器调出更多分辨率]]></title>
    <link href="http://droidyue.com/blog/2016/12/06/mac-show-more-resolutions/"/>
    <updated>2016-12-06T09:13:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/12/06/mac-show-more-resolutions</id>
    <content type="html"><![CDATA[<p>最近开始使用媳妇的MBP写代码，接上了买了有一段时间的可以竖屏的戴尔显示器，本以为可以开心写代码了。结果发现还是有问题。</p>

<!--more-->


<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/less_fenbianlv.png" alt="没合适的分辨率" /></p>

<p>我的显示器是1920 * 1080的分辨率，结果找不到，只有上图的两个。</p>

<p>于是点了一下1280 * 1024 发现变得严重拉伸变形，瞬间蓝瘦香菇。</p>

<p>后来试了几个工具都不太好使，总感觉很是麻烦。</p>

<p>无意中Google到了一个小窍门，能调出更多的分辨率来。</p>

<ol>
<li><p>进入显示设置界面，如下图
<img src="http://7xr357.com1.z0.glb.clouddn.com/less_resolution.png" alt="Display Settings" /></p></li>
<li><p>安装Option键，然后点击Scaled选择框，就会出现更多的分辨率。如下图
<img src="http://7xr357.com1.z0.glb.clouddn.com/more_resolutions.png" alt="more resolutions" /></p></li>
</ol>


<p>简单记录一下，希望可以帮到别人。进行享用大显示器的乐趣吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Java中枚举Enum的深入剖析]]></title>
    <link href="http://droidyue.com/blog/2016/11/29/dive-into-enum/"/>
    <updated>2016-11-29T07:15:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/11/29/dive-into-enum</id>
    <content type="html"><![CDATA[<p>在编程语言中我们，都会接触到枚举类型，通常我们进行有穷的列举来实现一些限定。Java也不例外。Java中的枚举类型为Enum，本文将对枚举进行一些比较深入的剖析。</p>

<h2>什么是Enum</h2>

<p>Enum是自Java 5 引入的特性，用来方便Java开发者实现枚举应用。一个简单的Enum使用如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ColorEnum.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ColorEmun</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RED</span><span class="o">,</span>
</span><span class='line'>    <span class="n">GREEN</span><span class="o">,</span>
</span><span class='line'>    <span class="n">YELLOW</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColorEnum</span><span class="o">(</span><span class="n">ColorEmun</span> <span class="n">colorEnum</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//some code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">setColorEnum</span><span class="o">(</span><span class="n">ColorEmun</span><span class="o">.</span><span class="na">GREEN</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>为什么会有Enum</h2>

<p>在Enum之前的我们使用类似如下的代码实现枚举的功能.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COLOR_RED</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COLOR_GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COLOR_YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColor</span><span class="o">(</span><span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//some code here</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//调用</span>
</span><span class='line'><span class="n">setColor</span><span class="o">(</span><span class="n">COLOR_RED</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而上面的还是有不尽完美的地方</p>

<ul>
<li>setColor(COLOR_RED)与setColor(0)效果一样,而后者可读性很差,但却可以正常运行</li>
<li>setColor方法可以接受枚举之外的值,比如setColor(3),这种情况下程序可能出问题</li>
</ul>


<p>概括而言,传统枚举有如下两个弊端</p>

<ul>
<li>安全性</li>
<li>可读性,尤其是打印日志时</li>
</ul>


<p>因此Java引入了Enum,使用Enum,我们实现上面的枚举就很简单了，而且还可以轻松避免传入非法值的风险.</p>

<h2>枚举原理是什么</h2>

<p>Java中Enum的本质其实是在编译时期转换成对应的类的形式。</p>

<p>首先,为了探究枚举的原理,我们先简单定义一个枚举类,这里以季节为例,类名为<code>Season</code>,包含春夏秋冬四个枚举条目.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Season</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SPRING</span><span class="o">,</span>
</span><span class='line'>    <span class="n">SUMMER</span><span class="o">,</span>
</span><span class='line'>    <span class="n">AUTUMN</span><span class="o">,</span>
</span><span class='line'>    <span class="n">WINTER</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们使用javac编译上面的类,得到class文件.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">javac</span> <span class="n">Season</span><span class="o">.</span><span class="na">java</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后,我们利用反编译的方法来看看字节码文件究竟是什么.这里使用的工具是javap的简单命令,先列举一下这个Season下的全部元素.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">➜</span>  <span class="n">company</span> <span class="n">javap</span> <span class="n">Season</span>
</span><span class='line'><span class="nl">Warning:</span> <span class="n">Binary</span> <span class="n">file</span> <span class="n">Season</span> <span class="n">contains</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;Season.java&quot;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span> <span class="kd">extends</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Enum</span><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span> <span class="n">SPRING</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span> <span class="n">SUMMER</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span> <span class="n">AUTUMN</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span> <span class="n">WINTER</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span><span class="o">[]</span> <span class="nf">values</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">company</span><span class="o">.</span><span class="na">Season</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上反编译结果可知</p>

<ul>
<li>java代码中的Season转换成了继承自的java.lang.enum的类</li>
<li>既然隐式继承自java.lang.enum,也就意味java代码中,Season不能再继承其他的类</li>
<li>Season被标记成了final,意味着它不能被继承</li>
</ul>


<h3>static代码块</h3>

<p>使用javap具体反编译class文件,得到静态代码块相关的结果为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/company/Season</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String SPRING</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method &quot;&lt;init&gt;&quot;:(Ljava/lang/String;I)V</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Field SPRING:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">13</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/company/Season</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// String SUMMER</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method &quot;&lt;init&gt;&quot;:(Ljava/lang/String;I)V</span>
</span><span class='line'>      <span class="mi">23</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// Field SUMMER:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">26</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/company/Season</span>
</span><span class='line'>      <span class="mi">29</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">12</span>                 <span class="c1">// String AUTUMN</span>
</span><span class='line'>      <span class="mi">32</span><span class="o">:</span> <span class="n">iconst_2</span>
</span><span class='line'>      <span class="mi">33</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method &quot;&lt;init&gt;&quot;:(Ljava/lang/String;I)V</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">13</span>                 <span class="c1">// Field AUTUMN:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/company/Season</span>
</span><span class='line'>      <span class="mi">42</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">43</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">14</span>                 <span class="c1">// String WINTER</span>
</span><span class='line'>      <span class="mi">45</span><span class="o">:</span> <span class="n">iconst_3</span>
</span><span class='line'>      <span class="mi">46</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method &quot;&lt;init&gt;&quot;:(Ljava/lang/String;I)V</span>
</span><span class='line'>      <span class="mi">49</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">15</span>                 <span class="c1">// Field WINTER:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">52</span><span class="o">:</span> <span class="n">iconst_4</span>
</span><span class='line'>      <span class="mi">53</span><span class="o">:</span> <span class="n">anewarray</span>     <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// class com/company/Season</span>
</span><span class='line'>      <span class="mi">56</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">57</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>      <span class="mi">58</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Field SPRING:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">61</span><span class="o">:</span> <span class="n">aastore</span>
</span><span class='line'>      <span class="mi">62</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">63</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>      <span class="mi">64</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// Field SUMMER:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">67</span><span class="o">:</span> <span class="n">aastore</span>
</span><span class='line'>      <span class="mi">68</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">69</span><span class="o">:</span> <span class="n">iconst_2</span>
</span><span class='line'>      <span class="mi">70</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">13</span>                 <span class="c1">// Field AUTUMN:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">73</span><span class="o">:</span> <span class="n">aastore</span>
</span><span class='line'>      <span class="mi">74</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">75</span><span class="o">:</span> <span class="n">iconst_3</span>
</span><span class='line'>      <span class="mi">76</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">15</span>                 <span class="c1">// Field WINTER:Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">79</span><span class="o">:</span> <span class="n">aastore</span>
</span><span class='line'>      <span class="mi">80</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">1</span>                  <span class="c1">// Field $VALUES:[Lcom/company/Season;</span>
</span><span class='line'>      <span class="mi">83</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中</p>

<ul>
<li>0~52为实例化SPRING, SUMMER, AUTUMN, WINTER</li>
<li>53~83为创建<code>Season[]</code>数组<code>$VALUES</code>,并将上面的四个对象放入数组的操作.</li>
</ul>


<h3>values方法</h3>

<p>values方法的的返回值实际上就是上面<code>$VALUES</code>数组对象</p>

<h2>swtich中的枚举</h2>

<p>在Java中,switch-case是我们经常使用的流程控制语句.当枚举出来之后,switch-case也很好的进行了支持.</p>

<p>比如下面的代码是完全正常编译,正常运行的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Season</span> <span class="n">season</span> <span class="o">=</span> <span class="n">Season</span><span class="o">.</span><span class="na">SPRING</span><span class="o">;</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">season</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SPRING:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It&#39;s Spring&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="nl">WINTER:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It&#39;s Winter&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SUMMER:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It&#39;s Summer&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">AUTUMN:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It&#39;s Autumn&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过,通常情况下switch-case支持类似int的类型,那么它是怎么做到对Enum的支持呢,我们反编译上述方法看一下字节码的真实情况.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// Field com/company/Season.SPRING:Lcom/company/Season;</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Field com/company/Main$1.$SwitchMap$com$company$Season:[I</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Method com/company/Season.ordinal:()I</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">iaload</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">tableswitch</span>   <span class="o">{</span> <span class="c1">// 1 to 4</span>
</span><span class='line'>                     <span class="mi">1</span><span class="o">:</span> <span class="mi">44</span>
</span><span class='line'>                     <span class="mi">2</span><span class="o">:</span> <span class="mi">55</span>
</span><span class='line'>                     <span class="mi">3</span><span class="o">:</span> <span class="mi">66</span>
</span><span class='line'>                     <span class="mi">4</span><span class="o">:</span> <span class="mi">77</span>
</span><span class='line'>               <span class="k">default</span><span class="o">:</span> <span class="mi">85</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="mi">44</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">47</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// String It&#39;s Spring</span>
</span><span class='line'>      <span class="mi">49</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">52</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">85</span>
</span><span class='line'>      <span class="mi">55</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">58</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String It&#39;s Winter</span>
</span><span class='line'>      <span class="mi">60</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">63</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">85</span>
</span><span class='line'>      <span class="mi">66</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">69</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// String It&#39;s Summer</span>
</span><span class='line'>      <span class="mi">71</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">74</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">85</span>
</span><span class='line'>      <span class="mi">77</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">80</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// String It&#39;s Autumn</span>
</span><span class='line'>      <span class="mi">82</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">88</span><span class="o">:</span> <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意上面代码块有这样的一段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">4</span>                  <span class="c1">// Method com/company/Season.ordinal:()I</span>
</span></code></pre></td></tr></table></div></figure>


<p>事实果真如此,在switch-case中,还是将Enum转成了int值(通过调用Enum.oridinal()方法)</p>

<h2>枚举与混淆</h2>

<p>在Android开发中,进行混淆是我们在发布前必不可少的工作,混下后,我们能增强反编译的难度,在一定程度上保护了增强了安全性.</p>

<p>而开发人员处理混淆更多的是将某些元素加入不混淆的名单,这里枚举就是需要排除混淆的.</p>

<p>在默认的混淆配置文件中,已经加入了关于对枚举混淆的处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">For</span> <span class="n">enumeration</span> <span class="n">classes</span><span class="o">,</span> <span class="n">see</span> <span class="nl">http:</span><span class="c1">//proguard.sourceforge.net/manual/examples.html#enumerations</span>
</span><span class='line'><span class="o">-</span><span class="n">keepclassmembers</span> <span class="kd">enum</span> <span class="o">*</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">**[]</span> <span class="n">values</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">**</span> <span class="n">valueOf</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于为什么要保留values()方法和valueOf()方法，请参考文章<a href="http://droidyue.com/blog/2016/07/10/understanding-android-obfuscated-code-by-proguard/">读懂 Android 中的代码混淆</a> 关于枚举的部分</p>

<h2>使用proguard优化</h2>

<p>使用Proguard进行优化，可以将枚举尽可能的转换成int。配置如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">optimizations</span> <span class="n">class</span><span class="o">/</span><span class="n">unboxing</span><span class="o">/</span><span class="kd">enum</span>
</span></code></pre></td></tr></table></div></figure>


<p>确保上述代码生效，需要确proguard配置文件不包含<code>-dontoptimize</code>指令。</p>

<p>当我们使用gradlew打包是，看到类似下面的输出，即<code>Number of unboxed enum classes:1</code>代表已经将一个枚举转换成了int的形式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optimizing</span><span class="o">...</span>
</span><span class='line'>  <span class="n">Number</span> <span class="n">of</span> <span class="n">finalized</span> <span class="nl">classes:</span>                 <span class="mi">0</span>   <span class="o">(</span><span class="n">disabled</span><span class="o">)</span>
</span><span class='line'>  <span class="n">Number</span> <span class="n">of</span> <span class="n">unboxed</span> <span class="kd">enum</span> <span class="nl">classes:</span>              <span class="mi">1</span>
</span><span class='line'>  <span class="n">Number</span> <span class="n">of</span> <span class="n">vertically</span> <span class="n">merged</span> <span class="nl">classes:</span>         <span class="mi">0</span>   <span class="o">(</span><span class="n">disabled</span><span class="o">)</span>
</span><span class='line'>  <span class="n">Number</span> <span class="n">of</span> <span class="n">horizontally</span> <span class="n">merged</span> <span class="nl">classes:</span>       <span class="mi">0</span>   <span class="o">(</span><span class="n">disabled</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>枚举单例</h2>

<p>单例模式是我们在日常开发中可谓是最常用的设计模式.</p>

<p>然后要设计好单例模式,无非考虑一下几点</p>

<ul>
<li>确保只有唯一实例,不多创建多余实例</li>
<li>确保实例按需创建.</li>
</ul>


<p>因此传统的做法想要实现单例,大致有一下几种</p>

<ul>
<li>饿汉式加载</li>
<li>懒汉式synchronize和双重检查</li>
<li>利用java的静态加载机制</li>
</ul>


<p>相比上述的方法,使用枚举也可以实现单例,而且还更加简单.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">AppManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">tagName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTag</span><span class="o">(</span><span class="n">String</span> <span class="n">tagName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">tagName</span> <span class="o">=</span> <span class="n">tagName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTag</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tagName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用起来也更加简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AppManager</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>枚举如何确保唯一实例</h3>

<p>因为获得实例只能通过<code>AppManager.INSTANCE</code></p>

<p>下面的方式是不可以的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AppManager</span> <span class="n">appManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppManager</span><span class="o">();</span> <span class="c1">//compile error</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于单例模式，可以阅读<a href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/">单例这种设计模式</a>了解更多。</p>

<h2>(Android中)该不该用枚举</h2>

<p>既然上面提到了枚举会转换成类，这样理论上造成了下面的问题</p>

<ul>
<li>增加了dex包的大小，理论上dex包越大，加载速度越慢</li>
<li>同时使用枚举，运行时的内存占用也会相对变大</li>
</ul>


<p>关于上面两点的验证，秋百万已经做了详细的论证，大家可以参考这篇文章<a href="https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/">《Android 中的 Enum 到底占多少内存？该如何用？》</a></p>

<p>关于枚举是否使用的结论，大家可以参考</p>

<ul>
<li>如果你开发的是Framework不建议使用enum</li>
<li>如果是简单的enum，可以使用int很轻松代替，则不建议使用enum</li>
<li>另外，如果是Android中，可以使用下面介绍的枚举注解来实现。</li>
<li>除此之外，我们还需要对比可读性和易维护性来与性能进行衡量，从中进行做出折中</li>
</ul>


<h2>在Android中的替代</h2>

<p>Android中新引入的替代枚举的注解有IntDef和StringDef,这里以IntDef做例子说明一下.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Colors</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@IntDef</span><span class="o">({</span><span class="n">RED</span><span class="o">,</span> <span class="n">GREEN</span><span class="o">,</span> <span class="n">YELLOW</span><span class="o">})</span>
</span><span class='line'>    <span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">SOURCE</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nd">@interface</span> <span class="n">LightColors</span><span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>声明必要的int常量</li>
<li>声明一个注解为LightColors</li>
<li>使用@IntDef修饰LightColors,参数设置为待枚举的集合</li>
<li>使用@Retention(RetentionPolicy.SOURCE)指定注解仅存在与源码中,不加入到class文件中</li>
</ul>


<p>比如我们用来标注方法的参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setColor</span><span class="o">(</span><span class="nd">@Colors.LightColors</span> <span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;setColor color=&quot;</span> <span class="o">+</span> <span class="n">color</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用的该方法的时候</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">setColor</span><span class="o">(</span><span class="n">Colors</span><span class="o">.</span><span class="na">GREEN</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Android中的枚举，可以参考<a href="http://droidyue.com/blog/2016/08/14/android-annnotation/">探究Android中的注解</a></p>

<p>以上就是我对Java中enum的一些深入的剖析，欢迎大家不吝赐教。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[系统剖析Android中的内存泄漏]]></title>
    <link href="http://droidyue.com/blog/2016/11/23/memory-leaks-in-android/"/>
    <updated>2016-11-23T07:13:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/11/23/memory-leaks-in-android</id>
    <content type="html"><![CDATA[<p>作为Android开发人员，我们或多或少都听说过内存泄漏。那么何为内存泄漏，Android中的内存泄漏又是什么样子的呢，本文将简单概括的进行一些总结。</p>

<p>关于内存泄露的定义，我可以理解成这样</p>

<blockquote><p>没有用的对象无法回收的现象就是内存泄露</p></blockquote>

<!--more-->


<p>如果程序发生了内存泄露，则会带来如下的问题</p>

<ul>
<li>应用可用的内存减少，增加了堆内存的压力</li>
<li>降低了应用的性能，比如会触犯更频繁的GC</li>
<li>严重的时候可能会导致内存溢出错误，即OOM Error</li>
</ul>


<p>在正式介绍内存泄露之前，我们有必要介绍一些必要的预备知识。</p>

<h2>预备知识1： Java中的对象</h2>

<ul>
<li>当我们使用<code>new</code>指令生成对象时，堆内存将会为此开辟一份空间存放该对象</li>
<li>创建的对象可以被局部变量，实例变量和类变量引用。</li>
<li>通常情况下，类变量持有的对象生命周期最长，实例变量次之，局部变量最短。</li>
<li>垃圾回收器回收非存活的对象，并释放对应的内存空间。</li>
</ul>


<h2>预备知识2：Java中的GC</h2>

<ul>
<li>和C++不同，对象的释放不需要手动完成，而是由垃圾回收器自动完成。</li>
<li>垃圾回收器运行在JVM中</li>
<li>通常GC有两种算法：引用计数和GC根节点遍历</li>
</ul>


<h3>引用计数</h3>

<ul>
<li>每个对象有对应的引用计数器</li>
<li>当一个对象被引用（被复制给变量，传入方法中）,引用计数器加1</li>
<li>当一个对象不被引用（离开变量作用域），引用计数器就会减1</li>
<li>基于这种算法的垃圾回收器效率较高</li>
<li>循环引用的问题引用计数算法的垃圾回收器无法解决。</li>
<li>主流的JVM很少使用基于这种算法的垃圾回收器实现。</li>
</ul>


<h3>GC根节点遍历</h3>

<ul>
<li>识别对象为垃圾从被称为GC 根节点出发</li>
<li>每一个被遍历的强引用可到达对象，都会被标记为存活</li>
<li>在遍历结束后，没有被标记为存活的对象都被视为垃圾，需要后续进行回收处理</li>
<li>主流的JVM一般都采用这种算法的垃圾回收器实现</li>
</ul>


<p><img src="http://7xuvjz.com1.z0.glb.clouddn.com/how_gc_works.png" alt="http://7xuvjz.com1.z0.glb.clouddn.com/how_gc_works.png" /></p>

<p>以上图为例，我们可以知道</p>

<ul>
<li>最下层的两个节点为GC Roots，即GC Tracing的起点</li>
<li>中间的一层的对象，可以强引用到达GC根节点，所以被标记为存活</li>
<li>最上层的三个对象，无法强引用达到GC根节点，所以无法标记为存活，也就是所谓的垃圾，需要被后续回收掉。</li>
</ul>


<p>上面的垃圾回收中，我们提到的两个概念，一个是GC根节点，另一个是强引用</p>

<p><strong>在Java中，可以作为GC 根节点的有</strong></p>

<ul>
<li>类，由系统类加载器加载的类。这些类从不会被卸载，它们可以通过静态属性的方式持有对象的引用。注意，一般情况下由自定义的类加载器加载的类不能成为GC Roots</li>
<li>线程，存活的线程</li>
<li>Java方法栈中的局部变量或者参数</li>
<li>JNI方法栈中的局部变量或者参数</li>
<li>JNI全局引用</li>
<li>用做同步监控的对象</li>
<li>被JVM持有的对象，这些对象由于特殊的目的不被GC回收。这些对象可能是系统的类加载器，一些重要的异常处理类，一些为处理异常预留的对象，以及一些正在执行类加载的自定义的类加载器。但是具体有哪些前面提到的对象依赖于具体的JVM实现。</li>
</ul>


<p>提到强引用，有必要系统说一下Java中的引用类型。Java中的引用类型可以分为一下四种：</p>

<ul>
<li>强引用： 默认的引用类型，例如<code>StringBuffer buffer = new StringBuffer();</code>就是buffer变量持有的为StringBuilder的强引用类型。</li>
<li>软引用：即SoftReference，其指向的对象只有在内存不足的时候进行回收。</li>
<li>弱引用：即WeakReference,其指向的对象在GC执行时会被回收。</li>
<li>虚引用：即PhantomReference,与ReferenceQueue结合，用作记录该引用指向的对象已被销毁。</li>
</ul>


<p>补充了预备知识，我们就需要具体讲一讲Android中的内存泄漏了。</p>

<h2>Android中的内存泄漏</h2>

<p>归纳而言，Android中的内存泄漏有以下几个特点：</p>

<ul>
<li>相对而言，Android中的内存泄漏更加容易出现。</li>
<li>由于Android系统为每个App分配的内存空间有限，在一个内存泄漏严重的App中，很容易导致OOM，即内存溢出错误。</li>
<li>内存泄漏会随着App的推出而消失（即进程结束）。</li>
</ul>


<p>在Android中的内存泄漏场景有很多，按照类型划分可以归纳为</p>

<ul>
<li>长期持有(Activity)Context导致的</li>
<li>忘记注销监听器或者观察者</li>
<li>由非静态内部类导致的</li>
</ul>


<p>此外，如果按照泄漏的程度，可以分为</p>

<ul>
<li>长时间泄漏，即泄漏只能等待进程退出才消失</li>
<li>短时间泄漏，被泄漏的对象后续会被回收掉。</li>
</ul>


<h3>长时间持有Activity实例</h3>

<p>在Android中，Activity是我们常用的组件，通常情况下，一个Activity会包含了一些复杂的UI视图，而视图中如果含有ImageView，则有可能会使用比较大的Bitmap对象。因而一个Activity持有的内存会相对很多，如果造成了Activity的泄漏，势必造成一大块内存无法回收，发生泄漏。</p>

<p>这里举个简单的例子，说明Activity的内存泄漏，比如我们有一个叫做AppSettings的类，它是一个单例模式的应用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mAppContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppSettings</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//some other codes</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们传入Activity作为Context参数时，则AppSettings实例会持有这个Activity的实例。</p>

<p>当我们旋转设备时，Android系统会销毁当前的Activity，创建新的Activity来加载合适的布局。如果出现Activity被单例实例持有，那么旋转过程中的旧Activity无法被销毁掉。就发生了我们所说的内存泄漏。</p>

<p>想要解决这个问题也不难，那就是使用Application的Context对象，因为它和AppSettings实例具有相同的生命周期。这里是通过使用<code>Context.getApplicationContext()</code>方法来实现。所以修改如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mAppContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppSettings</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//some other codes</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">AppSettings</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAppContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>忘记反注册监听器</h3>

<p>在Android中我们会使用很多listener，observer。这些都是作为观察者模式的实现。当我们注册一个listener时，这个listener的实例会被主题所引用。如果主题的生命周期要明显大于listener，那么就有可能发生内存泄漏。</p>

<p>以下面的代码为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="kd">implements</span> <span class="n">OnNetworkChangedListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NetworkManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">registerListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNetworkUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNetworkDown</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码处理的业务，可以理解为</p>

<ul>
<li>AppCompatActivity实现了OnNetworkChangedListener接口，用来监听网络的可用性变化</li>
<li>NetworkManager为单例模式实现，其registerListener接收了MainActivity实例</li>
</ul>


<p>又是单例模式，可知NetworkManager会持有MainActivity的实例引用，因而屏幕旋转时，MainActivity同样无法被回收，进而造成了内存泄漏。</p>

<p>对于这种类型的内存泄漏，解决方法是这样的。即在MainActivity的onDestroy方法中加入反注销的方法调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="kd">implements</span> <span class="n">OnNetworkChangedListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NetworkManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">registerListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNetworkUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNetworkDown</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>        <span class="n">NetworkManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">unregisterListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>非静态内部类导致的内存泄漏</h3>

<p>在Java中，非静态内部类会隐式持有外部类的实例引用。想要了解更多，可以参考这篇文章<a href="http://droidyue.com/blog/2014/10/02/the-private-modifier-in-java/">细话Java：&#8221;失效&#8221;的private修饰符</a></p>

<p>通常情况下，我们会书写类似这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SensorListenerActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SensorManager</span> <span class="n">sensorManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">SensorManager</span><span class="o">)</span> <span class="n">getApplicationContext</span><span class="o">().</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">SENSOR_SERVICE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sensorManager</span><span class="o">.</span><span class="na">registerListener</span><span class="o">(</span><span class="k">new</span> <span class="n">SensorListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSensorChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">sensor</span><span class="o">,</span> <span class="kt">float</span><span class="o">[]</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAccuracyChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">sensor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">accuracy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="n">SensorManager</span><span class="o">.</span><span class="na">SENSOR_ALL</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中上面的SensorListner实例是一个匿名内部类的实例，也是非静态内部类的一种。因此SensorListner也会持有外部SensorListenerActivity的实例引用。</p>

<p>而SensorManager作为单例模式实现，其生命周期与Application相同，和SensorListner对象生命周期不同，有可能间接导致SensorListenerActivity发生内存泄漏。</p>

<p>解决这种问题的方法可以是</p>

<ul>
<li>使用实例变量存储SensonListener实例，在Activity的onDestroy方法进行反注册。</li>
<li>如果registerListener方法可以修改，可以使用弱引用或者WeakHashMap来解决。</li>
</ul>


<p>除了上面的三种场景外，Android的内存泄漏还有可能出现在以下情况</p>

<ul>
<li>使用<code>Activity.getSystemService()</code>使用不当，也会导致内存泄漏。</li>
<li>资源未关闭也会造成内存泄漏</li>
<li>Handler使用不当也可以造成内存泄漏的发生</li>
<li>延迟的任务也可能导致内存泄漏</li>
</ul>


<h2>解决内存泄漏</h2>

<p>想要解决内存泄漏无非如下两种方法</p>

<ul>
<li>手动解除不必要的强引用关系</li>
<li>使用弱引用或者软引用替换强引用关系</li>
</ul>


<p>下面会简单介绍一些内存泄漏检测和解决的工具</p>

<h3>Strictmode</h3>

<ul>
<li>StrictMode,严格模式，是Android中的一种检测VM和线程违例的工具。</li>
<li>使用<code>detectAll()</code>或者<code>detectActivityLeaks()</code>可以检测Activity的内存泄漏</li>
<li>使用<code>setClassInstanceLimit()</code>可以限定类的实例个数，可以辅助判断某些类是否发生了内存泄漏</li>
<li>但是StrictMode只能检测出现象，并不能提供更多具体的信息。</li>
<li>了解更多关于StrictMode，请访问<a href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/">Android性能调优利器StrictMode</a></li>
</ul>


<h3>Android Memory Monitors</h3>

<p>Android Memory Monitor内置于Android Studio中，用于展示应用内存的使用和释放情况。它大致长成这个样子</p>

<p><img src="http://7xuvjz.com1.z0.glb.clouddn.com/heap_monitor.gif" alt="http://7xuvjz.com1.z0.glb.clouddn.com/heap_monitor.gif" /></p>

<p>当你的App占用的内存持续增加，而且你同时出发GC，也没有进行释放，那么你的App很有可能发生了内存泄漏问题。</p>

<h3>LeakCanary</h3>

<ul>
<li>LeakCanary是一个检测Java和Android内存泄漏的库</li>
<li>由Square公司开发</li>
<li>集成LeakCanary之后，只需要等待内存泄漏出现就可以了，无需认为进行主动检测。</li>
<li>关于如何使用LeakCanary，可以参考这篇文章 <a href="http://droidyue.com/blog/2016/03/28/android-leakcanary/">Android内存泄漏检测利器：LeakCanary</a></li>
</ul>


<h3>Heap Dump</h3>

<ul>
<li>一个Heap dump就是某一时间点的内存快照</li>
<li>它包含了某个时间点的Java对象和类信息。</li>
<li>我们可以通上述提到的Android Heap Monitor进行Heap Dump，当然LeakCanary也会生成Heap Dump文件。</li>
<li>生成的Heap Dump文件扩展名为.hprof  即Heap Profile.</li>
<li>通常情况下，一个heap profile需要转换后才能被MAT使用分析。</li>
</ul>


<h3>Shallow Heap VS Retained Heap</h3>

<ul>
<li>Shallow Heap 指的是对象自身的占用的内存大小。</li>
<li>对象x的Retained Set指的是如果对象x被GC移除，可以释放总的对象的集合。</li>
<li>对象x的Retained Heap指的就是上述x的Retained Set的占用内存大小。</li>
</ul>


<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/shallow_heap_retained_heap.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/shallow_heap_retained_heap.png" /></p>

<p>以上图做个例子，进行分析</p>

<ul>
<li>A,B,C,D四个对象的Shallow Heap均为1M</li>
<li>B,C,D的Retained Heap均为1M</li>
<li>A的Retained Heap为4M</li>
</ul>


<h3>真实情况下如何计算泄漏内存大小</h3>

<p>上述的Retained Heap的大小获取是基于假设的，而现实在进行分析中不可能基于这种方法，那么实际上计算泄漏内存的大小的方法其实是这样的。</p>

<p>这里我们需要一个概念，就是Dominator Tree（统治者树）。</p>

<ul>
<li>如果对象x统治对象y，那么每条从GC根节点到y对象的路径都会经过x，即x是GC根节点到y的必经之路。</li>
<li>上述情况下，我们可以说x是y的统治者</li>
<li>最近统治者指的是离对象y最近的统治者。</li>
</ul>


<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/dominator_tree.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/dominator_tree.png" /></p>

<p>上图中</p>

<ul>
<li>A和B都不无法统治C对象，即C对象被A和B的父对象统治</li>
<li>H不受F，G，D，E统治，但是受C统治</li>
<li>F和D是循环引用，但是按照路径的方向（从根节点到对象），D统治F</li>
</ul>


<h3>内存泄漏与OOM</h3>

<ul>
<li>OOM全称Out Of Memory Error 内存溢出错误</li>
<li>OOM发生在，当我们尝试进行创建对象，但是堆内存无法通过GC释放足够的空间，堆内存也无法在继续增长，从而完成对象创建请求，所以发生了OOM</li>
<li>OOM发生很有可能是内存泄漏导致</li>
<li>但是并非所有的OOM都是由内存泄漏引起</li>
<li>内存泄漏也并不一定引起OOM</li>
</ul>


<h2>声明</h2>

<ul>
<li>其中第一张图片GC回收图来自Patrick Dubroy在Google IO的演讲Keynote</li>
<li>最后一张Dorminator Tree来自MAT官方网站</li>
</ul>


<h2>一些链接</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references/">垃圾回收器如何处理循环引用</a></li>
<li><a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">译文：理解Java中的弱引用</a></li>
<li><a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/">Android中Handler引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/">避免Android中Context引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2014/11/29/why-onsharedpreferencechangelistener-was-not-called/">Google为何这样设计OnSharedPreferenceChangeListener</a></li>
<li><a href="http://droidyue.com/droidcon_2016/">Keynote下载地址</a></li>
</ul>


<h2>最后的话</h2>

<p>内存泄漏在App中很常见，需要我们花时间去解决。</p>

<p>处理内存泄漏问题，不仅要解决掉，更应该善于整理总结，做到后续编码中主动避免。</p>

<p>本文是我在droidcon beijing 2016和 GDG Beijing Devfest所做分享的文章总结版。如有问题，欢迎指出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android内存泄漏：谨慎使用getSystemService]]></title>
    <link href="http://droidyue.com/blog/2016/11/14/be-careful-using-getsystemservice/"/>
    <updated>2016-11-14T20:58:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/11/14/be-careful-using-getsystemservice</id>
    <content type="html"><![CDATA[<p>Android中有很多服务，比如PowerManager,AlarmManager，NotificationManager等，通常使用起来也很方便，就是使用Context.getSystemService方法来获得。</p>

<p>一次在公司开发项目开发中，突然LeakCanary弹出了一个内存泄漏的通知栏，不好，内存泄漏发生了。原因竟是和getSystemService有关。</p>

<p>为了排除干扰因素，我们使用一个简单的示例代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">PowerManager</span> <span class="n">powerManager</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">powerManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">PowerManager</span><span class="o">)</span><span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">POWER_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>当退出MainActivity时，得到了LeakCanary的内存泄漏报告。如下图。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/device-2016-11-04-081558_compressed.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/device-2016-11-04-081558_compressed.png" /></p>

<p>奇怪了，为什么PowerManager会持有Activity的实例呢，按照理解，PowerManager应该是持有Application的Context对象的。</p>

<p>因此，我们有必要对PowerManager的源码分析一下</p>

<p>1.PowerManager会持有一个Context实例，具体使用Activity还是Application的Context取决于调用者。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">IPowerManager</span> <span class="n">mService</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * {@hide}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PowerManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">IPowerManager</span> <span class="n">service</span><span class="o">,</span> <span class="n">Handler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mService</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mHandler</span> <span class="o">=</span> <span class="n">handler</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.负责缓存服务的实现在ContextImpl.java文件中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// The system service cache for the system services that are cached per-ContextImpl.</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">mServiceCache</span> <span class="o">=</span> <span class="n">SystemServiceRegistry</span><span class="o">.</span><span class="na">createServiceCache</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Activity通过ContextImpl提供的setOuterContext方法设置mOuterContext</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">void</span> <span class="nf">setOuterContext</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mOuterContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此Activity与ContextImpl的关系如下图
<img src="http://7jpolu.com1.z0.glb.clouddn.com/QQ20161108-0.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/QQ20161108-0.png" /></p>

<p>SystemServiceRegistry.java中获取PowerManager的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">registerService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">POWER_SERVICE</span><span class="o">,</span> <span class="n">PowerManager</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">CachedServiceFetcher</span><span class="o">&lt;</span><span class="n">PowerManager</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">PowerManager</span> <span class="nf">createService</span><span class="o">(</span><span class="n">ContextImpl</span> <span class="n">ctx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">IBinder</span> <span class="n">b</span> <span class="o">=</span> <span class="n">ServiceManager</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">POWER_SERVICE</span><span class="o">);</span>
</span><span class='line'>                <span class="n">IPowerManager</span> <span class="n">service</span> <span class="o">=</span> <span class="n">IPowerManager</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">asInterface</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">service</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">wtf</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Failed to get power manager service.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">PowerManager</span><span class="o">(</span><span class="n">ctx</span><span class="o">.</span><span class="na">getOuterContext</span><span class="o">(),</span>
</span><span class='line'>                        <span class="n">service</span><span class="o">,</span> <span class="n">ctx</span><span class="o">.</span><span class="na">mMainThread</span><span class="o">.</span><span class="na">getHandler</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}});</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建具体的服务的实现为core/java/android/app/SystemServiceRegistry.java</p>

<h2>如何解决</h2>

<h3>不使用静态持有PowerManager</h3>

<p>因为static是一个很容易和内存泄漏产生关联的因素</p>

<ul>
<li>static变量与类的生命周期相同</li>
<li>类的生命周期等同于类加载器</li>
<li>类加载器通常和进程的生命周期一致</li>
</ul>


<p>所以通过去除static可以保证变量周期和Activity实例相同。这样就不会产生内存泄漏问题。</p>

<h3>使用ApplicationContext</h3>

<p>除了上面的方法之外，传入Application的Context而不是Activity Context也可以解决问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PowerManager</span> <span class="n">powerManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">PowerManager</span><span class="o">)</span><span class="n">getApplicationContext</span><span class="o">().</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">POWER_SERVICE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>是不是都要使用Application Context？</h2>

<p>然而并非如此</p>

<p>以Activity为例，一些和UI相关的服务已经优先进行了处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">getSystemService</span><span class="o">(</span><span class="nd">@ServiceName</span> <span class="nd">@NonNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getBaseContext</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;System services not available to Activities before onCreate()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">WINDOW_SERVICE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mWindowManager</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">SEARCH_SERVICE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ensureSearchManager</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mSearchManager</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ContextThemeWrapper也优先处理了LayoutManager服务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">getSystemService</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">LAYOUT_INFLATER_SERVICE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mInflater</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mInflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">getBaseContext</span><span class="o">()).</span><span class="na">cloneInContext</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mInflater</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getBaseContext</span><span class="o">().</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>那到底该用哪个Context</h2>

<ul>
<li>如果服务和UI相关，则用Activity</li>
<li>如果是类似ALARM_SERVICE,CONNECTIVITY_SERVICE建议有限选用Application Context</li>
<li>如果出现出现了内存泄漏，排除问题，可以考虑使用Application Context</li>
</ul>


<p>如需了解更多关于Context的内存泄漏，请阅读</p>

<ul>
<li><a href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/">避免Android中Context引起的内存泄露</a></li>
</ul>


<p>所以，当我们再次使用getSystemService时要慎重考虑这样的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Mac下Chrome发热严重的问题]]></title>
    <link href="http://droidyue.com/blog/2016/10/31/google-chrome-costs-a-lot-of-memory/"/>
    <updated>2016-10-31T22:19:00+08:00</updated>
    <id>http://droidyue.com/blog/2016/10/31/google-chrome-costs-a-lot-of-memory</id>
    <content type="html"><![CDATA[<p>Mac电脑是一款程序员得力的开发机器,而Chrome也是一个高效率的浏览器.通常,大多数开发都会在Mac上使用Chrome.我也不例外,只是最近遇到了一些比较麻烦的事情.</p>

<p>那就是自从用了Chrome之后，电脑发热太严重了，有时候都可以在上面煎个鸡蛋了。</p>

<!--more-->


<p>打开电脑进程管理器，发现了Chrome进程居然这么多。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/google_chrome_helper_process.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/google_chrome_helper_process.png" /></p>

<p>后来Google到了一些解决方案，做法如下</p>

<ol>
<li>打开Chrome浏览器</li>
<li>进入设置</li>
<li>选择<code>Show advanced settings</code></li>
<li>点击Privacy下面的Content Settings</li>
<li>向下翻到Plugins,选择如下图的<code>Let me choose when to run plugin content</code><br/>
<img src="http://7jpolu.com1.z0.glb.clouddn.com/chrome_plugin_settings.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/chrome_plugin_settings.png" /></li>
</ol>


<p>实际上，上面的操作主要是关闭一些Flash相关的插件。因为Flash是电脑中的散热大户，比如同样一段视频，在国内的优酷（使用flash）播放，小本本的温度摸上去真让人心疼，然而在YouTube（使用HTML5）则几乎温度没有什么上升。</p>

<p>进行了上面的设置后，当遇到Flash的问题后，需要手动在网站上开启。</p>

<h2>参考文章</h2>

<ul>
<li><a href="https://discussions.apple.com/thread/5572267?start=0">&ldquo;google chrome helper&rdquo; using too much CPU?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
