<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="https://droidyue.com/atom.xml" rel="self"/>
  <link href="https://droidyue.com/"/>
  <updated>2018-12-16T19:01:16+08:00</updated>
  <id>https://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[详解JVM如何处理异常]]></title>
    <link href="https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions/"/>
    <updated>2018-10-21T20:14:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/10/21/how-jvm-handle-exceptions</id>
    <content type="html"><![CDATA[<p>无论你是使用何种编程语言，在日常的开发过程中，都会不可避免的要处理异常。今天本文将尝试讲解一些JVM如何处理异常问题，希望能够讲清楚这个内部的机制，如果对大家有所启发和帮助，则甚好。</p>

<h2>当异常不仅仅是异常</h2>

<p>我们在标题中提到了异常，然而这里指的异常并不是单纯的Exception，而是更为宽泛的Throwable。只是我们工作中习以为常的将它们（错误地）这样称谓。</p>

<p>关于Exception和Throwable的关系简单描述一下</p>

<ul>
<li>Exception属于Throwable的子类，Throwable的另一个重要的子类是Error</li>
<li>throw可以抛出的都是Throwable和其子类，catch可捕获的也是Throwable和其子类。</li>
</ul>


<!--more-->


<p>除此之外，但是Exception也有一些需要我们再次强调的</p>

<ul>
<li>Exception分为两种类型，一种为Checked Exception，另一种为unchecked Exception</li>
<li>Checked Exception，比如最常见的IOException，这种异常需要调用处显式处理，要么使用try catch捕获，要么再次抛出去。</li>
<li>Unchecked Exception指的是所有继承自Error（包含自身）或者是RuntimeException（包含自身）的类。这些异常不强制在调用处进行处理。但是也可以try catch处理。</li>
</ul>


<p>注：本文暂不做Checked Exception设计的好坏的分析。</p>

<h2>Exception Table 异常表</h2>

<p>提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的Java处理异常的小例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatch</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码是一个很简单的例子，用来捕获处理一个潜在的空指针异常。</p>

<p>当然如果只是看简简单单的代码，我们很难看出什么高深之处，更没有了今天文章要谈论的内容。</p>

<p>所以这里我们需要借助一把神兵利器，它就是javap,一个用来拆解class文件的工具，和javac一样由JDK提供。</p>

<p>然后我们使用javap来分析这段代码（需要先使用javac编译）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//javap -c Main</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatch</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">11</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Exception.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">Exception</span> <span class="nl">table:</span>
</span><span class='line'>       <span class="n">from</span>    <span class="n">to</span>  <span class="n">target</span> <span class="n">type</span>
</span><span class='line'>           <span class="mi">0</span>     <span class="mi">3</span>     <span class="mi">6</span>   <span class="n">Class</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。</p>

<p>异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下</p>

<ul>
<li>from 可能发生异常的起始点</li>
<li>to 可能发生异常的结束点</li>
<li>target 上述from和to之前发生异常后的异常处理者的位置</li>
<li>type 异常处理者处理的异常的类信息</li>
</ul>


<h2>那么异常表用在什么时候呢</h2>

<p>答案是异常发生的时候，当一个异常发生时</p>

<p>1.JVM会在当前出现异常的方法中，查找异常表，是否有合适的处理者来处理</p>

<p>2.如果当前方法异常表不为空，并且异常符合处理者的from和to节点，并且type也匹配，则JVM调用位于target的调用者来处理。</p>

<p>3.如果上一条未找到合理的处理者，则继续查找异常表中的剩余条目</p>

<p>4.如果当前方法的异常表无法处理，则向上查找（弹栈处理）刚刚调用该方法的调用处，并重复上面的操作。</p>

<p>5.如果所有的栈帧被弹出，仍然没有处理，则抛给当前的Thread，Thread则会终止。</p>

<p>6.如果当前Thread为最后一个非守护线程，且未处理异常，则会导致JVM终止运行。</p>

<p>以上就是JVM处理异常的一些机制。</p>

<h2>try catch -finally</h2>

<p>除了简单的try-catch外，我们还常常和finally做结合使用。比如这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatchFinally</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Finally&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样我们使用javap分析一下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatchFinally</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Exception.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">22</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">40</span><span class="o">:</span> <span class="n">athrow</span>
</span><span class='line'>      <span class="mi">41</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>    <span class="n">Exception</span> <span class="nl">table:</span>
</span><span class='line'>       <span class="n">from</span>    <span class="n">to</span>  <span class="n">target</span> <span class="n">type</span>
</span><span class='line'>           <span class="mi">0</span>     <span class="mi">3</span>    <span class="mi">14</span>   <span class="n">Class</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Exception</span>
</span><span class='line'>           <span class="mi">0</span>     <span class="mi">3</span>    <span class="mi">30</span>   <span class="n">any</span>
</span><span class='line'>          <span class="mi">14</span>    <span class="mi">19</span>    <span class="mi">30</span>   <span class="n">any</span>
</span></code></pre></td></tr></table></div></figure>


<p>和之前有所不同，这次</p>

<ul>
<li>异常表中，有三条数据，而我们仅仅捕获了一个Exception</li>
<li>异常表的后两个item的type为any</li>
</ul>


<p>上面的三条异常表item的意思为</p>

<ul>
<li>如果0到3之间，发生了Exception类型的异常，调用14位置的异常处理者。</li>
<li>如果0到3之间，无论发生什么异常，都调用30位置的处理者</li>
<li>如果14到19之间（即catch部分），不论发生什么异常，都调用30位置的处理者。</li>
</ul>


<p>再次分析上面的Java代码，finally里面的部分已经被提取到了try部分和catch部分。我们再次调一下代码来看一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">simpleTryCatchFinally</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>      <span class="c1">//try 部分提取finally代码，如果没有异常发生，则执行输出finally操作，直至goto到41位置，执行返回操作。  </span>
</span><span class='line'>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//catch部分提取finally代码，如果没有异常发生，则执行输出finally操作，直至执行got到41位置，执行返回操作。</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">5</span>                  <span class="c1">// Method java/lang/Exception.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">22</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">41</span>
</span><span class='line'>      <span class="c1">//finally部分的代码如果被调用，有可能是try部分，也有可能是catch部分发生异常。</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// String Finally</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">40</span><span class="o">:</span> <span class="n">athrow</span>     <span class="c1">//如果异常没有被catch捕获，而是到了这里，执行完finally的语句后，仍然要把这个异常抛出去，传递给调用处。</span>
</span><span class='line'>      <span class="mi">41</span><span class="o">:</span> <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Catch先后顺序的问题</h2>

<p>我们在代码中的catch的顺序决定了异常处理者在异常表的位置，所以，越是具体的异常要先处理，否则就会出现下面的问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">misuseCatchException</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//error occurs during compilings with tips Exception Java.lang.Exception has already benn caught.</span>
</span><span class='line'>       <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码会导致编译失败，因为先捕获Throwable后捕获Exception，会导致后面的catch永远无法被执行。</p>

<h2>Return 和finally的问题</h2>

<p>这算是我们扩展的一个相对比较极端的问题，就是类似这样的代码，既有return，又有finally，那么finally导致会不会执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">tryCatchReturn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">testNPE</span><span class="o">();</span>
</span><span class='line'>       <span class="k">return</span>  <span class="s">&quot;OK&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;ERROR&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;tryCatchReturn&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>答案是finally会执行，那么还是使用上面的方法，我们来看一下为什么finally会执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">tryCatchReturn</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">3</span>                  <span class="c1">// Method testNPE:()V</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">6</span>                  <span class="c1">// String OK</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>       <span class="mi">9</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String tryCatchReturn</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">14</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>      <span class="mi">15</span><span class="o">:</span> <span class="n">areturn</span>       <span class="err">返回</span><span class="n">OK</span><span class="err">字符串，</span><span class="n">areturn</span><span class="err">意思为</span><span class="k">return</span> <span class="n">a</span> <span class="n">reference</span> <span class="n">from</span> <span class="n">a</span> <span class="n">method</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">astore_0</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">10</span>                 <span class="c1">// String ERROR</span>
</span><span class='line'>      <span class="mi">19</span><span class="o">:</span> <span class="n">astore_1</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">23</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String tryCatchReturn</span>
</span><span class='line'>      <span class="mi">25</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">28</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>      <span class="mi">29</span><span class="o">:</span> <span class="n">areturn</span>  <span class="c1">//返回ERROR字符串</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">7</span>                  <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">8</span>                  <span class="c1">// String tryCatchReturn</span>
</span><span class='line'>      <span class="mi">36</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">9</span>                  <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="mi">39</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">40</span><span class="o">:</span> <span class="n">athrow</span>  <span class="err">如果</span><span class="k">catch</span><span class="err">有未处理的异常，抛出去。</span>
</span></code></pre></td></tr></table></div></figure>


<p>行文仓促，加之本人水平有限，有错误的地方，请指出。</p>

<p>参考文章：</p>

<ul>
<li><a href="http://blog.jamesdbloom.com/JVMInternals.html#exception_table">http://blog.jamesdbloom.com/JVMInternals.html#exception_table</a></li>
<li><a href="https://blog.takipi.com/the-surprising-truth-of-java-exceptions-what-is-really-going-on-under-the-hood/">https://blog.takipi.com/the-surprising-truth-of-java-exceptions-what-is-really-going-on-under-the-hood/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings</a></li>
<li><a href="https://dzone.com/articles/the-truth-of-java-exceptions-whats-really-going-on">https://dzone.com/articles/the-truth-of-java-exceptions-whats-really-going-on</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有点意思的Kotlin的默认参数与JVMOverloads]]></title>
    <link href="https://droidyue.com/blog/2018/10/14/dive-into-kotlin-default-arguments-and-jvmoverloads/"/>
    <updated>2018-10-14T19:18:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/10/14/dive-into-kotlin-default-arguments-and-jvmoverloads</id>
    <content type="html"><![CDATA[<p>在Java中，当我们定义一个类的时候，总会出现一些变量是必须要填写的，而另一些是可选的。比如像下面这样，我们定一个Person类，其中name是必须填写的，而性别sex和isChinese可选，如果不填写就直接使用默认值。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChinese</span><span class="o">){}</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChinese</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当仅仅只有这两个可选参数时，上述的情况还好很多，可是当新增了其他的属性的时候，我们需要实现更多的构造方法重载。这在Java中更加容易出现telescoping constructor的问题,进而影响我们的开发效率和代码可读性。</p>

<p>在Kotlin中，这种问题得到了很好的解决。这便是要提到的方法的默认参数，其实这个很简单，在其他的语言也是支持的。</p>

<p>便于大家理解，我们先看一看默认参数是什么，下面是一个Book的类和它的构造方法（Kotlin代码）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nf">Book</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isChineseBook:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>          <span class="n">val</span> <span class="nl">hasMultipleAuthor:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isPopular:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>           <span class="n">val</span> <span class="nl">isForChildren:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在调用的时候可以按照如下的Kotlin代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="mi">2</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book1&quot;</span><span class="o">,</span> <span class="n">isForChildren</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'><span class="mi">3</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book2&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="mi">4</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book3&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="mi">5</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book4&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="mi">6</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book5&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以根据自己的需要填写必要的参数值，当然也可以像第1行<code>Book("Book1", isForChildren = false)</code> 不按照顺序填写参数也是可以的，这是一个很赞的特性，能很大程度上增强代码的可读性。</p>

<p>但是Kotlin的这一特性，只应用于Kotlin代码调用的场景，如果是在Java代码中，我们还是必须要填写完整的参数。这一点着实令人沮丧。不过还在有一个解决办法，那就是使用@JvmOverloads注解，示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">People</span> <span class="nd">@JvmOverloads</span> <span class="n">constructor</span><span class="o">(</span><span class="n">val</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">sex:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isChinese:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java中调用示例效果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//call constructor with JVMOverloads</span>
</span><span class='line'><span class="n">People</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">People</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">People</span> <span class="n">people1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">People</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">People</span> <span class="n">people2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">People</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么JvmOverloads是如何工作的呢？</p>

<p>其实@JvmOverloads的作用就是告诉编译器，自动生成多个该方法的重载。因为我们通过反编译分析即可验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChinese</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">sex</span> <span class="o">=</span> <span class="n">sex</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isChinese</span> <span class="o">=</span> <span class="n">isChinese</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $FF: synthetic method</span>
</span><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="n">String</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var4</span><span class="o">,</span> <span class="n">DefaultConstructorMarker</span> <span class="n">var5</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var4</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var4</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var3</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@JvmOverloads</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">People</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，上面的重载方法并没有按照组合来生成，比如<code>public People(@NotNull String name, int sex, boolean isChinese)</code>,因为这样也是出于可读性来考虑和避免潜在方法签名冲突问题。</p>

<p>最后，我们来研究一下Kotlin中默认参数的实现原理。因为这里面存在着一些程序设计的巧妙之处。</p>

<p>这里我们还是使用刚刚提到的Book这个类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nf">Book</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isChineseBook:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>          <span class="n">val</span> <span class="nl">hasMultipleAuthor:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">val</span> <span class="nl">isPopular:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>           <span class="n">val</span> <span class="nl">isForChildren:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过反编译，我们得到了一些类似这样的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isChineseBook</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">hasMultipleAuthor</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isPopular</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isForChildren</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isChineseBook</span> <span class="o">=</span> <span class="n">isChineseBook</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">hasMultipleAuthor</span> <span class="o">=</span> <span class="n">hasMultipleAuthor</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isPopular</span> <span class="o">=</span> <span class="n">isPopular</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">isForChildren</span> <span class="o">=</span> <span class="n">isForChildren</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $FF: synthetic method</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="n">String</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var3</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var4</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var5</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var6</span><span class="o">,</span> <span class="n">DefaultConstructorMarker</span> <span class="n">var7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var2</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var3</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var4</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var5</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">,</span> <span class="n">var4</span><span class="o">,</span> <span class="n">var5</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是有点不一样，它只生成了两个构造方法，而不是所谓的多个参数组合的构造方法。更有意思的是，当我们这样调用时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book2&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book3&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book4&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">Book</span><span class="o">(</span><span class="s">&quot;Book5&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其对应的字节码反编译成java是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book0&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book2&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book3&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book4&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="o">(</span><span class="n">DefaultConstructorMarker</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="s">&quot;Book5&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们会注意到上面有很多数字，比如30,14,28,24,16等。那么这些数字是怎么生成的呢？</p>

<p>对于构造方法的每个参数，</p>

<ul>
<li>都有一个位置，即方法声明时所在的位置，我们这里使用i代替表示。注意该从0开始，</li>
<li>每个参数有一个mask值，该值为2的i次方，比如第0个位置的参数的mask值为1，第1个位置的mask值为2，以此类推。</li>
<li>如果在调用时，编译器检测到某些参数没有调用，就将这些参数的mask值，求和，便生成了我们上面提到的数字。</li>
</ul>


<p>具体示例如下</p>

<p><img src="https://asset.droidyue.com/image/kotlin_jvm_overloads.png" alt="https://asset.droidyue.com/image/kotlin_jvm_overloads.png" /></p>

<p>比如Book(&ldquo;Book0&rdquo;)我们传递了第一个参数，所以最后的30 就是由 2 + 4 + 8 + 16 这些缺失的位置的mask值计算得出来的。</p>

<p>知道了，mask值的生成规则，就便于我们理解编译器生成的构造方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// $FF: synthetic method</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="n">String</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var3</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var4</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">var5</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var6</span><span class="o">,</span> <span class="n">DefaultConstructorMarker</span> <span class="n">var7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var2</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var3</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var4</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">((</span><span class="n">var6</span> <span class="o">&amp;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">var5</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var3</span><span class="o">,</span> <span class="n">var4</span><span class="o">,</span> <span class="n">var5</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这个构造方法就是根据根据mask判断，某个位置的参数是否在调用时进行了赋值，如果没有赋值则进行设置默认值操作。</p>

<p>这种使用mask或者flag的方法其实很巧，减少了一些不必要的重载方法的生成。对于我们以后处理类似的问题，提供了一些不过的思路和参考价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探究Kotlin的局部方法]]></title>
    <link href="https://droidyue.com/blog/2018/10/07/dive-into-kotlins-local-function/"/>
    <updated>2018-10-07T19:47:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/10/07/dive-into-kotlins-local-function</id>
    <content type="html"><![CDATA[<p>在Kotlin中，定义方法很有趣，不仅仅因为方法的关键字是fun(function前几个字符)，还是因为你会惊奇的发现，它允许我们在方法中定义方法。如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">methodA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">methodB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">methodB</span><span class="o">()</span> <span class="c1">//valid</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//methodB() invalid</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>其中</p>

<ul>
<li>methodB定义在methodA的方法体中，即methodB被称为局部方法或局部函数</li>
<li>methodB只能在methodA中方法调用</li>
<li>methodB在methodA方法外调用，会引起编译错误</li>
</ul>


<p>既然Kotlin支持了局部方法，相比它应该有什么特殊的用武之地呢</p>

<p>首先它的特点还是像它的名字一样，局部，这就意味着它有着无可比拟的更小范围的限定能力。保证了小范围的可用性，隔绝了潜在的不相关调用的可能。</p>

<p>作为编程中的金科玉律，方法越小越好，相比纵向冗长的代码片段，将其按照职责切分成功能单一的小的局部方法，最后组织起来调用，会让我们的代码显得更加的有条理和清晰。</p>

<p>作为一个程序员，好奇应该是他的特质之一，我们应该会想要研究一下，局部方法的实现原理是什么，至少我们在Java时代从来没有见过这种概念。</p>

<p>其实这件事仔细研究起来，还是有不少细节的。因为这其中局部方法可以捕获外部的变量也可以不捕获外部的变量。</p>

<p>下面就是捕获外部变量的一种情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">outMethodCapture</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">checkArgs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;innerMethod check args&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这其中，局部方法checkArgs捕获了outMethodCapture的参数args。</p>

<p>所以，不捕获外部变量的情况也不难理解，如下,即checkArgs处理args都是通过参数传递的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">outMethodNonCapture</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">checkArgs</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;outMethodNonCapture check args&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们分析一下捕获变量的局部方法的实现原理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">outMethodCapture</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="s">&quot;args&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">undefinedtype</span><span class="o">&gt;</span> <span class="n">checkArgs$</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// $FF: synthetic method</span>
</span><span class='line'>     <span class="c1">// $FF: bridge method</span>
</span><span class='line'>     <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Unit</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">var1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="n">args</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">var1</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">String</span> <span class="n">var2</span> <span class="o">=</span> <span class="s">&quot;innerMethod check args&quot;</span><span class="o">;</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var2</span><span class="o">);</span>
</span><span class='line'>           <span class="o">(</span><span class="k">new</span> <span class="n">Throwable</span><span class="o">()).</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>  <span class="n">checkArgs$</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上实现原理，就是局部方法实现其实就是实现了一个匿名内部类的实例，然后再次调用即可。
对于不捕获的局部方法要稍有不同，首先我们反编译得到对应的Java代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">outMethodNonCapture</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="s">&quot;args&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">undefinedtype</span><span class="o">&gt;</span> <span class="n">checkArgs$</span> <span class="o">=</span> <span class="kc">null</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>  <span class="n">checkArgs$</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们得到的是一个不完整的代码，这时候需要我们前往项目工程，结合一些对应的class文件分析。首先我们找到类似这样的文件<code>MainKt$outMethodCapture$1.class</code> (其class文件按照”文件名$方法名$内部类序号”的规则)。</p>

<p>使用javap方法再次反编译分析该文件，注意对于$符号需要简单处理一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">➜</span>  <span class="n">KotlinInnerFunction</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="s">&quot;MainKt\$outMethodNonCapture\$1.class&quot;</span>
</span><span class='line'><span class="n">Compiled</span> <span class="n">from</span> <span class="s">&quot;Main.kt&quot;</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">MainKt</span><span class="n">$outMethodNonCapture$1</span> <span class="kd">extends</span> <span class="n">kotlin</span><span class="o">.</span><span class="na">jvm</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">Lambda</span> <span class="kd">implements</span> <span class="n">kotlin</span><span class="o">.</span><span class="na">jvm</span><span class="o">.</span><span class="na">functions</span><span class="o">.</span><span class="na">Function1</span><span class="o">&lt;</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[],</span> <span class="n">kotlin</span><span class="o">.</span><span class="na">Unit</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">MainKt$outMethodNonCapture$1</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">11</span>                 <span class="c1">// class &quot;[Ljava/lang/String;&quot;</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">14</span>                 <span class="c1">// Method invoke:([Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">8</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">20</span>                 <span class="c1">// Field kotlin/Unit.INSTANCE:Lkotlin/Unit;</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">areturn</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">[]);</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">23</span>                 <span class="c1">// String args</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">invokestatic</span>  <span class="err">#</span><span class="mi">29</span>                 <span class="c1">// Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V</span>
</span><span class='line'>       <span class="mi">6</span><span class="o">:</span> <span class="n">aload_1</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">checkcast</span>     <span class="err">#</span><span class="mi">31</span>                 <span class="c1">// class &quot;[Ljava/lang/Object;&quot;</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">11</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">12</span><span class="o">:</span> <span class="n">arraylength</span>
</span><span class='line'>      <span class="mi">13</span><span class="o">:</span> <span class="n">ifne</span>          <span class="mi">20</span>
</span><span class='line'>      <span class="mi">16</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>      <span class="mi">17</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">21</span>
</span><span class='line'>      <span class="mi">20</span><span class="o">:</span> <span class="n">iconst_0</span>
</span><span class='line'>      <span class="mi">21</span><span class="o">:</span> <span class="n">ifeq</span>          <span class="mi">44</span>
</span><span class='line'>      <span class="mi">24</span><span class="o">:</span> <span class="n">ldc</span>           <span class="err">#</span><span class="mi">33</span>                 <span class="c1">// String outMethodNonCapture check args</span>
</span><span class='line'>      <span class="mi">26</span><span class="o">:</span> <span class="n">astore_2</span>
</span><span class='line'>      <span class="mi">27</span><span class="o">:</span> <span class="n">getstatic</span>     <span class="err">#</span><span class="mi">39</span>                 <span class="c1">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="mi">30</span><span class="o">:</span> <span class="n">aload_2</span>
</span><span class='line'>      <span class="mi">31</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">45</span>                 <span class="c1">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span>
</span><span class='line'>      <span class="mi">34</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">47</span>                 <span class="c1">// class java/lang/Throwable</span>
</span><span class='line'>      <span class="mi">37</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>      <span class="mi">38</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">51</span>                 <span class="c1">// Method java/lang/Throwable.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="mi">41</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">54</span>                 <span class="c1">// Method java/lang/Throwable.printStackTrace:()V</span>
</span><span class='line'>      <span class="mi">44</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MainKt$outMethodNonCapture$1</span><span class="o">();</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
</span><span class='line'>       <span class="mi">1</span><span class="o">:</span> <span class="n">iconst_1</span>
</span><span class='line'>       <span class="mi">2</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">61</span>                 <span class="c1">// Method kotlin/jvm/internal/Lambda.&quot;&lt;init&gt;&quot;:(I)V</span>
</span><span class='line'>       <span class="mi">5</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{};</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>       <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">2</span>                  <span class="c1">// class MainKt$outMethodNonCapture$1</span>
</span><span class='line'>       <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'>       <span class="mi">4</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">80</span>                 <span class="c1">// Method &quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       <span class="mi">7</span><span class="o">:</span> <span class="n">putstatic</span>     <span class="err">#</span><span class="mi">82</span>                 <span class="c1">// Field INSTANCE:LMainKt$outMethodNonCapture$1;</span>
</span><span class='line'>      <span class="mi">10</span><span class="o">:</span> <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的类其实比较简单，更重要的这是一个单例的实现。因为这样相比捕获的情况下，减少了匿名内部类的生成和实例的创建，理论上带来的代价也会更小。</p>

<p>考虑到上面的对比，如果在使用局部方法时，建议使用不捕获外部变量的方式会更加推荐。</p>

<h3>使用注意</h3>

<p>是的，使用局部方法有一个注意事项，也就是一种规则约定，那就是需要先定义才能使用，否则会报错，如下所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">outMethodInvalidCase</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">()</span><span class="c1">//invalid unresolved reference</span>
</span><span class='line'>   <span class="n">fun</span> <span class="nf">checkArgs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;innerMethod check args&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">checkArgs</span><span class="o">()</span><span class="c1">//valid</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
但是呢，先定义局部方法，再使用还是有一些问题，这种问题主要表现在代码可读性上。</p>

<p>试想一下，如果你进入一个方法，看到的是一连串的局部方法，可能或多或少有点别扭。</p>

<p>但是试想一下，既然有这样的问题，为什么还要被设计成这个样子呢。首先，我们先看个小例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">0</span><span class="n">fun</span> <span class="n">outMethodInvalidCase</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">checkArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="mi">2</span>   <span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">//the reason why it&#39;s unresolved</span>
</span><span class='line'><span class="mi">3</span>   <span class="n">fun</span> <span class="n">checkArgs</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">4</span>       <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="mi">5</span>           <span class="n">println</span><span class="o">(</span><span class="s">&quot;outMethodNonCapture check args&quot;</span><span class="o">)</span>
</span><span class='line'><span class="mi">6</span>           <span class="n">Throwable</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'><span class="mi">7</span>           <span class="n">a</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="mi">8</span>       <span class="o">}</span>
</span><span class='line'><span class="mi">9</span>   <span class="o">}</span>
</span><span class='line'><span class="mi">10</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为局部方法可以capture局部变量，checkArgs捕获了局部变量a，当第一行代码checkArgs调用时，而checkArgs看似定义了，但是第二行却还没有执行到，导致了编译问题。</p>

<p>目前，capture变量和非capture的局部方法使用都是一致的，都需要先定义，再使用。</p>

<p>关于Kotlin中的局部方法，我们可以去尝试来达到限定范围，拆分方法的目的，在使用时，尽量选择非捕获的形式的局部方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析WeakHashMap]]></title>
    <link href="https://droidyue.com/blog/2018/07/23/a-briefing-looking-at-weakhashmap/"/>
    <updated>2018-07-23T17:24:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/23/a-briefing-looking-at-weakhashmap</id>
    <content type="html"><![CDATA[<p>在Java或者是Android编程中，我们一般都会使用到Map，比如HashMap这样的具体实现。更高级一点，我们可能会使用WeakHashMap。</p>

<p>WeakHashMap其实和HashMap大多数行为是一样的，只是WeakHashMap不会阻止GC回收key对象（不是value），那么WeakHashMap是怎么做到的呢，这就是我们研究的主要问题。</p>

<!--more-->


<p>在开始WeakHashMap之前，我们先要对弱引用有一定的了解。</p>

<p>在Java中，有四种引用类型</p>

<ul>
<li>强引用(Strong Reference)，我们正常编码时默认的引用类型，强应用之所以为强，是因为如果一个对象到GC Roots强引用可到达，就可以阻止GC回收该对象</li>
<li>软引用（Soft Reference）阻止GC回收的能力相对弱一些，如果是软引用可以到达，那么这个对象会停留在内存更时间上长一些。当内存不足时垃圾回收器才会回收这些软引用可到达的对象</li>
<li>弱引用（WeakReference）无法阻止GC回收，如果一个对象时弱引用可到达，那么在下一个GC回收执行时，该对象就会被回收掉。</li>
<li>虚引用（Phantom Reference）十分脆弱，它的唯一作用就是当其指向的对象被回收之后，自己被加入到引用队列，用作记录该引用指向的对象已被销毁</li>
</ul>


<p>这其中还有一个概念叫做引用队列(Reference Queue)</p>

<ul>
<li>一般情况下，一个对象标记为垃圾（并不代表回收了）后，会加入到引用队列。</li>
<li>对于虚引用来说，它指向的对象会只有被回收后才会加入引用队列，所以可以用作记录该引用指向的对象是否回收。</li>
</ul>


<h3>WeakHashMap如何不阻止对象回收呢</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="kd">implements</span>
</span><span class='line'>       <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">boolean</span> <span class="n">isNull</span><span class="o">;</span>
</span><span class='line'>   <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>   <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">interface</span> <span class="nc">Type</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">R</span> <span class="nf">get</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">entry</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">Entry</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">object</span><span class="o">,</span> <span class="n">ReferenceQueue</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">super</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>       <span class="n">isNull</span> <span class="o">=</span> <span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>       <span class="n">hash</span> <span class="o">=</span> <span class="n">isNull</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>       <span class="n">value</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如源码所示，</p>

<ul>
<li>WeakHashMap的Entry继承了WeakReference。</li>
<li>其中Key作为了WeakReference指向的对象</li>
<li>因此WeakHashMap利用了WeakReference的机制来实现不阻止GC回收Key</li>
</ul>


<h3>如何删除被回收的key数据呢</h3>

<p>在Javadoc中关于WeakHashMap有这样的描述，当key不再引用时，其对应的key/value也会被移除。</p>

<p>那么是如何移除的呢，这里我们通常有两种假设策略</p>

<ul>
<li>当对象被回收的时候，进行通知</li>
<li>WeakHashMap轮询处理时效的Entry</li>
</ul>


<p>而WeakHashMap采用的是轮询的形式，在其put/get/size等方法调用的时候都会预先调用一个poll的方法，来检查并删除失效的Entry</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">poll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">toRemove</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">((</span><span class="n">toRemove</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;)</span> <span class="n">referenceQueue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">removeEntry</span><span class="o">(</span><span class="n">toRemove</span><span class="o">);</span>
</span><span class='line'>       <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;removeEntry=&quot;</span> <span class="o">+</span> <span class="n">toRemove</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么没有使用看似更好的通知呢，我想是因为在Java中没有一个可靠的通知回调，比如大家常说的finalize方法，其实也不是标准的，不同的JVM可以实现不同，甚至是不调用这个方法。</p>

<p>当然除了单纯的看源码，进行合理的验证是检验分析正确的一个重要方法。</p>

<p>这里首先，我们定义一个MyObject类，处理一下finalize方法（在我的测试机上可以正常调用，仅仅做为辅助验证手段）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nf">MyObject</span><span class="o">(</span><span class="n">val</span> <span class="nl">id:</span> <span class="n">String</span><span class="o">)</span> <span class="o">:</span> <span class="n">Any</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">protected</span> <span class="n">fun</span> <span class="nf">finalize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;Object($id) finalize method is called&quot;</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是调用者的代码，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">val</span> <span class="n">weakHashMap</span> <span class="o">=</span> <span class="n">WeakHashMap</span><span class="o">&lt;</span><span class="n">Any</span><span class="o">,</span> <span class="n">Int</span><span class="o">&gt;()</span>
</span><span class='line'><span class="n">var</span> <span class="n">count</span> <span class="o">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nl">savedInstanceState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'>   <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
</span><span class='line'>   <span class="n">setSupportActionBar</span><span class="o">(</span><span class="n">toolbar</span><span class="o">)</span>
</span><span class='line'>   <span class="n">dumpWeakInfo</span><span class="o">()</span>
</span><span class='line'>   <span class="n">fab</span><span class="o">.</span><span class="na">setOnClickListener</span> <span class="o">{</span> <span class="n">view</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="c1">//System.gc()// this seldom works use Android studio force gc stop</span>
</span><span class='line'>       <span class="n">weakHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">MyObject</span><span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">toString</span><span class="o">()),</span> <span class="n">count</span><span class="o">)</span>
</span><span class='line'>       <span class="n">count</span> <span class="o">++</span>
</span><span class='line'>       <span class="n">dumpWeakInfo</span><span class="o">()</span>
</span><span class='line'>       <span class="n">Snackbar</span><span class="o">.</span><span class="na">make</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="s">&quot;Replace with your own action&quot;</span><span class="o">,</span> <span class="n">Snackbar</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">)</span>
</span><span class='line'>               <span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="s">&quot;Action&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">).</span><span class="na">show</span><span class="o">()</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">dumpWeakInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;dumpWeakInfo weakInfo.size=${weakHashMap.size}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们按照如下操作</p>

<ul>
<li>点击fab控件，每次对WeakhashMap对象增加一个Entry，并打印WeakHashMap的size 执行3此</li>
<li>在没有强制触发GC时，WeakHashMap对象size一直会增加</li>
<li>手动出发Force GC，我们会看到MyObject有finalize方法被调用</li>
<li>再次点击fab空间，然后输出的WeakHashMap size急剧减少。</li>
<li>同样我们收到在WeakHashMap增加的日志也会输出</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">Object</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="n">finalize</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">Object</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="n">finalize</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">Object</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="n">finalize</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">WeakHashMap</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">removeEntry</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">WeakHashMap</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">removeEntry</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">WeakHashMap</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">removeEntry</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">MainActivity</span><span class="o">(</span><span class="mi">10202</span><span class="o">):</span> <span class="n">dumpWeakInfo</span> <span class="n">weakInfo</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：System.gc()并不一定可以工作,建议使用Android Studio的Force GC</p>

<p>完整的测试代码可以访问这里  <a href="https://github.com/androidyue/WeakHashMapSample">https://github.com/androidyue/WeakHashMapSample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么局部变量需要显式设置初始化值]]></title>
    <link href="https://droidyue.com/blog/2018/07/16/variable-localname-might-not-have-been-initialized/"/>
    <updated>2018-07-16T08:40:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/16/variable-localname-might-not-have-been-initialized</id>
    <content type="html"><![CDATA[<p>我们在编程中，无时无刻地都在于方法打交道，而在方法中，我们很难不使用局部变量，比如我们有下面的这样一段很简单的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">dump</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">localName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dump localName=&quot;</span> <span class="o">+</span> <span class="n">localName</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>随着我们敲打出上面的代码，IDE也会同时抛给我们一个错误，就是
<code>Variable 'localName' might not have been initialized</code></p>

<p>这是什么错误，localName没有初始化？为什么成员变量是可以的的，不信你看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span>  <span class="kt">void</span> <span class="nf">dumpField</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpField name=&quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，上面的成员变量是没有问题，也没有警告的。</p>

<p>这就奇怪了，这是为什么呢，javac怎么这么蠢呢？</p>

<p>答案是否定的。javac足够有能力推断出局部变量并初始化默认值。然而它并没有这样做。</p>

<p>想要弄清楚为什么这样做就，就需要搞清楚局部变量和成员变量的关于赋值和取值的顺序的差异。</p>

<p>对于成员变量而言，其赋值和取值访问的先后顺序具有不确定性。还是以这段代码为例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span>  <span class="kt">void</span> <span class="nf">dumpField</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dumpField name=&quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>name的赋值可以发生在dumpField之前，也可以发生在dumpField之后。这是在运行时发生的，在编译器来看确定不了的。对于没把握的事情，javac是不会去做的，这种事情交给运行时的JVM就可以了。</p>

<p>而对于成员变量而言，其赋值和取值访问顺序是确定的。比如这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">dump</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">localName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;dump localName=&quot;</span> <span class="o">+</span> <span class="n">localName</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为localName的作用范围只限定于dump方法中，必然的顺序就是先赋值（声明），再进行访问。</p>

<p>说了半天还没有说局部变量为什么显式设置初始值呢？</p>

<p>其实之所以这样做就是一种对程序员的约束限制。因为程序员（人）是（有些情况下）是靠不住的，假使局部变量可以使用默认值，我们总会无意间忘记赋值，进而导致不可预期的情况出现。这</p>

<p>“之所以设计成这样完全是一种策略决定，并非是我力不能及，年轻人，我只能帮你到这里了。”，Javac如是说。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AssetManager.finalize() timed out after 10 seconds分析]]></title>
    <link href="https://droidyue.com/blog/2018/07/10/android-dot-content-dot-res-dot-assetmanager-dot-finalize-timed-out-after-10-seconds/"/>
    <updated>2018-07-10T21:44:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/10/android-dot-content-dot-res-dot-assetmanager-dot-finalize-timed-out-after-10-seconds</id>
    <content type="html"><![CDATA[<p>没有代码，就没有bug。程序员在编码时，总会比不避免的出现bug。倒不是因为我们热爱制造bug，创造机会和测试妹子频繁沟通。而是现实情况很复杂，存在着很多不确定性。尤其是那些崩溃从stacktrace上来看，完全想象不到和项目代码之间的直接联系。</p>

<!--more-->


<p>在我们的项目崩溃中，有一个比较常见的bug，就是 java.util.concurrent.TimeoutException android.content.res.AssetManager.finalize() timed out after 10 seconds  意思简单明了，就是说在AssetManager析构的时候发生了超时异常。</p>

<p>是的，道理我都懂，可是AssetManager不是我写的啊，这不是Android Framework的东西么，而且在stacktrace中丝毫看不到我项目代码的堆栈信息。这简直是无从下手。遇到这种情况，我们就需要从崩溃后台手机上的信息去分析产生的原因了</p>

<h3>原理分析</h3>

<ul>
<li>Android在启动后会创建一些守护进程，其中涉及到该问题的有两个，分别是FinalizerDaemon和FinalizerWatchdogDaemon</li>
<li>FinalizerDaemon 析构守护线程。对于重写了成员函数finalize的对象，它们被GC决定回收时，并没有马上被回收，而是被放入到一个队列中，等待FinalizerDaemon守护线程去调用它们的成员函数finalize，然后再被回收。</li>
<li>FinalizerWatchdogDaemon析构监护守护线程。用来监控FinalizerDaemon线程的执行。一旦检测那些重写了finalize的对象在执行成员函数finalize时超出一定时间，那么就会退出VM。</li>
<li>如果是FinalizerDaemon进行对象析构时间超过了MAX_FINALIZE_NANOS（这里是10s），FinalizerWatchdogDaemon进行就会抛出TimeoutException</li>
</ul>


<p>出现场景
10s的超时其实是很大的一个值，一般的析构方法很难执行时间达到这个数值，那么就要分析一下这个问题的特征，来总结一下出现场景了。</p>

<p>针对分析了这类的崩溃的数据，不难会得到几个特征</p>

<ul>
<li>这个崩溃从数据来看，崩溃都是应用处于后台不可见的情况下发生</li>
<li>崩溃时应用的使用时长（崩溃统计组件提供）普遍在几个小时的级别</li>
</ul>


<p>从Stack Overflow上找到了一个相对比较合理的出现场景</p>

<ul>
<li>当你的应用处于后台，有对象需要释放回收内存时</li>
<li>记录一个start_time 然后是FinalizerDaemon 开始析构AssetManager对象</li>
<li>在这个过程中，设备突然进入了休眠状态，析构执行被暂停</li>
<li>当过了一段时间，设备被唤醒，析构任务被恢复，继续执行，直至结束</li>
<li>在析构完成后，得到一个end_time</li>
<li>FinalizerWatchdogDaemon 对end_time与start_time进行差值对比，发现超过了MAX_FINALIZE_NANOS，于是就抛出了TimeOut异常。</li>
</ul>


<p>注意：应用后台执行的时间越长，出现的概率应该就会越大。</p>

<h3>如何解决</h3>

<p>这个问题，并不像NPE那样，可以快速定位解决，甚至来说，这个问题几乎无解。</p>

<p>理论上可能有帮助的措施是</p>

<ul>
<li>减少内存占用，避免不必要的对象创建</li>
<li>消除内存泄露问题，缓解GC压力</li>
</ul>


<p>但是这些措施，对于解决该问题起到的作用很微小。</p>

<h3>如何缓解</h3>

<p>凡事总有但是，但是我们可以缓解这个问题造成的影响。</p>

<p>所谓缓解之法，就是让崩溃悄无声息地发生，不影响用户体验，做到用户无感知崩溃。</p>

<p>前面也提到了，因为这种崩溃只出现在后台，我们可以对于这类的崩溃，稍作处理，就可以让崩溃的对话框不显示。具体可以参考这篇文章<a href="https://droidyue.com/blog/2018/04/01/do-not-bother-the-user-when-app-crash-in-a-background-state/">Android中实现用户无感知处理后台崩溃</a></p>

<p>以上。感谢下面的参考文章</p>

<h3>参考文章</h3>

<ul>
<li><a href="https://blog.csdn.net/jamin0107/article/details/78793021">https://blog.csdn.net/jamin0107/article/details/78793021</a></li>
<li><a href="https://stackoverflow.com/questions/24021609/how-to-handle-java-util-concurrent-timeoutexception-android-os-binderproxy-fin">https://stackoverflow.com/questions/24021609/how-to-handle-java-util-concurrent-timeoutexception-android-os-binderproxy-fin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[宽带提速记]]></title>
    <link href="https://droidyue.com/blog/2018/07/01/kuan-dai-ti-su-ji/"/>
    <updated>2018-07-01T20:14:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/07/01/kuan-dai-ti-su-ji</id>
    <content type="html"><![CDATA[<p>用了一年宽带马上就要到期了，去联通营业厅咨询了一下，发现联通已经悄悄的把我的100M免费升级成了300M(做好事为什么不告诉我一声)。心中划过一丝窃喜，但是随后脑海中抛出了一个疑问，都升到了300M了，怎么丝毫没有感觉到速度提升呢？</p>

<!--more-->


<h3>联通给的光猫WIFI有问题</h3>

<p>在一年前报装的时候，我确实测过网速，当时使用QQ手机管家测过，将近50M到100M。觉得可能是测试节点的问题，就没有太留意。</p>

<p>不过现在都300M的带宽了，怎么还是不能跑满，后来打联通客服，客服小哥说，光猫的WIFI属于附加功能，无法发挥到带宽的理想状态。</p>

<p>于是在京东上开始挑选路由器，货比N家，最终选择了一个不负所望的<a href="https://union-click.jd.com/jdc?d=o1fjbn">Tenda AC1206</a>，腾达还是挺有良心的国产品牌</p>

<p>当然我最看重的这几点</p>

<ul>
<li>双千兆，WIFI和Lan口都是千兆</li>
<li>智能管理，设备上线提醒（可以看到家人回家在家情况）</li>
<li>2.4Ghz与5Ghz同时支持</li>
<li>WIFI信号定向增强功能</li>
</ul>


<h3>光猫Lan口选择很重要</h3>

<p>需要注意的是，联通的光猫，我这里是中兴的F627Za，有点特殊，只有Lan1口支持千兆，其他是最高百兆，所以如果选择出错，无法体验到超百兆的速度，钱也就白花了。</p>

<h3>测速软件很重要</h3>

<p>选择一个好的测速软件，会使得我们的验证可以量化，这里我使用的是speedtest软件，，Android，Mac等都支持，注意Web也支持，不过不要用山寨的www.speedtest.cn, 而是要使用这个 <a href="http://www.speedtest.net/">http://www.speedtest.net/</a></p>

<p>注意做测速尽量选择统一运营商的测速节点，不要出现联通的用户端选择电信节点来测试带宽的情况。</p>

<h3>2.4G很慢，我要用5G</h3>

<p>可是当我使用Android手机连接腾达WIFI时，测速已然不到百兆，这就奇怪了，后来当我从2.4G切换到5G时，速度发生了巨变，将近200M。</p>

<p>这就涉及到了2.4G和5G的区别了</p>

<ul>
<li>这里的2.4G和5G 具体应该是2.4Ghz和5Ghz 所以这里的5G和5G通信不是一个概念</li>
<li>2.4G传输距离较长，带宽要少，穿墙能力要好，但是网络拥堵也比较多</li>
<li>5G传输距离较短，带宽要多一些，穿墙能力较弱，网络拥堵少</li>
</ul>


<p>那么该怎么选择</p>

<ul>
<li>有些设备不支持5G，仅支持2.4Ghz，尤其是一些带WIFI的空调和米家设备</li>
<li>如果你的设备支持5G（即能搜索到_5G结尾的WIFI）距离路由器比较近，或者隔墙少，建议使用5G</li>
<li>当然实际情况下，可以分别连接使用speedtest做个测速</li>
</ul>


<h3>Mac连接5G居然最慢，更改信道</h3>

<p>手机上一切都好了，可是我使用Mac连接5G，发现出奇地慢，由于我的Mac安装了双系统，切到windows下，可以跑满300M，但是Mac系统下就不行。尝试了很多方法，最后修改了5G的信道，改成了161，测速就可以达到300M了。</p>

<p>大家可以更改5G的信道去尝试，国内规定可用的5G信道只有149、153、157、161、165这5个，具体以测试数据为准。</p>

<p>注意更改信道后，建议重启路由器或者客户端重新连接WIFI。</p>

<h3>手机跑不满，电脑很可以</h3>

<p>注意，我在测速的时候也发现了，手机通常无法跑满，而电脑是可以的，这其中应该和硬件的配置有关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谁来检查方法参数合法性]]></title>
    <link href="https://droidyue.com/blog/2018/05/15/who-should-be-responsible-for-checking-parameter/"/>
    <updated>2018-05-15T21:31:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/05/15/who-should-be-responsible-for-checking-parameter</id>
    <content type="html"><![CDATA[<p>我们在编程中的函数或者是方法，大多数都是有参数的。参数对于方法来说是很重要的输入数据，传入的参数值的合法性影响着方法的稳定性，严重时甚至可能导致崩溃问题的出现。</p>

<!--more-->


<p>比如这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">Main</span><span class="o">().</span><span class="na">buy</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buy</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码在执行起来会导致空指针异常，其实解决起来也挺简单，就是做一些非空的检查，比如这样,在调用处进行校验</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">book</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">new</span> <span class="nf">Main</span><span class="o">().</span><span class="na">buy</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者是这样在方法定义的时候处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buy</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">book</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就这个案例而言，两者都可以，但是有没有什么规范呢</p>

<p>其实还是有一些约定的
如果方法是public,protected等这样被外部可调用的时候，方法定义时需要进行值的合法性检验，因为无法确保外部始终传递合法的参数值。
对于内部的private等可见性等，则不是必需的，因为内部调用相对是可控更高的。</p>

<p>除此之外，我们在JavaDoc注释也需要同步跟进，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* bub a book</span>
</span><span class='line'><span class="cm">* @param book could be null</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buy</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">book</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们通过增加<code>@param book could be null</code>就可以告诉调用者，不用做合法性检查，方法内部已经处理了。这种方式对开发者还是比较友善的。此外我们也可以使用@Nullable或者@NonNull来表明当前参数的检查职责归属。</p>

<p>至此我们也理清了检查方法参数合法性的责任归属，欢迎评论交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中实现用户无感知处理后台崩溃]]></title>
    <link href="https://droidyue.com/blog/2018/04/01/do-not-bother-the-user-when-app-crash-in-a-background-state/"/>
    <updated>2018-04-01T22:29:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/04/01/do-not-bother-the-user-when-app-crash-in-a-background-state</id>
    <content type="html"><![CDATA[<p>正所谓，要想没有bug，就一行代码也不写。App到了用户的手里，肯定是崩溃越少越好。Android中的崩溃处理和iOS不太一样，iOS崩溃通常是闪退，而安卓会出现如下的蹩脚的对话框</p>

<p><img src="https://asset.droidyue.com/image/app_crash_v1.png" alt="https://asset.droidyue.com/image/app_crash_v1.png" /></p>

<p>当你的用户看到类似这样的崩溃对话框时，心中得到“这届程序员不行啊”的感慨也不足为奇。</p>

<!--more-->


<p>在安卓中，我们应用会有所谓的前台和后台的概念，在本文这里这样定义，当前应用有Activity展示（即用户明显感知在当前应用），约定为前台，否则为后台。</p>

<p>如果在前台时，发生崩溃用户是明显能感知的，但倘若发生在后台，我们可以做一些简单的小操作，让用户感知不到崩溃的发生（即不弹出崩溃的对话框）。</p>

<p>原理其实蛮简单的。</p>

<ul>
<li>检测是否为后台</li>
<li>如果是后台则杀掉该进程，否则执行默认的崩溃处理</li>
</ul>


<p>检测是否为后台，这里我们以进程中Activity的数量作为判断标准</p>

<ul>
<li>当activity onStart时activityCount自增</li>
<li>当Activity onStop时activityCount自减</li>
<li>当activityCount为0，我们则认为应用处于后台状态</li>
</ul>


<p>具体实现如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">object</span> <span class="nl">ActivityLifecycleCallbackImp:</span> <span class="n">Application</span><span class="o">.</span><span class="na">ActivityLifecycleCallbacks</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">var</span> <span class="nl">activityCount:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivityPaused</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivityResumed</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivityStarted</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">activityCount</span> <span class="o">++</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivityDestroyed</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivitySaveInstanceState</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?,</span> <span class="nl">outState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivityStopped</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">activityCount</span><span class="o">--</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onActivityCreated</span><span class="o">(</span><span class="nl">activity:</span> <span class="n">Activity</span><span class="o">?,</span> <span class="nl">savedInstanceState:</span> <span class="n">Bundle</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Application中进行注册</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">MyApplication</span> <span class="o">:</span> <span class="n">Application</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">()</span>
</span><span class='line'>       <span class="n">registerActivityLifecycleCallbacks</span><span class="o">(</span><span class="n">ActivityLifecycleCallbackImp</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>剩下的就是设置一个自定义的未捕获异常处理处理器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">defaultHandler</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">getDefaultUncaughtExceptionHandler</span><span class="o">()</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">setDefaultUncaughtExceptionHandler</span> <span class="o">{</span> <span class="n">thread</span><span class="o">,</span> <span class="n">exception</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">()</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">isBackground</span> <span class="o">=</span> <span class="n">ActivityLifecycleCallbackImp</span><span class="o">.</span><span class="na">activityCount</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">isBackground</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MyApplication&quot;</span><span class="o">,</span> <span class="s">&quot;isBackground just kill the process without annoying users&quot;</span><span class="o">)</span>
</span><span class='line'>       <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">())</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">defaultHandler</span><span class="o">.</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">thread</span><span class="o">,</span> <span class="n">exception</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此功能就基本实现了，相对之前硬邦邦的对话框，后台无干扰用户的默默杀掉进程要友好很多了。</p>

<p>关于崩溃的文章，我还有一篇相关的，请移步这里<a href="https://droidyue.com/blog/2015/12/06/practise-about-crash-in-android/">Android处理崩溃的一些实践</a>查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于改善强迫症的一些方法]]></title>
    <link href="https://droidyue.com/blog/2018/03/17/qiangpozheng/"/>
    <updated>2018-03-17T14:35:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/03/17/qiangpozheng</id>
    <content type="html"><![CDATA[<p>一直以来我都有强迫症，尤其是毕业工作后，明显地感觉更加严重了。经常反复确认水龙头有没有关，锁门后下楼梯，往往又要上来检查一下是否真的锁上。总是担心天然气气有没有关紧。如此种种，每一天在出门离家的时候都是最痛苦的时段。</p>

<!--more-->


<p>种种焦虑都是基于自己的某种相对极端的幻想，比如水龙头没有关的话，会使得家里甚至楼下被泡；门没有锁可能导致家里遭窃，重要东西丢失；天然气没有关好，结果更加严重。如此幻想反反复复，使得我心神不宁，倍感焦虑。</p>

<p>为什么会有这些幻想？发自内心的声音告诉我，因为不想因为自己的疏忽导致代价较大甚至严重的后果。我的朋友们都说这是缺乏安全感的表现，我也很认同这一点。</p>

<p>我记得最严重的一次就是最近，我已经乘坐地铁驶出好几站了，但是突然间在想有没有关窗户呢，犹豫了几分钟，我便做出了返程回家确认的决定，回家确认，窗户紧紧得锁着。于是便安心了，可是这一折腾，上班时间延误了30多分钟。内心也着实地痛苦。</p>

<p>为什么当时明明关上窗户锁上门，过后就不记得了呢？关于原因的解释如下</p>

<blockquote><p>认知心理学里有个词儿叫“瞬时记忆”，又叫“感觉登记”。意思是说，外部信息刺激到人的感官，就会在人的大脑里被暂时性的贮存，这种不是有意识去获得的就叫做瞬时记忆。它具有丰富的信息量，但是一般都是下意识、被动获得的，处于未经加工的原始状态。说白了就是，你的眼睛看见了，你的耳朵听见了，但是你没过脑子。没过脑子的这种记忆，保持时间很短，很容易丧失。而人的记忆又很容易受到身边所感知到的空间的影响，一旦所处的空间发生变化，记忆会进行一些重新建构。这就更容易把之前的瞬时记忆给丢了。因而哪怕是走下楼，就想不起来到底有没有做“锁门”这个重复无数次极其简单的动作的情况，再正常不过了。</p>

<p>作者：子鸡
链接：<a href="https://www.zhihu.com/question/20978967/answer/22998357">https://www.zhihu.com/question/20978967/answer/22998357</a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>

<p>后来慢慢地我发现了一些缓解症状的方法和技巧。</p>

<h2>关于锁门</h2>

<p>我找到了一个不错的技巧。那就是用微信拍一个10秒钟的关门小视频，然后发给文件传输助手。如下面的示例视频这样
<video style="width:50%"   controls>
  <source src="https://asset.droidyue.com/video/close_the_door_video.mp4" type="video/mp4">
</video></p>

<p>这样每次当自己记不起来的时候，就看看小视频就能确认了。</p>

<h2>燃气灶</h2>

<p>燃气灶这个一定要确保关闭，最开始都是打开以下，然后关闭听到“噔”的一声就放心了，但是这昂反复操作也不一定好，后来只要开关阀的指示标指向Off就算关闭。
<img src="https://asset.droidyue.com/image/ranqizao_off.png" alt="https://asset.droidyue.com/image/ranqizao_off.png" /></p>

<p>不过后来，我接触了一个更加智能的方法，比如关于是否锁门，我使用了小米的门窗传感器，如下图，颜值很正义。</p>

<p><img src="https://asset.droidyue.com/image/xiaomi_menchuang_chuanganqi.jpg" alt="https://asset.droidyue.com/image/xiaomi_menchuang_chuanganqi.jpg" /></p>

<p>可以准确的得到门的关闭状态。并且结合配套的多功能网关，可以实现，当某些条件下打开门，触发报警发声或者提醒用户。</p>

<p>同样对于天然气，小米也有一个报警器，感觉还不错，和HoneyWell合作的，值得信赖。</p>

<p><img src="https://asset.droidyue.com/image/tianranqi_baojing.jpg" alt="https://asset.droidyue.com/image/tianranqi_baojing.jpg" /></p>

<p>小米传感器，天然气报警器购买地址: <a href="https://union-click.jd.com/jdc?d=OOBAKt">点击这里了解</a></p>

<p>除此之外，从心理上来解决是另外的一种很有效的途径，有一本叫做<a href="https://amazon.cn/gp/product/B0028RYAJ0/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=droidyue-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B0028RYAJ0&amp;linkId=6668c1886a6115ac55956f28ea0efd07">《走出强迫症：找回美丽的日子》</a>  的书，里面有很多案例，对于解决问题还是很有参考价值和帮助的。</p>

<p>关于强迫症，我目前的办法就是这些，总的来说这样下来再也不会出现走出几公里，又回来检查的行为了。确实痛苦减轻了不少。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android基于坐标对View进行模拟点击事件]]></title>
    <link href="https://droidyue.com/blog/2018/03/11/simulate-view-click-by-x-and-y/"/>
    <updated>2018-03-11T20:30:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/03/11/simulate-view-click-by-x-and-y</id>
    <content type="html"><![CDATA[<p>在Android中，我们对于View进行模拟点击事件，很容易，比如调用<code>View.performClick</code>即可。</p>

<p>但是有些时候，我们想要更加精细的点击，比如View的某一区域或者某一点进行点击。比如下面的例子。</p>

<!--more-->


<p><img src="https://asset.droidyue.com/image/simulate_view_click.png" alt="https://asset.droidyue.com/image/simulate_view_click.png" /></p>

<p>上面是一个WebView加载了一个视频，我们必须手动点一下播放按钮才能让视频播放，当然我们想要的最好是如下的自动播放效果（进入界面后，自动播放视频）</p>

<p><img src="https://asset.droidyue.com/image/simulate_view_click_by_x.y.gif" alt="https://asset.droidyue.com/image/simulate_view_click_by_x.y.gif" /></p>

<p>当然方法有很多，比如通过javascript调用视频元素的click事件。在这里我们暂不对该方法进行细究。本文旨在提供一种解决问题的可行方法。</p>

<p>其实我们可以通过View.dispatchTouchEvent就能解决，因为一个click事件可以理解成一个Action_down和一个Action_up MotionEvent的组合，所以实现起来如下即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">fun</span> <span class="nf">simulateTouchEvent</span><span class="o">(</span><span class="nl">view:</span> <span class="n">View</span><span class="o">,</span> <span class="nl">x:</span> <span class="n">Float</span><span class="o">,</span> <span class="nl">y:</span> <span class="n">Float</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">downTime</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">eventTime</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="mi">100</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">metaState</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="n">val</span> <span class="n">motionEvent</span> <span class="o">=</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">downTime</span><span class="o">,</span> <span class="n">eventTime</span><span class="o">,</span>
</span><span class='line'>           <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">metaState</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">view</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">motionEvent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">val</span> <span class="n">upEvent</span> <span class="o">=</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">downTime</span> <span class="o">+</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">eventTime</span> <span class="o">+</span> <span class="mi">1000</span><span class="o">,</span>
</span><span class='line'>           <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">,</span> <span class="n">metaState</span><span class="o">)</span>
</span><span class='line'>   <span class="n">view</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">upEvent</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于坐标位置的选择，仔细分析你会发现，上面的视频的播放按钮其实是有特点的，播放按钮始终处于WebView的中心，即模拟的点击可以是WebView.getWidth/2和WebView.height/2这个点。</p>

<p>为了便于测试和验证模拟事件的成功，我们可以增加OnTouchListener进行验证，如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">webview</span><span class="o">?.</span><span class="na">setOnTouchListener</span> <span class="o">{</span> <span class="n">v</span><span class="o">,</span> <span class="n">event</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="n">debugMessage</span><span class="o">(</span><span class="s">&quot;onTouchListener x=${event.x};y=${event.y}&quot;</span><span class="o">)</span>
</span><span class='line'>   <span class="kc">false</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于例子中的何时出发模拟事件，我们可以在WebView网页加载完成的时候实现，即</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">webview</span><span class="o">?.</span><span class="na">webViewClient</span> <span class="o">=</span> <span class="n">object</span> <span class="o">:</span> <span class="n">WebViewClient</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">override</span> <span class="n">fun</span> <span class="nf">onPageFinished</span><span class="o">(</span><span class="nl">view:</span> <span class="n">WebView</span><span class="o">?,</span> <span class="nl">url:</span> <span class="n">String</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">super</span><span class="o">.</span><span class="na">onPageFinished</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">url</span><span class="o">)</span>
</span><span class='line'>       <span class="n">webview</span><span class="o">?.</span><span class="na">post</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">webview</span><span class="o">?.</span><span class="na">let</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">simulateTouchEvent</span><span class="o">(</span><span class="n">it</span><span class="o">,</span> <span class="n">it</span><span class="o">.</span><span class="na">width</span> <span class="o">/</span> <span class="mi">2</span><span class="n">f</span><span class="o">,</span> <span class="n">it</span><span class="o">.</span><span class="na">height</span> <span class="o">/</span> <span class="mi">2</span><span class="n">f</span><span class="o">)</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基于坐标对View进行模拟点击的代码示例完整版，请访问  <a href="https://github.com/androidyue/SimulateViewClickByXandY">https://github.com/androidyue/SimulateViewClickByXandY</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于应用Kotlin后的编译速度问题]]></title>
    <link href="https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation/"/>
    <updated>2018-01-31T22:10:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/01/31/how-to-speed-up-kotlin-compilation</id>
    <content type="html"><![CDATA[<p>2017年 Kotlin 被 Google 钦定为 Android 开发官方语言之一后，便如火如荼。很多团队开始应用了Kotlin，可谓是收益良多，可是也有一些问题，一个比较明显的就是Kotlin应用后编译速度会比较慢。这种感觉就像我们从Eclipse迁移到Android Studio变慢差不多。本文将尝试介绍一些方法来改善这一问题。</p>

<p>关于项目编译慢有很多原因，在Android项目中，通常会和Kotlin和Gradle有关系。首先我们通过一组图就能发现这其中的问题。其中</p>

<ul>
<li>红色代表Java,青色代表Kotlin</li>
<li>X轴代表编译次数数据，Y轴达标消耗的时间</li>
<li>Java的项目和Kotlin的项目实现功能一致，无其他额外差别</li>
</ul>


<!--more-->


<p>下图的测试为10次连续的未修改的编译，两个项目均没有启动Gradle daemon。可以看出Kotlin耗时确实要耗时多一些。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/Ten_consecutive_clean_builds_without_the_Gradle_daemon.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/Ten_consecutive_clean_builds_without_the_Gradle_daemon.png" /></p>

<p>接下来我们尝试开启Gradle daemon，下图即为新的测试数据（连续10次开启gradle daemon编译）。</p>

<p>我们可以发现开启gradle daemon后，Java的编译耗时和Kotlin明显减少，但是总的来看，Kotlin还是要耗时一些。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/TenconsecutivecleanbuildswiththeGradledaemonrunning.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/TenconsecutivecleanbuildswiththeGradledaemonrunning.png" /></p>

<p>Kotlin在1.0.2后，增加了增量编译，那么我们看一下开启增量编译后的效果呢，如下图（启用增量编译后，连续10次没有文件变化的编译）</p>

<p>我们可以发现，除了第一次编译差距大一些的情况外（因为增量编译对第一次编译不起作用），后续的Java和Kotlin编译时间几乎一样，甚至Kotlin耗时更少。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/TenXconsecutiveincrementalbuildswithnofileschanged.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/TenXconsecutiveincrementalbuildswithnofileschanged.png" /></p>

<p>一个文件不修改的增量编译现实中很少，很多时候我们都会进行文件的修改。当我们尝试修改一个独立的文件，再次执行测试，看一看有什么效果，如下图。</p>

<p>真的不可思议，Kotlin耗时这下已经和Java拉开了更大的差距，表现的更加优秀。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/TenYconsecutive_incrementalbuildswithoneisolatedfilechanged.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/TenYconsecutive_incrementalbuildswithoneisolatedfilechanged.png" /></p>

<p>然而项目中，我们的修改往往可能是针对一块核心的代码，很多的地方都调用它，当我们在尝试修改一个核心代码，连续10次进行测试（kotlin开启增量编译），数据又是如何呢？</p>

<p>如下图所示，Kotlin表现依然优秀于Java。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/Tenconsecutiveincrementalbuildswithonecorefilechanged.png" alt="http://7jpolu.com1.z0.glb.clouddn.com/Tenconsecutiveincrementalbuildswithonecorefilechanged.png" /></p>

<p>通过上面的图例说明，我们发现其实Kotlin在某些情况下编译并不慢。同样我们也发现了一些加速Kotlin编译的方法，即</p>

<ul>
<li>开启gradle daemon，即在~/.gradle/gradle.properties文件中，增加org.gradle.daemon=true</li>
<li>在项目的gradle.properties中增加kotlin.incremental=true  开启kotlin的增量编译。</li>
<li>尝试使用最新的kotlin版本，增加编译速度是Kotlin团队一直努力的目标</li>
<li>更多的加速编译的方法，请参考<a href="http://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
</ul>


<h2>引用资料</h2>

<ul>
<li>文中的测试数据图引用出为<a href="https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d">Kotlin vs Java: Compilation speed</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网站第一次被黑的记录]]></title>
    <link href="https://droidyue.com/blog/2018/01/23/the-first-time-my-blog-was-hacked/"/>
    <updated>2018-01-23T22:14:00+08:00</updated>
    <id>https://droidyue.com/blog/2018/01/23/the-first-time-my-blog-was-hacked</id>
    <content type="html"><![CDATA[<p>一直以来技术小黑屋的博客都运行良好，总以为一个全部静态的博客不会导致被黑。直到最近才着实地体验了一次被黑的滋味。仅以此文记录一下，便于给同样问题的人一些帮助。</p>

<p>大概是周三（2018年1月17号）的时候，有人反馈，访问我的网站，会跳转到支付宝。当然还奇怪，调到支付宝有个甚用，后来使用手机上的浏览器才发现。这个跳转回自动的打开支付宝然后领取红包。又是一起为了支付宝红包的行为。以前听说过用有人用基站发短信领取，没想到居然这么快居然和我扯上关系了。</p>

<!--more-->


<p>于是我就顺着这个问题，进行了一系列的调查。
首先，由于微信的屏蔽，我得到了这样的一个比较有效的信息。
<img src="https://js.droidyue.com/images/droidyue_alipay_hongbao_issue.jpeg" alt="https://js.droidyue.com/images/droidyue_alipay_hongbao_issue.jpeg" /></p>

<p>得到了跳转的链接，接下来就需要确认从哪里跳过去的。由于之前有过相关浏览器的经验，于是写了一个简单的webView，然后答应出来了所有的网络请求。得到的请求如下
<img src="https://js.droidyue.com/images/alipay_droidyue_web_request_2.jpg" alt="https://js.droidyue.com/images/alipay_droidyue_web_request_2.jpg" /></p>

<p>然后使用特别容易出现的联通网络，挨个查找接近跳转链接的请求。比如<code>book_rec_base.js</code>,果然不看不知道，一看吓一跳。
<img src="https://js.droidyue.com/images/china_unicom_issue_js_1.jpg" alt="https://js.droidyue.com/images/china_unicom_issue_js_1.jpg" /></p>

<p>天哪，在太原机房的文件居然这么简单粗暴的修改成了支付宝跳转链接，WTF。别的机房是不是有问题呢？后来试了几个非联通网络没有发现问题。</p>

<h2>为什么只有联通下才出现，而其他运营商不出现问题呢，这是一个疑问。</h2>

<p>原因其实很简单，我使用了七牛的CDN，一个网络请求会根据客户端的运营商和地理位置择优选择机房的备份。而北京联通的用户，则不幸的都被导向了有问题的山西太原联通机房。</p>

<h2>到底是被运营商劫持了还是文件被而已修改了呢</h2>

<p>我是这样验证的，使用一个不发生劫持的运营商（比如香港主线）然后绑定hosts，指定访问太原机房的服务器，看一下是什么结果。
<img src="https://js.droidyue.com/images/droidyue_force_access_taiyuan_1.jpg" alt="https://js.droidyue.com/images/droidyue_force_access_taiyuan_1.jpg" /></p>

<p>我们可以看到这个文件确实被修改了。</p>

<h2>怎么解决呢</h2>

<p>本以为在七牛强制刷新这个文件的缓存能解决问题，可是谁知道呢，貌似被刷新之后，没过多久又变成了跳转支付宝的内容，貌似像是一个自动定时修改的脚本。</p>

<h3>初步解决方案</h3>

<p>我把相关的这些js文件全部转向放在github pages上，果然没有问题了。</p>

<p>目前我准备把网站支持https。初步尝试了cloudflare发现确实不错，可是在移动运营商下居然访问不了，原因你懂我也懂。后来发现又拍云可以自动创建Let&rsquo;s Encrypted的证书并且支持续签，于是才下决心试一试又拍云。</p>

<p>忍不住打个广告，由于我的又拍云初始容量有限，欢迎大家使用我的邀请链接注册  <a href="https://console.upyun.com/register/?invite=Hkw6NeiBZ">https://console.upyun.com/register/?invite=Hkw6NeiBZ</a>   注册并完成认证，赠送 61 元免费代金券。</p>

<p>最后，对这段时间中招的同学表示歉意，以后小黑屋博客将更加安全有序运行，当然会逐步恢复之前的文章更新进度。感谢有你的支持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin中常量的探究]]></title>
    <link href="https://droidyue.com/blog/2017/11/05/dive-into-kotlin-constants/"/>
    <updated>2017-11-05T20:53:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/11/05/dive-into-kotlin-constants</id>
    <content type="html"><![CDATA[<p>在我们尝试使用Kotlin作为开发语言的时候，应该会想到在Kotlin中如何定义一个常量，就像Java中这样的代码一样</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="mf">3.14159265358979323846</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Kotlin中，提供了两个简单的关键字，一个是var，另一个是val</p>

<ul>
<li>var 表示普通的可变的变量，可读和可写</li>
<li>val 表示为只读的变量。相当于Java中用final修饰的变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'><span class="n">val</span> <span class="nl">id:</span> <span class="n">Long</span> <span class="o">=</span> <span class="mi">1L</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="s">&quot;Title set in test function&quot;</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">=</span> <span class="mi">111</span> <span class="c1">//compile error</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因而使用val修饰的就是Kotlin的常量了吧</p>

<p>相信很多人曾经误以为val就是Kotlin中的常量，然后并不是，比如下面的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="nl">currentTimeMillis:</span> <span class="n">Long</span>
</span><span class='line'>    <span class="n">get</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面当我们每次访问<code>currentTimeMillis</code>得到的值是变化的，因而不是常量。</p>

<h2>为什么呢</h2>

<p>这是因为在Kotlin中，一个var会对应生成两个方法,即getter和setter方法，比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">var</span> <span class="nl">title:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的字节码会包含如下的两个方法和一个backing field</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'><span class="nd">@Nullable</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setTitle</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而对于val来说只会生成一个对应的get方法,比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="nl">id:</span> <span class="n">Long</span> <span class="o">=</span> <span class="mi">1L</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的字节码会包含类似这样的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何才能生成真正的常量呢</h2>

<p>想要实现真正的常量其实不难，方法有两种，一种是const，另一个使用@JvmField注解</p>

<h3>const</h3>

<p>const，顾名思义，就是常量的单词简写，使用它可以声明常量，不过仅限于在top-level和object中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//top-level</span>
</span><span class='line'><span class="kd">const</span> <span class="n">val</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Kotlin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//object中</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">DemoConstant</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">const</span> <span class="n">val</span> <span class="n">subName</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>所谓的top-level就是位于代码文件的最外部，比如常见的类（非内部类和嵌套类）就是在top-level。意思是在结构上常量不属于任何的类，而是属于文件。</li>
<li>object中可以指的是最外部的object也可以指的是companion object.</li>
</ul>


<h3>@JvmField</h3>

<ul>
<li>在val常量前面增加一个@JvmField就可以将它变成常量。</li>
<li>其内部作用是抑制编译器生成相应的getter方法</li>
<li>是用该注解修饰后则无法重写val的get方法</li>
</ul>


<p>示例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@JvmField</span> <span class="n">val</span> <span class="n">NAME</span> <span class="o">=</span> <span class="err">&quot;</span><span class="mi">89757</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Kotlin的常量研究，最有效的方法就是分析bytecode和反编译对比学习。关于如何学习Kotlin可以阅读本文  <a href="http://droidyue.com/blog/2017/05/08/how-to-study-kotlin/">研究学习Kotlin的一些方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我学习Android的一些套路]]></title>
    <link href="https://droidyue.com/blog/2017/10/22/to-way-to-learning-android/"/>
    <updated>2017-10-22T21:43:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/10/22/to-way-to-learning-android</id>
    <content type="html"><![CDATA[<p>今天我将给大家分享一下我学习Android的一些方法和想法，分享中并不局限于Android哪一块怎么学习。而是一个总体的，普适性的学习套路和方法。希望可以帮助大家解决一些问题。</p>

<p>注意本文为知乎Live底稿，知识点相对分散，后面部分包含了一些听众提出的问题，但是不影响总体的阅读和理解。</p>

<!--more-->


<h2>Android需要打好哪些编程基础</h2>

<ul>
<li>Java基础(Kotlin)（参考技能树  <a href="http://olabqc6d8.bkt.clouddn.com/Java_skill_tree.png">http://olabqc6d8.bkt.clouddn.com/Java_skill_tree.png</a>)</li>
<li>OOP思想与设计模式</li>
<li>Android基础（参考Android技能树 <a href="http://7jpolu.com1.z0.glb.clouddn.com/Android_skill_tree.png">http://7jpolu.com1.z0.glb.clouddn.com/Android_skill_tree.png</a>  ）</li>
<li>数据结构与算法</li>
<li>其他，比如JVM相关</li>
</ul>


<h2>除了编程基础，我们还需要补充哪些能力</h2>

<ul>
<li>喜欢钻研的兴趣</li>
<li>良好的英语理解能力</li>
<li>善于思考和总结的习惯</li>
<li>高效率的学习方法</li>
<li>能够机智地利用Google搜索</li>
<li>善于利用工具</li>
<li>和现实事物关联类比的能力</li>
<li>对待问题的态度</li>
</ul>


<p>1.喜欢钻研的兴趣，尽管高级编程语言的出现让我们将精力更多的放到业务上，而不是编程细节。正所谓知其然知其所以然，钻研细节可以更好地帮助我们实现业务，做到了然于胸。</p>

<p>2.良好的英文理解能力。由于一些原因，我们接触到的一些技术的资料都是二手资料，而这些二手资料往往在知识传递的效果上有一些折扣，甚至是偏差。英语可以说是（安卓）编程提升的加速器。同时，英语好的话，可以辅助我们写出更具有自解释的代码。</p>

<p>3.善于思考和总结的习惯。真理越辩越明，同样技术越思考越清晰。对于一个技术通常我们需要抱有这样的疑问</p>

<ul>
<li>它是什么 一句话概括</li>
<li>解决了什么问题 存在的意义</li>
<li>怎样解决了问题 内部的实现</li>
<li>它的缺点是什么 多角度分析</li>
</ul>


<p>比如我们关于WebView的考虑点的总结</p>

<ul>
<li>是否支持js</li>
<li>是否支持mixed content (https网页加载http图片)</li>
<li>与js通信的问题，比如给方法增加JavaScriptInterface注解</li>
<li>是否自身处理某些URL（协议不同，不让flipboard://showSection等）还是交给外部程序</li>
<li>关于UA中是否加入特定的标识,比如Flipboard字样</li>
<li>是否增加特定的header</li>
</ul>


<p>有了思考，我们需要以文字的形式记录下来，这也应了那句老话，好记性不如烂笔头。建议以博客的形式总结出来。</p>

<p>4.高效率的学习方法。</p>

<ul>
<li>理清楚概念很重要</li>
<li>做好控制变量法</li>
<li>多动手实践，与理论结合</li>
<li>抓住重点，剔除干扰因素</li>
</ul>


<p>其实，任何复杂的事情都是由简单的事情组成，编程也是一样。在编程过程中，我们会接触到很多概念，这些概念很重要，对于概念的一知半解往往会使得我们越走越慢，学习起来原来越困难。因此对于编程中的概念要务必理解准确和深刻。</p>

<p>控制变量法：我们在初中做实验的时候，经常会用到控制变量法。在编程中红也是。当我们在解决问题时，也要做到控制一处修改。比如我们项目中需要修一个webview相关的bug，我们要想一想能不能脱离现在庞大而负责的项目，单独写一个简单的变量单一的sample来重现，做到快速和小粒度验证。</p>

<p>多动手实践与理论结合：很多时候，我们学习新技术的时候，我们应该先学会使用它，有了初步的认知之后，便于我们更好的理解和深入研究。比如关于GUI的东西，我们最好时不时做出一些东西，理论和实践要做到相辅相成。</p>

<p>抓住重点，剔除干扰因素：</p>

<ul>
<li>任何复杂的事情都是简单问题错综复杂交织在一起，进行拆分</li>
<li>去除无关因素或者干扰因素</li>
<li>补充了解问题必备的知识</li>
<li>具象分析：看它的实现原理和运行机制 （比如通过分析源码，我们知道HandlerThread无非就是一个自带并初始化好了Handler的线程）</li>
<li>抽象总结：从适度抽象的角度进行归纳</li>
</ul>


<p>5.机智地使用Google。从事编程工作，使用Google是一种必须。虽然国内访问不了，但是对于聪明的程序员来说这不算问题。通常情况下，我都是讲想要搜索的知识点转成英文的形式，不包含中文。优先查看stackoverflow 和 google groups的内容。相比而言，中文的相关资源并不是很可靠，质量也普遍差一些。</p>

<p>6.善用工具，多使用终端，多尝试写一些脚本解决重复的工作。Python，Ruby,Shell脚本都可以帮助你写出很多利器。</p>

<ul>
<li>比如全文查找关键字工具  <code>grep  -E $1 --exclude-dir={.git,lib,.gradle,.idea,build,captures} --exclude={*.png,*.jpg,*.jar}  . -R --color=always -n</code>能找出Android工程下面的包含某个关键字的文件以及所在的行数。</li>
<li>快速获取当前Activity的名称  <code>adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' --color=always</code></li>
<li>快速检查json文件是否合法</li>
<li><a href="https://github.com/androidyue/DroidScripts">https://github.com/androidyue/DroidScripts</a></li>
</ul>


<p>7.和现实事物关联类比的能力</p>

<p>随着编程时间的增长，我们会原来越发现程序里的很多概念和现实生活中的事物是类似的。</p>

<ul>
<li>比如数据库的索引和现实生活中我们使用的字典索引。好处都是便于快速查找。不好的地方，索引多了会增加占用，增加，删除，修改同时连带索引修改会慢一些等。</li>
<li>比如对象池和现实中餐厅的公共餐具是类似的。我们都需要回收的时候，清理脏数据，避免影响到下一次使用。</li>
<li>比如KFC里面的餐具回收人员关于何时回收餐盘，和JVM的GC其实是类似的。一个对象不被其他对象持有，就可以回收。即一个桌子上没有人，只有餐具通常是可以回收的。</li>
</ul>


<h3>如何做到关联和类比</h3>

<ul>
<li>了解编程中的具体概念，抓住问题的关键点和关键行为</li>
<li>选择现实中习以为常的事物和行为进行类比，不要选择模糊不清的。</li>
<li>提取共同点，检查是否match。</li>
</ul>


<p>8.对待问题的态度
对待问题的态度一定要积极。不能得过且过。比如对待不容易/不能复现的问题，及时手头没有可以复现的机器，也要通过模拟/使用云设备  等方式尝试重现。</p>

<p>对于目前在做的只有自己已知的问题，不要隐瞒，尽量暴露出来，这样便于自己和他人更好的发现解决。</p>

<h2>作为Android程序员，如何把握好技术的宽度和深度</h2>

<p>对于Android来说，有太多的诱惑，比如React Native，小程序，热更新，插件化。</p>

<p><img src="http://olabqc6d8.bkt.clouddn.com/t_genius.jpeg" alt="http://olabqc6d8.bkt.clouddn.com/t_genius.jpeg" /></p>

<p>我理解的应该是先从宽度上拓展，然后在尽心深度研究。</p>

<h3>什么时候需要横向拓展</h3>

<ul>
<li>初学者</li>
<li>工作业务量繁多，比如浏览器开发（普通App开发技术，HTML+Javascript等技术）</li>
<li>自身兴趣</li>
</ul>


<h3>什么时候需要纵向深入</h3>

<ul>
<li>中级和高级开发</li>
<li>追求更深入的细节和思想</li>
<li>工作内容需要</li>
</ul>


<h3>横向发展有哪些</h3>

<ul>
<li>ReactNative等技术</li>
<li>简单的后台开发 Java/PHP/Python/Ruby</li>
<li>IOS等应用开发</li>
<li>总而言之就是会的多</li>
</ul>


<h3>纵向发展有哪些</h3>

<ul>
<li>系统源码</li>
<li>各种技术的实现机制</li>
<li>操作系统相关知识等</li>
<li>总而言之就是学得精，知其然深知其所以然。</li>
</ul>


<p>我个人比较倾向于多花点时间做深入研究，在这个过程中会慢慢形成一种透彻理解技术的能力，有了这种能力之后就能触类旁通，学习其他技术也会更加轻松。</p>

<p>另外，工作需要时影响你朝着哪个维度发展的重要因素。所以选择一个公司要谨慎。</p>

<ul>
<li>通常大公司，优秀的团队会有利于你进行纵向深入</li>
<li>小公司，创业公司更多的会影响你进行横向发展。</li>
</ul>


<h2>如何从日常的工作中获取最大的收益</h2>

<p>日常的工作中，我们都是在做公司的项目。我们想要做到最大化收益需要做到</p>

<ul>
<li>不要将自己的要求仅仅停留在功能实现（比如完成一个界面不代表你的收益做到最大，只是代表任务完成）</li>
<li>要理解你所使用的技术的原理和本质。不要停留在API使用，否则无法增强你的竞争力。比如我们对于加载Bitmap都会用到LRUCache，我们则需要至少理解LRUCache的原理，如果可以的话，了解它的内部实现机制。</li>
<li>项目中有好的地方，要去思考好在何处。思考这种技术的通用场景。</li>
<li>在项目中思考更好的解决方法。做好两种方案的优缺点对比。比如你听了《Android Performance Pattern》中关于ArrayMap的讲解，也考虑到HashMap的空间占用问题，不要急于去替换。要做到对比（既要了解HashMap也要了解ArrayMap）同时结合业务场景来选择最适用的。</li>
<li>如果在项目中遇到了问题，建议先解决，然后空余时间研究这个技术的原理和细节。后续的研究务必要做。</li>
<li>善于做总结，将自己的经验和教训写成博客分享给他人。</li>
</ul>


<p>日常的工作给我们提供了许许多多好的实践和不好的问题，是一块弥之珍贵的技术提升的源泉。</p>

<h2>Android那么多库，我该选择哪些，怎么学，学到什么程度</h2>

<p>库的存在是为了封装细节，简化调用者实现或者辅助我们更容易发现问题。比如ButterKnife利用注解简化了对于view的查找和类型转换等功能。</p>

<p>关于如何选择那些库</p>

<ul>
<li>确定这个库是否是必需的</li>
<li>这个库能否带来开发效率的提升，降低代码的维护成本</li>
<li>这个库的学习成本如何  比如rxjava其实学习成本会相对高一些。</li>
<li>这个库的质量如何，不要仅仅看star，更要看issue的处理情况</li>
</ul>


<p>Flipboard常用的库（部分）</p>

<ul>
<li>LeakCanary A memory leak detection library for Android and Java.</li>
<li>Stetho  Stetho is a debug bridge for Android applications, enabling the powerful Chrome Developer Tools and much more.</li>
<li>ButterKnife  Bind Android views and callbacks to fields and methods.</li>
<li>Baber A custom view styling library</li>
<li>GoldenGate An Android annotation processor for generating type safe javascript bindings</li>
<li>MaterialEditText EditText in Material Design</li>
<li>。。。</li>
</ul>


<p>关于库，首先我们需要掌握其使用方法，同样也需要理解其运行机制。</p>

<h2>对于初学者，大学生的建议有哪些</h2>

<ul>
<li>越来越多的关于互联网寒冬的消息传出</li>
<li>听见越来越多的人抱怨Android找工作越来越难，已经趋近饱和。</li>
<li>Android开发的红利期正在逐渐消逝，尤其是对于初级和中级开发人员</li>
<li>关于现在加入Android开发队伍，我并不反对。</li>
<li>仍然可以赶上红利期的有容器，机器学习和人工智能。</li>
<li>但是无论选择哪一种技术，即便是Android，请具备好的基础和较强的编程能力和足够的爱好。不要仅仅追求物质。</li>
</ul>


<h2>一直想学，却很难坚持下去</h2>

<ul>
<li>有意愿是很好的。</li>
<li>如果很难坚持下去，可能的原因有没有学进去，或者自制力比较差</li>
<li>关于没有学进去，可以参考上面提到的学习方法</li>
<li>如果是自制力的话，可以通过自我监督和他人监督的方式来改善。</li>
</ul>


<h2>不知道去哪里学安卓，可以边学边工作么</h2>

<ul>
<li>学习Android的途径有很多，可以是自学（视频网站，看书，博客）也可以选择培训（不推荐）</li>
<li>边学边工作通常是可以的，不过具体实施起来还要结合自身的情况，比如时间是否充裕，学习者的决心和自学能力。</li>
</ul>


<h2>春招做准备，数据结构和算法不懂怎么办</h2>

<p>无论是春招还是秋招，对基础知识的掌握程度都是很重要的衡量标准，毕竟毕业生的实战经验比较少一些。</p>

<p>数据结构和算法应该是必不可少的一部分。建议还是要多多做一些准备工作。</p>

<p>呈现出最好的状态来面试春招。</p>

<h2>自己有一个什么样的个人项目才有竞争力</h2>

<h3>如果这个项目是App</h3>

<ul>
<li>首先有足够的用户量，比如月活达到上万的数量级</li>
<li>界面和交互处理良好，符合Android UI/UE规范</li>
<li>运行流畅和稳定，不存在低级的错误（比如卡顿等问题）</li>
<li>App能明显解决用户的痛点</li>
</ul>


<h3>如果这个项目是一个开源项目</h3>

<ul>
<li>有足够的star（然而这个已经被玩坏了）</li>
<li>issue的处理情况</li>
<li>contributor的数量</li>
<li>设计的思想是否优秀</li>
<li>代码是否居然自解释性</li>
<li>学习成本和维护成本尽量少</li>
</ul>


<h2>我该如何选择网络中鱼龙混杂的学习资料 pass</h2>

<ul>
<li>使用Google和StackOverflow，Medium</li>
<li>如果是博客文章，在自己能力可以理解前提下，尽量选择英文</li>
<li>最简单判断一个文章的优劣可以先到文章的底部看评论（Good，Execellent,Awesome）以及Google+,Facebook,Twitter分享数量</li>
<li>尽量选择内容整洁（说明态度认真）的文章</li>
</ul>


<h2>学习效果差的问题 pass</h2>

<ul>
<li>长期看慕课和论坛，感觉效果很差</li>
<li>感觉通过视频学习，进步很大，但是即使学习完了，感觉还是菜鸟</li>
<li>视频也看了，书也读了，但是写起来还是很吃力，下一步如何熟练和进阶</li>
</ul>


<p>产生这些结果的原因：</p>

<ul>
<li>通常的视频网站传授给大家都往往是立竿见影的技能。</li>
<li>学习中缺乏思考，无法做到触类旁通。只知道照葫芦画瓢</li>
<li>基础薄弱，概念没有搞清。导致做上层的东西举步维艰。</li>
<li>没有比较良好的辅助工具或者无法找到优秀的辅助内容。</li>
</ul>


<h2>如何提高安卓程序员的核心竞争力，项目理解能力还是技术能力，哪个更重要</h2>

<ul>
<li>什么是核心竞争力。表现在学习技术的能力，对待问题的态度，解决问题的技术方案。别的行业其实也是这样的。</li>
<li>具体如何提高核心竞争力，我上面有提到，参考程序员需要具备其他那些能力。</li>
<li>这两个能力是相辅相成的，很难做出孰重孰轻的决断。</li>
</ul>


<h2>大龄Android程序员的烦恼</h2>

<p>经常收到一些安卓程序员的邮件，其中有很多问题是，做了Android很多年了，为以后的职业选择惆怅。比如互联网寒冬，华为清退34岁以上员工等等。</p>

<p>的确，由于Android相关的工程师需求不如之前那么好，加之年龄越大，拼劲可能不如刚刚毕业的年轻人。这种烦恼是可以理解的。</p>

<p>走出烦恼的一些方法</p>

<ul>
<li>不断学习，夯实基础，拓展技术面。为什么总是提到这个，因为其实存在很多程序员，逻辑思维不强，还不爱学习。不断学习对于程序员来说至关重要。</li>
<li>提高自己的竞争力，不要成为仅仅面向API编程的程序员。要勤于思考，追求更高。求其上者得其中，求其中者得其下。你必须和5年前，甚至是10年前的你有改变，不能仅仅是一项技能重复了5年，10年。</li>
<li>建立个人品牌：写博客，写书，开源项目，写独立App等。注意这其中任何一个都是一个长期坚持才能完成的事情。关于写博客，我在以前的知乎live讲过一些技巧和思路，地址为 <a href="https://www.zhihu.com/lives/796775894273363968">https://www.zhihu.com/lives/796775894273363968</a></li>
<li>其实现代人的烦恼，不论是否是程序员，很多都是关于物质生活的恐惧。买车买房，家庭支出等等问题。以及对于自己的能力无法满足物质支出的恐惧和担心。在自己无法改变的情况下，适当调整心态。</li>
<li>尝试知识变现，但是需要不断积累，需要时间。不能一蹴而就。</li>
<li>关于舒适区，学习区和恐惧区的理论</li>
</ul>


<h3>理论</h3>

<p><img src="http://olabqc6d8.bkt.clouddn.com/p87099358-1.jpg" alt="http://olabqc6d8.bkt.clouddn.com/p87099358-1.jpg" /></p>

<ul>
<li><p>“舒适区”， 对于你来说是没有学习难度的知识或者习以为常的事务，自己可以处于舒适心理状态。</p></li>
<li><p>“学习区”，对自己来说有一定挑战，因而感到不适，但是不至于太难受。</p></li>
<li><p>“恐慌区”，超出自己能力范围太多的事务或知识，心理感觉会严重不适，可能导致崩溃以致放弃学习。</p></li>
</ul>


<p>对于一个人来说，最理想的状态是处于“学习区”，学习具有适当挑战性的东西， 一段时间后，“学习区”会慢慢变为“舒适区”， “舒适区”越变越大， 而一部分的“恐慌区” 也会相应变成“学习区”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin中的单例模式]]></title>
    <link href="https://droidyue.com/blog/2017/07/17/singleton-in-kotlin/"/>
    <updated>2017-07-17T22:03:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/07/17/singleton-in-kotlin</id>
    <content type="html"><![CDATA[<p>在编程中，我们都应该接触到设计模式，无论是从时间总结，亦或者是从书上习得后尝试使用。这其中单例模式，是我们编程过程中很常见，也很简单的一种设计模式。我曾经写过一篇比较通用的关于该模式的文章，即<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F01%2F11%2Flooking-into-singleton%2F">单例这种设计模式</a>。</p>

<p>目前，随着Google钦定Kotlin为Android 开发官方语言，Kotlin的学习热潮也应声而起。本文尝试讲解单例模式在Kotlin的具体实现和应用。希望能够对大家学习使用Kotlin有所帮助。</p>

<!--more-->


<h2>超简版单例</h2>

<p>Kotlin引入了一个叫做object的类型，用来很容易的实现单例模式。如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">object</span> <span class="n">SimpleSington</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">fun</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//在Kotlin里调用</span>
</span><span class='line'><span class="n">SimpleSington</span><span class="o">.</span><span class="na">test</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//在Java中调用</span>
</span><span class='line'><span class="n">SimpleSington</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">test</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个版本的实现，其实是个语法糖（Kotlin漫山遍野都是语法糖）。其真正的实现类似于这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">SimpleSington</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SimpleSington</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="nf">SimpleSington</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">INSTANCE</span> <span class="o">=</span> <span class="o">(</span><span class="n">SimpleSington</span><span class="o">)</span><span class="k">this</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">SimpleSington</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因而Kotlin这个超简版单例实现省去了</p>

<ul>
<li>显式声明静态instance变量</li>
<li>将构造函数private化处理</li>
</ul>


<h3>关于调用时注意</h3>

<p>这段单例代码在Kotlin中使用很简单，即</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SimpleSington</span><span class="o">.</span><span class="na">test</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在Java和Kotlin混编时，Java代码中调用则需要注意，使用如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SimpleSington</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">test</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实在Kotlin中调用单例本质上还是涉及到了INSTANCE这个变量，只是为了简化，隐藏了一些细节。</p>

<p>object类型的单例模式，本质上是饿汉式加载，即在类加载的时候创建单例。它可能存在的问题有</p>

<ul>
<li>如果构造方法中存在过多的处理，会导致加载这个类时比较慢，可能引起性能问题。</li>
<li>如果使用饿汉式的话，只进行了类的装载，并没有实质的调用，会造成资源的浪费。</li>
</ul>


<h2>懒汉式加载</h2>

<p>针对饿汉式的潜在问题，我们可以使用懒汉式来解决，即将实例初始化放在开始使用之前。Kotlin版的懒汉式加载代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="kd">private</span> <span class="nf">constructor</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">companion</span> <span class="n">object</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">val</span> <span class="nl">instance:</span> <span class="n">LazySingleton</span> <span class="n">by</span> <span class="n">lazy</span> <span class="o">{</span> <span class="n">LazySingleton</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>显式声明构造方法为private</li>
<li>companion object用来在class内部声明一个对象</li>
<li>LazySingleton的实例instance 通过lazy来实现懒汉式加载</li>
<li>lazy默认情况下是线程安全的，这就可以避免多个线程同时访问生成多个实例的问题</li>
</ul>


<h2>该用哪个版本</h2>

<p>关于如何选择饿汉式还是懒汉式，通常应该从两方面考虑</p>

<ul>
<li>实例初始化的性能和资源占用</li>
<li>编写的效率和简洁</li>
</ul>


<p>对于实例初始化花费时间较少，并且内存占用较低的话，应该使用object形式的饿汉式加载。否则使用懒汉式。</p>

<p>关于单例的更多知识和问题，请参考阅读<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F01%2F11%2Flooking-into-singleton%2F">单例这种设计模式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何看待 Kotlin 成为 Android 官方支持开发语言？]]></title>
    <link href="https://droidyue.com/blog/2017/05/21/my-opinion-of-kotlins-becoming-an-official-language-of-android/"/>
    <updated>2017-05-21T19:28:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/05/21/my-opinion-of-kotlins-becoming-an-official-language-of-android</id>
    <content type="html"><![CDATA[<p>Google IO 2017宣布了 Kotlin 会成为 Android 官方开发语言。一时间朋友圈和Android圈被各种刷屏。当然我也顺势而为发布了一篇的文章<a href="http://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/">《为什么我要改用Kotlin
》</a>，着实狠狠地蹭了一波热度（尽管这样会被鄙视）。眼下Android圈已经躁动了，甚至严重到如果对Kotlin视而不见就显得自己不像一个合格的Android程序员。</p>

<p>本文尝试从一个客观全面一点儿的角度来看待这件事情，尽力为大家提供一个比较理性的观点供参考。</p>

<!--more-->


<h2>为什么会选用Kotlin</h2>

<p>关于 Google 为什么会选择 Kotlin，我认为有两方面的原因。</p>

<ol>
<li><p>为了逐渐摆脱专利流氓Oracle。从去年的转向OpenJDK，到现在的支持Kotlin作为官方语言，某种意义是为了摆脱藉由9行代码敲诈获取天价赔偿的Oracle。</p></li>
<li><p>选用Kotlin，实至名归，这个荣誉它值得拥有。Kotlin确实以其实用，高效赢得了海外很多公司和开发者的认可，比如Square的Jake大神一直在推Kotlin。Kotlin在国外至少有将近2年的应用生产环境的实践(非JetBrains内部实践应用)。在移动开发中，相比iOS程序员，Android程序员总是很幸运，因为我们有很多优秀好用的工具（Android Studio等），选用Kotlin，则是Google 为开发者提供高效的开发工具的一贯作风。</p></li>
</ol>


<h2>成为 Android官方开发语言意味着什么</h2>

<ul>
<li>官方：工具支持（Android Studio 3.0附带Kotlin),官方的宣传（教学视频，主题演讲等）</li>
<li>对于社区来说，Kotlin版本的库和框架如雨后春笋般涌现</li>
<li>对于Java，曾经借助Android这场春风，着实让迟暮的它再度辉煌，现在和将来在Android领域可谓是棋逢敌手，Java的在Android开发语言市场份额会降。但是这也并不一定是坏事，有竞争才能更好进步。</li>
<li>对于Android 开发者，我们多了一种开发Android的语言选择，那些对于之前由于前景不明朗却对Kotlin跃跃欲试的人可以放心使用了。有了Kotlin意味着开发效率应该会有所提升。</li>
<li>对于团队，这往往带来了一个选择的问题，Use Kotlin or not, That&rsquo;s a question. 团队中总有人想要尝试Kotlin，而另一些人则兴致不那么高。由于历史包袱，团队成员兴趣，对于已有项目采用Kotlin和Java长期并存是实际可行的方案。而新项目则应该鼓励使用Kotlin，但具体还需要结合团队的能力和其他因素。</li>
</ul>


<h2>Kotlin的魅力究竟在哪里</h2>

<p>Kotlin的有很多特点，比如简洁，安全实用，开发效率高和提升可读性，更好的函数式编程支持。</p>

<p>1.简洁，Kotlin的代码确实比Java更加简洁，比如类型推断，省去结尾的分号等等，然而这远不能成为我们改用Kotlin的原因。</p>

<p>2.安全，这是Kotlin的一个很重要的特性。Kotlin是空指针安全的，JetBrains做了一件很聪明的事情，它们将运行时才能空指针的检测提前到了编译时，主要方式是增加了Any?这种可为空的类型，使用Kotlin之后，我们程序的空指针会得到明显的改善。</p>

<p>3.实用，高效率。Kotlin的实用具体表现在</p>

<ul>
<li>引入Object，便于我们更好的应用单例模式</li>
<li>引入data class, 避免了我们手写getter/setter/toString等方法</li>
<li>引入参数默认值和具名参数，避免了不必要的方法重载</li>
<li>支持扩展方法，让我们可以省去好多必须要的代码</li>
</ul>


<p>4.Kotlin引入了Lambda，Streams API 和函数式编程支持。</p>

<ul>
<li> Lambda表达式可以省去了我们创建很多匿名内部类的代码（注由于目前Kotlin基于JVM6，Lambda表达式在字节码阶段依然会翻译成内部类形式）</li>
<li> Streams API 结合Lambda表达式和方法引用，让我们的代码处理一件事情以描述的形式，而不是命令实现的方式。</li>
<li> Kotlin支持OOP(面向对象编程)和FP(函数式编程)，语言本身并没有限制，给了我们选择的自由，Kotlin对FP的友好支持，便于我们写出更加稳定，易于测试，无副作用的方法和代码</li>
</ul>


<p>5.可读性  从客观上，Kotlin语法和特性上让代码更加具有描述性而已。但是不得不指出<strong>代码可读性主要依赖编写者的编码素质和能力</strong>。</p>

<p>对我个人而言，高阶函数和方法扩展这两个特点着实真心受用。方法扩展会让我有一种创造感，这是Java种的Util方法所无法比拟的。</p>

<h2>Kotlin是否会取代Java</h2>

<p>这个很难说，因为这个世界上并不是一件事物好，就会必然得到广泛应用的。一件事物的推广开来靠的是一群人，但阻力也往往也来自一群人，只不过和前者不是相同人群。</p>

<p>从个人主观来看这个问题，我更加愿意看到这种现象发生。原因并不是因为我更喜欢Kotlin，而是在于我更愿意看到事物在进步，在变得优秀，所以即便某一天Kotlin被更加优秀的语言取代，我也是很欢迎的。</p>

<h2>哪些人适合率先应用 Kotlin</h2>

<p>Kotlin适用于多个平台，并没有对学习者做限制。任何有学习意愿的人都可以习得这门语言。</p>

<p>但是考虑到国内 Kotlin 资源不够丰富，网络不够畅通等问题，所以导致了很多人变成了吃瓜群众进行观望。</p>

<p>然而，对于一个项目和团队来说，总需要有第一个人先来推进。而且这个推进过程并非顺利，这其中包括</p>

<ul>
<li>首先你需要足够了解Kotlin</li>
<li>你需要说服团队，这期间你会接收到很多challenges,有时候你会很沮丧和生气</li>
<li>你需要提供一系列的资料或分享，比如如何配置，sample code, troubleshooting等等</li>
<li>有时候甚至你经常兼职做mentor指导工作，这也就意味着你的手头上的其他工作需要被打断</li>
</ul>


<p>上述推进 Kotlin 观点部分参考自Life is Great and Everything Will Be Ok, Kotlin is Here (Google I/O &lsquo;17) 中 Christina Lee(Pinterest Software Engineer,国外 Kotlin 美女布道师之一)的分享内容。</p>

<p>虽然 Kotlin 很优秀，但是推动在项目中推动 Kotlin 应用并非易事，因为这对于新事物来说在正常不过了，就像明治维新一样看起来很光鲜，成功，但是它的变革进程并非顺利，先是血雨腥风的倒幕运动，再到明治六年爆发的标志武士时代结束的西南战争，经过数十年的努力才算取得成功。</p>

<p>因此关于哪些人适合率先应用 Kotlin，我认为需要具备以下几点</p>

<ul>
<li>Java 技术和基础要好，这一点很重要</li>
<li>英语要好，因为目前 Kotlin 的资料几乎都是英文的，当然也推荐看英文的</li>
<li>愿意承担在项目团队推进工作，有耐心，敢挑战，负责任</li>
</ul>


<h2>关于Kotlin 项目应用中 的一些顾虑</h2>

<p>目前想到了一些关于 Kotlin 应用在项目中的一些顾虑。这些顾虑目前并非全面，但是提出来，希望大家可以规避和改善。</p>

<p>1.写出来的代码并不是 Kotlin style。解决这个问题，还是需要多学习和思考</p>

<p>2.扩展方法的滥用，Kotlin 的扩展方法很好，我们可以扩展很多方法，弥补Framework的一些不完善，但是扩展时我们需要谨慎，一定要把合适的方法放到合适的类型上，不可为了简单增加不符合某些类不应该具备的职责。 具体需要最好以下两点</p>

<ul>
<li>选择在合理范围内的最抽象类增加方法，比如我们想为Activity增加一个longToast，应该想一想是不是放在更加抽象的Context会更好一些</li>
<li>同时也不能为了便利，增加和当前类不相关的方法，比如我们想为每个Context增加显示一个简单dialog的扩展方法，这显然不是很合理，因为对于非UI的Context这是有问题。</li>
</ul>


<h2>Android 程序员的核心竞争力在哪里</h2>

<p>Kotlin出来之后，听到了两种不同的声音：</p>

<ul>
<li>太好了，终于可以有理由改用Kotlin了，写代码更加高效了。可以逐渐开始放弃Java了。</li>
<li>WTF，又要学新的语言，感觉好累，会不会以后面试不会Kotlin就被pass掉呢。</li>
</ul>


<p>出现以上两种不同的声音，不得不引起我们对于 Android 程序员的核心竞争力的思考。那么到底什么才是 Android 程序员的核心竞争力呢？</p>

<p>Android程序员和其他程序员甚至其他职业并无二致，我认为这种竞争力表现在<strong>解决问题的能力</strong>。想要具备这种能力，极其依赖我们对问题和技术的准确认识和扎实的基础。</p>

<p>编程语言本质上还是工具，好的工具能带来更好的效果，但是如何运用好，将效率和质量提升到最高，则还是更主要的依赖于开发者的能力。</p>

<p>选用好的工具，更侧重夯实基础和加强对事物本质认识的能力，我想这样才能让我们的竞争力更强。</p>

<p>总结而言，Kotlin是一个更好的工具，<font color="red">没有它，并不影响我们日常的 Android 开发工作</font>。但是我还是<strong>建议</strong>开发者和团队去尝试这种语言，抓住这个近在咫尺的小确幸。</p>

<h2>额外的话</h2>

<p>事情的发展越来越显得不可控了，推介Kotlin和不看好Kotlin的人逐渐分化出来，更准确的说，甚至这件事已经快要演变成了从对事变成了对人。</p>

<p>Kotlin 成为 Android 官方语言的消息一出来，一下子出来了很多被当做投机蹭热点的Kotlin推介者，当然还出现了一些看不惯这些做法的人，他们认为前者刻意拔高了Kotlin。因而讨论越来越偏向从事情到人的方面。我想要说的是，就像商人追求利润，资本家攫取剩余价值那样，投机者蹭热点，以及招致他人批评，这都是正常的事情，但是我们不能让讨论脱离问题的本质，我们需要回归。</p>

<h3><strong>很多人说Kotlin无非就是很多语法糖，没什么突破</strong></h3>

<p>没错，<strong>Kotlin是有很多很多的语法糖</strong>。有必要简单普及一下语法糖的概念（如下摘自<a href="https://en.wikipedia.org/wiki/Syntactic_sugar">维基百科</a>）</p>

<blockquote><p>In computer science, syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express. It makes the language &ldquo;sweeter&rdquo; for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer.</p></blockquote>

<p>由定义可知，语法糖的目的就是让代码更简单，更可读。</p>

<p>决定Kotlin使用这么多语法糖的除了简洁，高效可读之外，还有一个原因，是因为kotlin编译生成的class文件是目标到JVM 6（基于JVM 6 是一种权衡后的结果），比如我们在Kotlin中使用了Lambda，它是不可能编译成invokedynamic指令的，因为那样会导致在JVM6上根本无法识别，所以经常通过翻译成内部类的形式来实现。</p>

<p>使用语法糖又能怎样，它的目的是好的，毕竟它真真实实介绍了开发人员的代码量。</p>

<p>Kotlin是一门实用语言，这是它的基因，它不是学术语言，它的目标是减轻开发者的负担。它很适合 Android，因为大多数的 Android 的程序员是做工程。</p>

<h3><strong>基于JVM没有什么不好</strong></h3>

<p>Kotlin，是基于JVM的编程语言，但是基于JVM的编程语言并没有什么不好。(J)VM的出现无非也是一种平衡的结果。在牺牲部分执行效率的前提下，提供了一定的抽象，加快了开发者的效率。这种tradeoff其实更加有利于人的一侧，这也是编程语言发展的趋势和目标</p>

<p>Kotlin 在国内推广应用的道路可谓是 漫漫而修远兮。因此更需要真正实践，去踩坑的人开始on board，去出产更多的真正能推动 Kotlin 应用的文章，分享等这些有实质性意义的行动。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我要改用Kotlin]]></title>
    <link href="https://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/"/>
    <updated>2017-05-18T07:50:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin</id>
    <content type="html"><![CDATA[<p><strong>写在前面的话，作为一个不熬夜的人，一觉醒来发现Kotlin成为了Android的官方语言，可谓是大喜过望。为了趁热打铁，我决定提前三天放出原定本周日Release的文章。希望能及时让大家了解一下Kotlin。</strong></p>

<p>相信很多开发人员，尤其是Android开发者都会或多或少听说过Kotlin，当然如果没有听过或者不熟悉也没有关系。因为本篇文章以及博客后期的内容会涉及到很多关于Kotlin的知识分享。</p>

<p>在写这篇文章前的一个多月，Flipboard中国的Android项目确定了正式将Kotlin作为项目开发语言，这就意味着新增的代码文件将以Kotlin代码格式出现，而且同时旧的Java代码也将会陆陆续续翻译成Kotlin代码。在使用Kotlin的这段时间，被它的简洁，高效，快捷等等特点震撼，所以有必要写一篇文章来谈一谈Kotlin的特性，如若能取得推广Kotlin的效果则倍感欣慰。</p>

<!--more-->


<h2>Kotlin的“简历”</h2>

<ul>
<li>来自于著名的IDE IntelliJ IDEA(Android Studio基于此开发) 软件开发公司 JetBrains(位于东欧捷克)</li>
<li>起源来自JetBrains的圣彼得堡团队，名称取自圣彼得堡附近的一个小岛(Kotlin Island)</li>
<li>一种基于JVM的静态类型编程语言</li>
</ul>


<p>来自知名的工具开发商JetBrains，也就决定了Kotlin的基因中必然包含实用与高效等特征。那我们接下来看一看Kotlin的特点，当然这也是我改用Kotlin的重要原因。</p>

<h3>语法简单，不啰嗦</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//variables and constants</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentVersionCode</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1">//变量当前的版本号，类型Int可以根据值推断出来</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentVersionName</span> <span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;1.0&quot;</span> <span class="c1">//显式标明类型</span>
</span><span class='line'><span class="n">val</span> <span class="n">APPNAME</span> <span class="o">=</span> <span class="s">&quot;droidyue.com&quot;</span> <span class="c1">//常量APPNAME 类型(String)可以根据值推断出来</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//methods</span>
</span><span class='line'><span class="n">fun</span> <span class="nf">main</span><span class="o">(</span><span class="nl">args:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="o">:</span> <span class="n">AppCompatActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// data class  自动生成getter，setting，hashcode和equals等方法</span>
</span><span class='line'><span class="n">data</span> <span class="kd">class</span> <span class="nf">Book</span><span class="o">(</span><span class="n">var</span> <span class="nl">name:</span> <span class="n">String</span><span class="o">,</span> <span class="n">val</span> <span class="nl">price:</span> <span class="n">Float</span><span class="o">,</span> <span class="n">var</span> <span class="nl">author:</span> <span class="n">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//支持默认参数值，减少方法重载</span>
</span><span class='line'><span class="n">fun</span> <span class="n">Context</span><span class="o">.</span><span class="na">showToast</span><span class="o">(</span><span class="nl">message:</span> <span class="n">String</span><span class="o">,</span> <span class="nl">duration:</span><span class="n">Int</span> <span class="o">=</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">duration</span><span class="o">).</span><span class="na">show</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Kotlin支持类型推断，没有Java那样的啰嗦。</li>
<li>另外用<code>var</code>表示变量，<code>val</code>表示常量更加的简洁</li>
<li>方法也很简单，连function都缩写成了fun，平添了几分双关之意。</li>
<li>类的继承和实现很简单，使用:即可</li>
<li>Kotlin每个句子都不需要加分号(;)</li>
</ul>


<h3>空指针安全</h3>

<p>空指针（NullPointerException或NPE）是我们使用Java开发程序中最常见的崩溃了。因为在Java中我们不得不写很多防御性的代码，比如这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">chars</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Character</span><span class="o">)</span><span class="n">chars</span><span class="o">[</span><span class="mi">10</span><span class="o">]).</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Kotlin中空指针异常得到了很好的解决。</p>

<ul>
<li>在类型上的处理，即在类型后面加上?，即表示这个变量或参数以及返回值可以为null，否则不允许为变量参数赋值为null或者返回null</li>
<li>对于一个可能是null的变量或者参数，在调用对象方法或者属性之前，需要加上?，否则编译无法通过。</li>
</ul>


<p>如下面的代码就是Kotlin实现空指针安全的一个例子，而且相对Java实现而言，简直是一行代码搞定的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="nl">string:</span> <span class="n">String</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">?.</span><span class="na">toCharArray</span><span class="o">()?.</span><span class="na">getOrNull</span><span class="o">(</span><span class="mi">10</span><span class="o">)?.</span><span class="na">hashCode</span><span class="o">())</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;12345678901&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//result</span>
</span><span class='line'><span class="kc">null</span>
</span><span class='line'><span class="mi">49</span>
</span><span class='line'><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于空指针安全的原理，可以参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2017%2F05%2F08%2Fhow-to-study-kotlin%2F">研究学习Kotlin的一些方法</a></p>

<h3>支持方法扩展</h3>

<p>很多时候，Framework提供给我们的API往往都时比较原子的，调用时需要我们进行组合处理，因为就会产生了一些Util类，一个简单的例子，我们想要更快捷的展示Toast信息，在Java中我们可以这样做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">longToast</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是Kotlin的实现却让人惊奇，我们只需要重写扩展方法就可以了，比如这个longToast方法扩展到所有的Context对象中，如果不去追根溯源，可能无法区分是Framework提供的还是自行扩展的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="n">Context</span><span class="o">.</span><span class="na">longToast</span><span class="o">(</span><span class="nl">message:</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">applicationContext</span><span class="o">.</span><span class="na">longToast</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：Kotlin的方法扩展并不是真正修改了对应的类文件，而是在编译器和IDE方面做得处理。使我们看起来像是扩展了方法。</p>

<h3>Lambda, 高阶函数，Streams API, 函数式编程支持</h3>

<p>所谓的Lambda表达式是匿名函数，这使得我们的代码会更加的简单。比如下面的代码就是lambda的应用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">).</span><span class="na">setOnClickListener</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;$it was clicked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所谓的高阶函数就是</p>

<ul>
<li>可以接受函数作为参数</li>
<li>也可以返回函数作为结果</li>
</ul>


<p>举一个接受函数作为参数的例子。在Android开发中，我们经常使用SharedPreference来存储数据，如果忘记调用apply或者commit则数据修改不能应用。利用Kotlin中的高阶函数的功能，我们能更好的解决这个问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">editor</span><span class="o">(</span><span class="nl">f:</span> <span class="o">(</span><span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">edit</span><span class="o">()</span>
</span><span class='line'>    <span class="n">f</span><span class="o">(</span><span class="n">editor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">apply</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//实际调用</span>
</span><span class='line'><span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">editor</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">it</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;installed&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这上面的例子中我们也同时使用了方法扩展这个特性。</p>

<p>Kotlin支持了Streams API和方法引用，这样函数式编程更加方便。比如下面的代码就是我们结合Jsoup，来抓取某个proxy网站的数据，代码更加简单，实现起来也快速。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">parse</span><span class="o">(</span><span class="nl">url:</span> <span class="n">String</span><span class="o">):</span> <span class="n">Unit</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">URL</span><span class="o">(</span><span class="n">url</span><span class="o">),</span> <span class="n">PARSE_URL_TIMEOUT</span><span class="o">).</span><span class="na">getElementsByClass</span><span class="o">(</span><span class="s">&quot;table table-sm&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">first</span><span class="o">().</span><span class="na">children</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">filter</span> <span class="o">{</span> <span class="s">&quot;tbody&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">tagName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">())</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Element:</span><span class="o">:</span><span class="n">children</span><span class="o">).</span><span class="na">forEach</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">trElement</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ProxyItem</span><span class="o">().</span><span class="na">apply</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">trElement</span><span class="o">.</span><span class="na">children</span><span class="o">().</span><span class="na">forEachIndexed</span> <span class="o">{</span> <span class="n">index</span><span class="o">,</span> <span class="n">element</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">when</span> <span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="mi">0</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">host</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                            <span class="n">port</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)[</span><span class="mi">1</span><span class="o">].</span><span class="na">toInt</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="mi">1</span> <span class="o">-&gt;</span> <span class="n">protocol</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>                        <span class="mi">5</span> <span class="o">-&gt;</span> <span class="n">country</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}.</span><span class="na">let</span><span class="o">(::</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>字符串模板</h3>

<p>无论是Java还是Android开发，我们都会用到字符串拼接，比如进行日志输出等等。在Kotlin中，字符串模板是支持的，我们可以很轻松的完成一个字符串数组的组成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">val</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Book</span><span class="o">(</span><span class="s">&quot;Thinking In Java&quot;</span><span class="o">,</span> <span class="mf">59.0f</span><span class="o">,</span> <span class="s">&quot;Unknown&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">val</span> <span class="n">extraValue</span> <span class="o">=</span> <span class="s">&quot;extra&quot;</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;book.name = ${book.name}; book.price=${book.price};extraValue=$extraValue&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：关于字符串拼接可以参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2014%2F08%2F30%2Fjava-details-string-concatenation%2F">Java细节：字符串的拼接
</a></p>

<h3>与Java交互性好</h3>

<p>Kotlin和Java都属于基于JVM的编程语言。Kotlin和Java的交互性很好，可以说是无缝连接。这表现在</p>

<ul>
<li>Kotlin可以自由的引用Java的代码，反之亦然。</li>
<li>Kotlin可以现有的全部的Java框架和库</li>
<li>Java文件可以很轻松的借助IntelliJ的插件转成kotlin</li>
</ul>


<h3>Kotlin应用广泛</h3>

<p>Kotlin对Android应用开发支持广泛，诸多工具，比如kotterknife(ButterKnife Kotlin版)，RxKotlin,Anko等等，当然还有已经存在的很多Java的库都是可以使用的。</p>

<p>除此之外，Kotlin也可以编译成Javascript。最近使用Kotlin写了一段抓取proxy的代码，实现起来非常快捷。甚至比纯JavaScript实现起来要快很多。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">handle</span><span class="o">():</span> <span class="n">Unit</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">window</span><span class="o">.</span><span class="na">onload</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">document</span><span class="o">.</span><span class="na">getElementsByClassName</span><span class="o">(</span><span class="s">&quot;table table-sm&quot;</span><span class="o">).</span><span class="na">asList</span><span class="o">().</span><span class="na">first</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">asList</span><span class="o">().</span><span class="na">filter</span> <span class="o">{</span> <span class="s">&quot;TBODY&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">tagName</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">())</span> <span class="o">}</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">flatMap</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">asList</span><span class="o">()</span> <span class="o">}.</span><span class="na">forEach</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">var</span> <span class="n">proxyItem</span> <span class="o">=</span> <span class="n">ProxyItem</span><span class="o">()</span>
</span><span class='line'>                <span class="n">it</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">asList</span><span class="o">().</span><span class="na">forEachIndexed</span> <span class="o">{</span> <span class="n">index</span><span class="o">,</span> <span class="n">element</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">when</span> <span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="mi">0</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">proxyItem</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()?.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)?.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                            <span class="n">proxyItem</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()?.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)?.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)?.</span><span class="na">trim</span><span class="o">()?.</span><span class="na">toInt</span><span class="o">()</span> <span class="o">?:</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="mi">1</span> <span class="o">-&gt;</span> <span class="n">proxyItem</span><span class="o">.</span><span class="na">protocol</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                        <span class="mi">5</span> <span class="o">-&gt;</span> <span class="n">proxyItem</span><span class="o">.</span><span class="na">country</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">trimedTextContent</span><span class="o">()</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}.</span><span class="na">run</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">console</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;proxyItem $proxyItem&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>关于性能</h3>

<p>Kotlin的执行效率和Java代码的执行效率理论上一致的。有时候Kotlin可能会显得高一些，比如Kotlin提供了方法的inline设置，可以设置某些高频方法进行inline操作，减少了运行时的进栈出栈和保存状态的开销。</p>

<p>读到这里，是不是想要尝试一下Kotlin呢，它简洁的语法，汇集诸多特性，高效率实现等等，已经在国外风生水起，国外的Pintereset, Square, Flipboard等公司已经开始应用到生产中。</p>

<h3>关于转向Kotlin</h3>

<p>其实，我在做决定之前（当时Kotlin还没有被钦定）也曾有过考虑，是不是选择了Kotlin就意味着放弃Java呢，冷静下来想一想，其实并不是那么回事，因为Kotlin与Java语法太相近，以及在Kotlin中无时无刻不在和Java相关的东西打交道，所以这点顾虑不是问题的。</p>

<p>对于个人的项目来转向Kotlin，通常不是很难的选择，毕竟Kotlin是那么优秀的语言，相信很多人还是愿意尝试并使用这个事半功倍的语言的。</p>

<p>而比较难抉择的情况是如果如何让团队转用Kotlin，个人认为团队难以转用的原因有很多，比如学习成本，历史包袱等等。但其实根本原因还是思维方式的问题，歪果仁喜欢用工具来提升开发效率，因为人力成本很高。而国内团队提高效率的办法通常是增加成员。好在Flipboard 美国团队自2015年（可能更早）就引入了Kotlin，因此中国团队这边选用Kotlin也更加顺水推舟。当然更主要的是目前团队规模不大，成员一致认可Kotlin的优点。</p>

<p>关于团队转用Kotlin的方法，一般比较行得通的办法是自上而下的推行。这就意味着要么直接的技术负责人比较开明要么就是需要有人来不断推介来影响团队。</p>

<p>做个比较现实的比拟，Java就像是一趟从我的家乡保定开往北京西的耗时将近2个小时甚至更长的普通列车，而Kotlin则是那趟仅需40分钟就能到达的高铁。通常的人都会选择高铁，因为它节省了时间和提高了体验。这个时间和体验对应编程中的，我想应该是高效率和高可读性，可维护性的代码。</p>

<p>现在好了，有了Google的支持，Kotlin转Android相信在不久的将来就会全面展开。篡改Python的一句名言“人生苦短，我用Kotlin”，这样一个高效实用的语言应该会被越来越多的团队所接受，并应用到开发生产中。当然也希望在国内环境下大放异彩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简单实用的Android调试应用技巧]]></title>
    <link href="https://droidyue.com/blog/2017/05/14/a-little-but-useful-debug-skill_for_android/"/>
    <updated>2017-05-14T20:37:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/05/14/a-little-but-useful-debug-skill_for_android</id>
    <content type="html"><![CDATA[<p>在应用开发中，我们常常会进行日志打印或者debug调试，以此来分析运行时的一些信息，便于发现bug和问题。Android Studio的Debug功能很好用，但是有时候有些情况下，就显得不是那么快捷和便利。</p>

<!--more-->


<p>比如</p>

<ul>
<li>我们调试的点在应用一打开的时候，很靠前，例如Application的onCreate方法中，以至于我们不能足够快的设置进程为debug模式</li>
<li>虽然上面的情况可以通过Android Studio的debug运行来解决，但是如果项目很大的话，运行起来也会比较耽误时间</li>
</ul>


<p>那么怎么解决上面的问题呢，其实只需要执行一行命令即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">set</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">app</span> <span class="o">-</span><span class="n">w</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">jishuxiaoheiwu</span><span class="o">.</span><span class="na">appdebugsample</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>其中</p>

<ul>
<li>set-debug-app 用来应用为debug模式</li>
<li>-w 意思为wait，在进程启动的时候，等待debugger进行连接</li>
<li><code>com.example.jishuxiaoheiwu.appdebugsample</code> 代表想要调试的应用的包名或ApplicationId</li>
</ul>


<p>执行上面的命令，当我们再次启动目标应用时，会得到这样的画面</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/android_waiting_for_debugger_dialog.png" alt="Android Waiting For Debugger Dialog" /></p>

<p>然后，我们就会有足够的时间，来使用Run&mdash;> Attach Debugger to Android Process 来绑定进程debug。  绑定后对话框消失，下次启动就是正常的启动（没有上面的对话框了）</p>

<p>那么一次debug不一定能解决问题，多次调试则在所难免，那么每次都要执行这个命令么？</p>

<p>答案是可以，但是有更好的方式。即</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">set</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">app</span> <span class="o">-</span><span class="n">w</span> <span class="o">--</span><span class="n">persistent</span>  <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">jishuxiaoheiwu</span><span class="o">.</span><span class="na">appdebugsample</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码和之前有所不同，表现在一个&mdash;persistent</p>

<ul>
<li>&mdash;persitent意思是持久的，意思是一直设置这个应用为调试模式，即每次开启（进程创建）都会弹出对话框，即使卸载再安装或者更新应用</li>
</ul>


<p>如果多次debug完成后，解决了问题，想要恢复正常的启动也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">adb</span> <span class="n">shell</span> <span class="n">am</span> <span class="n">clear</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个调试的方法很简单，但是可能会节省我们很多的宝贵时间。希望可以帮助到各位开发同行。</p>

<p>另外，当你的开发中遇到效率问题时，你需要做出思考，发觉更快捷的工作方式，而不是为了调试Application中onCreate方法中的代码，每次都点击Android Studio的debug按钮。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研究学习Kotlin的一些方法]]></title>
    <link href="https://droidyue.com/blog/2017/05/08/how-to-study-kotlin/"/>
    <updated>2017-05-08T22:05:00+08:00</updated>
    <id>https://droidyue.com/blog/2017/05/08/how-to-study-kotlin</id>
    <content type="html"><![CDATA[<p>Kotlin是一门让人感到很舒服的语言，相比Java来说，它更加简洁，省去了琐琐碎碎的语法工作，同时了提供了类似Lambda,String template,Null Safe Operator等特性。让开发者用起来得心应手。</p>

<!--more-->


<p>普通的Java/Android程序员通常只需要很短的时间就能快速使用Kotlin。综合Kotlin的诸多优点，加上Flipboard美国团队自2015年已引入Kotlin，Flipboard中国团队也已经开始采用Kotlin来作为Android主要开发语言。</p>

<p>虽然Kotlin使用简单快捷，然而由于自己的深入研究的习惯导致每接触到Kotlin的新功能，就马不停蹄的研究它的本质，这里总结一下关于如何研究Kotlin的一些方法来快速研究掌握Kotlin。</p>

<h2>到底研究什么</h2>

<p>比如Kotlin中提供了一种类型叫做Object，使用它我们可以快速实现单例模式的应用。代码特别的简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">object</span> <span class="n">AppSettings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题来了，kotlin这个object类型的类是如何实现的呢，Null安全操作符的实现原理，Lambda表达式是基于内部类还是真正的Lambda，这些问题就是我们要研究的对象。</p>

<h2>怎么研究</h2>

<ul>
<li>Kotlin和Java都是运行在JVM上，但是实际上JVM并不认识Java和Kotlin，因为它只和bytecode（即class文件）打交道。</li>
<li>因而通过研究bytecode，我们是可以了解Kotlin的一些深入原理的</li>
<li>由于同一份bytecode反编译成java和kotlin文件是等价的，所以将kotlin编译后的class文件反编译成Java，也是具有参考和研究价值的。</li>
</ul>


<h2>实践方法有哪些</h2>

<ul>
<li>利用Kotlin插件</li>
<li>利用kotlinc,javap等工具</li>
</ul>


<h2>一些实践</h2>

<h3>Null Safe Operator实现原理</h3>

<p>在Java中，我们经常会遇到空指针的问题，Kotlin特意增加了一个空指针安全操作符?。使用起来如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fun</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="nl">string:</span> <span class="n">String</span><span class="o">?)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">?.</span><span class="na">toCharArray</span><span class="o">()?.</span><span class="na">getOrNull</span><span class="o">(</span><span class="mi">10</span><span class="o">)?.</span><span class="na">hashCode</span><span class="o">())</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们进行这样的调用时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;12345678901&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">testNullSafeOperator</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的输出结果为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kc">null</span>
</span><span class='line'><span class="mi">49</span>
</span><span class='line'><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>从结果可见，并没有像Java那样抛出NullPointerException，而是遇到空指针则不继续执行了。</p>

<p>那么Kotlin的这个空指针安全操作符是如何工作的呢，我们可以借助IntelliJ IDE的Kotlin插件来辅助我们研究，步骤如下</p>

<p>1.使用IntelliJ IDE打开一个待研究的Kotlin文件(需确保Kotlin插件已安装)</p>

<p>2.按照下图依次点击至Show Kotlin Bytecode
<img src="http://7jpolu.com1.z0.glb.clouddn.com/show_kotlin_bytecode.png" alt="Show kotlin bytecode" /></p>

<p>3.上面的步骤操作后，会得到这样的bytecode</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// access flags 0x19</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>    <span class="nd">@Lorg</span><span class="o">/</span><span class="n">jetbrains</span><span class="o">/</span><span class="n">annotations</span><span class="o">/</span><span class="n">Nullable</span><span class="o">;()</span> <span class="c1">// invisible, parameter 0</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">11</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">GETSTATIC</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">System</span><span class="o">.</span><span class="na">out</span> <span class="o">:</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">IFNULL</span> <span class="n">L1</span>   <span class="c1">//对string字符串判空</span>
</span><span class='line'>    <span class="n">INVOKESTATIC</span> <span class="n">kotlin</span><span class="o">/</span><span class="n">text</span><span class="o">/</span><span class="n">StringsKt</span><span class="o">.</span><span class="na">toCharArray</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)[</span><span class="n">C</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">IFNULL</span> <span class="n">L1</span>  <span class="c1">//对CharArray判空</span>
</span><span class='line'>    <span class="n">BIPUSH</span> <span class="mi">10</span>
</span><span class='line'>    <span class="n">INVOKESTATIC</span> <span class="n">kotlin</span><span class="o">/</span><span class="n">collections</span><span class="o">/</span><span class="n">ArraysKt</span><span class="o">.</span><span class="na">getOrNull</span> <span class="o">([</span><span class="n">CI</span><span class="o">)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Character</span><span class="o">;</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">IFNULL</span> <span class="n">L1</span>  <span class="c1">//对Char判空</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.</span><span class="na">hashCode</span> <span class="o">()</span><span class="n">I</span>
</span><span class='line'>    <span class="n">INVOKESTATIC</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span> <span class="o">(</span><span class="n">I</span><span class="o">)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Integer</span><span class="o">;</span>
</span><span class='line'>    <span class="n">GOTO</span> <span class="n">L2</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">POP</span>
</span><span class='line'>    <span class="n">ACONST_NULL</span>
</span><span class='line'>   <span class="n">L2</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L3</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">12</span> <span class="n">L3</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L4</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">string</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L4</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由字节码分析可见，其实所谓的<strong>空指针安全操作符其实内部就是以此判空来确保不出现空指针</strong>，如果字节码不好理解，那我们使用上面的Decompile功能，将bytecode转成Java，如图操作
<img src="http://7jpolu.com1.z0.glb.clouddn.com/kotlin_plugin_decompile.png" alt="kotlin bytecode decompile" /></p>

<p>反编译后得到的Java代码为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">testNullSafeOperator</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">PrintStream</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">var5</span><span class="o">;</span>
</span><span class='line'>      <span class="nl">label18:</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">var10000</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>         <span class="k">if</span><span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">PrintStream</span> <span class="n">var2</span> <span class="o">=</span> <span class="n">var10000</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">string</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">throw</span> <span class="k">new</span> <span class="nf">TypeCastException</span><span class="o">(</span><span class="s">&quot;null cannot be cast to non-null type java.lang.String&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">char</span><span class="o">[]</span> <span class="n">var4</span> <span class="o">=</span> <span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="n">string</span><span class="o">).</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkExpressionValueIsNotNull</span><span class="o">(</span><span class="n">var4</span><span class="o">,</span> <span class="s">&quot;(this as java.lang.String).toCharArray()&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">char</span><span class="o">[]</span> <span class="n">var3</span> <span class="o">=</span> <span class="n">var4</span><span class="o">;</span>
</span><span class='line'>            <span class="n">var10000</span> <span class="o">=</span> <span class="n">var2</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">var3</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">Character</span> <span class="n">var10001</span> <span class="o">=</span> <span class="n">ArraysKt</span><span class="o">.</span><span class="na">getOrNull</span><span class="o">(</span><span class="n">var3</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>               <span class="k">if</span><span class="o">(</span><span class="n">var10001</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">var5</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">var10001</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>                  <span class="k">break</span> <span class="n">label18</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">var5</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var10000</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">var5</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样读起来是不是更加容易理解呢。</p>

<h3>Object类型研究</h3>

<p>这里我们回到Object类型，还是再举个例子看看如何使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//这是定义</span>
</span><span class='line'><span class="n">object</span> <span class="n">AppSettings</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">updateConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//do some updating work</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于应用也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//在Kotlin文件中调用</span>
</span><span class='line'><span class="n">AppSettings</span><span class="o">.</span><span class="na">updateConfig</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//在Java文件中调用</span>
</span><span class='line'><span class="n">AppSettings</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">updateConfig</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先看一下AppSettings的字节码文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ================AppSettings.class =================</span>
</span><span class='line'><span class="c1">// class version 50.0 (50)</span>
</span><span class='line'><span class="c1">// access flags 0x31</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">AppSettings</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// access flags 0x11</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="nf">updateConfig</span><span class="o">()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">7</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LAppSettings</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L1</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x2</span>
</span><span class='line'>  <span class="kd">private</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">4</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">CHECKCAST</span> <span class="n">AppSettings</span>
</span><span class='line'>    <span class="n">PUTSTATIC</span> <span class="n">AppSettings</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">:</span> <span class="n">LAppSettings</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LAppSettings</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L1</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x19</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">LAppSettings</span><span class="o">;</span> <span class="n">INSTANCE</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x8</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">&lt;</span><span class="n">clinit</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">4</span> <span class="n">L0</span>
</span><span class='line'>    <span class="c1">//静态代码块中实例化，即类加载时便开始实例化</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">AppSettings</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">AppSettings</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0008\u0002\n\u0002\u0010\u0002\n\u0000\u0008\u00c6\u0002\u0018\u00002\u00020\u0001B\u0007\u0008\u0002\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004\u00a8\u0006\u0005&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;LAppSettings;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;updateConfig&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;production sources for module KotlinObject&quot;</span><span class="o">})</span>
</span><span class='line'>  <span class="c1">// compiled from: AppSettings.kt</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见，Kotlin的object也就是Java的单例模式的实现，在静态代码块初始化实例。如果字节码没有看懂的话，可以尝试反编译成Java代码来详细研究。</p>

<h3>Lambda表达式研究</h3>

<p>除此之外，Kotlin也是支持了Lambda表达式的。由于并非所有的JVM版本都支持invokedynamic（Lambda表达式依赖的字节码指令），比如Java 6的JVM，这其中就包含了许多安卓设备。所以我们怀疑Kotlin可能是像Scala那样将lambda表达式转换成了匿名内部类。</p>

<p>一个简单的Lambda表达式例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">fun</span> <span class="nf">testObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">val</span> <span class="n">observable</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">()</span>
</span><span class='line'>        <span class="n">observable</span><span class="o">.</span><span class="na">addObserver</span> <span class="o">{</span> <span class="n">o</span><span class="o">,</span> <span class="n">arg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;$o $arg&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用插件同样查看bytecode</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ================Test.class =================</span>
</span><span class='line'><span class="c1">// class version 50.0 (50)</span>
</span><span class='line'><span class="c1">// access flags 0x31</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x11</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="nf">testObservable</span><span class="o">()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">8</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ASTORE</span> <span class="mi">1</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">9</span> <span class="n">L1</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">GETSTATIC</span> <span class="n">Test$testObservable$1</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">:</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span>  <span class="c1">//这里就是使用了匿名内部类(常常包含$字符)</span>
</span><span class='line'>    <span class="n">CHECKCAST</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observer</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">.</span><span class="na">addObserver</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observer</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L2</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">12</span> <span class="n">L2</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L3</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">observable</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">;</span> <span class="n">L1</span> <span class="n">L3</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LTest</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L3</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x1</span>
</span><span class='line'>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">6</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LTest</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L1</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0008\u0002\n\u0002\u0010\u0002\n\u0000\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004\u00a8\u0006\u0005&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;LTest;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;testObservable&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;production sources for module KotlinObject&quot;</span><span class="o">})</span>
</span><span class='line'>  <span class="c1">// access flags 0x18</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="n">INNERCLASS</span> <span class="n">Test$testObservable$1</span> <span class="kc">null</span> <span class="kc">null</span>
</span><span class='line'>  <span class="c1">// compiled from: Space.kt</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// ================Test$testObservable$1.class =================</span>
</span><span class='line'><span class="c1">// class version 50.0 (50)</span>
</span><span class='line'><span class="c1">// access flags 0x30</span>
</span><span class='line'><span class="c1">//生成的匿名内部类，规则为  当前的类名$当前的方法名$匿名内部类序号</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Test</span><span class="n">$testObservable$1</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observer</span>  <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x11</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="nf">update</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">;</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L0</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">10</span> <span class="n">L0</span>
</span><span class='line'>    <span class="n">GETSTATIC</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">System</span><span class="o">.</span><span class="na">out</span> <span class="o">:</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">;</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">append</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">LDC</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">append</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">append</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">StringBuilder</span><span class="o">.</span><span class="na">toString</span> <span class="o">()</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>
</span><span class='line'>    <span class="n">INVOKEVIRTUAL</span> <span class="n">java</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">PrintStream</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">V</span>
</span><span class='line'>   <span class="n">L1</span>
</span><span class='line'>    <span class="n">LINENUMBER</span> <span class="mi">11</span> <span class="n">L1</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>   <span class="n">L2</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="k">this</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L2</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">o</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">Observable</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L2</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">LOCALVARIABLE</span> <span class="n">arg</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;</span> <span class="n">L0</span> <span class="n">L2</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x0</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">ALOAD</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x19</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span> <span class="n">INSTANCE</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access flags 0x8</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">&lt;</span><span class="n">clinit</span><span class="o">&gt;()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">NEW</span> <span class="n">Test$testObservable$1</span>
</span><span class='line'>    <span class="n">DUP</span>
</span><span class='line'>    <span class="n">INVOKESPECIAL</span> <span class="n">Test$testObservable$1</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>    <span class="n">PUTSTATIC</span> <span class="n">Test$testObservable$1</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">:</span> <span class="n">LTest$testObservable$1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RETURN</span>
</span><span class='line'>    <span class="n">MAXSTACK</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">MAXLOCALS</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Lkotlin</span><span class="o">/</span><span class="n">Metadata</span><span class="o">;(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0008\u0002\n\u0002\u0010\u0000\n\u0000\u0010\u0000\u001a\u00020\u00012\u000e\u0010\u0002\u001a\n \u0004*\u0004\u0018\u00010\u00030\u00032\u000e\u0010\u0005\u001a\n \u0004*\u0004\u0018\u00010\u00060\u0006H\n\u00a2\u0006\u0002\u0008\u0007&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;&lt;anonymous&gt;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;o&quot;</span><span class="o">,</span> <span class="s">&quot;Ljava/util/Observable;&quot;</span><span class="o">,</span> <span class="s">&quot;kotlin.jvm.PlatformType&quot;</span><span class="o">,</span> <span class="s">&quot;arg&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;update&quot;</span><span class="o">})</span>
</span><span class='line'>  <span class="n">OUTERCLASS</span> <span class="n">Test</span> <span class="nf">testObservable</span> <span class="o">()</span><span class="n">V</span>
</span><span class='line'>  <span class="c1">// access flags 0x18</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="n">INNERCLASS</span> <span class="n">Test$testObservable$1</span> <span class="kc">null</span> <span class="kc">null</span>
</span><span class='line'>  <span class="c1">// compiled from: Space.kt</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析字节码可以看到有两个class文件，因此可以推断出Kotlin的Lambda表达式目前是一种基于内部类的语法糖实现。</p>

<p>除此之外，我们还可以使用kotlinc(Kotlin编译器来验证)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kotlinc</span> <span class="n">Test</span><span class="o">.</span><span class="na">kt</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行完成后，查看生成的class文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ls</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">^</span><span class="n">Test</span>
</span><span class='line'><span class="n">Test$testObservable$1</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="n">Test</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="n">Test</span><span class="o">.</span><span class="na">kt</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，我们还可以使用javap同样实现查看bytecode的功能，即<code>javap -c className</code>，具体操作可以参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2014%2F08%2F30%2Fjava-details-string-concatenation%2F">Java细节：字符串的拼接
</a></p>

<p>关于Lambda的具体研究，请参考这篇文章<a href="http://droidyue.com/newtab.html?url=http%3A%2F%2Fdroidyue.com%2Fblog%2F2015%2F11%2F28%2Farticle-java-8-lambdas-a-peek-under-the-hood%2F">深入探索Java 8 Lambda表达式
</a></p>

<p>除此之外，我们还可以利用上面的方法研究如下Kotlin的特性</p>

<ul>
<li>lazy初始化</li>
<li>when表达式</li>
<li>方法引用</li>
</ul>


<p>关于Kotlin的研究方法目前就是这些，Kotlin很简单，但也要知其所以然，方能游刃有余编码。希望大家可以尝试Kotlin，并玩的开心。</p>
]]></content>
  </entry>
  
</feed>
