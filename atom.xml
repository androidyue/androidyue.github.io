<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术小黑屋]]></title>
  <link href="http://droidyue.com/atom.xml" rel="self"/>
  <link href="http://droidyue.com/"/>
  <updated>2015-10-23T08:26:02+08:00</updated>
  <id>http://droidyue.com/</id>
  <author>
    <name><![CDATA[androidyue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[程序员的逗比瞬间(第三季)]]></title>
    <link href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/"/>
    <updated>2015-10-17T18:02:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/10/17/funny-programmer-season-three</id>
    <content type="html"><![CDATA[<p>小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。</p>

<!--more-->


<h2>紧急修复线上的一个大bug</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1ex4aby63xlg208c05s1ky.gif"></p>

<h2>突然发现自己改的是线上代码，立马更正回来</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4ae1gie0g207f05q1kx.gif"></p>

<h2>看到自己很久之前写的代码</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4af9zb07g20dw07tx6p.gif"></p>

<h2>当读到市场人员写的技术文章，哈哈哈</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1ex4agll4rag20cf0781ky.gif"></p>

<h2>修改代码，发现自己当时没写注释</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1ex4ahmttmgg20dw06vnol.gif"></p>

<h2>撞见客户和市场在扯淡，于是我。。。</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4aik43u2g208705dnpd.gif"></p>

<h2>得知某人修复一个bug居然提交了500多个文件</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1ex4aje5emvg208w06oe82.gif"></p>

<h2>没有经过分析就开始撸代码的后果</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1ex4aknaaglg208c05fu10.gif"></p>

<h2>原文参考</h2>

<ul>
<li><a href="http://howtodoinjava.com/2013/04/01/life-of-a-programmer-in-pictures-part-3/">http://howtodoinjava.com/2013/04/01/life-of-a-programmer-in-pictures-part-3/</a></li>
</ul>


<h2>程序员的逗比瞬间全系列</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series">程序员的逗比瞬间（第一季）</a></li>
<li><a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series">程序员的逗比瞬间（第二季）</a></li>
<li><a href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/?droid_refer=series">程序员的逗比瞬间（第三季）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今日值得读，悄悄上线了]]></title>
    <link href="http://droidyue.com/blog/2015/10/11/great-reading-articles-today/"/>
    <updated>2015-10-11T21:51:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/10/11/great-reading-articles-today</id>
    <content type="html"><![CDATA[<p>国庆长假接近尾声的时候用了将近一天多的时间实现了一个小功能，就是这篇文章的主角&mdash;-今日值得读，简单来说，这个功能用讲我个人阅读过的好的文章公开出来，一是记录目的，二则希望可以传递一些有价值的信息。</p>

<!--more-->


<h2>为什么做这个</h2>

<p>首先，我除了自己写博客文章之外，还是 开发者头条， 稀土掘金，极客头条等这类Hack News网站的贡献者，前面的这些网站技术干货很多，但是有些非技术的好文章，虽然我有Contribute的权限，但是碍于场合的问题，于是就丢掉了。周而复始，于是开始思考为什么不自己搞一个呢，于是花了将近一天多的时间撸了这个小功能。</p>

<h2>有什么意义</h2>

<p>其实在很多人看来并意义不大，毕竟如此好的开发者头条，掘金和极客头条等依然存在。诚然，做这个并没有太大的商业意义，更多的是为了解决自己的不爽，传播一些我认为的干货（不仅限于技术文章）。</p>

<h2>开发过程</h2>

<p>其实开发过程还是比较不平坦的，原因不是技术实现有多难，纠结的是选择何种方案。在这期间，在选择使用七牛还是又拍云之间纠结过，在Contribute程序使用PHP，WebPy和ROR之间也纠结过。考虑到快速完成，选择了相对比较熟悉的PHP形式做Contribute处理。</p>

<h2>内容来源</h2>

<p>主要的文章来源如下</p>

<ul>
<li>微博技术大牛的微博分享</li>
<li>朋友圈基友的干货分享</li>
<li>知乎上精彩的回答</li>
<li>其他Hack News网站</li>
</ul>


<p>其实上面的只是来源，只有在我阅读之后，觉得OK才会分享出来。所以质量是没有问题的。</p>

<h2>谁来运营</h2>

<p>内容的筛选和Contribute都由我来完成，如果你有好的文章想要推荐，可以向下面的订阅号发消息提供给我。</p>

<h3>时间成本</h3>

<p>其实时间成本是一个很大的考虑因素，但是自身作为开发，便可以敲敲代码写个程序或脚本倍速调高效率，节省时间。目前的Contribute的成本只有一件事，那就是点击两次按钮和必要时进行title修改。</p>

<p>四处寻找干货不需要花时间？ 四处需找必然花费时间，但是我不会这样做。因为在这样一个信息量爆炸的朋友圈和微博，好东西会主动找上来，我唯一做的就是阅读，如果可以就Contribute，仅此而已。</p>

<h3>对应的订阅号</h3>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/weixin_gongzhong_250.jpg"></p>

<h3>支持一下</h3>

<p>如果你认同我的想法或者想要给予我坚持做下去的鼓励，想出钱的可以点击下方按钮打赏一下，想出力的可以选择右侧的分享传播一下。</p>

<h2>地址</h2>

<p><a href="http://droidyue.com/read/?from=post">今日值的读</a></p>

<p>欢迎订阅我的微信公众号！<br/>
欢迎订阅我的微信公众号！<br/>
欢迎订阅我的微信公众号！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android性能调优利器StrictMode]]></title>
    <link href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/"/>
    <updated>2015-09-26T20:50:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode</id>
    <content type="html"><![CDATA[<p>作为Android开发，日常的开发工作中或多或少要接触到性能问题，比如我的Android程序运行缓慢卡顿，并且常常出现ANR对话框等等问题。既然有性能问题，就需要进行性能优化。正所谓工欲善其事，必先利其器。一个好的工具，可以帮助我们发现并定位问题，进而有的放矢进行解决。本文主要介绍StrictMode 在Android 应用开发中的应用和一些问题。</p>

<!--more-->


<h2>什么是StrictMode</h2>

<p>StrictMode意思为严格模式，是用来检测程序中违例情况的开发者工具。最常用的场景就是检测主线程中本地磁盘和网络读写等耗时的操作。</p>

<h3>严在哪里</h3>

<p>既然叫做严格模式，那么又严格在哪些地方呢？<br/>
在Android中，主线程，也就是UI线程，除了负责处理UI相关的操作外，还可以执行文件读取或者数据库读写操作（从Android 4.0 开始，网络操作禁止在主线程中执行，否则会抛出<a href="http://droidyue.com/blog/2014/11/08/look-into-android-dot-os-dot-networkonmainthreadexception/">NetworkOnMainThreadException</a>）。使用严格模式，系统检测出主线程违例的情况会做出相应的反应，如日志打印，弹出对话框亦或者崩溃等。换言之，严格模式会将应用的违例细节暴露给开发者方便优化与改善。</p>

<h3>具体能检测什么</h3>

<p>严格模式主要检测两大问题，一个是线程策略，即TreadPolicy，另一个是VM策略，即VmPolicy。</p>

<h3>ThreadPolicy</h3>

<p>线程策略检测的内容有</p>

<ul>
<li>自定义的耗时调用 使用<strong>detectCustomSlowCalls()</strong>开启</li>
<li>磁盘读取操作 使用<strong>detectDiskReads()</strong>开启</li>
<li>磁盘写入操作 使用<strong>detectDiskWrites()</strong>开启</li>
<li>网络操作  使用<strong>detectNetwork()</strong>开启</li>
</ul>


<h3>VmPolicy</h3>

<p>虚拟机策略检测的内容有</p>

<ul>
<li>Activity泄露 使用<strong>detectActivityLeaks()</strong>开启</li>
<li>未关闭的Closable对象泄露  使用<strong>detectLeakedClosableObjects()</strong>开启</li>
<li>泄露的Sqlite对象  使用<strong>detectLeakedSqlLiteObjects()</strong>开启</li>
<li>检测实例数量 使用<strong>setClassInstanceLimit()</strong>开启</li>
</ul>


<h2>工作原理</h2>

<p>其实StrictMode实现原理也比较简单，以IO操作为例，主要是通过在open，read，write，close时进行监控。<code>libcore.io.BlockGuardOs</code>文件就是监控的地方。以open为例，如下进行监控。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">FileDescriptor</span> <span class="nf">open</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mode</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ErrnoException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BlockGuard</span><span class="o">.</span><span class="na">getThreadPolicy</span><span class="o">().</span><span class="na">onReadFromDisk</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">mode</span> <span class="o">&amp;</span> <span class="n">O_ACCMODE</span><span class="o">)</span> <span class="o">!=</span> <span class="n">O_RDONLY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BlockGuard</span><span class="o">.</span><span class="na">getThreadPolicy</span><span class="o">().</span><span class="na">onWriteToDisk</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">os</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">flags</span><span class="o">,</span> <span class="n">mode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<strong>onReadFromDisk()</strong>方法的实现，代码位于StrictMode.java中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReadFromDisk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">mPolicyMask</span> <span class="o">&amp;</span> <span class="n">DETECT_DISK_READ</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">tooManyViolationsThisLoop</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">BlockGuard</span><span class="o">.</span><span class="na">BlockGuardPolicyException</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StrictModeDiskReadViolation</span><span class="o">(</span><span class="n">mPolicyMask</span><span class="o">);</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">fillInStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="n">startHandlingViolationException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何使用</h2>

<p>关于StrictMode如何使用，最重要的就是如何启用严格模式。</p>

<h3>放在哪里</h3>

<p>严格模式的开启可以放在Application或者Activity以及其他组件的onCreate方法。为了更好地分析应用中的问题，建议放在Application的onCreate方法中。</p>

<h3>简单启用</h3>

<p>以下的代码启用全部的ThreadPolicy和VmPolicy违例检测</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">IS_DEBUG</span> <span class="o">&amp;&amp;</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">GINGERBREAD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StrictMode</span><span class="o">.</span><span class="na">setThreadPolicy</span><span class="o">(</span><span class="k">new</span> <span class="n">StrictMode</span><span class="o">.</span><span class="na">ThreadPolicy</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">detectAll</span><span class="o">().</span><span class="na">penaltyLog</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>  <span class="n">StrictMode</span><span class="o">.</span><span class="na">setVmPolicy</span><span class="o">(</span><span class="k">new</span> <span class="n">VmPolicy</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">detectAll</span><span class="o">().</span><span class="na">penaltyLog</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>严格模式需要在debug模式开启，不要在release版本中启用。</p>

<p>同时，严格模式自API 9 开始引入，某些API方法也从 API 11 引入。使用时应该注意 API 级别。</p>

<p>如有需要，也可以开启部分的严格模式。</p>

<h3>查看结果</h3>

<p>严格模式有很多种报告违例的形式，但是想要分析具体违例情况，还是需要查看日志，终端下过滤StrictMode就能得到违例的具体stacktrace信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb logcat | grep StrictMode
</span></code></pre></td></tr></table></div></figure>


<h2>解决违例</h2>

<ul>
<li>如果是主线程中出现文件读写违例，建议使用工作线程（必要时结合Handler）完成。</li>
<li>如果是对SharedPreferences写入操作，在API 9 以上 建议优先调用apply而非commit。</li>
<li>如果是存在未关闭的Closable对象，根据对应的stacktrace进行关闭。</li>
<li>如果是SQLite对象泄露，根据对应的stacktrace进行释放。</li>
</ul>


<p>举个例子</p>

<p>以主线程中的文件写入为例，引起违例警告的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToExternalStorage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">externalStorage</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">();</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">destFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">externalStorage</span><span class="o">,</span> <span class="s">&quot;dest.txt&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">destFile</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>引起的警告为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>: StrictMode policy violation; ~duration<span class="o">=</span>20 ms: android.os.StrictMode<span class="nv">$StrictModeDiskReadViolation</span>: <span class="nv">policy</span><span class="o">=</span>31 <span class="nv">violation</span><span class="o">=</span>2
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at android.os.StrictMode<span class="nv">$AndroidBlockGuardPolicy</span>.onReadFromDisk<span class="o">(</span>StrictMode.java:1176<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at libcore.io.BlockGuardOs.open<span class="o">(</span>BlockGuardOs.java:106<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at libcore.io.IoBridge.open<span class="o">(</span>IoBridge.java:390<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at java.io.FileOutputStream.&lt;init&gt;<span class="o">(</span>FileOutputStream.java:88<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.writeToExternalStorage<span class="o">(</span>MainActivity.java:56<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.onCreate<span class="o">(</span>MainActivity.java:30<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 9730<span class="o">)</span>:    at android.app.Activity.performCreate<span class="o">(</span>Activity.java:4543<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为上述属于主线程中的IO违例，解决方法就是讲写入操作放入工作线程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public void writeToExternalStorage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    new Thread<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      @Override
</span><span class='line'>      public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          super.run<span class="o">()</span>;
</span><span class='line'>          File <span class="nv">externalStorage</span> <span class="o">=</span> Environment.getExternalStorageDirectory<span class="o">()</span>;
</span><span class='line'>          File <span class="nv">destFile</span> <span class="o">=</span> new File<span class="o">(</span>externalStorage, <span class="s2">&quot;dest.txt&quot;</span><span class="o">)</span>;
</span><span class='line'>          try <span class="o">{</span>
</span><span class='line'>              OutputStream <span class="nv">output</span> <span class="o">=</span> new FileOutputStream<span class="o">(</span>destFile, <span class="nb">true</span><span class="o">)</span>;
</span><span class='line'>              output.write<span class="o">(</span><span class="s2">&quot;droidyue.com&quot;</span>.getBytes<span class="o">())</span>;
</span><span class='line'>              output.flush<span class="o">()</span>;
</span><span class='line'>              output.close<span class="o">()</span>;
</span><span class='line'>          <span class="o">}</span> catch <span class="o">(</span>FileNotFoundException e<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              e.printStackTrace<span class="o">()</span>;
</span><span class='line'>          <span class="o">}</span> catch <span class="o">(</span>IOException e<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              e.printStackTrace<span class="o">()</span>;
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>.start<span class="o">()</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而这并非完善，因为OutputStream.write方法可能抛出IOException，导致存在OutputStream对象未关闭的情况，仍然需要改进避免出现Closable对象未关闭的违例。改进如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToExternalStorage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">externalStorage</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">();</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">destFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">externalStorage</span><span class="o">,</span> <span class="s">&quot;dest.txt&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">destFile</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;droidyue.com&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>检测内存泄露</h2>

<p>通常情况下，检测内存泄露，我们需要使用MAT对heap dump 文件进行分析，这种操作不困难，但也不容易。使用严格模式，只需要过滤日志就能发现内存泄露。</p>

<p>这里以Activity为例说明，首先我们需要开启对检测Activity泄露的违例检测。使用上面的detectAll或者detectActivityLeaks()均可。其次写一段能够产生Activity泄露的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LeakyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyApplication</span><span class="o">.</span><span class="na">sLeakyActivities</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MyApplication中关于sLeakyActivities的部分实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">IS_DEBUG</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;</span> <span class="n">sLeakyActivities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们反复进入LeakyActivity再退出，过滤StrictMode就会得到这样的日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>E/StrictMode<span class="o">(</span> 2622<span class="o">)</span>: class com.example.strictmodedemo.LeakyActivity; <span class="nv">instances</span><span class="o">=</span>2; <span class="nv">limit</span><span class="o">=</span>1
</span><span class='line'>E/StrictMode<span class="o">(</span> 2622<span class="o">)</span>: android.os.StrictMode<span class="nv">$InstanceCountViolation</span>: class com.example.strictmodedemo.LeakyActivity; <span class="nv">instances</span><span class="o">=</span>2; <span class="nv">limit</span><span class="o">=</span>1
</span><span class='line'>E/StrictMode<span class="o">(</span> 2622<span class="o">)</span>:    at android.os.StrictMode.setClassInstanceLimit<span class="o">(</span>StrictMode.java:1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析日志，LeakyActivity本应该是只存在一份实例，但现在出现了2个，说明LeakyActivity发生了内存泄露。</p>

<p>严格模式除了可以检测Activity的内存泄露之外，还能自定义检测类的实例泄露。从API 11 开始，系统提供的这个方法可以实现我们的需求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public StrictMode.VmPolicy.Builder setClassInstanceLimit <span class="o">(</span>Class klass, int instanceLimit<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个栗子，比如一个浏览器中只允许存在一个SearchBox实例，我们就可以这样设置已检测SearchBox实例的泄露</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>StrictMode.setVmPolicy<span class="o">(</span>new VmPolicy.Builder<span class="o">()</span>.setClassInstanceLimit<span class="o">(</span>SearchBox.class, 1<span class="o">)</span>.penaltyLog<span class="o">()</span>.build<span class="o">())</span>;
</span></code></pre></td></tr></table></div></figure>


<h2>noteSlowCall</h2>

<p>StrictMode从 API 11开始允许开发者自定义一些耗时调用违例，这种自定义适用于自定义的任务执行类中，比如我们有一个进行任务处理的类，为TaskExecutor。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public class TaskExecutor <span class="o">{</span>
</span><span class='line'>    public void execute<span class="o">(</span>Runnable task<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        task.run<span class="o">()</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先需要跟踪每个任务的耗时情况，如果大于500毫秒需要提示给开发者，noteSlowCall就可以实现这个功能，如下修改代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskExecutor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">SLOW_CALL_THRESHOLD</span> <span class="o">=</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">executeTask</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">();</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cost</span> <span class="o">&gt;</span> <span class="n">SLOW_CALL_THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">StrictMode</span><span class="o">.</span><span class="na">noteSlowCall</span><span class="o">(</span><span class="s">&quot;slowCall cost=&quot;</span> <span class="o">+</span> <span class="n">cost</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行一个耗时2000毫秒的任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>TaskExecutor <span class="nv">executor</span> <span class="o">=</span> new TaskExecutor<span class="o">()</span>;
</span><span class='line'>executor.executeTask<span class="o">(</span>new Runnable<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  @Override
</span><span class='line'>    public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        try <span class="o">{</span>
</span><span class='line'>          Thread.sleep<span class="o">(</span>2000<span class="o">)</span>;
</span><span class='line'>        <span class="o">}</span> catch <span class="o">(</span>InterruptedException e<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            e.printStackTrace<span class="o">()</span>;
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<p>得到的违例日志，注意其中<code>~duration=20 ms</code>并非耗时任务的执行时间，而我们的自定义信息<code>msg=slowCall cost=2000</code>才包含了真正的耗时。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>: StrictMode policy violation; ~duration<span class="o">=</span>20 ms: android.os.StrictMode<span class="nv">$StrictModeCustomViolation</span>: <span class="nv">policy</span><span class="o">=</span>31 <span class="nv">violation</span><span class="o">=</span>8 <span class="nv">msg</span><span class="o">=</span>slowCall <span class="nv">cost</span><span class="o">=</span>2000
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.StrictMode<span class="nv">$AndroidBlockGuardPolicy</span>.onCustomSlowCall<span class="o">(</span>StrictMode.java:1163<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.StrictMode.noteSlowCall<span class="o">(</span>StrictMode.java:1974<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.example.strictmodedemo.TaskExecutor.executeTask<span class="o">(</span>TaskExecutor.java:17<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.onCreate<span class="o">(</span>MainActivity.java:36<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.Activity.performCreate<span class="o">(</span>Activity.java:4543<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.Instrumentation.callActivityOnCreate<span class="o">(</span>Instrumentation.java:1071<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.performLaunchActivity<span class="o">(</span>ActivityThread.java:2158<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.handleLaunchActivity<span class="o">(</span>ActivityThread.java:2237<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.access<span class="nv">$600</span><span class="o">(</span>ActivityThread.java:139<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread<span class="nv">$H</span>.handleMessage<span class="o">(</span>ActivityThread.java:1262<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.Handler.dispatchMessage<span class="o">(</span>Handler.java:99<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.os.Looper.loop<span class="o">(</span>Looper.java:156<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at android.app.ActivityThread.main<span class="o">(</span>ActivityThread.java:5005<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at java.lang.reflect.Method.invokeNative<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at java.lang.reflect.Method.invoke<span class="o">(</span>Method.java:511<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.android.internal.os.ZygoteInit<span class="nv">$MethodAndArgsCaller</span>.run<span class="o">(</span>ZygoteInit.java:784<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at com.android.internal.os.ZygoteInit.main<span class="o">(</span>ZygoteInit.java:551<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span>23890<span class="o">)</span>:    at dalvik.system.NativeStart.main<span class="o">(</span>Native Method<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>其他技巧</h2>

<p>除了通过日志查看之外，我们也可以在开发者选项中开启严格模式，开启之后，如果主线程中有执行时间长的操作，屏幕则会闪烁，这是一个更加直接的方法。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/strictmode_developer_tools.png"></p>

<h2>问题来了</h2>

<h3>日志的时间靠谱么</h3>

<p>在下面的过滤日志中，我们看到下面的一个IO操作要消耗31毫秒，这是真的么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>: StrictMode policy violation; ~duration<span class="o">=</span>31 ms: android.os.StrictMode<span class="nv">$StrictModeDiskReadViolation</span>: <span class="nv">policy</span><span class="o">=</span>31 <span class="nv">violation</span><span class="o">=</span>2
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at android.os.StrictMode<span class="nv">$AndroidBlockGuardPolicy</span>.onReadFromDisk<span class="o">(</span>StrictMode.java:1176<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at libcore.io.BlockGuardOs.read<span class="o">(</span>BlockGuardOs.java:148<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at libcore.io.IoBridge.read<span class="o">(</span>IoBridge.java:422<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.FileInputStream.read<span class="o">(</span>FileInputStream.java:179<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.InputStreamReader.read<span class="o">(</span>InputStreamReader.java:244<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.BufferedReader.fillBuf<span class="o">(</span>BufferedReader.java:130<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at java.io.BufferedReader.readLine<span class="o">(</span>BufferedReader.java:354<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.testReadContentOfFile<span class="o">(</span>MainActivity.java:65<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at com.example.strictmodedemo.MainActivity.onCreate<span class="o">(</span>MainActivity.java:28<span class="o">)</span>
</span><span class='line'>D/StrictMode<span class="o">(</span> 2921<span class="o">)</span>:    at android.app.Activity.performCreate<span class="o">(</span>Activity.java:4543<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的stacktrace可以看出testReadContentOfFile方法中包含了文件读取IO操作，至于是否为31毫秒，我们可以利用秒表的原理计算一下，即在方法调用的地方如下记录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">testReadContentOfFile</span><span class="o">();</span>
</span><span class='line'><span class="kt">long</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;cost = &quot;</span> <span class="o">+</span> <span class="n">cost</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的日志中上述操作耗时9毫秒，非31毫秒。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>D/MainActivity<span class="o">(</span>20996<span class="o">)</span>: <span class="nv">cost</span> <span class="o">=</span> 9
</span></code></pre></td></tr></table></div></figure>


<p>注：通常情况下StrictMode给出的耗时相对实际情况偏高，并不是真正的耗时数据。</p>

<h2>注意</h2>

<ul>
<li>在线上环境即Release版本不建议开启严格模式。</li>
<li>严格模式无法监控JNI中的磁盘IO和网络请求。</li>
<li>应用中并非需要解决全部的违例情况，比如有些IO操作必须在主线程中进行。</li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android进程线程调度之cgroups]]></title>
    <link href="http://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/"/>
    <updated>2015-09-17T21:17:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups</id>
    <content type="html"><![CDATA[<p>做Android开发的同学们，了解cgroups的同学其实不多，cgroups是什么意思呢，在操作系统中有着什么样的作用，以及Android中的cgroups有哪些，各有什么用呢，本文将会进行逐一剖析。</p>

<!--more-->


<h2>先看定义</h2>

<p>下面的引用为维基百科的<a href="https://zh.wikipedia.org/wiki/Cgroups">cgroups的定义</a></p>

<blockquote><p>cgroups，其名称源自控制组群（control groups）的简写，是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）。</p></blockquote>

<p>维基百科的解释言简意赅，无需赘述，下面以例子讲解如何使用cgroups。</p>

<h2>结合示例</h2>

<p>以下会以Fedora这个Linux发行版为例，介绍如何使用cgroups限制进程的CPU使用率。</p>

<p>这里我们使用一个死循环的Python脚本用来消耗CPU，文件名为loop.py，。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding=utf-8</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行脚本<code>python loop.py</code>，使用top查看该进程的CPU使用情况,CPU使用率接近100%。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/cpu_cost_no_limit.png"></p>

<p>然后我们将会通过修改配置，利用cgroups将该进程的CPU使用率降低到10%</p>

<p>首先查看当前系统的cgroups</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>16:31:57-androidyue/tmp<span class="nv">$ </span>sudo mount -t cgroup
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>androidyue:
</span><span class='line'>cgroup on /sys/fs/cgroup/systemd <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,release_agent<span class="o">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="o">=</span>systemd<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/cpuset <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,cpuset<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/cpu,cpuacct <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,cpuacct,cpu<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/memory <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,memory<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/devices <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,devices<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/freezer <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,freezer<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/net_cls <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,net_cls<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/blkio <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,blkio<span class="o">)</span>
</span><span class='line'>cgroup on /sys/fs/cgroup/perf_event <span class="nb">type </span>cgroup <span class="o">(</span>rw,nosuid,nodev,noexec,relatime,perf_event<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个cgroup,控制CPU使用率。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /sys/fs/cgroup/cpu
</span><span class='line'>sudo mkdir cpu_test
</span></code></pre></td></tr></table></div></figure>


<p>接下来查看刚刚创建的cpu_test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>17:04:54-androidyue/sys/fs/cgroup/cpu<span class="nv">$ </span>ls cpu_test/
</span><span class='line'>cgroup.clone_children  cgroup.procs  cpuacct.usage         cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release
</span><span class='line'>cgroup.event_control   cpuacct.stat  cpuacct.usage_percpu  cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks
</span></code></pre></td></tr></table></div></figure>


<p>完成这一目标修改涉及到的文件有</p>

<p>cpu.cfs_period_us
设置该cgroup请求到CPU资源分配的周期，单位为微秒（这里使用us代替微秒单位µs）。</p>

<p>cpu.cfs_quota_us
设置cgroup组内的进程在一次CPU分配周期（即cpu.cfs_period_us指定的值）内可以执行的时间。</p>

<p>如果我们想要设置该cpu_test组内的cpu使用率为10%，我们需要这样修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>1000000 &gt; cpu.cfs_period_us
</span><span class='line'><span class="nb">echo </span>100000 &gt; cpu.cfs_quota_us
</span></code></pre></td></tr></table></div></figure>


<p>注意上述修改需要使用root身份登陆，即<code>sudo -i</code>,下面的将进程加入cgroup同样需要root身份。</p>

<p>将上图中的进程ID 写入到cpu_test下的tasks文件中，并查看tasks验证是否加入成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>17:12:27-root/sys/fs/cgroup/cpu/cpu_test<span class="nv">$ </span>sudo <span class="nb">echo </span>12093 &gt; tasks
</span><span class='line'>17:12:41-root/sys/fs/cgroup/cpu/cpu_test<span class="nv">$ </span>cat tasks
</span><span class='line'>12093
</span></code></pre></td></tr></table></div></figure>


<p>再次查看进程id为12093的CPU使用率，已成功降低到10%左右。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/cpu_cost_with_limit.png"></p>

<h2>cgroups在Android中的应用</h2>

<p>在Android中也存在cgroups，涉及到CPU的目前只有两个，一个是apps，路径为<code>/dev/cpuctl/apps</code>。另一个是bg_non_interactive，路径为<code>/dev/cpuctl/apps/bg_non_interactive</code></p>

<h3>cpu.share</h3>

<p>cpu.share文件中保存了整数值，用来设置cgroup分组任务获得CPU时间的相对值。举例来说，cgroup A和cgroup B的cpu.share值都是1024，那么cgroup A 与cgroup B中的任务分配到的CPU时间相同，如果cgroup C的cpu.share为512，那么cgroup C中的任务获得的CPU时间是A或B的一半。</p>

<p>apps下的cpu.share 值为1024</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps <span class="c"># cat cpu.shares </span>
</span><span class='line'>1024
</span></code></pre></td></tr></table></div></figure>


<p>bg_non_interactive下的cpu_share值为52</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps/bg_non_interactive <span class="c"># cat cpu.shares</span>
</span><span class='line'>52
</span></code></pre></td></tr></table></div></figure>


<p>也就是说apps分组与bg_non_interactive分组cpu.share值相比接近于20:1。由于Android中只有这两个cgroup，也就是说apps分组中的应用可以利用95%的CPU，而处于bg_non_interactive分组中的应用则只能获得5%的CPU利用率。</p>

<h2>cpu.rt_period_us与cpu.rt_runtime_us</h2>

<p>cpu.rt_period_us用来设置cgroup获得CPU资源的周期，单位为微秒。
cpu.rt_runtime_us用来设置cgroup中的任务可以最长获得CPU资源的时间，单位为微秒。设定这个值可以访问某个cgroup独占CPU资源。最长的获取CPU资源时间取决于逻辑CPU的数量。比如cpu.rt_runtime_us设置为200000（0.2秒），cpu.rt_period_us设置为1000000（1秒）。在单个逻辑CPU上的获得时间为每秒为0.2秒。 2个逻辑CPU，获得的时间则是0.4秒。</p>

<p>apps分组下的两个配置的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps <span class="c"># cat cpu.rt_period_us</span>
</span><span class='line'>1000000
</span><span class='line'>root@htc_m8tl:/dev/cpuctl/apps <span class="c"># cat cpu.rt_runtime_us</span>
</span><span class='line'>800000
</span></code></pre></td></tr></table></div></figure>


<p>即单个逻辑CPU下每一秒内可以获得0.8秒的执行时间。</p>

<p>bg_non_interactive分组下的两个配置的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@htc_m8tl:/dev/cpuctl/apps/bg_non_interactive <span class="c"># cat cpu.rt_period_us </span>
</span><span class='line'>1000000
</span><span class='line'>root@htc_m8tl:/dev/cpuctl/apps/bg_non_interactive <span class="c"># cat cpu.rt_runtime_us</span>
</span><span class='line'>700000
</span></code></pre></td></tr></table></div></figure>


<p>即单个逻辑CPU下每一秒可以获得0.7秒的执行时间。</p>

<h3>花落谁家</h3>

<p>在Android中，一个应用（进程）既可以由apps切换到bg_non_interactive，也可以切换回来。</p>

<h4>Activity</h4>

<p>当一个Activity处于可见的状态下，那么这个应用进程就属于apps分组。</p>

<h4>Service</h4>

<p>当Service调用startForeground方法后，那么这个应用进程则是归类于apps分组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Notification</span><span class="o">.</span><span class="na">Builder</span>  <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notification</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">setContentTitle</span><span class="o">(</span><span class="s">&quot;Title&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="n">startForeground</span><span class="o">(</span><span class="n">notification</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(),</span> <span class="n">notification</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如何确定进程的cgroups</h3>

<p>其实确定过程也很简单，总共分三步。</p>

<p>第一步，进入已经root的Android设备终端</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">11</span><span class="o">:</span><span class="mi">10</span> <span class="n">$</span> <span class="n">adb</span> <span class="n">shell</span>
</span><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">su</span>
</span><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二步，目标应用的进程id，这里以我们的demo程序（包名为com.droidyue.androidthreadschedule）为例。得到的进程id为22871</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">ps</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span>
</span><span class='line'><span class="n">u0_a1434</span>  <span class="mi">22871</span> <span class="mi">23723</span> <span class="mi">970040</span> <span class="mi">54304</span> <span class="n">ffffffff</span> <span class="mi">400</span><span class="n">a045c</span> <span class="n">S</span> <span class="n">com</span><span class="o">.</span><span class="na">droidyue</span><span class="o">.</span><span class="na">androidthreadschedule</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三步，利用进程id查看其所在的cgroups</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">2</span><span class="o">|</span><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">cat</span>  <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="mi">22871</span><span class="o">/</span><span class="n">cgroup</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span><span class="nl">cpu:</span><span class="o">/</span><span class="n">apps</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span><span class="nl">memory:</span><span class="o">/</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span><span class="nl">cpuacct:</span><span class="o">/</span><span class="n">uid</span><span class="o">/</span><span class="mi">11434</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上三步，<del>我们就能把大象关冰箱里</del>,我们就能得到进程所在的cgroups分组。</p>

<h2>利用cgroups我们可以做什么</h2>

<p>其实对于一般应用来说，能做的事情少之又少。对于有需要的应用可以使用Service.startForeground方法来获取更多的CPU资源，但并不建议盲目去这样做，还是要根据自身应用需要实现。</p>

<p>另外，个人认为最大的收获，就是我们可以参照cgroups的分组的思想来设计有类似场景的方案解决实际问题。</p>

<h3>同系列文章</h3>

<ul>
<li><a href="http://droidyue.com/blog/2015/09/05/android-process-and-thread-schedule-nice/?droid_refer=series">剖析Android中进程与线程调度之nice</a></li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你的Java代码对JIT编译友好么？]]></title>
    <link href="http://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly/"/>
    <updated>2015-09-12T18:16:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/12/is-your-java-code-jit-friendly</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/Java-Application-Hostile-to-JIT-Compilation">你的Java代码对JIT编译友好么？</a>。如需转载，请与 InfoQ 中文站联系。</p>

<h2>摘要</h2>

<p>在JVM中，即时编译器（以下简称JIT）是很重要的一部分，可以帮助应用大幅度提升执行效率。但是很多程序却并不能很好地利用JIT的高性能优化能力。本文中，我们将通过研究一些简单的例子找出程序代码对JIT不友好的问题。</p>

<!--more-->


<p>JIT编译器是Java虚拟机（以下简称JVM）中效率最高并且最重要的组成部分之一。但是很多的程序并没有充分利用JIT的高性能优化能力，很多开发者甚至也并不清楚他们的程序有效利用JIT的程度。</p>

<p>在本文中，我们将介绍一些简单的方法来验证你的程序是否对JIT友好。这里我们并不打算覆盖诸如JIT编译器工作原理这些细节。只是提供一些简单基础的检测和方法来帮助你的代码对JIT友好，进而得到优化。</p>

<p>JIT编译的关键一点就是JVM会自动地监控正在被解释器执行的方法。一旦某个方法被视为频繁调用，这个方法就会被标记，进而编译成本地机器指令。这些频繁执行的方法的编译由后台的一个JVM线程来完成。在编译完成之前，JVM会执行这个方法的解释执行版本。一旦该方法编译完成，JVM会使用将方法调度表中该方法的解释的版本替换成编译后的版本。</p>

<p>Hotspot虚拟机有很多JIT编译优化的技术，但是其中最重要的一个优化技术就是内联。在内联的过程中，JIT编译器有效地将一个方法的方法体提取到其调用者中，从而减少虚方法调用。举个例子，看如下的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public int add(int x, int y) {
</span><span class='line'>  return x + y;
</span><span class='line'>}
</span><span class='line'>  
</span><span class='line'>int result = add(a, b);</span></code></pre></td></tr></table></div></figure>


<p>当内联发生之后，上述代码会变成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int result = a + b;</span></code></pre></td></tr></table></div></figure>


<p>上面的变量a和b替换了方法的参数，并且add方法的方法体已经复制到了调用者的区域。使用内联可以为程序带来很多好处，比如
  * 不会引起额外的性能损失
  * 减少指针的间接引用
  * 不需要对内联方法进行虚方法查找</p>

<p>另外，通过将方法的实现复制到调用者中，JIT编译器处理的代码增多，使得后续的优化和更多的内联成为可能。</p>

<p>内联取决于方法的大小。缺省情况下，含有35个字节码或更少的方法可以进行内联操作。对于被频繁调用的方法，临界值可以达到325个字节。我们可以通过设置-XX:MaxInlineSize=# 选项来修改最大的临界值，通过设置‑XX:FreqInlineSize=#选项来修改频繁调用的方法的临界值。但是在没有正确的分析的情况下，我们不应该修改这些配置。因为盲目地修改可能会对程序的性能带来不可预料的影响。</p>

<p>由于内联会对代码的性能有大幅提升，因此让尽可能多的方法达到内联条件尤为重要。这里我们介绍一款叫做Jarscan的工具来帮助我们检测程序中有多少方法是对内联友好的。</p>

<p>Jarscan工具是分析JIT编译的JITWatch开源工具套件中的一部分。和在运行时分析JIT日志的主工具不同，Jarscan是一款静态分析jar文件的工具。该工具的输出结果格式为CSV，结果中包含了超过频繁调用方法临界值的方法等信息。JITWatch和Jarscan是AdoptOpenJDK工程的一部分，该工程由Chris Newland领导。</p>

<p>在使用Jarscan并得到分析结果之前，需要从AdoptOpenJDK Jenkins网站下载二进制工具（<a href="https://adopt-openjdk.ci.cloudbees.com/job/jitwatch/jdk=JDK_1.7/ws/lastSuccessfulBuild/artifact/jitwatch-1.0.0-SNAPSHOT-JDK_1.7.tar.gz">Java 7 工具</a>，<a href="https://adopt-openjdk.ci.cloudbees.com/job/jitwatch/jdk=OpenJDK8/ws/lastSuccessfulBuild/artifact/jitwatch-1.0.0-SNAPSHOT-OpenJDK8.tar.gz">Java 8 工具</a>）。</p>

<p>运行很简单，如下所示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./jarScan.sh &lt;jars to analyse&gt;</span></code></pre></td></tr></table></div></figure>


<p>更多关于Jarscan的细节可以访问<a href="https://github.com/AdoptOpenJDK/jitwatch/wiki/JarScan">AdoptOpenJDK wiki</a>进行了解。</p>

<p>上面产生的报告对于开发团队的开发工作很有帮助，根据报告结果，他们可以查找程序中是否包含了过大而不能JIT编译的关键路径方法。上面的操作依赖于手动执行。但是为了以后的自动化，可以开启Java的-XX:+PrintCompilation 选项。开启这个选项会生成如下的日志信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>37    1      java.lang.String::hashCode (67 bytes)
</span><span class='line'>124   2  s!  java.lang.ClassLoader::loadClass  (58 bytes)</span></code></pre></td></tr></table></div></figure>


<p>其中，第一列表示从进程启动到JIT编译发生经过的时间，单位为毫秒。第二列表示的是编译id，表明该方法正在被编译（在Hotspot中一个方法可以多次去优化和再优化）。第三列表示的是附加的一些标志信息，比如s代表synchronized，！代表有异常处理。最后两列分别代表正在编译的方法名称和该方法的字节大小。</p>

<p>关于PrintCompilation输出的更多细节，Stephen Colebourne写过一篇博客文章详细介绍日志结果中各列的具体含义，感兴趣的可以访问<a href="http://blog.joda.org/2011/08/printcompilation-jvm-flag.html">这里</a>阅读。</p>

<p>PrintCompilation的输出结果会提供运行时正在编译的方法的信息，Jarscan工具的输出结果可以告诉我们哪些方法不能进行JIT编译。结合两者，我们就可以清楚地知道哪些方法进行了编译，哪些没有进行。另外，PrintCompilation选项可以在线上环境使用，因为开启这个选项几乎不会影响JIT编译器的性能。</p>

<p>但是，PrintCompilation也存在着两个小问题，有时候会显得不是那么方便：</p>

<p>  1.输出的结果中未包含方法的签名，如果存在重载方法，区分起来则比较困难。<br/>
  2.Hotspot虚拟机目前不能将结果输出到单独的文件中，目前只能是以标准输出的形式展示。</p>

<p>上述的第二个问题的影响在于PrintCompilation的日志会和其他常用的日志混在一起。对于大多数服务器端程序来说，我们需要一个过滤进程来将PrintCompilation的日志过滤到一个独立的日志中。最简单的判断一个方法否是JIT友好的途径就是遵循下面这个简单的步骤：</p>

<p>  1.确定程序中位于要处理的关键路径上的方法。<br/>
  2.检查这些方法没有出现在Jarscan的输出结果中。<br/>
  3.检查这些方法确实出现在了PrintCompilation的输出结果中。</p>

<p>如果一个方法超过了内联的临界值，大多数情况下最常用的方法就是讲这个重要的方法拆分成多个可以进行内联的小方法，这样修改之后通常会获取更好的执行效率。但是对于所有的性能优化而言，优化之前的执行效率需要测量记录，并且需要需要同优化后的数据进行对比之后，才能决定是否进行优化。为了性能优化而做出的改变不应该是盲目的。</p>

<p>几乎所有的Java程序都依赖大量的提供关键功能的库。Jarscan可以帮助我们检测哪些库或者框架的方法超过了内联的临界值。举一个具体的例子，我们这里检查JVM主要的运行时库 rt.jar文件。</p>

<p>为了让结果有点意思，我们分别比较Java 7 和Java 8，并查看这个库的变化。在开始之前我们需要安装Java 7 和 Java8 JDK。首先，我们分别运行Jarscan扫描各自的rt.jar文件，并得到用来后续分析的报告结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./jarScan.sh /Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home/jre/lib/rt.jar
</span><span class='line'>  &gt; large_jre_methods_7u71.txt
</span><span class='line'>$ ./jarScan.sh /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/rt.jar
</span><span class='line'>  &gt; large_jre_methods_8u25.txt</span></code></pre></td></tr></table></div></figure>


<p>上述操作结束之后，我们得到两个CSV文件，一个是JDK 7u71的结果，另一个是JDK 8u25。然后我们看一看不同的版本内联情况有哪些变化。首先，一个最简单的判断验证方式，看一看不同版本的JRE中有多少对JIT不友好的方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ wc -l large_jre_methods_*
</span><span class='line'> 3684 large_jre_methods_7u71.txt
</span><span class='line'> 3576 large_jre_methods_8u25.txt</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，相比Java 7，Java 8 少了100多个内联不友好的方法。下面继续深入研究，看看一些关键的包的变化。为了便于理解如何操作，我们再次介绍一下Jarscan的输出结果。Jarscan的输出结果有如下3个属性组成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> "&lt;package&gt;","&lt;method name and signature&gt;",&lt;num of bytes&gt;</span></code></pre></td></tr></table></div></figure>


<p>了解了上述的格式，我们可以利用一些Unix文本处理的工具来研究报告结果。比如，我们想看一下Java 7 和 Java 8 这两个版本中java.lang包下哪些方法变得内联友好了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ cat large_jre_methods_7u71.txt large_jre_methods_8u25.txt | grep -i
</span><span class='line'>  ^\"java.lang | sort | uniq -c</span></code></pre></td></tr></table></div></figure>


<p>上面的语句使用grep命令过滤出每份报告中以java.lang开头的行，即只显示位于包java.lang中的类的内联不友好的方法。sort | uniq -c 是一个比较老的Unix小技巧，首先将讲行信息进行排序（相同的信息将聚集到一起），然后对上面的排序数据进行去重操作。另外本命令还会统计一个当前行信息重复的次数，这个数据位于每一行信息的最开始部分。让我们看一下上述命令的执行结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat large_jre_methods_7u71.txt large_jre_methods_8u25.txt | grep -i ^\"java.lang | sort | uniq -c
</span><span class='line'>2 "java.lang.CharacterData00","int getNumericValue(int)",835
</span><span class='line'>2 "java.lang.CharacterData00","int toLowerCase(int)",1339
</span><span class='line'>2 "java.lang.CharacterData00","int toUpperCase(int)",1307
</span><span class='line'>// ... skipped output
</span><span class='line'>2 "java.lang.invoke.DirectMethodHandle","private static java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType,int)",613
</span><span class='line'>1 "java.lang.invoke.InnerClassLambdaMetafactory","private java.lang.Class spinInnerClass()",497
</span><span class='line'>// ... more output ----</span></code></pre></td></tr></table></div></figure>


<p>报告中，以2（这是使用了uniq -c 对相同的信息计算数量的结果）最为起始的条目说明这些方法在Java 7 和Java 8 中起字节码大小没有改变。虽然这并不能完全肯定地说明这些方法的字节码没有改变，但通常我们也可以视为没有改变。重复次数为1的方法有如下的情况：<br/>
  a)方法的字节码已经改变。<br/>
  b)这些方法为新的方法。</p>

<p>我们看一下以1开始的行数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 "java.lang.invoke.AbstractValidatingLambdaMetafactory","void
</span><span class='line'>validateMetafactoryArgs()",864
</span><span class='line'>1 "java.lang.invoke.InnerClassLambdaMetafactory","private
</span><span class='line'>java.lang.Class spinInnerClass()",497
</span><span class='line'>1 "java.lang.reflect.Executable","java.lang.String
</span><span class='line'>sharedToGenericString(int,boolean)",329</span></code></pre></td></tr></table></div></figure>


<p>上面三个对内联不友好的方法全部来自Java 8，因此这属于新方法的情况。前两个方法与lamda表达式实现相关，第三个方法和反射子系统中继承层级调整有关。在这里，这个改变就是在Java 8 中引入了方法和构造器可以继承的通用基类。</p>

<p>最后，我们看一看JDK核心库一些令人惊讶的特性：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ grep -i ^\"java.lang.String large_jre_methods_8u25.txt
</span><span class='line'>  "java.lang.String","public java.lang.String[] split(java.lang.String,int)",326
</span><span class='line'>  "java.lang.String","public java.lang.String toLowerCase(java.util.Locale)",431
</span><span class='line'>  "java.lang.String","public java.lang.String toUpperCase(java.util.Locale)",439</span></code></pre></td></tr></table></div></figure>


<p>从上面的日志我们可以了解到，即使是Java 8 中一些java.lang.String中一些关键的方法还是处于内联不友好的状态。尤其是toLowerCase和toUpperCase这两个方法居然过大而无法内联，着实让人感到奇怪。但是，这两个方法由于要处理UTF-8数据而不是简单的ASCII数据，进而增加了方法的复杂性和大小，因而超过了内联友好的临界值。</p>

<p>对于性能要求较高并且确定只处理ASCII数据的程序，通常我们需要实现一个自己的StringUtils类。该类中包含一些静态的方法来实现上述内联不友好的方法的功能，但这些静态方法既保持紧凑型又能到达内联的要求。</p>

<p>上述我们讨论的改进都是大部分基于静态分析。除此之外，使用强大的JITWatch工具可以帮助我们更好地优化。JITWatch工具需要设置-XX:+LogCompilation选项开启日志打印。其打印出来的日志为XML格式，而非PrintCompilation简单的文本输出，并且这些日志比较大，通常会到达几百MB。它会影响正在运行的程序（默认情况下主要来自日志输出的影响），因此这个选项不适合在线上的生产环境使用。</p>

<p>PrintCompilation和Jarscan结合使用并不困难，但却提供了简单且很有实际作用的一步，尤其是对于开发团队打算研究其程序中即时编译执行情况时。大多数情况下，在性能优化中，一个快速的分析可以帮助我们完成一些容易实现的目标。</p>

<h2>关于作者</h2>

<p>Ben Evans是jClarity公司的CEO，jClarity是一家致力于Java和JVM性能分析研究的创业公司。除此之外他还是London Java Community的负责人之一并在Java Community Process Executive Committee有一席之地。他之前的项目有Google IPO性能测试，金融交易系统，90年代知名电影网站等。</p>

<p><strong>查看英文原文：</strong><a href="Your%20Java%20Application%20Hostile%20to%20JIT%20Compilation?">Is Your Java Application Hostile to JIT Compilation?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[剖析Android中进程与线程调度之nice]]></title>
    <link href="http://droidyue.com/blog/2015/09/05/android-process-and-thread-schedule-nice/"/>
    <updated>2015-09-05T11:35:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/09/05/android-process-and-thread-schedule-nice</id>
    <content type="html"><![CDATA[<p>在计算机操作系统中，进程是进行资源分配和调度的基本单位，同时每个进程之内也可以存在多个线程。那么在Android系统（Linux Kernel）中，进程是如何去抢占资源，线程又是如何根据优先级切换呢，本文将尝试剖析这个问题，研究nice在Linux以及Android系统中的应用。</p>

<!--more-->


<h2>一些概念</h2>

<ul>
<li>进程 是计算机系统中，程序运行的实体，也是线程的容器。</li>
<li>线程 是进程中实际执行单位，一个线程是程序执行流的最小单元。在一个进程中可以有多个线程存在。</li>
</ul>


<h2>nice与进程调度</h2>

<p>Linux中，使用nice value（以下成为nice值）来设定一个进程的优先级，系统任务调度器根据nice值合理安排调度。</p>

<ul>
<li>nice的取值范围为-20到19。</li>
<li>通常情况下，nice的默认值为0。视具体操作系统而定。</li>
<li>nice的值越大，进程的优先级就越低，获得CPU调用的机会越少，nice值越小，进程的优先级则越高，获得CPU调用的机会越多。</li>
<li>一个nice值为-20的进程优先级最高，nice值为19的进程优先级最低。</li>
<li>父进程fork出来的子进程nice值与父进程相同。父进程renice，子进程nice值不会随之改变。</li>
</ul>


<h3>词源考究</h3>

<p>nice这个命令的来源几乎没有资料提到，于是便尝试自己来推断一下。在诸如词霸，沪江等词典给出的意思均为<code>好的；美好的；可爱的；好心的，友好的</code>。而有道词典则稍微给出了一个其他词典没有的<code>和蔼的</code>。个人认为有道给出的这个比较合理。要想做到和蔼，就需要做到谦让，因此或多或少牺牲自己一点，成全他人。所以nice值越高，越和蔼，但是自己的优先级也会越低。</p>

<h3>renice</h3>

<p>对于一个新的进程我们可以按照下面的代码为一个进程设定nice值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nice -n 10 adb logcat
</span></code></pre></td></tr></table></div></figure>


<p>对于已经创建的进程，我们可以使用renice来修改nice值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo renice -n 0 -p 24161
</span></code></pre></td></tr></table></div></figure>


<p>该命令需要使用root权限，-p对应的值为进程id。</p>

<p>注意renice命令在Linux发行版中-n 的值应该为进程的目标优先级。而Mac下-n，则是代表对当前权限的增加值。
比如在Mac下，讲一个进程的nice值由19改成10，可以这样操作<code>sudo renice -n -9  -p 24161</code>,这一点需要注意，避免掉进坑里。</p>

<h3>Android中的nice</h3>

<p>由于Android基于Linux Kernel，在Android中也存在nice值。但是一般情况下我们无法控制，原因如下：</p>

<ul>
<li>Android系统并不像其他Linux发行版那样便捷地使用nice命令操作。</li>
<li>renice需要root权限，一般应用无法实现。</li>
</ul>


<h2>线程调度</h2>

<p>虽然对于进程的优先级，我们无法控制，但是我们可以控制进程中的线程的优先级。在Android中有两种线程的优先级，一种为Android API版本，另一种是 Java 原生版本。</p>

<h3>Android API</h3>

<p>Android中的线程优先级别目前规定了如下，了解了进程优先级与nice值的关系，那么线程优先级与值之间的关系也就更加容易理解。</p>

<ul>
<li>THREAD_PRIORITY_DEFAULT，默认的线程优先级，值为0。</li>
<li>THREAD_PRIORITY_LOWEST，最低的线程级别，值为19。</li>
<li>THREAD_PRIORITY_BACKGROUND 后台线程建议设置这个优先级，值为10。</li>
<li>THREAD_PRIORITY_FOREGROUND 用户正在交互的UI线程，代码中无法设置该优先级，系统会按照情况调整到该优先级，值为-2。</li>
<li>THREAD_PRIORITY_DISPLAY 也是与UI交互相关的优先级界别，但是要比THREAD_PRIORITY_FOREGROUND优先，代码中无法设置，由系统按照情况调整，值为-4。</li>
<li>THREAD_PRIORITY_URGENT_DISPLAY 显示线程的最高级别，用来处理绘制画面和检索输入事件，代码中无法设置成该优先级。值为-8。</li>
<li>THREAD_PRIORITY_AUDIO 声音线程的标准级别，代码中无法设置为该优先级，值为 -16。</li>
<li>THREAD_PRIORITY_URGENT_AUDIO 声音线程的最高级别，优先程度较THREAD_PRIORITY_AUDIO要高。代码中无法设置为该优先级。值为-19。</li>
<li>THREAD_PRIORITY_MORE_FAVORABLE 相对THREAD_PRIORITY_DEFAULT稍微优先，值为-1。</li>
<li>THREAD_PRIORITY_LESS_FAVORABLE 相对THREAD_PRIORITY_DEFAULT稍微落后一些，值为1。</li>
</ul>


<p>使用Android API为线程设置优先级也很简单，只需要在线程执行时调用android.os.Process.setThreadPriority方法即可。这种在线程运行时进行修改优先级，效果类似renice。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>new Thread <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    @Override
</span><span class='line'>    public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      super.run<span class="o">()</span>;
</span><span class='line'>        android.os.Process.setThreadPriority<span class="o">(</span>Process.THREAD_PRIORITY_BACKGROUND<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>.start<span class="o">()</span>;
</span></code></pre></td></tr></table></div></figure>


<h3>Java原生API</h3>

<p>Java为Thread提供了三个级别的设置，</p>

<ul>
<li>MAX_PRIORITY，相当于android.os.Process.THREAD_PRIORITY_URGENT_DISPLAY，值为10。</li>
<li>MIN_PRIORITY，相当于android.os.Process.THREAD_PRIORITY_LOWEST，值为0。</li>
<li>NORM_PRIORITY，相当于android.os.Process.THREAD_PRIORITY_DEFAULT，值为5。</li>
</ul>


<p>使用setPriority我们可以为某个线程设置优先级，使用getPriority可以获得某个线程的优先级。</p>

<p>在Android系统中，不建议使用Java原生的API，因为Android提供的API划分的级别更多，更适合在Android系统中进行设定细致的优先级。</p>

<h2>注意</h2>

<p>Android API的线程优先级和Java原生API的优先级是相对独立的，比如使用android.os.Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)后，使用Java原生API,Thread.getPriority()得到的值不会改变。如下面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>new Thread<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    @Override
</span><span class='line'>    public void run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        super.run<span class="o">()</span>;
</span><span class='line'>        Log.i<span class="o">(</span>LOGTAG, <span class="s2">&quot;Java Thread Priority Before=&quot;</span> + Thread.currentThread<span class="o">()</span>.getPriority<span class="o">())</span>;
</span><span class='line'>        Process.setThreadPriority<span class="o">(</span>Process.THREAD_PRIORITY_LOWEST<span class="o">)</span>;
</span><span class='line'>        Log.i<span class="o">(</span>LOGTAG, <span class="s2">&quot;Java Thread Priority=&quot;</span> + Thread.currentThread<span class="o">()</span>.getPriority<span class="o">())</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>.start<span class="o">()</span>;
</span></code></pre></td></tr></table></div></figure>


<p>上述代码的运行日志为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>I/MainActivity<span class="o">(</span> 3679<span class="o">)</span>: Java Thread Priority <span class="nv">Before</span><span class="o">=</span>5
</span><span class='line'>I/MainActivity<span class="o">(</span> 3679<span class="o">)</span>: Java Thread <span class="nv">Priority</span><span class="o">=</span>5
</span></code></pre></td></tr></table></div></figure>


<p>由于上面的这一点缺陷，导致我们在分析ANR trace时需要注意，在下面的ANR日志信息中，<code>prio=5</code>中proi的值对应的Java原生API的线程优先级。而<code>nice=-6</code>中的nice表示的Android API版本的线程优先级。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;main&quot;</span> <span class="nv">prio</span><span class="o">=</span>5 <span class="nv">tid</span><span class="o">=</span>1 NATIVE
</span><span class='line'>  | <span class="nv">group</span><span class="o">=</span><span class="s2">&quot;main&quot;</span> <span class="nv">sCount</span><span class="o">=</span>1 <span class="nv">dsCount</span><span class="o">=</span>0 <span class="nv">obj</span><span class="o">=</span>0x41690f18 <span class="nv">self</span><span class="o">=</span>0x4167e650
</span><span class='line'>  | <span class="nv">sysTid</span><span class="o">=</span>1765 <span class="nv">nice</span><span class="o">=</span>-6 <span class="nv">sched</span><span class="o">=</span>0/0 <span class="nv">cgrp</span><span class="o">=</span>apps <span class="nv">handle</span><span class="o">=</span>1074196888
</span><span class='line'>  | <span class="nv">state</span><span class="o">=</span>S <span class="nv">schedstat</span><span class="o">=(</span> 0 0 0 <span class="o">)</span> <span class="nv">utm</span><span class="o">=</span>5764 <span class="nv">stm</span><span class="o">=</span>3654 <span class="nv">core</span><span class="o">=</span>2
</span><span class='line'>  <span class="c">#00  pc 00022624  /system/lib/libc.so (__futex_syscall3+8)</span>
</span><span class='line'>  <span class="c">#01  pc 0000f054  /system/lib/libc.so (__pthread_cond_timedwait_relative+48)</span>
</span><span class='line'>  <span class="c">#02  pc 0000f0b4  /system/lib/libc.so (__pthread_cond_timedwait+64)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>避免ANR</h2>

<p>我在之前的文章<a href="http://droidyue.com/blog/2015/07/18/anr-in-android/">说说Android中的ANR</a>中提到使用WorkerThread处理耗时IO操作，同时将WorkerThread的优先级降低，对于耗时IO操作，比如读取数据库，文件等，我们可以设置该workerThread优先级为THREAD_PRIORITY_BACKGROUND，以此降低与主线程竞争的能力。</p>

<h3>同系列文章</h3>

<ul>
<li><a href="http://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/?droid_refer=series">剖析Android中进程与线程调度之cgroups</a></li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的逗比瞬间（第二季）]]></title>
    <link href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/"/>
    <updated>2015-08-29T18:03:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/08/29/funny-programmer-season-two</id>
    <content type="html"><![CDATA[<p>小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。</p>

<!--more-->


<h2>一大串SQL语句，居然一下就成功了</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1evl10lqd89g20b406ae1x.gif"></p>

<h2>演示过程中，我的bug没有被发现</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1evl11fgzejg208904otyt.gif"></p>

<h2>一个新手说要加一个功能</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl12z53cjg208x056u0x.gif"></p>

<h2>一切进展顺利的演示，突然系统崩溃了</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl14bd1r0g20b4069npd.gif"></p>

<h2>网站大改版，使用IE测了一下</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl154a1ieg208p06ox6p.gif"></p>

<h2>周五下午被别人求助</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1evl15r159kg208c0454h0.gif"></p>

<h2>上线前两天，客户突然要更改需求</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1evl16929ytg20b40657wh.gif"></p>

<h2>按照一篇文章操作，却发现一箩筐错误</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl16z15uyg20dw06fdtf.gif"></p>

<h2>被要求去修改正则表达式</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1evl17fnuodg20d90707wh.gif"></p>

<h2>原文信息</h2>

<ul>
<li><a href="http://howtodoinjava.com/2013/03/22/life-of-a-programmer-in-pictures-part-2/">http://howtodoinjava.com/2013/03/22/life-of-a-programmer-in-pictures-part-2/</a></li>
</ul>


<p><b>本文会消耗大量的七牛CDN流量，建议进行<a href="http://droidyue.com/donate/">捐赠支持</a></b></p>

<h2>程序员的逗比瞬间全系列</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series">程序员的逗比瞬间（第一季）</a></li>
<li><a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series">程序员的逗比瞬间（第二季）</a></li>
<li><a href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/?droid_refer=series">程序员的逗比瞬间（第三季）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java永久代去哪儿了]]></title>
    <link href="http://droidyue.com/blog/2015/08/22/where-has-the-java-permgen-gone/"/>
    <updated>2015-08-22T17:01:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/08/22/where-has-the-java-permgen-gone</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/Java-PERMGEN-Removed">Java永久代去哪儿了</a>。如需转载，请与 InfoQ 中文站联系。</p>

<h2>摘要</h2>

<p>在JDK8之前，类的元数据和常量都存放在一个与堆内存相邻的数据区，即永久代。但是在这种情况下有一个问题，如果类的元数据大小超过了应用的可分配内存，那么就会出现内存溢出问题。在JDK8之后，永久代被移除，原本存储在永久代的数据将存放在一个叫做元空间的本地内存区域。</p>

<!--more-->


<p>在Java虚拟机（以下简称JVM）中，类包含其对应的元数据，比如类的层级信息，方法数据和方法信息（如字节码，栈和变量大小），运行时常量池，已确定的符号引用和虚方法表。</p>

<p>在过去（当自定义类加载器使用不普遍的时候），类几乎是“静态的”并且很少被卸载和回收，因此类也可以被看成“永久的”。另外由于类作为JVM实现的一部分，它们不由程序来创建，因为它们也被认为是“非堆”的内存。</p>

<p>在JDK8之前的HotSpot虚拟机中，类的这些“永久的”数据存放在一个叫做永久代的区域。永久代一段连续的内存空间，我们在JVM启动之前可以通过设置-XX:MaxPermSize的值来控制永久代的大小，32位机器默认的永久代的大小为64M，64位的机器则为85M。永久代的垃圾回收和老年代的垃圾回收是绑定的，一旦其中一个区域被占满，这两个区都要进行垃圾回收。但是有一个明显的问题，由于我们可以通过‑XX:MaxPermSize 设置永久代的大小，一旦类的元数据超过了设定的大小，程序就会耗尽内存，并出现内存溢出错误(OOM)。</p>

<p><strong>备注</strong>：在JDK7之前的HotSpot虚拟机中，纳入字符串常量池的字符串被存储在永久代中，因此导致了一系列的性能问题和内存溢出错误。想要了解这些永久代移除这些字符串的信息，请访问<a href="http://bugs.java.com/view_bug.do?bug_id=6962931">这里</a>查看。</p>

<h2>辞永久代，迎元空间</h2>

<p>随着Java8的到来，我们再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域就是我们要提到的元空间。</p>

<p>这项改动是很有必要的，因为对永久代进行调优是很困难的。永久代中的元数据可能会随着每一次Full GC发生而进行移动。并且为永久代设置空间大小也是很难确定的，因为这其中有很多影响因素，比如类的总数，常量池的大小和方法数量等。</p>

<p>同时，HotSpot虚拟机的每种类型的垃圾回收器都需要特殊处理永久代中的元数据。将元数据从永久代剥离出来，不仅实现了对元空间的无缝管理，还可以简化Full GC以及对以后的并发隔离类元数据等方面进行优化。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/removal_of_permen_gen.jpg"></p>

<h2>移除永久代的影响</h2>

<p>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。因此，我们就不会遇到永久代存在时的内存溢出错误，也不会出现泄漏的数据移到交换区这样的事情。最终用户可以为元空间设置一个可用空间最大值，如果不进行设置，JVM会自动根据类的元数据大小动态增加元空间的容量。</p>

<p><strong>注意</strong>：永久代的移除并不代表自定义的类加载器泄露问题就解决了。因此，你还必须监控你的内存消耗情况，因为一旦发生泄漏，会占用你的大量本地内存，并且还可能导致交换区交换更加糟糕。</p>

<h2>元空间内存管理</h2>

<p>元空间的内存管理由元空间虚拟机来完成。先前，对于类的元数据我们需要不同的垃圾回收器进行处理，现在只需要执行元空间虚拟机的C++代码即可完成。在元空间中，类和其元数据的生命周期和其对应的类加载器是相同的。话句话说，只要类加载器存活，其加载的类的元数据也是存活的，因而不会被回收掉。</p>

<p>我们从行文到现在提到的元空间稍微有点不严谨。准确的来说，每一个类加载器的存储区域都称作一个元空间，所有的元空间合在一起就是我们一直说的元空间。当一个类加载器被垃圾回收器标记为不再存活，其对应的元空间会被回收。在元空间的回收过程中没有重定位和压缩等操作。但是元空间内的元数据会进行扫描来确定Java引用。</p>

<p>元空间虚拟机负责元空间的分配，其采用的形式为组块分配。组块的大小因类加载器的类型而异。在元空间虚拟机中存在一个全局的空闲组块列表。当一个类加载器需要组块时，它就会从这个全局的组块列表中获取并维持一个自己的组块列表。当一个类加载器不再存活，那么其持有的组块将会被释放，并返回给全局组块列表。类加载器持有的组块又会被分成多个块，每一个块存储一个单元的元信息。组块中的块是线性分配（指针碰撞分配形式）。组块分配自内存映射区域。这些全局的虚拟内存映射区域以链表形式连接，一旦某个虚拟内存映射区域清空，这部分内存就会返回给操作系统。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/mmap_virtual_space.jpg"></p>

<p>上图展示的是虚拟内存映射区域如何进行元组块的分配。类加载器1和3表明使用了反射或者为匿名类加载器，他们使用了特定大小组块。 而类加载器2和4根据其内部条目的数量使用小型或者中型的组块。</p>

<h2>元空间调优与工具</h2>

<p>正如上面提到的，元空间虚拟机控制元空间的增长。但是有些时候我们想限制其增长，比如通过显式在命令行中设置-XX:MaxMetaspaceSize。默认情况下，-XX:MaxMetaspaceSize的值没有限制，因此元空间甚至可以延伸到交换区，但是这时候当我们进行本地内存分配时将会失败。</p>

<p>对于一个64位的服务器端JVM来说，其默认的–XX:MetaspaceSize值为21MB。这就是初始的高水位线。一旦触及到这个水位线，Full GC将会被触发并卸载没有用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，这个高水位线则上升。如果释放空间过多，则高水位线下降。如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志我们可以观察到Full GC多次调用。为了避免频繁的GC，建议将–XX:MetaspaceSize设置为一个相对较高的值。</p>

<p>经过多次GC之后，元空间虚拟机自动调节高水位线，以此来推迟下一次垃圾回收到来。</p>

<p>有这样两个选项 ‑XX:MinMetaspaceFreeRatio和‑XX:MaxMetaspaceFreeRatio，他们类似于GC的FreeRatio选项，用来设置元空间空闲比例的最大值和最小值。我们可以通过命令行对这两个选项设置对应的值。</p>

<p>下面是一些改进的工具，用来获取更多关于元空间的信息。</p>

<ul>
<li>jmap -clstats PID 打印类加载器数据。（-clstats是-permstat的替代方案，在JDK8之前，-permstat用来打印类加载器的数据）。下面的例子输出就是DaCapo’s Avrora benchmark程序的类加载器数据</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jmap -clstats &lt;PID&gt;
</span><span class='line'>Attaching to process ID 6476, please wait...
</span><span class='line'>Debugger attached successfully.
</span><span class='line'>Server compiler detected.
</span><span class='line'>JVM version is 25.5-b02
</span><span class='line'>finding class loader instances ..done.
</span><span class='line'>computing per loader stat ..done.
</span><span class='line'>please wait.. computing liveness.liveness analysis may be inaccurate ...
</span><span class='line'>class_loader classes      bytes parent_loader     alive? <span class="nb">type</span>
</span><span class='line'>
</span><span class='line'>&lt;bootstrap&gt;     655  1222734     null   live   &lt;internal&gt;
</span><span class='line'>0x000000074004a6c0    0   0   0x000000074004a708  dead    java/util/ResourceBundle<span class="nv">$RBClassLoader</span>@0x00000007c0053e20
</span><span class='line'>0x000000074004a760    0   0     null      dead    sun/misc/Launcher<span class="nv">$ExtClassLoader</span>@0x00000007c002d248
</span><span class='line'>0x00000007401189c8    1   1471 0x00000007400752f8 dead    sun/reflect/DelegatingClassLoader@0x00000007c0009870
</span><span class='line'>0x000000074004a708    116   316053    0x000000074004a760   dead   sun/misc/Launcher<span class="nv">$AppClassLoader</span>@0x00000007c0038190
</span><span class='line'>0x00000007400752f8    538  773854 0x000000074004a708   dead   org/dacapo/harness/DacapoClassLoader@0x00000007c00638b0
</span><span class='line'><span class="nv">total</span> <span class="o">=</span> 6      1310   2314112          N/A    <span class="nv">alive</span><span class="o">=</span>1, <span class="nv">dead</span><span class="o">=</span>5    N/A
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>jstat -gc LVMID</strong> 用来打印元空间的信息，具体内容如下</li>
</ul>


<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/jstat.jpg">
  * <strong>jcmd PID GC.class_stats</strong> 一个新的诊断命令，用来连接到运行的JVM并输出详尽的类元数据的柱状图。</p>

<p><strong>注意</strong>：在JDK 6 build 13下，需要加上<strong>‑XX:+UnlockDiagnosticVMOptions</strong> 才能正确使用jcmd这个命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jcmd &lt;PID&gt; <span class="nb">help </span>GC.class_stats
</span><span class='line'>9522:
</span><span class='line'>GC.class_stats
</span><span class='line'>Provide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions.
</span><span class='line'>
</span><span class='line'>Impact: High: Depends on Java heap size and content.
</span><span class='line'>
</span><span class='line'>Syntax : GC.class_stats <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>&lt;columns&gt;<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Arguments:
</span><span class='line'>  columns : <span class="o">[</span>optional<span class="o">]</span> Comma-separated list of all the columns to show. If not specified, the following columns are shown: InstBytes,KlassBytes,CpAll,annotations,MethodCount,Bytecodes,MethodAll,ROAll,RWAll,Total <span class="o">(</span>STRING, no default value<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Options: <span class="o">(</span>options must be specified using the &lt;key&gt; or &lt;key&gt;<span class="o">=</span>&lt;value&gt; syntax<span class="o">)</span>
</span><span class='line'>  -all : <span class="o">[</span>optional<span class="o">]</span> Show all columns <span class="o">(</span>BOOLEAN, <span class="nb">false</span><span class="o">)</span>
</span><span class='line'>  -csv : <span class="o">[</span>optional<span class="o">]</span> Print in CSV <span class="o">(</span>comma-separated values<span class="o">)</span> format <span class="k">for </span>spreadsheets <span class="o">(</span>BOOLEAN, <span class="nb">false</span><span class="o">)</span>
</span><span class='line'>  -help : <span class="o">[</span>optional<span class="o">]</span> Show meaning of all the columns <span class="o">(</span>BOOLEAN, <span class="nb">false</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>提示</strong>：如果想了解字段的更多信息，请访问<a href="https://bugs.openjdk.java.net/secure/attachment/11600/ver_010_help.txt">这里</a></p>

<p>使用jcmd的示例输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nv">$ </span>jcmd &lt;PID&gt; GC.class_stats
</span><span class='line'>
</span><span class='line'>7140:
</span><span class='line'>Index Super InstBytes KlassBytes annotations   CpAll MethodCount Bytecodes MethodAll   ROAll   RWAll   Total ClassName
</span><span class='line'>  1   -1  426416      480         0       0           0       0       0   24  576     600 <span class="o">[</span>C
</span><span class='line'>  2   -1  290136      480         0       0           0       0       0   40  576     616 <span class="o">[</span>Lavrora.arch.legacy.LegacyInstr;
</span><span class='line'>  3   -1  269840      480         0       0           0       0       0   24  576     600 <span class="o">[</span>B
</span><span class='line'>  4   43  137856      648         0   19248       129     4886    25288   16368   30568   46936 java.lang.Class
</span><span class='line'>  5   43  136968      624         0   8760        94      4570    33616   12072   32000   44072 java.lang.String
</span><span class='line'>  6   43  75872       560         0   1296        7       149     1400    880 2680    3560 java.util.HashMap<span class="nv">$Node</span>
</span><span class='line'>  7   836     57408       608         0   720         3       69      1480    528 2488    3016 avrora.sim.util.MulticastFSMProbe
</span><span class='line'>  8   43  55488       504         0   680         1       31      440     280 1536    1816 avrora.sim.FiniteStateMachine<span class="nv">$State</span>
</span><span class='line'>  9   -1  53712       480         0       0           0       0       0   24  576     600 <span class="o">[</span>Ljava.lang.Object;
</span><span class='line'>   10 -1  49424       480         0       0           0       0       0   24  576     600 <span class="o">[</span>I
</span><span class='line'>   11 -1  49248       480         0       0           0       0       0   24  576     600 <span class="o">[</span>Lavrora.sim.platform.ExternalFlash<span class="nv">$Page</span>;
</span><span class='line'>   12 -1  24400       480         0       0           0       0       0   32  576     608 <span class="o">[</span>Ljava.util.HashMap<span class="nv">$Node</span>;
</span><span class='line'>   13   394   21408       520         0   600         3       33      1216    432 2080    2512 avrora.sim.AtmelInterpreter<span class="nv">$IORegBehavior</span>
</span><span class='line'>   14   727   19800       672         0   968         4       71      1240    664 2472    3136 avrora.arch.legacy.LegacyInstr<span class="nv">$MOVW</span>
</span><span class='line'>…&lt;snipped&gt;
</span><span class='line'>…&lt;snipped&gt;
</span><span class='line'>1299  1300        0       608         0   256         1       5       152     104 1024    1128 sun.util.resources.LocaleNamesBundle
</span><span class='line'> 1300  1098       0       608         0   1744        10      290     1808    1176    3208    4384 sun.util.resources.OpenListResourceBundle
</span><span class='line'> 1301  1098       0       616         0   2184        12      395     2200    1480    3800    5280 sun.util.resources.ParallelListResourceBundle
</span><span class='line'>              2244312     794288      2024 2260976    12801   561882   3135144 1906688 4684704 6591392 Total
</span><span class='line'>              34.0%   12.1%       0.0%   34.3%        -   8.5%    47.6%   28.9%   71.1%  100.0%
</span><span class='line'>Index Super InstBytes KlassBytes annotations   CpAll MethodCount Bytecodes MethodAll   ROAll   RWAll   Total ClassName
</span></code></pre></td></tr></table></div></figure>


<h2>存在的问题</h2>

<p>前面已经提到，元空间虚拟机采用了组块分配的形式，同时区块的大小由类加载器类型决定。类信息并不是固定大小，因此有可能分配的空闲区块和类需要的区块大小不同，这种情况下可能导致碎片存在。元空间虚拟机目前并不支持压缩操作，所以碎片化是目前最大的问题。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/fragment_issue.jpg"></p>

<h2>关于作者</h2>

<p>Monica Beckwith是一位在硬件行业有着10多年经验的性能研究工程师。她目前在Servergy公司任性能架构师一职。该公司为一家提供高效服务器的创业公司。此外，Monica曾在Sun，Oracle和AMD等公司致力于服务器端JVM优化。Monica还是JavaOne 2013会议的演讲嘉宾。想要关注的可以在twitter上查找@mon_beck。</p>

<p><strong>查看英文原文：</strong><a href="http://www.infoq.com/articles/Java-PERMGEN-Removed">Where Has the Java PermGen Gone?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入讲解Android中Activity launchMode]]></title>
    <link href="http://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/"/>
    <updated>2015-08-16T21:22:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode</id>
    <content type="html"><![CDATA[<p>Android系统中的Activity可以说一件很赞的设计，它在内存管理上良好的设计，使得多任务管理在Android系统中运行游刃有余。但是Activity绝非启动展示在屏幕而已，其启动方式也大有学问，本文讲具体介绍Activity的启动模式的诸多细节，纠正一些开发中可能错误的观点，帮助大家深入理解Activity。</p>

<!--more-->


<h2>行文之前</h2>

<p>在正式行文之前，先介绍一些文章提到的概念</p>

<ul>
<li>文章后续会提到Task，这里的Task指的是与用户交互的Activity实例的集合。</li>
<li>Task中的Activity实例以栈的形式存放，这个栈就是Activity的回退栈。</li>
</ul>


<p><strong>本文图片较多，在看图时，请注意观察Activity顶部的title，来区分具体Activity。</strong></p>

<h2>为何有启动模式</h2>

<p>应用中的每一个Activity都是进行不同的事物处理。以邮件客户端为例，InboxActivity目的就是为了展示收件箱，这个Activity不建议创建成多个实例。而ComposeMailActivity则是用来撰写邮件，可以实例化多个此Activity对象。合理地设计Activity对象是否使用已有的实例还是多次创建，会使得交互设计更加良好，也能避免很多问题。至于想要达到前面的目标，就需要使用今天的Activity启动模式。</p>

<h2>如何使用</h2>

<p>使用很简单，只需要在manifest中对应的Activity元素加入<strong>android:launchMode</strong>属性即可。如下述代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>    <span class="na">android:name=</span><span class="s">&quot;.SingleTaskActivity&quot;</span>
</span><span class='line'>    <span class="na">android:label=</span><span class="s">&quot;singleTask launchMode&quot;</span>
</span><span class='line'>    <span class="na">android:launchMode=</span><span class="s">&quot;singleTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就是介绍launchMode的四个值的时刻了。</p>

<h2>standard</h2>

<p>这是launchMode的默认值，Activity不包含android:launchMode或者显示设置为standard的Activity就会使用这种模式。</p>

<p>一旦设置成这个值，<strong>每当有一次Intent请求，就会创建一个新的Activity实例</strong>。举个例子，如果有10个撰写邮件的Intent，那么就会创建10个ComposeMailActivity的实例来处理这些Intent。结果很明显，这种模式会创建某个Activity的多个实例。</p>

<h3>Android 5.0之前的表现</h3>

<p>这种Activity新生成的实例会放入发送Intent的Task的栈的顶部。下图为启动同一程序内的Activity。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/pre_lollipop_standard_activity_in_same_app.jpg" title="pre_lollipop_standard_activity_in_same_app" ></p>

<p>下面的图片展示跨程序之间调用，新生成的Activity实例会放入发送Intent的Task的栈的顶部，尽管它们属于不同的程序。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/pre_lollipop_standard_activity_across_app.jpg" title="pre_lollipop_standard_activity_across_app" ></p>

<p>但是当我们打开任务管理器，则会有一点奇怪，应为显示的任务是Gallery，展示的界面确实另一个程序的Activity（因为其位于Task的栈顶）。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/pre_lollipop_task_manager_across_app.jpg"></p>

<p>这时候如果我们从Gallery应用切换到拨号应用，再返回到Gallery，看到的还是这个非Gallery的Activity，如果我们想要对Gallery进行操作，必须按Back键返回到Gallery界面才可以。确实有点不太合理。</p>

<h3>Android 5.0及之后表现</h3>

<p>对于同一应用内部Activity启动和5.0之前表现一样，变化的就是不同应用之间Activity启动变得合理了。</p>

<p>跨应用之间启动Activity，会创建一个新的Task，新生成的Activity就会放入刚创建的Task中。如下图</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/lollipop_across_app_new_task.jpg"></p>

<p>同时任务管理器查看任务也显得更加合理了。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/lollipop_task_manager_standard.jpg"></p>

<p>假设之前存在我们的测试程序，然后从Gallery又分享文件到我们的测试程序，则对应的任务管理器展示效果如下。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/lollipop_standard_across_app_alread_exists.jpg"></p>

<p>使用场景：standard这种启动模式适合于撰写邮件Activity或者社交网络消息发布Activity。如果你想为每一个intent创建一个Activity处理，那么就是用standard这种模式。</p>

<h2>singleTop</h2>

<p>singleTop其实和standard几乎一样，使用singleTop的Activity也可以创建很多个实例。唯一不同的就是，<strong>如果调用的目标Activity已经位于调用者的Task的栈顶，则不创建新实例，而是使用当前的这个Activity实例，并调用这个实例的onNewIntent方法</strong>。
<img src="http://7jpolu.com1.z0.glb.clouddn.com/singletop.jpg">
在singleTop这种模式下，我们需要处理应用这个模式的Activity的onCreate和onNewIntent两个方法，确保逻辑正常。</p>

<h3>使用场景</h3>

<p>关于singleTop一个典型的使用场景就是搜索功能。假设有一个搜索框，每次搜索查询都会将我们引导至SearchActivity查看结果，为了更好的交互体验，我们在结果页顶部也放置这样的搜索框。</p>

<p>假设一下，SearchActivity启动模式为standard，那么每一个搜索都会创建一个新的SearchActivity实例，10次查询就是10个Activity。当我们想要退回到非SearchActivity，我们需要按返回键10次，这显然太不合理了。</p>

<p>但是如果我们使用singleTop的话，如果SearchActivity在栈顶，当有了新的查询时，不再重新创建SearchAc实例，而是使用当前的SearchActivity来更新结果。当我们需要返回到非SearchActivity只需要按一次返回键即可。使用了singleTop显然比之前要合理。</p>

<h3>总结</h3>

<ul>
<li>只有在调用者和目标Activity在同一Task中，并且目标Activity位于栈顶，才使用现有目标Activity实例，否则创建新的目标Activity实例。</li>
<li>如果是外部程序启动singleTop的Activity，在Android 5.0之前新创建的Activity会位于调用者的Task中，5.0及以后会放入新的Task中。</li>
</ul>


<h2>singleTask</h2>

<p>singleTask这个模式和前面提到的standard和singleTop截然不同。<strong>使用singleTask启动模式的Activity在系统中只会存在一个实例</strong>。如果这个实例已经存在，intent就会通过onNewIntent传递到这个Activity。否则新的Activity实例被创建。</p>

<h3>同一程序内</h3>

<p>如果系统中不存在singleTask Activity的实例，那么就需要创建这个Activity的实例，并且将这个实例放入和调用者相同的Task中并位于栈顶。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_inapp_create_new_instance.jpg"></p>

<p>如果singleTask Activity实例已然存在，那么在Activity回退栈中，所有位于该Activity上面的Activity实例都将被销毁掉（销毁过程会调用Activity生命周期回调），这样使得singleTask Activity实例位于栈顶。与此同时，Intent会通过onNewIntent传递到这个SingleTask Activity实例。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_sameapp_instance_exists.jpg"></p>

<p>然而在Google关于singleTask的<a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">文档</a>有这样一段描述</p>

<blockquote><p>The system creates a new task and instantiates the activity at the root of the new task.</p></blockquote>

<p>意思为 系统会创建一个新的Task，并创建Activity实例放入这个新的Task的底部。</p>

<p>然而实际并非如此，在我的例子中，singleTask Activity并创建并放入了调用者所在的Task，而不是放入新的Task，使用<code>adb shell dumpsys activity</code>便可以进行验证。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Task</span> <span class="n">id</span> <span class="err">#</span><span class="mi">239</span>
</span><span class='line'>  <span class="n">TaskRecord</span><span class="o">{</span><span class="mi">428</span><span class="n">efe30</span> <span class="err">#</span><span class="mi">239</span> <span class="n">A</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span> <span class="n">U</span><span class="o">=</span><span class="mi">0</span> <span class="n">sz</span><span class="o">=</span><span class="mi">2</span><span class="o">}</span>
</span><span class='line'>  <span class="n">Intent</span> <span class="o">{</span> <span class="n">act</span><span class="o">=</span><span class="n">android</span><span class="o">.</span><span class="na">intent</span><span class="o">.</span><span class="na">action</span><span class="o">.</span><span class="na">MAIN</span> <span class="n">cat</span><span class="o">=[</span><span class="n">android</span><span class="o">.</span><span class="na">intent</span><span class="o">.</span><span class="na">category</span><span class="o">.</span><span class="na">LAUNCHER</span><span class="o">]</span> <span class="n">flg</span><span class="o">=</span><span class="mh">0x10000000</span> <span class="n">cmp</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/.</span><span class="na">StandardActivity</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">Hist</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">ActivityRecord</span><span class="o">{</span><span class="mi">429</span><span class="n">a88d0</span> <span class="n">u0</span> <span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/.</span><span class="na">SingleTaskActivity</span> <span class="n">t239</span><span class="o">}</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="o">{</span> <span class="n">cmp</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/.</span><span class="na">SingleTaskActivity</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">ProcessRecord</span><span class="o">{</span><span class="mi">42243130</span> <span class="mi">18965</span><span class="o">:</span><span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/</span><span class="n">u0a123</span><span class="o">}</span>
</span><span class='line'>    <span class="n">Hist</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="n">ActivityRecord</span><span class="o">{</span><span class="mi">425</span><span class="n">fec98</span> <span class="n">u0</span> <span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/.</span><span class="na">StandardActivity</span> <span class="n">t239</span><span class="o">}</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="o">{</span> <span class="n">act</span><span class="o">=</span><span class="n">android</span><span class="o">.</span><span class="na">intent</span><span class="o">.</span><span class="na">action</span><span class="o">.</span><span class="na">MAIN</span> <span class="n">cat</span><span class="o">=[</span><span class="n">android</span><span class="o">.</span><span class="na">intent</span><span class="o">.</span><span class="na">category</span><span class="o">.</span><span class="na">LAUNCHER</span><span class="o">]</span> <span class="n">flg</span><span class="o">=</span><span class="mh">0x10000000</span> <span class="n">cmp</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/.</span><span class="na">StandardActivity</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">ProcessRecord</span><span class="o">{</span><span class="mi">42243130</span> <span class="mi">18965</span><span class="o">:</span><span class="n">com</span><span class="o">.</span><span class="na">thecheesefactory</span><span class="o">.</span><span class="na">lab</span><span class="o">.</span><span class="na">launchmode</span><span class="o">/</span><span class="n">u0a123</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而想要实现文档的描述也并非不可能，我们需要在设置launchMode为singleTask的同时，再加上taskAffinity属性即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>    <span class="na">android:name=</span><span class="s">&quot;.SingleTaskActivity&quot;</span>
</span><span class='line'>    <span class="na">android:label=</span><span class="s">&quot;singleTask launchMode&quot;</span>
</span><span class='line'>    <span class="na">android:launchMode=</span><span class="s">&quot;singleTask&quot;</span>
</span><span class='line'>    <span class="na">android:taskAffinity=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成上面的修改，我们看一下效果，Task的变化如下图</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singleTaskTaskAffinity.jpg">
同时，系统中的任务管理器效果也会相应变化</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_task_affinity_task_manger.jpg"></p>

<h3>跨应用之间</h3>

<p>在跨应用Intent传递时，如果系统中不存在singleTask Activity的实例，那么讲创建一个新的Task，然后创建SingleTask Activity的实例，将其放入新的Task中。Task变化如下。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_across_app_no_instance.jpg">
系统的任务管理器也会如下变化</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_acrossapp_no_instance_taskmanager.jpg"></p>

<p>如果singleTask Activity所在的应用进程存在，但是singleTask Activity实例不存在，那么从别的应用启动这个Activity，新的Activity实例会被创建，并放入到所属进程所在的Task中，并位于栈顶位置。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_acrossapp_application_exists_activity_nonexists.jpg"></p>

<p>更复杂的一种情况，如果singleTask Activity实例存在，从其他程序被启动，那么这个Activity所在的Task会被移到顶部，并且在这个Task中，位于singleTask Activity实例之上的所有Activity将会被正常销毁掉。如果我们按返回键，那么我们首先会回退到这个Task中的其他Activity，直到当前Task的Activity回退栈为空时，才会返回到调用者的Task。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singletask_acrossapp_instance_exists_and_back.jpg"></p>

<p>在上图中，当Task2中的相册启动分享调用Task1中的singleTask Activity，而该Activity实例存在，并位于Task1中回退栈中的第三个位置（从上到下顺序），那么位于该Activity上面的两个Activity实例将会被销毁掉，使得该Activity实例位于栈顶。此时Task1中的回退栈只剩两个Activity，如果点击返回，那么会退到的不是相册应用，而是singleTask Activity栈位置下面的Activity，再次点击返回方可返回相册应用。</p>

<h3>使用场景</h3>

<p>该模式的使用场景多类似于邮件客户端的收件箱或者社交应用的时间线Activity。上述两种场景需要对应的Activity只保持一个实例即可，但是也要谨慎使用这种模式，因为它可以在用户未感知的情况下销毁掉其他Activity。</p>

<h2>singleInstance</h2>

<p>这个模式和singleTask差不多，因为他们在系统中都只有一份实例。唯一不同的就是存放singleInstance Activity实例的Task只能存放一个该模式的Activity实例。如果从singleInstance Activity实例启动另一个Activity，那么这个Activity实例会放入其他的Task中。同理，如果singleInstance Activity被别的Activity启动，它也会放入不同于调用者的Task中。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singleInstance_new_instance.jpg">
虽然是两个task，但是在系统的任务管理器中，却始终显示一个，即位于顶部的Task中。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singleInstances_taskmanager.jpg"></p>

<p>另外当我们从任务管理器进入这个应用，是无法通过返回键会退到Task1的。</p>

<p>好在有办法解决这个问题，就是之前提到的<code>taskAffinity=""</code>，为launchMode为singleInstance的Activity加入这个属性即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>    <span class="na">android:name=</span><span class="s">&quot;.SingleInstanceActivity&quot;</span>
</span><span class='line'>      <span class="na">android:label=</span><span class="s">&quot;singleInstance launchMode&quot;</span>
</span><span class='line'>    <span class="na">android:launchMode=</span><span class="s">&quot;singleInstance&quot;</span>
</span><span class='line'>    <span class="na">android:taskAffinity=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次运行修改的代码，查看任务管理器，这样的结果就合理了。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/singleinstance_task_affinity.jpg"></p>

<h3>使用情况</h3>

<p>这种模式的使用情况比较罕见，在Launcher中可能使用。或者你确定你需要使Activity只有一个实例。建议谨慎使用。</p>

<h2>Intent Flags</h2>

<p>除了在manifest文件中设置launchMode之外，还可以在Intnet中设置flag达到同样的效果。如下述代码就可以让StandardActivity已singleTop模式启动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">StandardActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">StandardActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">addFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_SINGLE_TOP</span><span class="o">);</span>
</span><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Intent Flags这里暂不做重点介绍，具体可以参考<a href="http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_BROUGHT_TO_FRONT">官方文档</a></p>

<h2>原文信息</h2>

<ul>
<li><a href="http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en">Understand Android Activity&rsquo;s launchMode: standard, singleTop, singleTask and singleInstance</a></li>
</ul>


<h2>One More Thing</h2>

<p>为了更深刻理解，建议多读几次。如果文章有问题，请在下方评论指出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的逗比瞬间（第一季）]]></title>
    <link href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/"/>
    <updated>2015-08-08T19:23:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/08/08/funny-programmer-season-one</id>
    <content type="html"><![CDATA[<p>小黑屋里怎么能没有欢乐，苦逼的码农们，我要拯救不开心。</p>

<p>这是程序员的逗比瞬间系列的第一季，文章参考自<a href="http://howtodoinjava.com/2013/03/19/life-of-a-programmer-in-pictures/">Life of a programmer in pictures</a></p>

<!--more-->


<h2>第一次在网页中应用CSS，WTF！</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1fnxfvpg208w06ykjf.gif"></p>

<h2>兴致勃勃向别人展示修复了一个bug，结果。。。</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl1gbas5mg208w050u0x.gif"></p>

<h2>上传了一段没有测试却正常运行的代码，</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1evl1gqqpieg20b404a4qn.gif"></p>

<h2>被老板告知我写的功能被毙掉了，呜呜</h2>

<p><img src="http://ww3.sinaimg.cn/large/6a195423gw1evl1ha10hng208w06o4qp.gif"></p>

<h2>周五好好的代码周一居然不工作了</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1hu3kmog208w04w1ft.gif"></p>

<h2>没有保存就关闭了IDE</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl1iab6q1g205k059dwa.gif"></p>

<h2>花了几个小时写的脚本一运行，居然。。。</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1jjw17cg20b4069qr0.gif"></p>

<h2>没有请教Google就解决了问题，(此处没有度娘神马事)</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1evl1ka6gi6g208w06nhdw.gif"></p>

<h2>写了一个脚本，居然把整个数据库给删了(这难道是某超代言的说删就删的某程)</h2>

<p><img src="http://ww1.sinaimg.cn/large/6a195423gw1evl1ksirk0g208o04w1kx.gif"></p>

<h2>把一段代码刚刚传到线上(各种战战兢兢，阿弥陀佛)</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1l9uzoag20dc071hdt.gif"></p>

<h2>领导四处招人修复一个严重bug（我躲我躲，我躲躲）</h2>

<p><img src="http://ww4.sinaimg.cn/large/6a195423gw1evl1lp2gjvg209q0421ku.gif"></p>

<h2>我的正则表达式写对了</h2>

<p><img src="http://ww2.sinaimg.cn/large/6a195423gw1evl1m3gnjkg207i03mu0x.gif"></p>

<p><b>本文会消耗大量的七牛CDN流量，建议进行<a href="http://droidyue.com/donate/">捐赠支持</a></b></p>

<h2>程序员的逗比瞬间全系列</h2>

<ul>
<li><a href="http://droidyue.com/blog/2015/08/08/funny-programmer-season-one/?droid_refer=series">程序员的逗比瞬间（第一季）</a></li>
<li><a href="http://droidyue.com/blog/2015/08/29/funny-programmer-season-two/?droid_refer=series">程序员的逗比瞬间（第二季）</a></li>
<li><a href="http://droidyue.com/blog/2015/10/17/funny-programmer-season-three/?droid_refer=series">程序员的逗比瞬间（第三季）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探究android:largeHeap]]></title>
    <link href="http://droidyue.com/blog/2015/08/01/dive-into-android-large-heap/"/>
    <updated>2015-08-01T17:10:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/08/01/dive-into-android-large-heap</id>
    <content type="html"><![CDATA[<p>在日常的Android开发中，我们必然遇到过OutOfMemoryError这样的崩溃，产生的原因无外乎两点，一是内存过小不够用，二是程序设计有误，导致不能释放内存，其中后者情况较多。在解决这个问题时，我们亦或多或少听到android:largeHeap，然而这个概念又是什么呢，它该如何使用，存在哪些问题呢。本文讲比较全面介绍Android中的largeHeap帮助各位全面深入了解这个概念。</p>

<!--more-->


<h2>磨刀不误砍柴工</h2>

<p>为了便于理解，先简单介绍一些和文章相关的基础概念。</p>

<ul>
<li>通常，一个Android程序在运行时会启动一个Dalvik虚拟机（暂不讨论ART模式）</li>
<li>虚拟机的运行时内存一般由堆和栈两大部分构成。</li>
<li>栈是存储方法调用的一片内存数据区。</li>
<li>堆内存占据了虚拟机的大部分内存空间，程序执行时产生的对象就分配在堆内存上。</li>
<li>如果是堆内存没有可用的空间存储生成的对象，JVM会抛出java.lang.OutOfMemoryError。</li>
</ul>


<p>如若具体了解堆和栈，请参考文章<a href="http://droidyue.com/blog/2014/12/07/differences-between-stack-and-heap-in-java/">Java中的堆和栈的区别</a>和<a href="http://droidyue.com/blog/2014/12/21/java-runtime-data-areas/">JVM运行时的数据区</a></p>

<h2>largeHeap介绍</h2>

<p>一个应用如果使用了largeHeap，会请求系统为Dalvik虚拟机分配更大的内存空间。使用起来也很方便，只需在manifest文件application节点加入<strong>android:largeHeap=&ldquo;true&rdquo;</strong>即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;application</span> <span class="na">android:icon=</span><span class="s">&quot;@drawable/icon&quot;</span>
</span><span class='line'>  <span class="na">android:allowBackup=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>  <span class="na">android:label=</span><span class="s">&quot;@string/app_name&quot;</span>
</span><span class='line'>  <span class="na">android:debuggable=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>  <span class="na">android:theme=</span><span class="s">&quot;@android:style/Theme.Black&quot;</span>
</span><span class='line'>    <span class="na">android:largeHeap=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>largeHeap有多大</h2>

<p>在Android中，有如下两个方法可以帮助我们查看当前内存大小</p>

<ul>
<li>ActivityManager.getMemoryClass()获得内用正常情况下内存的大小</li>
<li>ActivityManager.getLargeMemoryClass()可以获得开启largeHeap最大的内存大小</li>
</ul>


<p>然而largeHeap这个最大值是如何决定的呢？想要了解这个问题，我们就需要看一下Android系统中的一个文件。</p>

<p>这个文件路径是<code>/system/build.prop</code>，由于文件比较大，这里我们只截取关于dalvik内存的配置信息，如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dalvik</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">heapstartsize</span><span class="o">=</span><span class="mi">8</span><span class="n">m</span>
</span><span class='line'><span class="n">dalvik</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">heapgrowthlimit</span><span class="o">=</span><span class="mi">192</span><span class="n">m</span>
</span><span class='line'><span class="n">dalvik</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">heapsize</span><span class="o">=</span><span class="mi">512</span><span class="n">m</span>
</span><span class='line'><span class="n">dalvik</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">heaptargetutilization</span><span class="o">=</span><span class="mf">0.75</span>
</span><span class='line'><span class="n">dalvik</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">heapminfree</span><span class="o">=</span><span class="mi">2</span><span class="n">m</span>
</span><span class='line'><span class="n">dalvik</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">heapmaxfree</span><span class="o">=</span><span class="mi">8</span><span class="n">m</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面有诸多配置，但从字面意思也不难理解，为了正确理解，有必要逐一解释一下。</p>

<p><strong>dalvik.vm.heapstartsize=8m</strong></p>

<p>相当于虚拟机的 -Xms配置，该项用来设置堆内存的初始大小。</p>

<p><strong>dalvik.vm.heapgrowthlimit=192m</strong></p>

<p>相当于虚拟机的 -XX:HeapGrowthLimit配置，该项用来设置一个标准的应用的最大堆内存大小。一个标准的应用就是没有使用android:largeHeap的应用。</p>

<p><strong>dalvik.vm.heapsize=512m</strong></p>

<p>相当于虚拟机的 -Xmx配置，该项设置了使用android:largeHeap的应用的最大堆内存大小。</p>

<p><strong>dalvik.vm.heaptargetutilization=0.75</strong></p>

<p>相当于虚拟机的 -XX:HeapTargetUtilization,该项用来设置当前理想的堆内存利用率。其取值位于0与1之间。当GC进行完垃圾回收之后，Dalvik的堆内存会进行相应的调整，通常结果是当前存活的对象的大小与堆内存大小做除法，得到的值为这个选项的设置，即这里的0.75。注意，这只是一个参考值，<a href="http://grepcode.com/file/repo1.maven.org/maven2/org.robovm/robovm-rt/1.0.0/dalvik/system/VMRuntime.java#VMRuntime.setTargetHeapUtilization%28float%29">Dalvik虚拟机也可以忽略此设置</a>。</p>

<p><strong>dalvik.vm.heapminfree=2m</strong>与<strong>dalvik.vm.heapmaxfree=8m</strong></p>

<p>dalvik.vm.heapminfree对应的是-XX:HeapMinFree配置，用来设置单次堆内存调整的最小值。<strong>dalvik.vm.heapmaxfree</strong>对应的是-XX:HeapMaxFree配置，用来设置单次堆内存调整的最大值。通常情况下，还需要结合上面的 -XX:HeapTargetUtilization的值，才能确定内存调整时，需要调整的大小。</p>

<h2>largeHeap需要权限么</h2>

<p>为何有此疑问呢？ 原因是这样的。 首先一个设备的内存是固定的，当我们使用了largeHeap之后就可以使我们的程序内存增加，但这部分增加的内存有可能是源自被系统杀掉的后台程序。所以，使用largeHeap理论上是有可能杀掉其他的程序的。</p>

<p>然而，结果就是不需要权限，Google在一开始就是这样，只需要简单在Application元素上加入android:largeHeap=&ldquo;true&#8221;就能正常使用。</p>

<h2>largeHeap对GC的影响</h2>

<p>拥有了更多的内存，是不是就意味着要花更多的时间遍历对象垃圾回收呢？其实不然。</p>

<p>首先largeHeap自Android 4.0开始支持，而并发的垃圾回收方式从Android 2.3开始引入。</p>

<p>在引入并发垃圾回收之前，系统采用了Stop-the-World回收方式，进行一次垃圾回收通常消耗几百毫秒，这是很影响交互和响应的。</p>

<p>引入并发垃圾回收之后,在GC开始和结束的阶段会有短暂的暂停时间，通常在10毫秒以内。</p>

<p>因此在支持largeHeap的系统上都采用了并发垃圾回收，GC的Pause Time不会很长，对交互响应影响甚微。</p>

<h2>慎用largeHeap</h2>

<p>对于largeHeap的使用，我们该持有的谨慎的态度，largeHeap可以使用，但是要谨慎。</p>

<p>对于本身对内存要求过大的图片或者视频应用，我们可以使用largeHeap。</p>

<p>除上面的情况，如果仅仅是为了解决OutOfMemoryError这样的问题，而尝试使用largeHeap分配更大内存的这种指标不治本的方法不可取。对待这样的OOM问题，建议阅读以下几篇文章，了解Android中内存泄露和垃圾回收，从代码上去查找问题，从根本上解决问题。</p>

<h2>推荐文章</h2>

<ul>
<li><a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/">Android中Handler引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/">避免Android中Context引起的内存泄露</a></li>
<li><a href="http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/">Google IO：Android内存管理主题演讲记录</a></li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Android lint发现并解决高版本API问题]]></title>
    <link href="http://droidyue.com/blog/2015/07/25/use-android-lint-to-find-higher-api-usage/"/>
    <updated>2015-07-25T16:51:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/07/25/use-android-lint-to-find-higher-api-usage</id>
    <content type="html"><![CDATA[<p>在编写代码时，为了实现一些功能，我们需要使用高版本的API，比如SharedPreference的Editor中的apply方法为API 9开始引入，在API 9 以上的机器使用没有问题，但是在API 8上，如果运行时执行了这段代码，就会崩溃，问题相当严重。尤其是该问题出现在正式版中，后果不堪设想。本文将介绍如何使用lint发现并解决这些问题。</p>

<!--more-->


<h2>lint是什么</h2>

<p>lint是Android提供的一个静态代码分析的工具，使用这个工具可以帮助我们找出Android项目中潜在的bug，安全，性能，可用性，辅助性和国际化等问题，同时还可以查找出错误拼写，提示开发者更正。</p>

<h3>lint的工作流程</h3>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/lint_workflow.png"></p>

<p>上图为lint的工作流程图，下面为一些元素的简短说明。</p>

<p><strong>程序源文件</strong></p>

<p>程序源文件就是Android工程的组成部分，包括Java和xml文件，图标以及混淆配置文件</p>

<p><strong>lint.xml文件</strong></p>

<p>lint配置文件，用来排除某些检查或者自定义检测问题的严重程度。</p>

<p><strong>lint工具</strong></p>

<p>一个静态代码扫描工具，对Android工程进行扫描分析，可以从终端执行命令，也可以从Android Studio等IDE中使用。lint工具可以帮助我们找到Android应用性能和代码质量问题。在正式发布应用之前，强烈建议使用lint检查并修复发现的问题。</p>

<p><strong>lint检查结果</strong></p>

<p>lint的检查结果可以从终端，Android Studio等IDE工具，或者生成结果文件查看。每一个问题都会标明在文件中的位置行数，以及关于该问题的说明等信息。</p>

<h2>查找问题</h2>

<p>知道了lint如何工作，就只需执行lint查找问题，有了明确的问题，才能有的放矢地解决。</p>

<h3>Android Sutdio</h3>

<p>选择菜单Analyze&mdash;>Configure Current File Analysis&mdash;>Configure Inspections 清空所有的检查项，然后如下图勾选<strong>Calling new methods on older versions</strong> 和 <strong>Using inlined constants on older versions</strong></p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/android_studio_lint_custom.png"></p>

<p>然后执行Analyze&mdash;> Inspect Code，然后查看底部的Inspection即可</p>

<h3>command line</h3>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>project_root_dir
</span><span class='line'>lint --check NewApi,InlinedApi --html /tmp/api_check.html ./
</span></code></pre></td></tr></table></div></figure>


<p>无需多时，结果就会以html形式写入/tmp/api_check.html文件</p>

<h3>Gradle Command Line</h3>

<p>配置build.gradle</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span><span class="o">{</span>
</span><span class='line'>    <span class="c1">//some other config</span>
</span><span class='line'>    <span class="n">lintOptions</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">abortOnError</span> <span class="kc">false</span>
</span><span class='line'>        <span class="n">xmlReport</span> <span class="kc">false</span>
</span><span class='line'>        <span class="n">check</span> <span class="err">&#39;</span><span class="n">NewApi</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">InlinedApi</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行下面的命令</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>project_root_dir
</span><span class='line'>./gradlew lint
</span></code></pre></td></tr></table></div></figure>


<p>结果会输出到工程目录build/outputs/lint-results.html。</p>

<h2>如何解决</h2>

<p>结合上面的输出结果，我们接下来要做的就是如何解决，如下为一些解决思路。</p>

<h3>必然执行高版本API</h3>

<ul>
<li>如果是NewApi警告，考虑其他方法代替。比如String.isEmpty自API 9才引入，但是使用TextUtils.isEmpty替换。</li>
<li>如果是InlinedApi警告，可以自定义与常量同值的另一个常量。</li>
<li>使用反射，对于不太重要的方法，我们可以使用反射来解决问题。</li>
</ul>


<h3>或然执行高版本API</h3>

<p>如果该段代码进行了API Level限制，确保高版本API不会在低版本设置执行，只需对这个警告设置为忽略即可。</p>

<h2>实战解决</h2>

<p>以下代码所属工程最低支持2.2系统，即API 8。</p>

<h3>NewApi有警报代码</h3>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testNewApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">()).</span><span class="na">edit</span><span class="o">().</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;first_use&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中的apply方法为Android API 9引入，使用lint检查会提示警告。</p>

<h3>方案一</h3>

<p>按照API Level不同，选择不同的方法,对于API 9以下使用commit，API 9及其以上使用apply</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testNewApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">edit</span><span class="o">();</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;first_launch&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">GINGERBREAD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">editor</span><span class="o">.</span><span class="na">apply</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">editor</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方案二</h3>

<p>对于确定不会在低版本运行的情况，我们可以增加@TargetApi加上对应的API引入的版本即可。</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@TargetApi</span><span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">GINGERBREAD</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testNewApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">edit</span><span class="o">();</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;first_launch&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>方案三</h3>

<p>同样确保新API不会在低版本运行，也可以忽略警报。</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">&quot;NewApi&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testNewApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">edit</span><span class="o">();</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;first_launch&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>但是这种方案不推荐</strong>，是直接对方法的警告忽略，如果继续在方法中增加代码，则不利于发现问题，比如</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">&quot;NewApi&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testNewApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">PreferenceManager</span><span class="o">.</span><span class="na">getDefaultSharedPreferences</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">edit</span><span class="o">();</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="s">&quot;first_launch&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">apply</span><span class="o">();</span>
</span><span class='line'>    <span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span> <span class="c1">//新增加代码，不容易发现问题</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>含有InlinedApi警告的代码</h3>

<p>下面代码过于简单，只是为了打印一个API 19引入的int常量值。</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testInlinedApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;inlinedValue=&quot;</span> <span class="o">+</span> <span class="n">View</span><span class="o">.</span><span class="na">ACCESSIBILITY_LIVE_REGION_ASSERTIVE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于这个问题的方案很简答，就是自己定义一个常量，其值与高版本的API常量相同，然后使用这个自定义常量即可。如下代码</p>

<figure class='code'><figcaption><span>lineos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testInlinedApi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">VIEW_ACCESSIBILITY_LIVE_REGION_ASSERTIVE</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;inlinedValue=&quot;</span> <span class="o">+</span> <span class="n">VIEW_ACCESSIBILITY_LIVE_REGION_ASSERTIVE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>小问题</h2>

<ul>
<li>如果没有lint命令，需要将Android中的sdk/tools/目录加入PATH即可。</li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Android中的ANR]]></title>
    <link href="http://droidyue.com/blog/2015/07/18/anr-in-android/"/>
    <updated>2015-07-18T17:53:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/07/18/anr-in-android</id>
    <content type="html"><![CDATA[<p>有过Android开发经历的人都不会对ANR陌生，它和崩溃一样是程序设计的问题。本文将以较为深入的视角来介绍什么是ANR，出现场景，如何避免以及如何定位分析ANR,希望可以帮助大家在编写程序时有所帮助。</p>

<!--more-->


<h2>什么是ANR</h2>

<p>ANR全称<code>Application Not Responding</code>，意思就是程序未响应。如果一个应用无法响应用户的输入，系统就会弹出一个ANR对话框，如下图所示,用户可以自行选择继续等待亦或者是停止当前程序。</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/android_anr.png"></p>

<h2>出现场景</h2>

<ul>
<li>主线程被IO操作（从4.0之后网络IO不允许在主线程中）阻塞。</li>
<li>主线程中存在耗时的计算</li>
<li>主线程中错误的操作，比如Thread.wait或者Thread.sleep等</li>
</ul>


<p>Android系统会监控程序的响应状况，一旦出现下面两种情况，则弹出ANR对话框</p>

<ul>
<li>应用在<strong>5秒</strong>内未响应用户的输入事件（如按键或者触摸）</li>
<li>BroadcastReceiver未在<strong>10秒</strong>内完成相关的处理</li>
</ul>


<h2>如何避免</h2>

<p>基本的思路就是将IO操作在工作线程来处理，减少其他耗时操作和错误操作</p>

<ul>
<li>使用<a href="http://droidyue.com/blog/2014/11/08/bad-smell-of-asynctask-in-android/">AsyncTask</a>处理耗时IO操作。</li>
<li>使用Thread或者HandlerThread时，调用Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)设置优先级，否则仍然会降低程序响应，因为默认Thread的优先级和主线程相同。</li>
<li>使用<a href="http://droidyue.com/blog/2014/12/28/in-android-handler-classes-should-be-static-or-leaks-might-occur/">Handler</a>处理工作线程结果，而不是使用Thread.wait()或者Thread.sleep()来阻塞主线程。</li>
<li>Activity的onCreate和onResume回调中尽量避免耗时的代码</li>
<li>BroadcastReceiver中onReceive代码也要尽量减少耗时，建议使用IntentService处理。</li>
</ul>


<h2>画龙点睛</h2>

<p>通常100到200毫秒就会让人察觉程序反应慢，为了更加提升响应，可以使用下面的几种方法</p>

<ul>
<li>如果程序正在后台处理用户的输入，建议使用让用户得知进度，比如使用ProgressBar控件。</li>
<li>程序启动时可以选择加上欢迎界面，避免让用户察觉卡顿。</li>
<li>使用Systrace和TraceView找出影响响应的问题。</li>
</ul>


<h2>如何定位</h2>

<p>如果开发机器上出现问题，我们可以通过查看<code>/data/anr/traces.txt</code>即可，最新的ANR信息在最开始部分。我们从stacktrace中即可找到出问题的具体行数。本例中问题出现在MainActivity.java 27行，因为这里调用了Thread.sleep方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">root</span><span class="nd">@htc_m8tl</span><span class="o">:/</span> <span class="err">#</span> <span class="n">cat</span> <span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">anr</span><span class="o">/</span><span class="n">traces</span><span class="o">.</span><span class="na">txt</span> <span class="o">|</span> <span class="n">more</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">-----</span> <span class="n">pid</span> <span class="mi">30307</span> <span class="n">at</span> <span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">30</span> <span class="mi">14</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mi">14</span> <span class="o">-----</span>
</span><span class='line'><span class="n">Cmd</span> <span class="nl">line:</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span>
</span><span class='line'>
</span><span class='line'><span class="nl">JNI:</span> <span class="n">CheckJNI</span> <span class="n">is</span> <span class="n">off</span><span class="o">;</span> <span class="n">workarounds</span> <span class="n">are</span> <span class="n">off</span><span class="o">;</span> <span class="n">pins</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">globals</span><span class="o">=</span><span class="mi">272</span>
</span><span class='line'>
</span><span class='line'><span class="n">DALVIK</span> <span class="nl">THREADS:</span>
</span><span class='line'><span class="o">(</span><span class="nl">mutexes:</span> <span class="n">tll</span><span class="o">=</span><span class="mi">0</span> <span class="n">tsl</span><span class="o">=</span><span class="mi">0</span> <span class="n">tscl</span><span class="o">=</span><span class="mi">0</span> <span class="n">ghl</span><span class="o">=</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;main&quot;</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">1</span> <span class="n">TIMED_WAIT</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">group</span><span class="o">=</span><span class="s">&quot;main&quot;</span> <span class="n">sCount</span><span class="o">=</span><span class="mi">1</span> <span class="n">dsCount</span><span class="o">=</span><span class="mi">0</span> <span class="n">obj</span><span class="o">=</span><span class="mh">0x416eaf18</span> <span class="n">self</span><span class="o">=</span><span class="mh">0x416d8650</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">sysTid</span><span class="o">=</span><span class="mi">30307</span> <span class="n">nice</span><span class="o">=</span><span class="mi">0</span> <span class="n">sched</span><span class="o">=</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span> <span class="n">cgrp</span><span class="o">=</span><span class="n">apps</span> <span class="n">handle</span><span class="o">=</span><span class="mi">1074565528</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">state</span><span class="o">=</span><span class="n">S</span> <span class="n">schedstat</span><span class="o">=(</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="o">)</span> <span class="n">utm</span><span class="o">=</span><span class="mi">5</span> <span class="n">stm</span><span class="o">=</span><span class="mi">4</span> <span class="n">core</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">VMThread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1044</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1026</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">.</span><span class="na">MainActivity</span><span class="n">$1</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">27</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">4794</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">.</span><span class="na">MainActivity</span><span class="o">.</span><span class="na">onResume</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">33</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Instrumentation</span><span class="o">.</span><span class="na">callActivityOnResume</span><span class="o">(</span><span class="n">Instrumentation</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1282</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Activity</span><span class="o">.</span><span class="na">performResume</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">5405</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是线上版本引起的，Google Play后台有相关的数据可以帮助查看分析并解决问题。</p>

<h2>细致分析</h2>

<p>  <strong>提问</strong>: BroadcastReceiver过了60秒居然没有ANR？ 现场代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NetworkReceiver</span> <span class="kd">extends</span> <span class="n">BroadcastReceiver</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGTAG</span> <span class="o">=</span> <span class="s">&quot;NetworkReceiver&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onReceive intent=&quot;</span> <span class="o">+</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">60000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">LOGTAG</span><span class="o">,</span> <span class="s">&quot;onReceive end&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
  <strong>回答</strong>：实际上已经发生了ANR，只是没有进行对话框弹出而已。这种ANR就是background ANR，即后台程序的ANR，我们可以通过过滤日志验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">adb</span> <span class="n">logcat</span> <span class="o">|</span> <span class="n">grep</span> <span class="s">&quot;NetworkReceiver|ActivityManager|WindowManager&quot;</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">NetworkReceiver</span><span class="o">(</span> <span class="mi">4109</span><span class="o">):</span> <span class="n">onReceive</span> <span class="n">intent</span><span class="o">=</span><span class="n">Intent</span> <span class="o">{</span> <span class="n">act</span><span class="o">=</span><span class="n">android</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">CONNECTIVITY_CHANGE</span> <span class="n">flg</span><span class="o">=</span><span class="mh">0x8000010</span> <span class="n">cmp</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">/.</span><span class="na">NetworkReceiver</span> <span class="o">(</span><span class="n">has</span> <span class="n">extras</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">No</span> <span class="n">longer</span> <span class="n">want</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">exchange</span> <span class="o">(</span><span class="n">pid</span> <span class="mi">1054</span><span class="o">):</span> <span class="n">empty</span> <span class="err">#</span><span class="mi">17</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">NetworkReceiver</span><span class="o">(</span> <span class="mi">4109</span><span class="o">):</span> <span class="n">onReceive</span> <span class="n">end</span>
</span><span class='line'><span class="n">W</span><span class="o">/</span><span class="n">BroadcastQueue</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">Receiver</span> <span class="n">during</span> <span class="nl">timeout:</span> <span class="n">ResolveInfo</span><span class="o">{</span><span class="mi">5342</span><span class="n">dde4</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">.</span><span class="na">NetworkReceiver</span> <span class="n">p</span><span class="o">=</span><span class="mi">0</span> <span class="n">o</span><span class="o">=</span><span class="mi">0</span> <span class="n">m</span><span class="o">=</span><span class="mh">0x108000</span><span class="o">}</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">ANR</span> <span class="n">in</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="nl">Reason:</span> <span class="n">Broadcast</span> <span class="n">of</span> <span class="n">Intent</span> <span class="o">{</span> <span class="n">act</span><span class="o">=</span><span class="n">android</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">CONNECTIVITY_CHANGE</span> <span class="n">flg</span><span class="o">=</span><span class="mh">0x8000010</span> <span class="n">cmp</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">/.</span><span class="na">NetworkReceiver</span> <span class="o">(</span><span class="n">has</span> <span class="n">extras</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="nl">Load:</span> <span class="mf">0.37</span> <span class="o">/</span> <span class="mf">0.2</span> <span class="o">/</span> <span class="mf">0.14</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">CPU</span> <span class="n">usage</span> <span class="n">from</span> <span class="mi">26047</span><span class="n">ms</span> <span class="n">to</span> <span class="mi">0</span><span class="n">ms</span> <span class="nl">ago:</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span>   <span class="mf">0.4</span><span class="o">%</span> <span class="mi">58</span><span class="o">/</span><span class="nl">adbd:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.4</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">1501</span> <span class="n">minor</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span>   <span class="mf">0.3</span><span class="o">%</span> <span class="mi">462</span><span class="o">/</span><span class="nl">system_server:</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span>   <span class="mi">0</span><span class="o">%</span> <span class="mi">4109</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">6</span> <span class="n">minor</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="mf">1.5</span><span class="o">%</span> <span class="nl">TOTAL:</span> <span class="mf">0.5</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.9</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">softirq</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">CPU</span> <span class="n">usage</span> <span class="n">from</span> <span class="mi">87</span><span class="n">ms</span> <span class="n">to</span> <span class="mi">589</span><span class="n">ms</span> <span class="nl">later:</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span>   <span class="mf">1.8</span><span class="o">%</span> <span class="mi">58</span><span class="o">/</span><span class="nl">adbd:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">1.8</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">30</span> <span class="n">minor</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span>     <span class="mf">1.8</span><span class="o">%</span> <span class="mi">58</span><span class="o">/</span><span class="nl">adbd:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">1.8</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'><span class="n">E</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="mi">4</span><span class="o">%</span> <span class="nl">TOTAL:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">4</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'><span class="n">W</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">Killing</span> <span class="n">ProcessRecord</span><span class="o">{</span><span class="mi">5326</span><span class="n">d418</span> <span class="mi">4109</span><span class="o">:</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span><span class="o">/</span><span class="n">u0a10063</span><span class="o">}:</span> <span class="n">background</span> <span class="n">ANR</span>
</span><span class='line'><span class="n">I</span><span class="o">/</span><span class="n">ActivityManager</span><span class="o">(</span>  <span class="mi">462</span><span class="o">):</span> <span class="n">Process</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">androidyue</span><span class="o">.</span><span class="na">bitmapdemo</span> <span class="o">(</span><span class="n">pid</span> <span class="mi">4109</span><span class="o">)</span> <span class="n">has</span> <span class="n">died</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了日志，我们还可以根据前面提到的查看traces.txt文件。</p>

<p><strong>提问</strong>:可以更容易了解background ANR么？</p>

<p><strong>回答</strong>:当然可以，在Android开发者选项&mdash;>高级&mdash;>显示所有”应用程序无响应“勾选即可对后台ANR也进行弹窗显示，方便查看了解程序运行情况。</p>

<h2>参考文章</h2>

<ul>
<li><a href="http://developer.android.com/intl/zh-cn/training/articles/perf-anr.html">Keeping Your App Responsive</a></li>
</ul>


<script type="text/javascript" src="http://droidyue.b0.upaiyun.com/js/blog/book_copyright.js"></script>


<script type="text/javascript">
    showBookCopyright();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac上为其他设备开启代理]]></title>
    <link href="http://droidyue.com/blog/2015/07/11/start-proxy-server-on-mac/"/>
    <updated>2015-07-11T17:36:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/07/11/start-proxy-server-on-mac</id>
    <content type="html"><![CDATA[<p>前些日子，想要查看一个Release版本的HTTP请求，由于已经是发布版本，日志已然关闭，遂开始从HTTP代理的思路着手。</p>

<p>本文是偏于操作的总结，行文目的是快速解决诸如上面的问题，不是为了深入了解squidman。如需深入俩接，请参考文章尾部的进阶推荐内容。</p>

<!--more-->


<h3>Fiddler铩羽而归</h3>

<p>首先尝试了鼎鼎有名的Fiddler，Fiddler是一款基于.NET的应用，天然运行在Windows系统上。但是想要安装到Mac上则需要安装.NET运行时，可是一旦启动Fiddler代理就无缘无故崩溃，最后不得不铩羽而归，另谋他路。</p>

<h3>SquidMan</h3>

<p>SquidMan是一款Mac上的图形化的squid代理服务器的安装管理工具。使用squid服务器软件可以帮助我们实现如下功能</p>

<ul>
<li>缓存下载内容，减少网络带宽，加速网页浏览。</li>
<li>作为代理服务器，供其他设备使用。</li>
</ul>


<p>这里我们用到的是其代理功能。</p>

<p>巧妇难为无米之炊，首先要做的就是安装squidman，从<a href="http://squidman.net/squidman/">这里</a>下载对应的版本并安装，然后进行启动即可。</p>

<h3>客户端配置</h3>

<p>以下操作的WIFI热点应该为Mac设备与客户端设备同时连接的热点，以确保在同一局域网中。
代理服务器的IP地址使用<code>ifconfig</code>查看，端口默认为8087。
以Android设备为例</p>

<p>设置&mdash;>WLAN&mdash;>长按目标WIFI热点&mdash;>修改网络&mdash;>勾选显示高级选项&mdash;>修改代理为手动，填出代理服务器的地址和端口，保存即可。</p>

<h3>查看日志</h3>

<h4>终端查看</h4>

<p>个人喜欢使用终端查看，使用tail命令查看访问日志一目了然。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tail</span> <span class="o">-</span><span class="mi">200</span><span class="n">f</span> <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">Logs</span><span class="o">/</span><span class="n">squid</span><span class="o">/</span><span class="n">squid</span><span class="o">-</span><span class="n">access</span><span class="o">.</span><span class="na">log</span>
</span></code></pre></td></tr></table></div></figure>


<h4>客户端查看</h4>

<p>使用SquidMan客户端查看也是一种选择，选择Window&mdash;>Tools即可看到如下的界面</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/squidman_tools.png"></p>

<p>Access Log不会自动追加最新的请求日志，需要再次点击Access Log按钮才可以。</p>

<h3>问题解决</h3>

<h4>无法访问网络 403</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mf">1434336922.275</span>   <span class="mi">1140</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.100</span> <span class="n">TCP_DENIED</span><span class="o">/</span><span class="mi">403</span> <span class="mi">4286</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//m.baidu.com/? - HIER_NONE/- text/html</span>
</span><span class='line'><span class="mf">1434336922.594</span>     <span class="mi">71</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.100</span> <span class="n">TCP_DENIED</span><span class="o">/</span><span class="mi">403</span> <span class="mi">3979</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//www.squid-cache.org/Artwork/SN.png - HIER_NONE/- text/html</span>
</span></code></pre></td></tr></table></div></figure>


<p>日志全部显示为TCP_DENIED/403，表明Squidman拒绝了来自客户端的请求</p>

<p>解决方法，在配置文件中找到如下代码</p>

<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/squidman_403.png" title="" ></p>

<p>替换为<code>http_access allow all</code>，即允许所有的HTTP访问，停止Squiman，然后重新启动，如果失败，再次点击重新启动即可。</p>

<h4>无法查看GET参数</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mf">1434340562.396</span>    <span class="mi">339</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.100</span> <span class="n">TCP_MISS</span><span class="o">/</span><span class="mi">200</span> <span class="mi">82471</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//m.baidu.com/s? - HIER_DIRECT/115.239.210.14 text/html</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认情况下，从日志中是无法看到GET查询参数的，因为在写入日志前，程序已经过滤掉了这些数据。通过在配置中加入<code>strip_query_terms off</code>保存，重新启动，再次查看日志，就可以看到查询参数了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mf">1434340777.200</span>    <span class="mi">287</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.100</span> <span class="n">TCP_MISS</span><span class="o">/</span><span class="mi">200</span> <span class="mi">82272</span> <span class="n">GET</span> <span class="nl">http:</span><span class="c1">//m.baidu.com/s?from=1097d&amp;word=%E6%8A%80%E6%9C%AF%E5%B0%8F%E9%BB%91%E5%B1%8B - HIER_DIRECT/115.239.210.14 text/html</span>
</span></code></pre></td></tr></table></div></figure>


<h3>进阶推荐</h3>

<ul>
<li><a href="http://wiki.squid-cache.org/ConfigExamples">Squid Config Examples</a></li>
<li><a href="http://www.squid-cache.org/Doc/config/">Squid configuration References</a></li>
<li><a href="http://www.amazon.cn/gp/product/B008AEI8A2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008AEI8A2&amp;linkCode=as2&amp;tag=droidyue-23">鸟哥的Linux私房菜:服务器架设篇</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么高端人才会使用拍卖选工作]]></title>
    <link href="http://droidyue.com/blog/2015/07/06/wei-shi-yao-gao-duan-ren-cai-hui-shi-yong-pai-mai-xuan-gong-zuo/"/>
    <updated>2015-07-06T20:58:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/07/06/wei-shi-yao-gao-duan-ren-cai-hui-shi-yong-pai-mai-xuan-gong-zuo</id>
    <content type="html"><![CDATA[<p><strong>本文为<a href="http://droidredirect.sinaapp.com/100offer_redirect.php">100offer</a>合作文章，由100offer为本网站提供专业的职场相关的文章，感兴趣的或者有跳槽的童鞋们不防读一读</strong>。</p>

<p>想象一下，当你在一个网站上递交你的简历后，你会像珐琅彩瓷一样被各个公司竞相拍卖，确定到合适的「买主」之后，专车把你送到面试的地点；入职当天，你会收到精心准备的小礼物，通过试用期后，你还会收到 3000 元的奖金奖励！</p>

<!--more-->


<p>程序员粘永把简历挂在网站后不久，就接到一个 HR的电话，「太快了」，不到一周，他就得到了心仪已久的公司 Strikingly 的面试机会，顺利入职。</p>

<p>啧啧，听上去像是广告一样。</p>

<p>但这是个真实的故事，这个网站叫100offer。在星巴克初次见面，100offer 创始人贾智凡向我介绍：我们在做这样一件事——帮中高端程序员高效地选一份更好的工作。</p>

<p>「4万名程序员，2600家互联网公司，参加拍卖的程序员90%至少拿到一个offer，平均每人可收到12个靠谱面试机会。」这是100offer 上线8个月交出的成绩，不久前他们拿到了2000万人民币A轮融资。</p>

<h3>牛人用「拍卖方式」来选工作，有什么合理性？</h3>

<p>相比于迷茫又急于找到工作的应届生，进入职场多年的中高端人才的选择则非常慎重——有着明确的薪资提升与发展空间的需求，所以猎头和朋友推荐是过去的常用途径。然而凭借猎头和人脉圈，提供的选择机会终究是有限的，中高端人才找工作很容易，但「选」到满意的工作实属不易。</p>

<p>「拍卖」，则提供了独特的价值：一次申请，匿名挑选2600家公司，总有很多猎头和人脉圈无法触及的「惊喜」机会；与此同时相比于「广告密集、色彩缤纷」的招聘网站，拍卖网站帮高端人才做了一次信用保证，求职者完全变身稀缺品，企业需要刻不容缓争抢。</p>

<p>「求职人群中，应届生很容易得到来自前辈与亲友的建议与指点，而且各方面要求相对较低，中高端程序员则往往无法在普通招聘网站中满足待遇升值的需求，这同样也是100offer的机遇。」贾智凡强调，「人才拍卖不是招聘网站，我们只服务于缺选择不缺工作的高端人才，帮他们高效地选一份更好的工作」。</p>

<h3>求职者和招聘方需求相互矛盾，拍卖产品偏向谁？</h3>

<p><img src="http://7xk6z0.com1.z0.glb.clouddn.com/100offer_office.jpg"></p>

<p>「招聘方和求职方的需求是矛盾的，候选人希望企业信息足够透明，再向企业透露信息，企业方则希望尽快获得简历，可以直接打电话。我们非常重视求职方的体验。」</p>

<p>在星巴克，这个看上去不善言辞的创业者一边喝着茶一边回答我的疑问。在产品功能的轻重缓急上，他已经考虑了很多。通常情况下，他要低头思考几秒钟，才给出答案。</p>

<p>「每一个通过100offer入职的候选人，会收到3000元奖金；同时100offer向企业收取一定费用」，从100offer的选择上可以看出对求职者的极度偏向。</p>

<h3>拍卖产品是如何一步步打动高端用户的？</h3>

<p>其实，100offer的定位非常严苛：一线互联网公司、2年以上工作经验、年薪20万起。这部分用户理性、缜密、渴望自由并佩服真正有本事的成功者，同时过去大多使用猎头和朋友推荐，100offer需要攻克的是互联网领域最难被说服的用户。</p>

<p>2014年7月100offer上线，「起初时挺焦虑的，毕竟从零开始，也没人相信我们，但后来觉得反正也没啥可失去的，慢慢内心就柔软淡定了。」贾智凡说。100offer前1000个用户来源于程序员社区V2EX，「其实大家只是出于猎奇的心态，并来试试验证下真实性。那时用户少，我们1个半月拍卖一次，每次50~100个优质候选人。」</p>

<p>但再怎么样，这些高端用户被猎头、朋友、HR围绕，其实并不缺一个机会，「他们缺少的是好的选择，100offer所解决的，就是帮他们高效地选更好的工作」，贾智凡介绍，上线不到一年时间，100offer每周开始一次新的拍卖，100~200人，这也证实了100offer的价值。「对于这批用户，真正打动他们的是真实的效果。」</p>

<p>在竞争激烈的招聘领域，这家网站的独特思路让我看起来和所有其他的网站都不太一样。</p>

<p><img src="http://7xk6z0.com1.z0.glb.clouddn.com/100offer_timeline.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员必读的六本书]]></title>
    <link href="http://droidyue.com/blog/2015/07/04/six-books-every-programer-must-read/"/>
    <updated>2015-07-04T18:37:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/07/04/six-books-every-programer-must-read</id>
    <content type="html"><![CDATA[<p>作为一名程序员，日常的工作除了上班撸代码就是加班撸代码了。撸码其实不难，无非询问Google，StackOverflow，解决方法和demo一箩筐，可是撸的一手好代码着实不易。无独有偶，码农一抓一大把，优秀的程序员却不易寻觅。优秀的程序员既不可能出自各种天花乱坠的培训机构，更不可能来自挖掘机摇篮山东布鲁斯特，大多数优秀的程序员有一个共同点，那就是自学。</p>

<p>为什么是自学呢？首先大学的教育不可能让你成为专家级别的程序员，其次为了能从团队脱颖而出必然付出更多的努力来学习。自学其实是一种很强有力的能力，一旦掌握，许多技术和问题都可以轻松搞定。</p>

<p>中学物理常客牛顿曾说，”如果我比别人看得更远，那是因为我站在巨人的肩上“。他山之石，可以攻玉。阅读大师巨匠的作品无疑是最有效的自学方式之一。业界知名的Bob大叔是代码整洁和面向对象编程的坚定支持推进者，其在这方面的著作可以称得上权威。Martin Fowler同样名声在外，他的关于重构的著作<a href="http://droidredirect.sinaapp.com/book_refactor.php" class="post_inner_book">《重构&mdash;-改善既有代码的设计》</a>
应该是人手一本。阅读诸如上面两位大家的著作，对技术提到大有裨益。</p>

<!--more-->


<p>本文讲列举六本业界牛人的著作，也是编程书籍中经典的经典，这几本书并非简单的教程书籍，而是教给你方法和思想来解决现实遇到的问题，提高编码的技艺和境界。</p>

<h3>重构&mdash;-改善既有代码的设计</h3>

<p><img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/refactor.jpeg" width="218" title="refactor" >
何为重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。本书虽然使用Java语言书写示例代码，但是其概念与思想同样适合于其他语言。书中，作者以一些平淡无奇，甚至带有坏味道的代码开始，一步一步地修改转变成更加灵活，可重用的代码。通过书中的示例，你会清楚地明白什么才是整洁的代码。重构其实依然成为经验丰富的程序员的必备技能，当你想要改善重构代码时，读一读这本书就会让你有章可循，豁然开朗。<br/>
查看详细：<a href="http://droidredirect.sinaapp.com/book_refactor.php" class="post_inner_book">《重构&mdash;-改善既有代码的设计》</a></p>

<br/>


<br/>


<h3>代码整洁之道</h3>

<p><img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/clean_code.jpeg">
这是我最喜欢的一本书，不止一次我将它推荐给我的同事，读者还有学生。我认为它可以称得上软件开发与编码方便最好的一本书。Bob大叔我想无需做介绍，他写过一个关于敏捷开发的系列书籍，我的书架上就有他的<a href="http://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0031M9GHC&linkCode=as2&tag=droidyue-23" class="post_inner_book">《代码整洁之道》</a>,<a href="http://www.amazon.cn/gp/search/ref=as_li_qf_sp_sr_il_tl?ie=UTF8&camp=536&creative=3200&index=aps&keywords=%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB&linkCode=as2&tag=droidyue-23" class="post_inner_book">《程序员的职业素养》</a>，
<a href="http://www.amazon.cn/gp/product/B00116MMA8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00116MMA8&linkCode=as2&tag=droidyue-23" class="post_inner_book">《敏捷软件开发(原则模式与实践)》</a>，<a href="http://www.amazon.cn/gp/product/0131428489/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=0131428489&linkCode=as2&tag=droidyue-23" class="post_inner_book">《UML for Java For Programmers》</a>， 《Extreme Programming in Practice》等这些书籍。虽然他的这些书有点老旧，但是这些书仍然很有价值，纵使数十年之后，这些书依旧受用，尤其是在面向对象编程方面。
 本书不仅仅是告诉你要做什么，还教会你什么不能做。书中有关于代码味道的一个章节，全面列举了大多数程序员遇到的各种错误，其后的章节则详细描述如何纠正这些错误。比如如何将过长的switch声明转换成遵循开放闭合原则的模型，如何利用集成和多态。再次啰嗦一下，这本书确实值得每个程序员拥有。和上本书一样，书中的例子使用Java语言，但依然适合使用其他面向对象编程语言的开发者阅读。想要撸的一手好码，这本书必不可少。<br/>
查看详细:<a href="http://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0031M9GHC&linkCode=as2&tag=droidyue-23" class="post_inner_book">《代码整洁之道》</a></p>

<h3>代码大全</h3>

<p><img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/code_complete.jpeg"></p>

<p>想必这本书大家都曾阅读过，这就是鼎鼎大名的《代码大全》，从某个角度看，它其实就是C++版的《代码整洁之道》。本书的目标就是帮开发者使用做高质的代码写出更好的软件。同样书中也涉及了编程中常见问题和最佳实践。这本书也可以称得上是必读书籍，尤其是对于C和C++程序员。《代码大全(第2版)》中所论述的技术不仅填补了初级与高级编程实践之间的空白，而且也为程序员们提供了一个有关软件开发技术的信息来源。《代码大全(第2版)》对经验丰富的程序员、技术带头人、自学的程序员及没有太多编程经验的学生都是大有裨益的。可以说，只要你具有一定的编程基础，想成为一名优秀的程序员，阅读《代码大全(第2版)》都不会让你失望。<br/>
查看详细:
<a href="http://www.amazon.cn/gp/product/B0061XKRXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0061XKRXA&linkCode=as2&tag=droidyue-23" class="post_inner_book">代码大全</a></p>

<h3>单元测试的艺术</h3>

<p><img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/the_art_of_unit_test.jpeg">
如果非要做一件改善项目，提高开发者水平的事情，我想那就是让开发者掌握单元测试的能力。对于专业的开发者来说，单元测试是一项必备的技能，多数的程序员却不具备TDD（测试驱动开发）的能力。我虽然在不太遵循TDD这种模式，但是也会为自己写的或维护的代码编写单元测试。对于工程来说，开源项目基本都严格遵守执行单元测试，而很多商业的工程则在单元测试方面有所缺失。一个拥有单元测试的项目会变得更加容易维护和更改。本书会介绍成功的项目与失败项目的差别，可维护的代码库与不可维护的代码库之间的区别。本书示例为.NET代码，但这并不会影响你了解单元测试。如果你是一名技术负责人或者项目负责人，这本书可以帮你更好地把控项目代码质量。如果你看Java更舒服的话，也可以看一看这本书<a href="http://www.amazon.cn/gp/product/B007NDAPHK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B007NDAPHK&linkCode=as2&tag=droidyue-23" class="post_inner_book">《JUnit实战(第2版)》</a>。<br/>
查看详细:<a href="http://www.amazon.cn/gp/product/B00MBQMFLI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00MBQMFLI&linkCode=as2&tag=droidyue-23" class="post_inner_book">单元测试的艺术</a></p>

<h3>精益软件开发管理之道</h3>

<p><img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/Leading_Lean_Software_Developer.jpeg">
《精益软件开发管理之道》是一本软件开发方法学的书。作者从24个不同的视角，在更大的空间、时间、行业、文化背景下，考察了敏捷和精益方法。《精益软件开发管理之道》详细阐述了敏捷和精益开发方法取得成功的深层原因。《精益软件开发管理之道》包括以下内容：系统思考，以适当足够的方式关注客户；技术杰出，介绍了杰出软件开发的基础-低耦合的架构、测试驱动的开发过程等；可靠交付，讨论了工作流和日程计划，以及反馈的重要作用；无情改进，讨论了所有精益组织的基本特点：持续不断、永不满足的改进；卓越的人，卓越的结果来自于卓越的人；一致的领导，讨论在领导团队中达成一致。<br/>
查看详细：<a href="http://www.amazon.cn/gp/product/0321620704/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=0321620704&linkCode=as2&tag=droidyue-23" class="post_inner_book">精益软件开发管理之道</a></p>

<br/>


<br/>


<h3>设计模式 可复用面向对象软件的基础</h3>

<p><img class="left" src="http://7jpolu.com1.z0.glb.clouddn.com/design_patterns.jpeg">
这本书要么你读过，要么就是听说过，这就是经典的GOF（Gang of Four 中文译为四人帮）设计模式一书。该书作者为四人，分别是Eric Gamma, Richard Helm, Ralph Johnson, 和John Vissides。四位顶尖的面向对象领域专家精心选取了最具价值的设计实践，加以分类整理和命名，并用简洁而易于重用的形式表达出来。本书已经成为面向对象技术人员的圣经和词典，书中定义的23个模式逐渐成为开发界技术交流所必备的基础知识和语汇。使用这些设计模式，我们可以设计出灵活，优雅和可重用的可扩展的设计。<br/>
查看详细：<a href="http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B001130JN8&linkCode=as2&tag=droidyue-23" class="post_inner_book">设计模式 可复用面向对象软件的基础</a></p>

<br/>


<br/>


<br/>


<br/>


<h3>颈椎病康复指南</h3>

<p>最新更新，原文不包含本书，应读者评论要求，特意加入此书。</p>

<p>写代码不仅是头脑的工作，更是体力的付出。长年累月，身体必然出现问题。脂肪肝，脊椎病等等。希望这本书可以给你脊椎病恢复提供指导。<br/>
查看详细：<a href="http://www.amazon.cn/gp/product/B0085UMKXC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0085UMKXC&linkCode=as2&tag=droidyue-23" class="post_inner_book">颈椎病康复指南</a></p>

<h3>原文参考</h3>

<ul>
<li><a href="http://javarevisited.blogspot.com/2014/09/top-6-books-to-learn-programming-coding.html">6 Books to Learn and Master Programming and Coding &ndash; Must Read</a></li>
<li>原文为墙外地址</li>
<li>本文对原文有删减和修改</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这就是观察者模式]]></title>
    <link href="http://droidyue.com/blog/2015/06/27/desgign-pattern-observer/"/>
    <updated>2015-06-27T10:40:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/27/desgign-pattern-observer</id>
    <content type="html"><![CDATA[<p>观察者模式是软件设计模式中的一种，使用也比较普遍，尤其是在GUI编程中。关于设计模式的文章，网络上写的都比较多，而且很多文章写的也不错，虽然说有一种重复早轮子的嫌疑，但此轮子非彼轮子，侧重点不同，思路也不同，讲述方式也不近相同。</p>

<!--more-->


<h2>定义</h2>

<p>关于定义，最准确的莫过于<a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011FBU34&amp;linkCode=as2&amp;tag=droidyue-23">Head First设计模式</a>中写到的。</p>

<blockquote><p>观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监听一个主题对象。这样一来，当被观察者状态发生改变时，需要通知相应的观察者，使这些观察者对象能够自动更新。</p></blockquote>

<h2>关键要素</h2>

<h3>主题</h3>

<p>主题是观察者观察的对象，一个主题必须具备下面三个特征。</p>

<ul>
<li>持有监听的观察者的引用</li>
<li>支持增加和删除观察者</li>
<li>主题状态改变，通知观察者</li>
</ul>


<h3>观察者</h3>

<p>当主题发生变化，收到通知进行具体的处理是观察者必须具备的特征。</p>

<h2>为什么要用这种模式</h2>

<p>这里举一个例子来说明，牛奶送奶站就是主题，订奶客户为监听者，客户从送奶站订阅牛奶后，会每天收到牛奶。如果客户不想订阅了，可以取消，以后就不会收到牛奶。</p>

<h3>松耦合</h3>

<ul>
<li>观察者增加或删除无需修改主题的代码，只需调用主题对应的增加或者删除的方法即可。</li>
<li>主题只负责通知观察者，但无需了解观察者如何处理通知。举个例子，送奶站只负责送递牛奶，不关心客户是喝掉还是洗脸。</li>
<li>观察者只需等待主题通知，无需观察主题相关的细节。还是那个例子，客户只需关心送奶站送到牛奶，不关心牛奶由哪个快递人员，使用何种交通工具送达。</li>
</ul>


<h3>通知不错过</h3>

<p>由于被动接受，正常情况下不会错过主题的改变通知。而主动获取的话，由于时机选取问题，可能导致错过某些状态。</p>

<h2>Java实现</h2>

<p>Java中有观察者模式使用的API</p>

<ul>
<li>java.util.Observable 这是一个类，而非接口，主题需要继承这个类。</li>
<li>java.util.Observer   这是一个接口，监听者需要实现这个接口。</li>
</ul>


<h3>示例代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Observable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Observer</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainRoot</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Observer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">();</span>
</span><span class='line'>      <span class="n">MilkProvider</span> <span class="n">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MilkProvider</span><span class="o">();</span>
</span><span class='line'>      <span class="n">provider</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">consumer</span><span class="o">);</span>
</span><span class='line'>      <span class="n">provider</span><span class="o">.</span><span class="na">milkProduced</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MilkProvider</span> <span class="kd">extends</span> <span class="n">Observable</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">milkProduced</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">setChanged</span><span class="o">();</span><span class="c1">//状态改变，必须调用</span>
</span><span class='line'>          <span class="n">notifyObservers</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Observable</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">Object</span> <span class="n">arg1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Consumer update...&quot;</span> <span class="o">+</span> <span class="n">arg0</span> <span class="o">+</span> <span class="s">&quot;;arg1=&quot;</span> <span class="o">+</span> <span class="n">arg1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码完成了</p>

<ul>
<li>将consumer加入主题provider的观察者行列</li>
<li>provider设置状态变化，通知持有的观察者</li>
<li>观察者consumer收到通知，打印日志处理</li>
</ul>


<h3>setChanged为何物</h3>

<p>其实上述代码中存在这样一处代码<code>setChanged();</code>，如果在通知之前没有调用这个方法，观察者是收不到通知的，这是为什么呢</p>

<p>这里我们看一下setChanged的源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">setChanged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">changed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，然后找一下谁使用changed这个值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">boolean</span> <span class="nf">hasChanged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">changed</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>notifyObservers的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">(</span><span class="n">Object</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Observer</span><span class="o">[]</span> <span class="n">arrays</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">hasChanged</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clearChanged</span><span class="o">();</span>
</span><span class='line'>          <span class="n">size</span> <span class="o">=</span> <span class="n">observers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>          <span class="n">arrays</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Observer</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>          <span class="n">observers</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">arrays</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">arrays</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span> <span class="o">:</span> <span class="n">arrays</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">observer</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是为什么要加入这样一个开关呢？可能原因大致有三点</p>

<p>  1.筛选有效通知，只有有效通知可以调用setChanged。比如，我的微信朋友圈一条状态，好友A点赞，后续该状态的点赞和评论并不是每条都通知A，只有A的好友触发的操作才会通知A。</p>

<p>  2.便于撤销通知操作，在主题中，我们可以设置很多次setChanged，但是在最后由于某种原因需要取消通知，我们可以使用clearChanged轻松解决问题。</p>

<p>  3.主动权控制，由于setChanged为protected,而notifyObservers方法为public，这就导致存在外部随意调用notifyObservers的可能，但是外部无法调用setChanged，因此真正的控制权应该在主题这里。</p>

<h3>主动获取</h3>

<p>观察者模式即所谓的推送方式，然而推送并非完美无缺。比如主题变化会推送大量的数据，而其中的一些观察者只需要某项数据，此时观察者就需要在具体实现中花费时间筛选数据。</p>

<p>这确实是个问题，想要解决也不难，需要主题为某些数据提供getter方法，观察者只需调用getter取数据处理即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MilkProvider</span> <span class="kd">extends</span> <span class="n">Observable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">milkProduced</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">setChanged</span><span class="o">();</span><span class="c1">//状态改变，必须调用</span>
</span><span class='line'>      <span class="n">notifyObservers</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">float</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mf">2.5f</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Observable</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">Object</span> <span class="n">arg1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MilkProvider</span> <span class="n">provider</span> <span class="o">=</span> <span class="o">(</span><span class="n">MilkProvider</span><span class="o">)</span><span class="n">arg0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;milk price =&quot;</span> <span class="o">+</span> <span class="n">provider</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>不足与隐患</h2>

<p>主要的问题表现在内存管理上，主要由以下两点</p>

<ul>
<li>主题持有观察者的引用，如果未正常处理从主题中删除观察者，会导致观察者无法被回收。</li>
<li>如果观察者具体实现代码有问题，会导致主题和观察者对象形成循环引用，在某些采用引用计数的垃圾回收器可能导致无法回收。</li>
</ul>


<h2>书山有路</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00INI842W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00INI842W&amp;linkCode=as2&amp;tag=droidyue-23">设计模式之禅</a></li>
<li><a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011FBU34&amp;linkCode=as2&amp;tag=droidyue-23">Head First设计模式</a></li>
<li><a href="http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001130JN8&amp;linkCode=as2&amp;tag=droidyue-23">设计模式 可复用面向对象软件的基础 </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play Services 7.5新增API及多项特性]]></title>
    <link href="http://droidyue.com/blog/2015/06/23/google-play-services-7-dot-5-adds-new-capabilities/"/>
    <updated>2015-06-23T21:00:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/23/google-play-services-7-dot-5-adds-new-capabilities</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2015/06/google-play-services-75">文章链接</a>。如需转载，请与 InfoQ 中文站联系。</p>

<h3>摘要</h3>

<p>最近的Google I/O开发者大会上，Google宣布推出7.5版的Google Play服务，该版本在特性方面增加了诸如智能密码锁和实例ID等功能。在API方面，增加了Google云推送和Google Cast相关的API，同时在Android Wear设备上支持访问Google地图API。</p>

<!--more-->


<h3>正文</h3>

<p>最近的Google I/O开发者大会上，Google<a href="http://android-developers.blogspot.com.es/2015/05/a-closer-look-at-google-play-services-75.html">宣布</a>推出7.5版的Google Play服务，该版本在特性方面增加了诸如智能密码锁和实例ID等功能。在API方面，增加了Google云推送和Google Cast相关的API，同时在Android Wear设备上支持访问Google地图API。</p>

<p><strong>智能密码锁</strong></p>

<p><a href="https://developers.google.com/identity/smartlock-passwords/android/">智能密码锁</a>为了简化登陆流程，增加了名为<a href="https://developer.android.com/reference/com/google/android/gms/auth/api/credentials/CredentialsApi.html">CredentialsApi</a>的API和UI，并允许我们对已保存的证书进行检索和保存以备后用。密码管理器是从Chrome浏览器的密码管理器演变而来。了解更多关于该功能细节，请查阅InfoQ<a href="http://www.infoq.com/news/2015/06/google-smart-lock-passwords">具体介绍文章</a>。</p>

<p><strong>实例ID，身份与授权</strong></p>

<p><a href="https://developers.google.com/instance-id/reference">实例ID</a>是一项云服务，该服务用来提供一个唯一的ID来唯一性鉴定应用实例。使用的场景比如确定哪一个应用实例正在发送请求等问题。实例ID还可以用来生成安全令牌，使用安全令牌可以授权第三方应用访问你的应用的服务器端控制的资源，同时安全令牌也可以用来验证一个应用的真实性。</p>

<p><strong>Google云推送</strong></p>

<p>上面提到的实例ID与<a href="https://developer.android.com/google/gcm/index.html">Google云推送</a>紧密相关，Google云推送作为一个服务，既可以接收来自服务器端的信息也可以从客户端向服务器端传送数据。此外，Google云推送还新加入了一个API允许应用设置一个或多个话题进而帮助消息能够精准推送。不仅如此，该服务还增加了一个新的类<a href="https://developer.android.com/reference/com/google/android/gms/gcm/GcmNetworkManager.html">GcmNetworkManager</a>，使用这个类，当服务器端有新信息时，应用与服务器端进行数据同步更加容易。GcmNetworkManager支持对常见行为的处理，比如等待网络连接，设备充电，网络重试和回退等，另外它还支持对后台网络操作的调度进行优化。</p>

<p><strong>Google Cast</strong></p>

<p>众所周知，Google Cast是一套将设备内容呈现到电视或者音响的解决方案，新增的<a href="https://developers.google.com/cast/docs/remote">远程显示API</a>使得管理镜像显示更加容易，另外通过增加媒体队列使得<a href="https://developer.android.com/reference/com/google/android/gms/cast/RemoteMediaPlayer.html">RemoteMediaPlayer</a>可以无缝支持媒体重放。</p>

<p><strong>Google地图和Google Fit</strong></p>

<p>正如一开始提到的，在Android Wear设备上可以使用Google<a href="http://developer.android.com/reference/com/google/android/gms/maps/package-summary.html">地图API</a>了。</p>

<p><a href="https://developers.google.com/fit/">Google Fit</a>，用来构建健康应用解决方案，现在可以使用新增加的<a href="https://developer.android.com/reference/com/google/android/gms/fitness/RecordingApi.html">RecordingApi</a>收集行走距离和燃烧的卡路里数据。</p>

<p>Google Play服务是一个有着系统级别权限的并且可升级的服务和API。正如InfoQ<a href="http://www.infoq.com/news/2013/09/play-services-beat-fragmentation">指出的</a>那样，”在这种情况下，Google可以在宣布之后数天内铺开这些新特性“，如果没有这项服务，则需要底层系统的更新。因为Play服务完全由Google控制，OEM厂商无法修改，所以该服务在缓解软件碎片化问题上起了很关键的作用。</p>

<p><strong>查看英文原文：</strong><a href="http://www.infoq.com/news/2015/06/google-play-services-75">Google Play Services 7.5 Adds New Capabilities, APIs, and More</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说依赖注入]]></title>
    <link href="http://droidyue.com/blog/2015/06/13/talk-show-about-dependency-injection/"/>
    <updated>2015-06-13T22:59:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/13/talk-show-about-dependency-injection</id>
    <content type="html"><![CDATA[<p>在面向对象编程中，我们经常处理处理的问题就是解耦，程序的耦合性越低表明这个程序的可读性以及可维护性越高。控制反转(Inversion of Control或IoC)就是常用的面向对象编程的设计原则，使用这个原则我们可以降低耦合性。其中依赖注入是控制反转最常用的实现。</p>

<!--more-->


<h2>什么是依赖</h2>

<p>依赖是程序中常见的现象，比如类Car中用到了GasEnergy类的实例energy，通常的做法就是在Car类中显式地创建GasEnergy类的实例，并赋值给energy。如下面的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Energy</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">class</span> <span class="nc">GasEnergy</span> <span class="kd">implements</span> <span class="n">Energy</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">energy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GasEnergy</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存在问题</h2>

<ul>
<li>类Car承担了多余的责任，负责energy对象的创建，这必然存在了严重的耦合性。举一个现实中的例子，一辆汽车使用哪种能源不是由汽车来决定，而是由汽车制造商（CarMaker）来决定，这是汽车制造商的责任。</li>
<li>可扩展性，假设我们想修改能源为电动力，那么我们必然要修改Car这个类，明显不符合开放闭合原则。</li>
<li>不利于单元测试。</li>
</ul>


<h2>依赖注入</h2>

<p>依赖注入是这样的一种行为，在类Car中不主动创建GasEnergy的对象，而是通过外部传入GasEnergy对象形式来设置依赖。
常用的依赖注入有如下三种方式</p>

<h3>构造器注入</h3>

<p>将需要的依赖作为构造方法的参数传递完成依赖注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">mEnergy</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mEnergy</span> <span class="o">=</span> <span class="n">energy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setter方法注入</h3>

<p>增加setter方法，参数为需要注入的依赖亦可完成依赖注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">mEnergy</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnergy</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mEnergy</span>  <span class="o">=</span> <span class="n">energy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>接口注入</h3>

<p>接口注入，闻其名不言而喻，就是为依赖注入创建一套接口，依赖作为参数传入，通过调用统一的接口完成对具体实现的依赖注入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">EnergyConsumerInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnergy</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">class</span> <span class="nc">Car</span> <span class="kd">implements</span> <span class="n">EnergyConsumerInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Energy</span> <span class="n">mEnergy</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnergy</span><span class="o">(</span><span class="n">Energy</span> <span class="n">energy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mEnergy</span>  <span class="o">=</span> <span class="n">energy</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接口注入和setter方法注入类似，不同的是接口注入使用了统一的方法来完成注入，而setter方法注入的方法名称相对比较随意。</p>

<h2>框架取舍</h2>

<p>依赖注入有很多框架，最有名的就是Guice，当然Spring也支持依赖注入。Guice采用的是运行时读取注解，通过反射的形式生成依赖并进行注入。这种形式不太适合Android移动设备，毕竟这些操作都在运行时处理，对性能要求较高。</p>

<p>Dagger则是Android开发适合的依赖注入库，其同样采用类注解的形式，不同的是它是在编译时生成辅助类，等到在运行时使用生成的辅助类完成依赖注入。</p>

<h3>用还是不用</h3>

<p>其实注入框架用还是不用，是一个问题，如若使用框架，则要求团队每一个人都要遵守说明来编写代码解决依赖注入。而这些框架其实也并非很容易就能上手，学习系数相对复杂，难以掌握，这也是需要考虑的问题。</p>

<p>个人观点为不推荐也不反对使用这些框架，但是觉得有些时候我们寄希望于一个框架，不如平时注意这些问题，人为避免何尝不是对自己的一种基本要求呢？</p>

<h2>依赖查找</h2>

<p>依赖查找和依赖注入一样属于控制反转原则的具体实现，不同于依赖注入的被动接受，依赖查找这是主动请求，在需要的时候通过调用框架提供的方法来获取对象，获取时需要提供相关的配置文件路径、key等信息来确定获取对象的状态。</p>

<h2>书籍推荐</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B004G8P90S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004G8P90S&amp;linkCode=as2&amp;tag=droidyue-23">研磨设计模式</a></li>
<li><a href="http://www.amazon.cn/gp/product/B00INI842W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00INI842W&amp;linkCode=as2&amp;tag=droidyue-23">设计模式之禅</a></li>
<li><a href="http://www.amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011FBU34&amp;linkCode=as2&amp;tag=droidyue-23">Head First设计模式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[垃圾回收器如何处理循环引用]]></title>
    <link href="http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references/"/>
    <updated>2015-06-05T23:24:00+08:00</updated>
    <id>http://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references</id>
    <content type="html"><![CDATA[<p>垃圾回收是一门编程语言中必不可少的一部分，不论是手动释放内存的C和C++，还是自动回收垃圾的Java和C#等语言。对于Java这样的语言，一般的开发者不强求关心对象回收和内存释放，但是理解垃圾回收对开发工作还是大有裨益的。</p>

<!--more-->


<p>在编程语言中，普遍存在着循环引用这样的问题，垃圾回收器是如何处理循环引用呢，常用的垃圾回收有引用计数和引用对象遍历两种实现，它们各自又是如何处理循环引用呢？本文讲以JVM中的GC为例逐一回答这些问题。</p>

<h2>何为循环引用</h2>

<p>如果有两个或者以上的对象，它们彼此引用，就会造成循环引用。如下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Node</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Node</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'><span class="n">Node</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中，a对象引用了b对象，b对象也引用了a对象，这种情况下a对象和b对象就形成了循环引用。</p>

<h2>引用计数GC处理</h2>

<h3>什么是引用计数</h3>

<p>引用计数是一种垃圾回收的形式，每一个对象都会有一个计数来记录有多少指向它的引用。其引用计数会变换如下面的场景</p>

<ul>
<li>当对象增加一个引用，比如赋值给变量，属性或者传入一个方法，引用计数执行加1运算。</li>
<li>当对象减少一个引用，比如变量离开作用域，属性被赋值为另一个对象引用，属性所在的对象被回收或者之前传入参数的方法返回，引用计数执行减1操作。</li>
<li>当引用计数变为0，代表该对象不被引用，可以标记成垃圾进行回收。</li>
</ul>


<h3>如何处理</h3>

<p>实际上单纯的基于引用计数实现的计数器无法处理循环引用带来的问题。</p>

<p>CPython的垃圾回收就是采用引用计数,采用引用计数的主垃圾回收器会清理垃圾，对于那些因为循环引用无法清理的对象，CPython会不时启动一个辅助的基于引用遍历的垃圾回收器来清理它们。</p>

<h2>引用遍历GC处理</h2>

<h3>什么是引用对象遍历</h3>

<p>垃圾回收器从被称为GC Roots的点开始遍历遍历对象，凡是可以达到的点都会标记为存活，堆中不可到达的对象都会标记成垃圾，然后被清理掉。
GC Roots有哪些</p>

<ul>
<li>类，由系统类加载器加载的类。这些类从不会被卸载，它们可以通过静态属性的方式持有对象的引用。注意，一般情况下由自定义的类加载器加载的类不能成为GC Roots</li>
<li>线程，存活的线程</li>
<li>Java方法<a href="http://droidyue.com/blog/2014/12/07/differences-between-stack-and-heap-in-java/">栈</a>中的局部变量或者参数</li>
<li><a href="http://droidyue.com/blog/2014/12/21/java-runtime-data-areas/">JNI方法栈</a>中的局部变量或者参数</li>
<li>JNI全局引用</li>
<li>用做同步监控的对象</li>
<li>被JVM持有的对象，这些对象由于特殊的目的不被GC回收。这些对象可能是系统的类加载器，一些重要的异常处理类，一些为处理异常预留的对象，以及一些正在执行类加载的自定义的类加载器。但是具体有哪些前面提到的对象依赖于具体的JVM实现。</li>
</ul>


<h3>如何处理</h3>

<p>基于引用对象遍历的垃圾回收器可以处理循环引用，只要是涉及到的对象不能从GC Roots<a href="http://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/">强引用</a>可到达，垃圾回收器都会进行清理来释放内存。</p>

<h2>总结</h2>

<p>基于引用计数的垃圾回收器无法处理循环引用导致的内存泄露问题，但是其在主流的JVM中很少，几乎所有的JVM都是采用引用对象遍历的方法，垃圾回收器都会处理循环引用潜在的问题。</p>

<h2>一本书</h2>

<ul>
<li><a href="http://www.amazon.cn/gp/product/B00D2ID4PK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D2ID4PK&amp;linkCode=as2&amp;tag=droidyue-23">深入理解Java虚拟机:JVM高级特性与最佳实践(第2版)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
